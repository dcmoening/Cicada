
cicada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cdc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c2c  2000000c  00001ce8  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20003c38  00005914  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   000171e4  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002640  00000000  00000000  00037271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004500  00000000  00000000  000398b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000558  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000590  00000000  00000000  0003e309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004307  00000000  00000000  0003e899  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007d25  00000000  00000000  00042ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a5dc  00000000  00000000  0004a8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000db4  00000000  00000000  000d4ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 5c 00 20 55 1a 00 00 51 1a 00 00 51 1a 00 00     8\. U...Q...Q...
	...
      2c:	4d 01 00 00 00 00 00 00 00 00 00 00 b9 01 00 00     M...............
      3c:	fd 01 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     ....Q...Q...Q...
      4c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      5c:	51 1a 00 00 51 1a 00 00 39 16 00 00 49 16 00 00     Q...Q...9...I...
      6c:	59 16 00 00 69 16 00 00 79 16 00 00 89 16 00 00     Y...i...y.......
      7c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      8c:	51 1a 00 00 51 1a 00 00 00 00 00 00 00 00 00 00     Q...Q...........
      9c:	51 1a 00 00 51 1a 00 00 51 1a 00 00 51 1a 00 00     Q...Q...Q...Q...
      ac:	51 1a 00 00 00 00 00 00                             Q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001cdc 	.word	0x00001cdc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001cdc 	.word	0x00001cdc
     10c:	00001cdc 	.word	0x00001cdc
     110:	00000000 	.word	0x00000000

00000114 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     114:	4a06      	ldr	r2, [pc, #24]	; (130 <pxCurrentTCBConst3>)
     116:	6813      	ldr	r3, [r2, #0]
     118:	6818      	ldr	r0, [r3, #0]
     11a:	3020      	adds	r0, #32
     11c:	f380 8809 	msr	PSP, r0
     120:	2002      	movs	r0, #2
     122:	f380 8814 	msr	CONTROL, r0
     126:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     128:	46ae      	mov	lr, r5
     12a:	b662      	cpsie	i
     12c:	bd00      	pop	{pc}
     12e:	46c0      	nop			; (mov r8, r8)

00000130 <pxCurrentTCBConst3>:
     130:	20003ac8 	.word	0x20003ac8

00000134 <pxPortInitialiseStack>:
{
     134:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     136:	1f03      	subs	r3, r0, #4
     138:	2480      	movs	r4, #128	; 0x80
     13a:	0464      	lsls	r4, r4, #17
     13c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
     13e:	3b04      	subs	r3, #4
     140:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
     142:	3b18      	subs	r3, #24
     144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     146:	3840      	subs	r0, #64	; 0x40
}
     148:	bd10      	pop	{r4, pc}
	...

0000014c <SVC_Handler>:
	__asm volatile (
     14c:	4b08      	ldr	r3, [pc, #32]	; (170 <pxCurrentTCBConst2>)
     14e:	6819      	ldr	r1, [r3, #0]
     150:	6808      	ldr	r0, [r1, #0]
     152:	3010      	adds	r0, #16
     154:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     156:	46a0      	mov	r8, r4
     158:	46a9      	mov	r9, r5
     15a:	46b2      	mov	sl, r6
     15c:	46bb      	mov	fp, r7
     15e:	f380 8809 	msr	PSP, r0
     162:	3820      	subs	r0, #32
     164:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     166:	4671      	mov	r1, lr
     168:	200d      	movs	r0, #13
     16a:	4301      	orrs	r1, r0
     16c:	4708      	bx	r1
     16e:	46c0      	nop			; (mov r8, r8)

00000170 <pxCurrentTCBConst2>:
     170:	20003ac8 	.word	0x20003ac8

00000174 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     174:	2280      	movs	r2, #128	; 0x80
     176:	0552      	lsls	r2, r2, #21
     178:	4b03      	ldr	r3, [pc, #12]	; (188 <vPortYield+0x14>)
     17a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     17c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     180:	f3bf 8f6f 	isb	sy
}
     184:	4770      	bx	lr
     186:	46c0      	nop			; (mov r8, r8)
     188:	e000ed04 	.word	0xe000ed04

0000018c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     18c:	b672      	cpsid	i
    uxCriticalNesting++;
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <vPortEnterCritical+0x14>)
     190:	6813      	ldr	r3, [r2, #0]
     192:	3301      	adds	r3, #1
     194:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
     196:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     19a:	f3bf 8f6f 	isb	sy
}
     19e:	4770      	bx	lr
     1a0:	20000000 	.word	0x20000000

000001a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
     1a4:	4a03      	ldr	r2, [pc, #12]	; (1b4 <vPortExitCritical+0x10>)
     1a6:	6813      	ldr	r3, [r2, #0]
     1a8:	3b01      	subs	r3, #1
     1aa:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     1ac:	2b00      	cmp	r3, #0
     1ae:	d100      	bne.n	1b2 <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
     1b0:	b662      	cpsie	i
    }
}
     1b2:	4770      	bx	lr
     1b4:	20000000 	.word	0x20000000

000001b8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     1b8:	f3ef 8009 	mrs	r0, PSP
     1bc:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <pxCurrentTCBConst>)
     1be:	681a      	ldr	r2, [r3, #0]
     1c0:	3820      	subs	r0, #32
     1c2:	6010      	str	r0, [r2, #0]
     1c4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     1c6:	4644      	mov	r4, r8
     1c8:	464d      	mov	r5, r9
     1ca:	4656      	mov	r6, sl
     1cc:	465f      	mov	r7, fp
     1ce:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     1d0:	b508      	push	{r3, lr}
     1d2:	b672      	cpsid	i
     1d4:	f000 fe9e 	bl	f14 <vTaskSwitchContext>
     1d8:	b662      	cpsie	i
     1da:	bc0c      	pop	{r2, r3}
     1dc:	6811      	ldr	r1, [r2, #0]
     1de:	6808      	ldr	r0, [r1, #0]
     1e0:	3010      	adds	r0, #16
     1e2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     1e4:	46a0      	mov	r8, r4
     1e6:	46a9      	mov	r9, r5
     1e8:	46b2      	mov	sl, r6
     1ea:	46bb      	mov	fp, r7
     1ec:	f380 8809 	msr	PSP, r0
     1f0:	3820      	subs	r0, #32
     1f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     1f4:	4718      	bx	r3
     1f6:	46c0      	nop			; (mov r8, r8)

000001f8 <pxCurrentTCBConst>:
     1f8:	20003ac8 	.word	0x20003ac8

000001fc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     1fc:	b510      	push	{r4, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     1fe:	2280      	movs	r2, #128	; 0x80
     200:	0552      	lsls	r2, r2, #21
     202:	4b03      	ldr	r3, [pc, #12]	; (210 <SysTick_Handler+0x14>)
     204:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     206:	b672      	cpsid	i
	{
		vTaskIncrementTick();
     208:	4b02      	ldr	r3, [pc, #8]	; (214 <SysTick_Handler+0x18>)
     20a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     20c:	b662      	cpsie	i
}
     20e:	bd10      	pop	{r4, pc}
     210:	e000ed04 	.word	0xe000ed04
     214:	00000c75 	.word	0x00000c75

00000218 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     218:	2200      	movs	r2, #0
     21a:	4b04      	ldr	r3, [pc, #16]	; (22c <vPortSetupTimerInterrupt+0x14>)
     21c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     21e:	4a04      	ldr	r2, [pc, #16]	; (230 <vPortSetupTimerInterrupt+0x18>)
     220:	4b04      	ldr	r3, [pc, #16]	; (234 <vPortSetupTimerInterrupt+0x1c>)
     222:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     224:	2207      	movs	r2, #7
     226:	4b04      	ldr	r3, [pc, #16]	; (238 <vPortSetupTimerInterrupt+0x20>)
     228:	601a      	str	r2, [r3, #0]
}
     22a:	4770      	bx	lr
     22c:	e000e018 	.word	0xe000e018
     230:	00001f3f 	.word	0x00001f3f
     234:	e000e014 	.word	0xe000e014
     238:	e000e010 	.word	0xe000e010

0000023c <xPortStartScheduler>:
{
     23c:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <xPortStartScheduler+0x2c>)
     240:	6819      	ldr	r1, [r3, #0]
     242:	22ff      	movs	r2, #255	; 0xff
     244:	0412      	lsls	r2, r2, #16
     246:	430a      	orrs	r2, r1
     248:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     24a:	6819      	ldr	r1, [r3, #0]
     24c:	22ff      	movs	r2, #255	; 0xff
     24e:	0612      	lsls	r2, r2, #24
     250:	430a      	orrs	r2, r1
     252:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
     254:	4b05      	ldr	r3, [pc, #20]	; (26c <xPortStartScheduler+0x30>)
     256:	4798      	blx	r3
	uxCriticalNesting = 0;
     258:	2200      	movs	r2, #0
     25a:	4b05      	ldr	r3, [pc, #20]	; (270 <xPortStartScheduler+0x34>)
     25c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
     25e:	4b05      	ldr	r3, [pc, #20]	; (274 <xPortStartScheduler+0x38>)
     260:	4798      	blx	r3
}
     262:	2000      	movs	r0, #0
     264:	bd10      	pop	{r4, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	e000ed20 	.word	0xe000ed20
     26c:	00000219 	.word	0x00000219
     270:	20000000 	.word	0x20000000
     274:	00000115 	.word	0x00000115

00000278 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     278:	b570      	push	{r4, r5, r6, lr}
     27a:	0004      	movs	r4, r0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     27c:	0743      	lsls	r3, r0, #29
     27e:	d002      	beq.n	286 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     280:	2307      	movs	r3, #7
     282:	439c      	bics	r4, r3
     284:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     286:	4b11      	ldr	r3, [pc, #68]	; (2cc <pvPortMalloc+0x54>)
     288:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     28a:	4b11      	ldr	r3, [pc, #68]	; (2d0 <pvPortMalloc+0x58>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	2b00      	cmp	r3, #0
     290:	d010      	beq.n	2b4 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     292:	4b10      	ldr	r3, [pc, #64]	; (2d4 <pvPortMalloc+0x5c>)
     294:	681b      	ldr	r3, [r3, #0]
     296:	18e4      	adds	r4, r4, r3
     298:	4a0f      	ldr	r2, [pc, #60]	; (2d8 <pvPortMalloc+0x60>)
     29a:	4294      	cmp	r4, r2
     29c:	d811      	bhi.n	2c2 <pvPortMalloc+0x4a>
     29e:	42a3      	cmp	r3, r4
     2a0:	d211      	bcs.n	2c6 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     2a2:	4a0b      	ldr	r2, [pc, #44]	; (2d0 <pvPortMalloc+0x58>)
     2a4:	6815      	ldr	r5, [r2, #0]
     2a6:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     2a8:	4b0a      	ldr	r3, [pc, #40]	; (2d4 <pvPortMalloc+0x5c>)
     2aa:	601c      	str	r4, [r3, #0]
		}
	}
	xTaskResumeAll();
     2ac:	4b0b      	ldr	r3, [pc, #44]	; (2dc <pvPortMalloc+0x64>)
     2ae:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     2b0:	0028      	movs	r0, r5
     2b2:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     2b4:	2207      	movs	r2, #7
     2b6:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <pvPortMalloc+0x68>)
     2b8:	3308      	adds	r3, #8
     2ba:	4393      	bics	r3, r2
     2bc:	4a04      	ldr	r2, [pc, #16]	; (2d0 <pvPortMalloc+0x58>)
     2be:	6013      	str	r3, [r2, #0]
     2c0:	e7e7      	b.n	292 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
     2c2:	2500      	movs	r5, #0
     2c4:	e7f2      	b.n	2ac <pvPortMalloc+0x34>
     2c6:	2500      	movs	r5, #0
     2c8:	e7f0      	b.n	2ac <pvPortMalloc+0x34>
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	00000c45 	.word	0x00000c45
     2d0:	20000028 	.word	0x20000028
     2d4:	20003ac4 	.word	0x20003ac4
     2d8:	00003a8f 	.word	0x00003a8f
     2dc:	00000d91 	.word	0x00000d91
     2e0:	2000002c 	.word	0x2000002c

000002e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     2e4:	2800      	cmp	r0, #0
     2e6:	d001      	beq.n	2ec <vPortFree+0x8>
     2e8:	b672      	cpsid	i
     2ea:	e7fe      	b.n	2ea <vPortFree+0x6>
}
     2ec:	4770      	bx	lr

000002ee <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     2ee:	0003      	movs	r3, r0
     2f0:	3308      	adds	r3, #8
     2f2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     2f4:	2201      	movs	r2, #1
     2f6:	4252      	negs	r2, r2
     2f8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     2fa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     2fc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     2fe:	2300      	movs	r3, #0
     300:	6003      	str	r3, [r0, #0]
}
     302:	4770      	bx	lr

00000304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     304:	2300      	movs	r3, #0
     306:	6103      	str	r3, [r0, #16]
}
     308:	4770      	bx	lr

0000030a <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     30a:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     310:	6842      	ldr	r2, [r0, #4]
     312:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     314:	685a      	ldr	r2, [r3, #4]
     316:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     318:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     31a:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     31c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     31e:	6803      	ldr	r3, [r0, #0]
     320:	3301      	adds	r3, #1
     322:	6003      	str	r3, [r0, #0]
}
     324:	4770      	bx	lr

00000326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     326:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     328:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     32a:	1c63      	adds	r3, r4, #1
     32c:	d014      	beq.n	358 <vListInsert+0x32>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     32e:	0003      	movs	r3, r0
     330:	3308      	adds	r3, #8
     332:	68c2      	ldr	r2, [r0, #12]
     334:	6812      	ldr	r2, [r2, #0]
     336:	4294      	cmp	r4, r2
     338:	d304      	bcc.n	344 <vListInsert+0x1e>
     33a:	685b      	ldr	r3, [r3, #4]
     33c:	685a      	ldr	r2, [r3, #4]
     33e:	6812      	ldr	r2, [r2, #0]
     340:	4294      	cmp	r4, r2
     342:	d2fa      	bcs.n	33a <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     344:	685a      	ldr	r2, [r3, #4]
     346:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     348:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
     34a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     34c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     34e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     350:	6803      	ldr	r3, [r0, #0]
     352:	3301      	adds	r3, #1
     354:	6003      	str	r3, [r0, #0]
}
     356:	bd10      	pop	{r4, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
     358:	6903      	ldr	r3, [r0, #16]
     35a:	e7f3      	b.n	344 <vListInsert+0x1e>

0000035c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     35c:	6843      	ldr	r3, [r0, #4]
     35e:	6882      	ldr	r2, [r0, #8]
     360:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     362:	6883      	ldr	r3, [r0, #8]
     364:	6842      	ldr	r2, [r0, #4]
     366:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     368:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     36a:	685a      	ldr	r2, [r3, #4]
     36c:	4290      	cmp	r0, r2
     36e:	d006      	beq.n	37e <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
     370:	2200      	movs	r2, #0
     372:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     374:	681a      	ldr	r2, [r3, #0]
     376:	3a01      	subs	r2, #1
     378:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     37a:	6818      	ldr	r0, [r3, #0]
}
     37c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     37e:	6882      	ldr	r2, [r0, #8]
     380:	605a      	str	r2, [r3, #4]
     382:	e7f5      	b.n	370 <uxListRemove+0x14>

00000384 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     384:	b510      	push	{r4, lr}
     386:	0004      	movs	r4, r0
     388:	0013      	movs	r3, r2
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     38a:	6c02      	ldr	r2, [r0, #64]	; 0x40
     38c:	2a00      	cmp	r2, #0
     38e:	d10b      	bne.n	3a8 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     390:	6803      	ldr	r3, [r0, #0]
     392:	2b00      	cmp	r3, #0
     394:	d104      	bne.n	3a0 <prvCopyDataToQueue+0x1c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     396:	6840      	ldr	r0, [r0, #4]
     398:	4b13      	ldr	r3, [pc, #76]	; (3e8 <prvCopyDataToQueue+0x64>)
     39a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     39c:	2300      	movs	r3, #0
     39e:	6063      	str	r3, [r4, #4]
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
     3a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     3a2:	3301      	adds	r3, #1
     3a4:	63a3      	str	r3, [r4, #56]	; 0x38
}
     3a6:	bd10      	pop	{r4, pc}
	else if( xPosition == queueSEND_TO_BACK )
     3a8:	2b00      	cmp	r3, #0
     3aa:	d10d      	bne.n	3c8 <prvCopyDataToQueue+0x44>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     3ac:	6880      	ldr	r0, [r0, #8]
     3ae:	4b0f      	ldr	r3, [pc, #60]	; (3ec <prvCopyDataToQueue+0x68>)
     3b0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     3b2:	68a3      	ldr	r3, [r4, #8]
     3b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
     3b6:	4694      	mov	ip, r2
     3b8:	4463      	add	r3, ip
     3ba:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     3bc:	6862      	ldr	r2, [r4, #4]
     3be:	4293      	cmp	r3, r2
     3c0:	d3ee      	bcc.n	3a0 <prvCopyDataToQueue+0x1c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     3c2:	6823      	ldr	r3, [r4, #0]
     3c4:	60a3      	str	r3, [r4, #8]
     3c6:	e7eb      	b.n	3a0 <prvCopyDataToQueue+0x1c>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     3c8:	68c0      	ldr	r0, [r0, #12]
     3ca:	4b08      	ldr	r3, [pc, #32]	; (3ec <prvCopyDataToQueue+0x68>)
     3cc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     3ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
     3d0:	425b      	negs	r3, r3
     3d2:	68e2      	ldr	r2, [r4, #12]
     3d4:	18d2      	adds	r2, r2, r3
     3d6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     3d8:	6821      	ldr	r1, [r4, #0]
     3da:	428a      	cmp	r2, r1
     3dc:	d2e0      	bcs.n	3a0 <prvCopyDataToQueue+0x1c>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     3de:	6862      	ldr	r2, [r4, #4]
     3e0:	4694      	mov	ip, r2
     3e2:	4463      	add	r3, ip
     3e4:	60e3      	str	r3, [r4, #12]
     3e6:	e7db      	b.n	3a0 <prvCopyDataToQueue+0x1c>
     3e8:	0000121d 	.word	0x0000121d
     3ec:	00001c35 	.word	0x00001c35

000003f0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition )
	{
     3f0:	b510      	push	{r4, lr}
     3f2:	b082      	sub	sp, #8
     3f4:	9001      	str	r0, [sp, #4]
     3f6:	000a      	movs	r2, r1
	xQUEUE *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     3f8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	portBASE_TYPE xReturn = pdFALSE;

		configASSERT( pxQueueSetContainer );
     3fa:	2c00      	cmp	r4, #0
     3fc:	d005      	beq.n	40a <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     3fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     402:	4299      	cmp	r1, r3
     404:	d303      	bcc.n	40e <prvNotifyQueueSetContainer+0x1e>
     406:	b672      	cpsid	i
     408:	e7fe      	b.n	408 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
     40a:	b672      	cpsid	i
     40c:	e7fe      	b.n	40c <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     40e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	portBASE_TYPE xReturn = pdFALSE;
     410:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     412:	428b      	cmp	r3, r1
     414:	d801      	bhi.n	41a <prvNotifyQueueSetContainer+0x2a>
				}
			}
		}

		return xReturn;
	}
     416:	b002      	add	sp, #8
     418:	bd10      	pop	{r4, pc}
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     41a:	a901      	add	r1, sp, #4
     41c:	0020      	movs	r0, r4
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <prvNotifyQueueSetContainer+0x48>)
     420:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     422:	6a63      	ldr	r3, [r4, #36]	; 0x24
	portBASE_TYPE xReturn = pdFALSE;
     424:	2000      	movs	r0, #0
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     426:	2b00      	cmp	r3, #0
     428:	d0f5      	beq.n	416 <prvNotifyQueueSetContainer+0x26>
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     42a:	0020      	movs	r0, r4
     42c:	3024      	adds	r0, #36	; 0x24
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <prvNotifyQueueSetContainer+0x4c>)
     430:	4798      	blx	r3
	portBASE_TYPE xReturn = pdFALSE;
     432:	1e43      	subs	r3, r0, #1
     434:	4198      	sbcs	r0, r3
     436:	e7ee      	b.n	416 <prvNotifyQueueSetContainer+0x26>
     438:	00000385 	.word	0x00000385
     43c:	00001055 	.word	0x00001055

00000440 <prvCopyDataFromQueue>:
{
     440:	b570      	push	{r4, r5, r6, lr}
     442:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     444:	6801      	ldr	r1, [r0, #0]
     446:	2900      	cmp	r1, #0
     448:	d00b      	beq.n	462 <prvCopyDataFromQueue+0x22>
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     44a:	6c02      	ldr	r2, [r0, #64]	; 0x40
     44c:	68c3      	ldr	r3, [r0, #12]
     44e:	189b      	adds	r3, r3, r2
     450:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     452:	6845      	ldr	r5, [r0, #4]
     454:	42ab      	cmp	r3, r5
     456:	d300      	bcc.n	45a <prvCopyDataFromQueue+0x1a>
			pxQueue->pcReadFrom = pxQueue->pcHead;
     458:	60c1      	str	r1, [r0, #12]
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
     45a:	68c1      	ldr	r1, [r0, #12]
     45c:	0020      	movs	r0, r4
     45e:	4b01      	ldr	r3, [pc, #4]	; (464 <prvCopyDataFromQueue+0x24>)
     460:	4798      	blx	r3
}
     462:	bd70      	pop	{r4, r5, r6, pc}
     464:	00001c35 	.word	0x00001c35

00000468 <prvUnlockQueue>:
{
     468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     46a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
     46c:	4b25      	ldr	r3, [pc, #148]	; (504 <prvUnlockQueue+0x9c>)
     46e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     470:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     472:	2b00      	cmp	r3, #0
     474:	dd1e      	ble.n	4b4 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     476:	4d24      	ldr	r5, [pc, #144]	; (508 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     478:	4e24      	ldr	r6, [pc, #144]	; (50c <prvUnlockQueue+0xa4>)
     47a:	e00d      	b.n	498 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     47e:	2b00      	cmp	r3, #0
     480:	d018      	beq.n	4b4 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     482:	0020      	movs	r0, r4
     484:	3024      	adds	r0, #36	; 0x24
     486:	47b0      	blx	r6
     488:	2800      	cmp	r0, #0
     48a:	d110      	bne.n	4ae <prvUnlockQueue+0x46>
			--( pxQueue->xTxLock );
     48c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     48e:	3b01      	subs	r3, #1
     490:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     492:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     494:	2b00      	cmp	r3, #0
     496:	dd0d      	ble.n	4b4 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
     498:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     49a:	2b00      	cmp	r3, #0
     49c:	d0ee      	beq.n	47c <prvUnlockQueue+0x14>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     49e:	2100      	movs	r1, #0
     4a0:	0020      	movs	r0, r4
     4a2:	47a8      	blx	r5
     4a4:	2801      	cmp	r0, #1
     4a6:	d1f1      	bne.n	48c <prvUnlockQueue+0x24>
						vTaskMissedYield();
     4a8:	4b19      	ldr	r3, [pc, #100]	; (510 <prvUnlockQueue+0xa8>)
     4aa:	4798      	blx	r3
     4ac:	e7ee      	b.n	48c <prvUnlockQueue+0x24>
							vTaskMissedYield();
     4ae:	4b18      	ldr	r3, [pc, #96]	; (510 <prvUnlockQueue+0xa8>)
     4b0:	4798      	blx	r3
     4b2:	e7eb      	b.n	48c <prvUnlockQueue+0x24>
		pxQueue->xTxLock = queueUNLOCKED;
     4b4:	2301      	movs	r3, #1
     4b6:	425b      	negs	r3, r3
     4b8:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
     4ba:	4b16      	ldr	r3, [pc, #88]	; (514 <prvUnlockQueue+0xac>)
     4bc:	4798      	blx	r3
	taskENTER_CRITICAL();
     4be:	4b11      	ldr	r3, [pc, #68]	; (504 <prvUnlockQueue+0x9c>)
     4c0:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     4c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4c4:	2b00      	cmp	r3, #0
     4c6:	dd16      	ble.n	4f6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     4c8:	6923      	ldr	r3, [r4, #16]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d013      	beq.n	4f6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4ce:	0025      	movs	r5, r4
     4d0:	3510      	adds	r5, #16
     4d2:	4f0e      	ldr	r7, [pc, #56]	; (50c <prvUnlockQueue+0xa4>)
					vTaskMissedYield();
     4d4:	4e0e      	ldr	r6, [pc, #56]	; (510 <prvUnlockQueue+0xa8>)
     4d6:	e008      	b.n	4ea <prvUnlockQueue+0x82>
				--( pxQueue->xRxLock );
     4d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4da:	3b01      	subs	r3, #1
     4dc:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     4de:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4e0:	2b00      	cmp	r3, #0
     4e2:	dd08      	ble.n	4f6 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     4e4:	6923      	ldr	r3, [r4, #16]
     4e6:	2b00      	cmp	r3, #0
     4e8:	d005      	beq.n	4f6 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4ea:	0028      	movs	r0, r5
     4ec:	47b8      	blx	r7
     4ee:	2800      	cmp	r0, #0
     4f0:	d0f2      	beq.n	4d8 <prvUnlockQueue+0x70>
					vTaskMissedYield();
     4f2:	47b0      	blx	r6
     4f4:	e7f0      	b.n	4d8 <prvUnlockQueue+0x70>
		pxQueue->xRxLock = queueUNLOCKED;
     4f6:	2301      	movs	r3, #1
     4f8:	425b      	negs	r3, r3
     4fa:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
     4fc:	4b05      	ldr	r3, [pc, #20]	; (514 <prvUnlockQueue+0xac>)
     4fe:	4798      	blx	r3
}
     500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	0000018d 	.word	0x0000018d
     508:	000003f1 	.word	0x000003f1
     50c:	00001055 	.word	0x00001055
     510:	00001169 	.word	0x00001169
     514:	000001a5 	.word	0x000001a5

00000518 <xQueueGenericReset>:
{
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	0004      	movs	r4, r0
     51c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
     51e:	2800      	cmp	r0, #0
     520:	d020      	beq.n	564 <xQueueGenericReset+0x4c>
	taskENTER_CRITICAL();
     522:	4b17      	ldr	r3, [pc, #92]	; (580 <xQueueGenericReset+0x68>)
     524:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     526:	6822      	ldr	r2, [r4, #0]
     528:	6c21      	ldr	r1, [r4, #64]	; 0x40
     52a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     52c:	434b      	muls	r3, r1
     52e:	18d0      	adds	r0, r2, r3
     530:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     532:	2000      	movs	r0, #0
     534:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     536:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     538:	1a5b      	subs	r3, r3, r1
     53a:	18d3      	adds	r3, r2, r3
     53c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     53e:	2301      	movs	r3, #1
     540:	425b      	negs	r3, r3
     542:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     544:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
     546:	2d00      	cmp	r5, #0
     548:	d111      	bne.n	56e <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     54a:	6923      	ldr	r3, [r4, #16]
     54c:	2b00      	cmp	r3, #0
     54e:	d005      	beq.n	55c <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     550:	0020      	movs	r0, r4
     552:	3010      	adds	r0, #16
     554:	4b0b      	ldr	r3, [pc, #44]	; (584 <xQueueGenericReset+0x6c>)
     556:	4798      	blx	r3
     558:	2801      	cmp	r0, #1
     55a:	d005      	beq.n	568 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
     55c:	4b0a      	ldr	r3, [pc, #40]	; (588 <xQueueGenericReset+0x70>)
     55e:	4798      	blx	r3
}
     560:	2001      	movs	r0, #1
     562:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     564:	b672      	cpsid	i
     566:	e7fe      	b.n	566 <xQueueGenericReset+0x4e>
					portYIELD_WITHIN_API();
     568:	4b08      	ldr	r3, [pc, #32]	; (58c <xQueueGenericReset+0x74>)
     56a:	4798      	blx	r3
     56c:	e7f6      	b.n	55c <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     56e:	0020      	movs	r0, r4
     570:	3010      	adds	r0, #16
     572:	4d07      	ldr	r5, [pc, #28]	; (590 <xQueueGenericReset+0x78>)
     574:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     576:	0020      	movs	r0, r4
     578:	3024      	adds	r0, #36	; 0x24
     57a:	47a8      	blx	r5
     57c:	e7ee      	b.n	55c <xQueueGenericReset+0x44>
     57e:	46c0      	nop			; (mov r8, r8)
     580:	0000018d 	.word	0x0000018d
     584:	00001055 	.word	0x00001055
     588:	000001a5 	.word	0x000001a5
     58c:	00000175 	.word	0x00000175
     590:	000002ef 	.word	0x000002ef

00000594 <xQueueGenericCreate>:
{
     594:	b570      	push	{r4, r5, r6, lr}
     596:	0005      	movs	r5, r0
     598:	000e      	movs	r6, r1
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     59a:	2800      	cmp	r0, #0
     59c:	d019      	beq.n	5d2 <xQueueGenericCreate+0x3e>
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     59e:	2050      	movs	r0, #80	; 0x50
     5a0:	4b0d      	ldr	r3, [pc, #52]	; (5d8 <xQueueGenericCreate+0x44>)
     5a2:	4798      	blx	r3
     5a4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     5a6:	d014      	beq.n	5d2 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     5a8:	0030      	movs	r0, r6
     5aa:	4368      	muls	r0, r5
     5ac:	3001      	adds	r0, #1
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     5ae:	4b0a      	ldr	r3, [pc, #40]	; (5d8 <xQueueGenericCreate+0x44>)
     5b0:	4798      	blx	r3
     5b2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     5b4:	2800      	cmp	r0, #0
     5b6:	d009      	beq.n	5cc <xQueueGenericCreate+0x38>
				pxNewQueue->uxLength = uxQueueLength;
     5b8:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     5ba:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
     5bc:	2101      	movs	r1, #1
     5be:	0020      	movs	r0, r4
     5c0:	4b06      	ldr	r3, [pc, #24]	; (5dc <xQueueGenericCreate+0x48>)
     5c2:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
     5c4:	2300      	movs	r3, #0
     5c6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
     5c8:	0020      	movs	r0, r4
     5ca:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxNewQueue );
     5cc:	0020      	movs	r0, r4
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <xQueueGenericCreate+0x4c>)
     5d0:	4798      	blx	r3
	configASSERT( xReturn );
     5d2:	b672      	cpsid	i
     5d4:	e7fe      	b.n	5d4 <xQueueGenericCreate+0x40>
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	00000279 	.word	0x00000279
     5dc:	00000519 	.word	0x00000519
     5e0:	000002e5 	.word	0x000002e5

000005e4 <xQueueGenericSend>:
{
     5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e6:	46ce      	mov	lr, r9
     5e8:	b500      	push	{lr}
     5ea:	b084      	sub	sp, #16
     5ec:	0004      	movs	r4, r0
     5ee:	000f      	movs	r7, r1
     5f0:	9201      	str	r2, [sp, #4]
     5f2:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
     5f4:	2800      	cmp	r0, #0
     5f6:	d004      	beq.n	602 <xQueueGenericSend+0x1e>
     5f8:	2500      	movs	r5, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     5fa:	2900      	cmp	r1, #0
     5fc:	d003      	beq.n	606 <xQueueGenericSend+0x22>
		taskENTER_CRITICAL();
     5fe:	4e40      	ldr	r6, [pc, #256]	; (700 <xQueueGenericSend+0x11c>)
     600:	e040      	b.n	684 <xQueueGenericSend+0xa0>
	configASSERT( pxQueue );
     602:	b672      	cpsid	i
     604:	e7fe      	b.n	604 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     606:	6c03      	ldr	r3, [r0, #64]	; 0x40
     608:	2b00      	cmp	r3, #0
     60a:	d001      	beq.n	610 <xQueueGenericSend+0x2c>
     60c:	b672      	cpsid	i
     60e:	e7fe      	b.n	60e <xQueueGenericSend+0x2a>
     610:	2500      	movs	r5, #0
     612:	e7f4      	b.n	5fe <xQueueGenericSend+0x1a>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     614:	9d00      	ldr	r5, [sp, #0]
     616:	002a      	movs	r2, r5
     618:	0039      	movs	r1, r7
     61a:	0020      	movs	r0, r4
     61c:	4b39      	ldr	r3, [pc, #228]	; (704 <xQueueGenericSend+0x120>)
     61e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
     620:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     622:	2b00      	cmp	r3, #0
     624:	d00e      	beq.n	644 <xQueueGenericSend+0x60>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     626:	0029      	movs	r1, r5
     628:	0020      	movs	r0, r4
     62a:	4b37      	ldr	r3, [pc, #220]	; (708 <xQueueGenericSend+0x124>)
     62c:	4798      	blx	r3
     62e:	2801      	cmp	r0, #1
     630:	d101      	bne.n	636 <xQueueGenericSend+0x52>
							portYIELD_WITHIN_API();
     632:	4b36      	ldr	r3, [pc, #216]	; (70c <xQueueGenericSend+0x128>)
     634:	4798      	blx	r3
				taskEXIT_CRITICAL();
     636:	4b36      	ldr	r3, [pc, #216]	; (710 <xQueueGenericSend+0x12c>)
     638:	4798      	blx	r3
				return pdPASS;
     63a:	2001      	movs	r0, #1
}
     63c:	b004      	add	sp, #16
     63e:	bc04      	pop	{r2}
     640:	4691      	mov	r9, r2
     642:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     644:	6a63      	ldr	r3, [r4, #36]	; 0x24
     646:	2b00      	cmp	r3, #0
     648:	d0f5      	beq.n	636 <xQueueGenericSend+0x52>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     64a:	0020      	movs	r0, r4
     64c:	3024      	adds	r0, #36	; 0x24
     64e:	4b31      	ldr	r3, [pc, #196]	; (714 <xQueueGenericSend+0x130>)
     650:	4798      	blx	r3
     652:	2801      	cmp	r0, #1
     654:	d1ef      	bne.n	636 <xQueueGenericSend+0x52>
								portYIELD_WITHIN_API();
     656:	4b2d      	ldr	r3, [pc, #180]	; (70c <xQueueGenericSend+0x128>)
     658:	4798      	blx	r3
     65a:	e7ec      	b.n	636 <xQueueGenericSend+0x52>
					taskEXIT_CRITICAL();
     65c:	4b2c      	ldr	r3, [pc, #176]	; (710 <xQueueGenericSend+0x12c>)
     65e:	4798      	blx	r3
					return errQUEUE_FULL;
     660:	2000      	movs	r0, #0
     662:	e7eb      	b.n	63c <xQueueGenericSend+0x58>
					vTaskSetTimeOutState( &xTimeOut );
     664:	a802      	add	r0, sp, #8
     666:	4b2c      	ldr	r3, [pc, #176]	; (718 <xQueueGenericSend+0x134>)
     668:	4798      	blx	r3
     66a:	e015      	b.n	698 <xQueueGenericSend+0xb4>
		prvLockQueue( pxQueue );
     66c:	2300      	movs	r3, #0
     66e:	6463      	str	r3, [r4, #68]	; 0x44
     670:	e01b      	b.n	6aa <xQueueGenericSend+0xc6>
     672:	2300      	movs	r3, #0
     674:	64a3      	str	r3, [r4, #72]	; 0x48
     676:	e01b      	b.n	6b0 <xQueueGenericSend+0xcc>
				prvUnlockQueue( pxQueue );
     678:	0020      	movs	r0, r4
     67a:	4b28      	ldr	r3, [pc, #160]	; (71c <xQueueGenericSend+0x138>)
     67c:	4798      	blx	r3
				( void ) xTaskResumeAll();
     67e:	4b28      	ldr	r3, [pc, #160]	; (720 <xQueueGenericSend+0x13c>)
     680:	4798      	blx	r3
     682:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
     684:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     688:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     68a:	4293      	cmp	r3, r2
     68c:	d3c2      	bcc.n	614 <xQueueGenericSend+0x30>
				if( xTicksToWait == ( portTickType ) 0 )
     68e:	9b01      	ldr	r3, [sp, #4]
     690:	2b00      	cmp	r3, #0
     692:	d0e3      	beq.n	65c <xQueueGenericSend+0x78>
				else if( xEntryTimeSet == pdFALSE )
     694:	2d00      	cmp	r5, #0
     696:	d0e5      	beq.n	664 <xQueueGenericSend+0x80>
		taskEXIT_CRITICAL();
     698:	4b1d      	ldr	r3, [pc, #116]	; (710 <xQueueGenericSend+0x12c>)
     69a:	4798      	blx	r3
		vTaskSuspendAll();
     69c:	4b21      	ldr	r3, [pc, #132]	; (724 <xQueueGenericSend+0x140>)
     69e:	4798      	blx	r3
		prvLockQueue( pxQueue );
     6a0:	4b17      	ldr	r3, [pc, #92]	; (700 <xQueueGenericSend+0x11c>)
     6a2:	4798      	blx	r3
     6a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
     6a6:	3301      	adds	r3, #1
     6a8:	d0e0      	beq.n	66c <xQueueGenericSend+0x88>
     6aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6ac:	3301      	adds	r3, #1
     6ae:	d0e0      	beq.n	672 <xQueueGenericSend+0x8e>
     6b0:	4b17      	ldr	r3, [pc, #92]	; (710 <xQueueGenericSend+0x12c>)
     6b2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     6b4:	a901      	add	r1, sp, #4
     6b6:	a802      	add	r0, sp, #8
     6b8:	4b1b      	ldr	r3, [pc, #108]	; (728 <xQueueGenericSend+0x144>)
     6ba:	4798      	blx	r3
     6bc:	2800      	cmp	r0, #0
     6be:	d117      	bne.n	6f0 <xQueueGenericSend+0x10c>
	taskENTER_CRITICAL();
     6c0:	4b0f      	ldr	r3, [pc, #60]	; (700 <xQueueGenericSend+0x11c>)
     6c2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     6c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6c6:	4699      	mov	r9, r3
     6c8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
     6ca:	4b11      	ldr	r3, [pc, #68]	; (710 <xQueueGenericSend+0x12c>)
     6cc:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     6ce:	45a9      	cmp	r9, r5
     6d0:	d1d2      	bne.n	678 <xQueueGenericSend+0x94>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     6d2:	0020      	movs	r0, r4
     6d4:	3010      	adds	r0, #16
     6d6:	9901      	ldr	r1, [sp, #4]
     6d8:	4b14      	ldr	r3, [pc, #80]	; (72c <xQueueGenericSend+0x148>)
     6da:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     6dc:	0020      	movs	r0, r4
     6de:	4b0f      	ldr	r3, [pc, #60]	; (71c <xQueueGenericSend+0x138>)
     6e0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     6e2:	4b0f      	ldr	r3, [pc, #60]	; (720 <xQueueGenericSend+0x13c>)
     6e4:	4798      	blx	r3
     6e6:	2800      	cmp	r0, #0
     6e8:	d1cb      	bne.n	682 <xQueueGenericSend+0x9e>
					portYIELD_WITHIN_API();
     6ea:	4b08      	ldr	r3, [pc, #32]	; (70c <xQueueGenericSend+0x128>)
     6ec:	4798      	blx	r3
     6ee:	e7c8      	b.n	682 <xQueueGenericSend+0x9e>
			prvUnlockQueue( pxQueue );
     6f0:	0020      	movs	r0, r4
     6f2:	4b0a      	ldr	r3, [pc, #40]	; (71c <xQueueGenericSend+0x138>)
     6f4:	4798      	blx	r3
			( void ) xTaskResumeAll();
     6f6:	4b0a      	ldr	r3, [pc, #40]	; (720 <xQueueGenericSend+0x13c>)
     6f8:	4798      	blx	r3
			return errQUEUE_FULL;
     6fa:	2000      	movs	r0, #0
     6fc:	e79e      	b.n	63c <xQueueGenericSend+0x58>
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	0000018d 	.word	0x0000018d
     704:	00000385 	.word	0x00000385
     708:	000003f1 	.word	0x000003f1
     70c:	00000175 	.word	0x00000175
     710:	000001a5 	.word	0x000001a5
     714:	00001055 	.word	0x00001055
     718:	000010d1 	.word	0x000010d1
     71c:	00000469 	.word	0x00000469
     720:	00000d91 	.word	0x00000d91
     724:	00000c45 	.word	0x00000c45
     728:	000010f1 	.word	0x000010f1
     72c:	00000fbd 	.word	0x00000fbd

00000730 <xQueueGenericSendFromISR>:
{
     730:	b570      	push	{r4, r5, r6, lr}
     732:	0004      	movs	r4, r0
     734:	0015      	movs	r5, r2
     736:	001e      	movs	r6, r3
	configASSERT( pxQueue );
     738:	2800      	cmp	r0, #0
     73a:	d009      	beq.n	750 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     73c:	2900      	cmp	r1, #0
     73e:	d009      	beq.n	754 <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     740:	b672      	cpsid	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
     744:	2000      	movs	r0, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     746:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     748:	4293      	cmp	r3, r2
     74a:	d308      	bcc.n	75e <xQueueGenericSendFromISR+0x2e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     74c:	b662      	cpsie	i
}
     74e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     750:	b672      	cpsid	i
     752:	e7fe      	b.n	752 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     754:	6c03      	ldr	r3, [r0, #64]	; 0x40
     756:	2b00      	cmp	r3, #0
     758:	d0f2      	beq.n	740 <xQueueGenericSendFromISR+0x10>
     75a:	b672      	cpsid	i
     75c:	e7fe      	b.n	75c <xQueueGenericSendFromISR+0x2c>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     75e:	0032      	movs	r2, r6
     760:	0020      	movs	r0, r4
     762:	4b16      	ldr	r3, [pc, #88]	; (7bc <xQueueGenericSendFromISR+0x8c>)
     764:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
     766:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     768:	3301      	adds	r3, #1
     76a:	d11e      	bne.n	7aa <xQueueGenericSendFromISR+0x7a>
					if( pxQueue->pxQueueSetContainer != NULL )
     76c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     76e:	2b00      	cmp	r3, #0
     770:	d00a      	beq.n	788 <xQueueGenericSendFromISR+0x58>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     772:	0031      	movs	r1, r6
     774:	0020      	movs	r0, r4
     776:	4b12      	ldr	r3, [pc, #72]	; (7c0 <xQueueGenericSendFromISR+0x90>)
     778:	4798      	blx	r3
     77a:	2801      	cmp	r0, #1
     77c:	d11a      	bne.n	7b4 <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
     77e:	2d00      	cmp	r5, #0
     780:	d0e4      	beq.n	74c <xQueueGenericSendFromISR+0x1c>
								*pxHigherPriorityTaskWoken = pdTRUE;
     782:	2301      	movs	r3, #1
     784:	602b      	str	r3, [r5, #0]
     786:	e7e1      	b.n	74c <xQueueGenericSendFromISR+0x1c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     788:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
     78a:	2001      	movs	r0, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     78c:	2b00      	cmp	r3, #0
     78e:	d0dd      	beq.n	74c <xQueueGenericSendFromISR+0x1c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     790:	0020      	movs	r0, r4
     792:	3024      	adds	r0, #36	; 0x24
     794:	4b0b      	ldr	r3, [pc, #44]	; (7c4 <xQueueGenericSendFromISR+0x94>)
     796:	4798      	blx	r3
     798:	0003      	movs	r3, r0
			xReturn = pdPASS;
     79a:	2001      	movs	r0, #1
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     79c:	2b00      	cmp	r3, #0
     79e:	d0d5      	beq.n	74c <xQueueGenericSendFromISR+0x1c>
								if( pxHigherPriorityTaskWoken != NULL )
     7a0:	2d00      	cmp	r5, #0
     7a2:	d009      	beq.n	7b8 <xQueueGenericSendFromISR+0x88>
									*pxHigherPriorityTaskWoken = pdTRUE;
     7a4:	2301      	movs	r3, #1
     7a6:	602b      	str	r3, [r5, #0]
     7a8:	e7d0      	b.n	74c <xQueueGenericSendFromISR+0x1c>
				++( pxQueue->xTxLock );
     7aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     7ac:	3301      	adds	r3, #1
     7ae:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
     7b0:	2001      	movs	r0, #1
     7b2:	e7cb      	b.n	74c <xQueueGenericSendFromISR+0x1c>
     7b4:	2001      	movs	r0, #1
     7b6:	e7c9      	b.n	74c <xQueueGenericSendFromISR+0x1c>
     7b8:	2001      	movs	r0, #1
     7ba:	e7c7      	b.n	74c <xQueueGenericSendFromISR+0x1c>
     7bc:	00000385 	.word	0x00000385
     7c0:	000003f1 	.word	0x000003f1
     7c4:	00001055 	.word	0x00001055

000007c8 <xQueueGenericReceive>:
{
     7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ca:	46c6      	mov	lr, r8
     7cc:	b500      	push	{lr}
     7ce:	b084      	sub	sp, #16
     7d0:	0004      	movs	r4, r0
     7d2:	000e      	movs	r6, r1
     7d4:	9201      	str	r2, [sp, #4]
     7d6:	001f      	movs	r7, r3
	configASSERT( pxQueue );
     7d8:	2800      	cmp	r0, #0
     7da:	d005      	beq.n	7e8 <xQueueGenericReceive+0x20>
     7dc:	2500      	movs	r5, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     7de:	2900      	cmp	r1, #0
     7e0:	d004      	beq.n	7ec <xQueueGenericReceive+0x24>
		taskENTER_CRITICAL();
     7e2:	4b4a      	ldr	r3, [pc, #296]	; (90c <xQueueGenericReceive+0x144>)
     7e4:	4698      	mov	r8, r3
     7e6:	e053      	b.n	890 <xQueueGenericReceive+0xc8>
	configASSERT( pxQueue );
     7e8:	b672      	cpsid	i
     7ea:	e7fe      	b.n	7ea <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     7ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
     7ee:	2b00      	cmp	r3, #0
     7f0:	d001      	beq.n	7f6 <xQueueGenericReceive+0x2e>
     7f2:	b672      	cpsid	i
     7f4:	e7fe      	b.n	7f4 <xQueueGenericReceive+0x2c>
     7f6:	2500      	movs	r5, #0
     7f8:	e7f3      	b.n	7e2 <xQueueGenericReceive+0x1a>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     7fa:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     7fc:	0031      	movs	r1, r6
     7fe:	0020      	movs	r0, r4
     800:	4b43      	ldr	r3, [pc, #268]	; (910 <xQueueGenericReceive+0x148>)
     802:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
     804:	2f00      	cmp	r7, #0
     806:	d11a      	bne.n	83e <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
     808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     80a:	3b01      	subs	r3, #1
     80c:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     80e:	6823      	ldr	r3, [r4, #0]
     810:	2b00      	cmp	r3, #0
     812:	d102      	bne.n	81a <xQueueGenericReceive+0x52>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
     814:	4b3f      	ldr	r3, [pc, #252]	; (914 <xQueueGenericReceive+0x14c>)
     816:	4798      	blx	r3
     818:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     81a:	6923      	ldr	r3, [r4, #16]
     81c:	2b00      	cmp	r3, #0
     81e:	d007      	beq.n	830 <xQueueGenericReceive+0x68>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     820:	0020      	movs	r0, r4
     822:	3010      	adds	r0, #16
     824:	4b3c      	ldr	r3, [pc, #240]	; (918 <xQueueGenericReceive+0x150>)
     826:	4798      	blx	r3
     828:	2801      	cmp	r0, #1
     82a:	d101      	bne.n	830 <xQueueGenericReceive+0x68>
							portYIELD_WITHIN_API();
     82c:	4b3b      	ldr	r3, [pc, #236]	; (91c <xQueueGenericReceive+0x154>)
     82e:	4798      	blx	r3
				taskEXIT_CRITICAL();
     830:	4b3b      	ldr	r3, [pc, #236]	; (920 <xQueueGenericReceive+0x158>)
     832:	4798      	blx	r3
				return pdPASS;
     834:	2001      	movs	r0, #1
}
     836:	b004      	add	sp, #16
     838:	bc04      	pop	{r2}
     83a:	4690      	mov	r8, r2
     83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     83e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     840:	6a63      	ldr	r3, [r4, #36]	; 0x24
     842:	2b00      	cmp	r3, #0
     844:	d0f4      	beq.n	830 <xQueueGenericReceive+0x68>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     846:	0020      	movs	r0, r4
     848:	3024      	adds	r0, #36	; 0x24
     84a:	4b33      	ldr	r3, [pc, #204]	; (918 <xQueueGenericReceive+0x150>)
     84c:	4798      	blx	r3
     84e:	2800      	cmp	r0, #0
     850:	d0ee      	beq.n	830 <xQueueGenericReceive+0x68>
							portYIELD_WITHIN_API();
     852:	4b32      	ldr	r3, [pc, #200]	; (91c <xQueueGenericReceive+0x154>)
     854:	4798      	blx	r3
     856:	e7eb      	b.n	830 <xQueueGenericReceive+0x68>
					taskEXIT_CRITICAL();
     858:	4b31      	ldr	r3, [pc, #196]	; (920 <xQueueGenericReceive+0x158>)
     85a:	4798      	blx	r3
					return errQUEUE_EMPTY;
     85c:	2000      	movs	r0, #0
     85e:	e7ea      	b.n	836 <xQueueGenericReceive+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
     860:	a802      	add	r0, sp, #8
     862:	4b30      	ldr	r3, [pc, #192]	; (924 <xQueueGenericReceive+0x15c>)
     864:	4798      	blx	r3
     866:	e01c      	b.n	8a2 <xQueueGenericReceive+0xda>
		prvLockQueue( pxQueue );
     868:	2300      	movs	r3, #0
     86a:	6463      	str	r3, [r4, #68]	; 0x44
     86c:	e022      	b.n	8b4 <xQueueGenericReceive+0xec>
     86e:	2300      	movs	r3, #0
     870:	64a3      	str	r3, [r4, #72]	; 0x48
     872:	e022      	b.n	8ba <xQueueGenericReceive+0xf2>
						portENTER_CRITICAL();
     874:	4b25      	ldr	r3, [pc, #148]	; (90c <xQueueGenericReceive+0x144>)
     876:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     878:	6860      	ldr	r0, [r4, #4]
     87a:	4b2b      	ldr	r3, [pc, #172]	; (928 <xQueueGenericReceive+0x160>)
     87c:	4798      	blx	r3
						portEXIT_CRITICAL();
     87e:	4b28      	ldr	r3, [pc, #160]	; (920 <xQueueGenericReceive+0x158>)
     880:	4798      	blx	r3
     882:	e02c      	b.n	8de <xQueueGenericReceive+0x116>
				prvUnlockQueue( pxQueue );
     884:	0020      	movs	r0, r4
     886:	4b29      	ldr	r3, [pc, #164]	; (92c <xQueueGenericReceive+0x164>)
     888:	4798      	blx	r3
				( void ) xTaskResumeAll();
     88a:	4b29      	ldr	r3, [pc, #164]	; (930 <xQueueGenericReceive+0x168>)
     88c:	4798      	blx	r3
     88e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
     890:	47c0      	blx	r8
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     894:	2b00      	cmp	r3, #0
     896:	d1b0      	bne.n	7fa <xQueueGenericReceive+0x32>
				if( xTicksToWait == ( portTickType ) 0 )
     898:	9b01      	ldr	r3, [sp, #4]
     89a:	2b00      	cmp	r3, #0
     89c:	d0dc      	beq.n	858 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
     89e:	2d00      	cmp	r5, #0
     8a0:	d0de      	beq.n	860 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
     8a2:	4b1f      	ldr	r3, [pc, #124]	; (920 <xQueueGenericReceive+0x158>)
     8a4:	4798      	blx	r3
		vTaskSuspendAll();
     8a6:	4b23      	ldr	r3, [pc, #140]	; (934 <xQueueGenericReceive+0x16c>)
     8a8:	4798      	blx	r3
		prvLockQueue( pxQueue );
     8aa:	4b18      	ldr	r3, [pc, #96]	; (90c <xQueueGenericReceive+0x144>)
     8ac:	4798      	blx	r3
     8ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
     8b0:	3301      	adds	r3, #1
     8b2:	d0d9      	beq.n	868 <xQueueGenericReceive+0xa0>
     8b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     8b6:	3301      	adds	r3, #1
     8b8:	d0d9      	beq.n	86e <xQueueGenericReceive+0xa6>
     8ba:	4b19      	ldr	r3, [pc, #100]	; (920 <xQueueGenericReceive+0x158>)
     8bc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     8be:	a901      	add	r1, sp, #4
     8c0:	a802      	add	r0, sp, #8
     8c2:	4b1d      	ldr	r3, [pc, #116]	; (938 <xQueueGenericReceive+0x170>)
     8c4:	4798      	blx	r3
     8c6:	2800      	cmp	r0, #0
     8c8:	d118      	bne.n	8fc <xQueueGenericReceive+0x134>
	taskENTER_CRITICAL();
     8ca:	4b10      	ldr	r3, [pc, #64]	; (90c <xQueueGenericReceive+0x144>)
     8cc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == 0 )
     8ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     8d0:	4b13      	ldr	r3, [pc, #76]	; (920 <xQueueGenericReceive+0x158>)
     8d2:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     8d4:	2d00      	cmp	r5, #0
     8d6:	d1d5      	bne.n	884 <xQueueGenericReceive+0xbc>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     8d8:	6823      	ldr	r3, [r4, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	d0ca      	beq.n	874 <xQueueGenericReceive+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     8de:	0020      	movs	r0, r4
     8e0:	3024      	adds	r0, #36	; 0x24
     8e2:	9901      	ldr	r1, [sp, #4]
     8e4:	4b15      	ldr	r3, [pc, #84]	; (93c <xQueueGenericReceive+0x174>)
     8e6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     8e8:	0020      	movs	r0, r4
     8ea:	4b10      	ldr	r3, [pc, #64]	; (92c <xQueueGenericReceive+0x164>)
     8ec:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     8ee:	4b10      	ldr	r3, [pc, #64]	; (930 <xQueueGenericReceive+0x168>)
     8f0:	4798      	blx	r3
     8f2:	2800      	cmp	r0, #0
     8f4:	d1cb      	bne.n	88e <xQueueGenericReceive+0xc6>
					portYIELD_WITHIN_API();
     8f6:	4b09      	ldr	r3, [pc, #36]	; (91c <xQueueGenericReceive+0x154>)
     8f8:	4798      	blx	r3
     8fa:	e7c8      	b.n	88e <xQueueGenericReceive+0xc6>
			prvUnlockQueue( pxQueue );
     8fc:	0020      	movs	r0, r4
     8fe:	4b0b      	ldr	r3, [pc, #44]	; (92c <xQueueGenericReceive+0x164>)
     900:	4798      	blx	r3
			( void ) xTaskResumeAll();
     902:	4b0b      	ldr	r3, [pc, #44]	; (930 <xQueueGenericReceive+0x168>)
     904:	4798      	blx	r3
			return errQUEUE_EMPTY;
     906:	2000      	movs	r0, #0
     908:	e795      	b.n	836 <xQueueGenericReceive+0x6e>
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	0000018d 	.word	0x0000018d
     910:	00000441 	.word	0x00000441
     914:	00001175 	.word	0x00001175
     918:	00001055 	.word	0x00001055
     91c:	00000175 	.word	0x00000175
     920:	000001a5 	.word	0x000001a5
     924:	000010d1 	.word	0x000010d1
     928:	000011a1 	.word	0x000011a1
     92c:	00000469 	.word	0x00000469
     930:	00000d91 	.word	0x00000d91
     934:	00000c45 	.word	0x00000c45
     938:	000010f1 	.word	0x000010f1
     93c:	00000fbd 	.word	0x00000fbd

00000940 <vQueueWaitForMessageRestricted>:
	{
     940:	b570      	push	{r4, r5, r6, lr}
     942:	0004      	movs	r4, r0
     944:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
     946:	4b0e      	ldr	r3, [pc, #56]	; (980 <vQueueWaitForMessageRestricted+0x40>)
     948:	4798      	blx	r3
     94a:	6c63      	ldr	r3, [r4, #68]	; 0x44
     94c:	3301      	adds	r3, #1
     94e:	d00b      	beq.n	968 <vQueueWaitForMessageRestricted+0x28>
     950:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     952:	3301      	adds	r3, #1
     954:	d00b      	beq.n	96e <vQueueWaitForMessageRestricted+0x2e>
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <vQueueWaitForMessageRestricted+0x44>)
     958:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
     95a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     95c:	2b00      	cmp	r3, #0
     95e:	d009      	beq.n	974 <vQueueWaitForMessageRestricted+0x34>
		prvUnlockQueue( pxQueue );
     960:	0020      	movs	r0, r4
     962:	4b09      	ldr	r3, [pc, #36]	; (988 <vQueueWaitForMessageRestricted+0x48>)
     964:	4798      	blx	r3
	}
     966:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
     968:	2300      	movs	r3, #0
     96a:	6463      	str	r3, [r4, #68]	; 0x44
     96c:	e7f0      	b.n	950 <vQueueWaitForMessageRestricted+0x10>
     96e:	2300      	movs	r3, #0
     970:	64a3      	str	r3, [r4, #72]	; 0x48
     972:	e7f0      	b.n	956 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     974:	0020      	movs	r0, r4
     976:	3024      	adds	r0, #36	; 0x24
     978:	0029      	movs	r1, r5
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <vQueueWaitForMessageRestricted+0x4c>)
     97c:	4798      	blx	r3
     97e:	e7ef      	b.n	960 <vQueueWaitForMessageRestricted+0x20>
     980:	0000018d 	.word	0x0000018d
     984:	000001a5 	.word	0x000001a5
     988:	00000469 	.word	0x00000469
     98c:	00001015 	.word	0x00001015

00000990 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
     990:	b510      	push	{r4, lr}
     992:	0004      	movs	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     994:	4b0e      	ldr	r3, [pc, #56]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
     99a:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <prvAddCurrentTaskToDelayedList+0x44>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	4298      	cmp	r0, r3
     9a0:	d30d      	bcc.n	9be <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9a2:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <prvAddCurrentTaskToDelayedList+0x48>)
     9a4:	6818      	ldr	r0, [r3, #0]
     9a6:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9a8:	6819      	ldr	r1, [r3, #0]
     9aa:	3104      	adds	r1, #4
     9ac:	4b0b      	ldr	r3, [pc, #44]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9ae:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     9b0:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <prvAddCurrentTaskToDelayedList+0x50>)
     9b2:	681b      	ldr	r3, [r3, #0]
     9b4:	429c      	cmp	r4, r3
     9b6:	d209      	bcs.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
     9b8:	4b09      	ldr	r3, [pc, #36]	; (9e0 <prvAddCurrentTaskToDelayedList+0x50>)
     9ba:	601c      	str	r4, [r3, #0]
		}
	}
}
     9bc:	e006      	b.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9be:	4b09      	ldr	r3, [pc, #36]	; (9e4 <prvAddCurrentTaskToDelayedList+0x54>)
     9c0:	6818      	ldr	r0, [r3, #0]
     9c2:	4b03      	ldr	r3, [pc, #12]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9c4:	6819      	ldr	r1, [r3, #0]
     9c6:	3104      	adds	r1, #4
     9c8:	4b04      	ldr	r3, [pc, #16]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9ca:	4798      	blx	r3
}
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	20003ac8 	.word	0x20003ac8
     9d4:	20003bc4 	.word	0x20003bc4
     9d8:	20003acc 	.word	0x20003acc
     9dc:	00000327 	.word	0x00000327
     9e0:	20000004 	.word	0x20000004
     9e4:	20003ad0 	.word	0x20003ad0

000009e8 <xTaskGenericCreate>:
{
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	46d6      	mov	lr, sl
     9ec:	464f      	mov	r7, r9
     9ee:	b580      	push	{r7, lr}
     9f0:	b083      	sub	sp, #12
     9f2:	0005      	movs	r5, r0
     9f4:	9100      	str	r1, [sp, #0]
     9f6:	0016      	movs	r6, r2
     9f8:	9301      	str	r3, [sp, #4]
     9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     9fc:	4699      	mov	r9, r3
     9fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
     a00:	2800      	cmp	r0, #0
     a02:	d003      	beq.n	a0c <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     a04:	2b04      	cmp	r3, #4
     a06:	d903      	bls.n	a10 <xTaskGenericCreate+0x28>
     a08:	b672      	cpsid	i
     a0a:	e7fe      	b.n	a0a <xTaskGenericCreate+0x22>
	configASSERT( pxTaskCode );
     a0c:	b672      	cpsid	i
     a0e:	e7fe      	b.n	a0e <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
     a10:	2040      	movs	r0, #64	; 0x40
     a12:	4b5a      	ldr	r3, [pc, #360]	; (b7c <xTaskGenericCreate+0x194>)
     a14:	4798      	blx	r3
     a16:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
     a18:	d00c      	beq.n	a34 <xTaskGenericCreate+0x4c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     a1a:	2f00      	cmp	r7, #0
     a1c:	d000      	beq.n	a20 <xTaskGenericCreate+0x38>
     a1e:	e078      	b.n	b12 <xTaskGenericCreate+0x12a>
     a20:	00b0      	lsls	r0, r6, #2
     a22:	4b56      	ldr	r3, [pc, #344]	; (b7c <xTaskGenericCreate+0x194>)
     a24:	4798      	blx	r3
     a26:	1e07      	subs	r7, r0, #0
     a28:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     a2a:	d000      	beq.n	a2e <xTaskGenericCreate+0x46>
     a2c:	e072      	b.n	b14 <xTaskGenericCreate+0x12c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     a2e:	0020      	movs	r0, r4
     a30:	4b53      	ldr	r3, [pc, #332]	; (b80 <xTaskGenericCreate+0x198>)
     a32:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     a34:	2001      	movs	r0, #1
     a36:	4240      	negs	r0, r0
     a38:	e05a      	b.n	af0 <xTaskGenericCreate+0x108>
		if( ( void * ) pxCreatedTask != NULL )
     a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a3c:	2b00      	cmp	r3, #0
     a3e:	d000      	beq.n	a42 <xTaskGenericCreate+0x5a>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     a40:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
     a42:	4b50      	ldr	r3, [pc, #320]	; (b84 <xTaskGenericCreate+0x19c>)
     a44:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
     a46:	4a50      	ldr	r2, [pc, #320]	; (b88 <xTaskGenericCreate+0x1a0>)
     a48:	6813      	ldr	r3, [r2, #0]
     a4a:	3301      	adds	r3, #1
     a4c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
     a4e:	4b4f      	ldr	r3, [pc, #316]	; (b8c <xTaskGenericCreate+0x1a4>)
     a50:	681b      	ldr	r3, [r3, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d151      	bne.n	afa <xTaskGenericCreate+0x112>
				pxCurrentTCB =  pxNewTCB;
     a56:	4b4d      	ldr	r3, [pc, #308]	; (b8c <xTaskGenericCreate+0x1a4>)
     a58:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     a5a:	6813      	ldr	r3, [r2, #0]
     a5c:	2b01      	cmp	r3, #1
     a5e:	d11f      	bne.n	aa0 <xTaskGenericCreate+0xb8>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     a60:	4e4b      	ldr	r6, [pc, #300]	; (b90 <xTaskGenericCreate+0x1a8>)
     a62:	0030      	movs	r0, r6
     a64:	4d4b      	ldr	r5, [pc, #300]	; (b94 <xTaskGenericCreate+0x1ac>)
     a66:	47a8      	blx	r5
     a68:	0030      	movs	r0, r6
     a6a:	3014      	adds	r0, #20
     a6c:	47a8      	blx	r5
     a6e:	0030      	movs	r0, r6
     a70:	3028      	adds	r0, #40	; 0x28
     a72:	47a8      	blx	r5
     a74:	0030      	movs	r0, r6
     a76:	303c      	adds	r0, #60	; 0x3c
     a78:	47a8      	blx	r5
     a7a:	0030      	movs	r0, r6
     a7c:	3050      	adds	r0, #80	; 0x50
     a7e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     a80:	4f45      	ldr	r7, [pc, #276]	; (b98 <xTaskGenericCreate+0x1b0>)
     a82:	0038      	movs	r0, r7
     a84:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     a86:	4e45      	ldr	r6, [pc, #276]	; (b9c <xTaskGenericCreate+0x1b4>)
     a88:	0030      	movs	r0, r6
     a8a:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
     a8c:	4844      	ldr	r0, [pc, #272]	; (ba0 <xTaskGenericCreate+0x1b8>)
     a8e:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
     a90:	4844      	ldr	r0, [pc, #272]	; (ba4 <xTaskGenericCreate+0x1bc>)
     a92:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
     a94:	4844      	ldr	r0, [pc, #272]	; (ba8 <xTaskGenericCreate+0x1c0>)
     a96:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
     a98:	4b44      	ldr	r3, [pc, #272]	; (bac <xTaskGenericCreate+0x1c4>)
     a9a:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     a9c:	4b44      	ldr	r3, [pc, #272]	; (bb0 <xTaskGenericCreate+0x1c8>)
     a9e:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     aa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     aa2:	4a44      	ldr	r2, [pc, #272]	; (bb4 <xTaskGenericCreate+0x1cc>)
     aa4:	6812      	ldr	r2, [r2, #0]
     aa6:	4293      	cmp	r3, r2
     aa8:	d901      	bls.n	aae <xTaskGenericCreate+0xc6>
				uxTopUsedPriority = pxNewTCB->uxPriority;
     aaa:	4a42      	ldr	r2, [pc, #264]	; (bb4 <xTaskGenericCreate+0x1cc>)
     aac:	6013      	str	r3, [r2, #0]
			uxTaskNumber++;
     aae:	4942      	ldr	r1, [pc, #264]	; (bb8 <xTaskGenericCreate+0x1d0>)
     ab0:	680a      	ldr	r2, [r1, #0]
     ab2:	3201      	adds	r2, #1
     ab4:	600a      	str	r2, [r1, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
     ab6:	4a41      	ldr	r2, [pc, #260]	; (bbc <xTaskGenericCreate+0x1d4>)
     ab8:	6812      	ldr	r2, [r2, #0]
     aba:	4293      	cmp	r3, r2
     abc:	d901      	bls.n	ac2 <xTaskGenericCreate+0xda>
     abe:	4a3f      	ldr	r2, [pc, #252]	; (bbc <xTaskGenericCreate+0x1d4>)
     ac0:	6013      	str	r3, [r2, #0]
     ac2:	009a      	lsls	r2, r3, #2
     ac4:	18d3      	adds	r3, r2, r3
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	4831      	ldr	r0, [pc, #196]	; (b90 <xTaskGenericCreate+0x1a8>)
     aca:	18c0      	adds	r0, r0, r3
     acc:	9900      	ldr	r1, [sp, #0]
     ace:	4b3c      	ldr	r3, [pc, #240]	; (bc0 <xTaskGenericCreate+0x1d8>)
     ad0:	4798      	blx	r3
		taskEXIT_CRITICAL();
     ad2:	4b3c      	ldr	r3, [pc, #240]	; (bc4 <xTaskGenericCreate+0x1dc>)
     ad4:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
     ad6:	4b3c      	ldr	r3, [pc, #240]	; (bc8 <xTaskGenericCreate+0x1e0>)
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	2001      	movs	r0, #1
     adc:	2b00      	cmp	r3, #0
     ade:	d007      	beq.n	af0 <xTaskGenericCreate+0x108>
			if( pxCurrentTCB->uxPriority < uxPriority )
     ae0:	4b2a      	ldr	r3, [pc, #168]	; (b8c <xTaskGenericCreate+0x1a4>)
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ae6:	4599      	cmp	r9, r3
     ae8:	d902      	bls.n	af0 <xTaskGenericCreate+0x108>
				portYIELD_WITHIN_API();
     aea:	4b38      	ldr	r3, [pc, #224]	; (bcc <xTaskGenericCreate+0x1e4>)
     aec:	4798      	blx	r3
     aee:	2001      	movs	r0, #1
}
     af0:	b003      	add	sp, #12
     af2:	bc0c      	pop	{r2, r3}
     af4:	4691      	mov	r9, r2
     af6:	469a      	mov	sl, r3
     af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
     afa:	4b33      	ldr	r3, [pc, #204]	; (bc8 <xTaskGenericCreate+0x1e0>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d1ce      	bne.n	aa0 <xTaskGenericCreate+0xb8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
     b02:	4b22      	ldr	r3, [pc, #136]	; (b8c <xTaskGenericCreate+0x1a4>)
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b08:	4599      	cmp	r9, r3
     b0a:	d3c9      	bcc.n	aa0 <xTaskGenericCreate+0xb8>
						pxCurrentTCB = pxNewTCB;
     b0c:	4b1f      	ldr	r3, [pc, #124]	; (b8c <xTaskGenericCreate+0x1a4>)
     b0e:	601c      	str	r4, [r3, #0]
     b10:	e7c6      	b.n	aa0 <xTaskGenericCreate+0xb8>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     b12:	6307      	str	r7, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
     b14:	00b2      	lsls	r2, r6, #2
     b16:	21a5      	movs	r1, #165	; 0xa5
     b18:	0038      	movs	r0, r7
     b1a:	4b2d      	ldr	r3, [pc, #180]	; (bd0 <xTaskGenericCreate+0x1e8>)
     b1c:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     b1e:	4b2d      	ldr	r3, [pc, #180]	; (bd4 <xTaskGenericCreate+0x1ec>)
     b20:	18f3      	adds	r3, r6, r3
     b22:	009b      	lsls	r3, r3, #2
     b24:	6b22      	ldr	r2, [r4, #48]	; 0x30
     b26:	4694      	mov	ip, r2
     b28:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
     b2a:	2607      	movs	r6, #7
     b2c:	43b3      	bics	r3, r6
     b2e:	469a      	mov	sl, r3
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     b30:	0020      	movs	r0, r4
     b32:	3034      	adds	r0, #52	; 0x34
     b34:	2208      	movs	r2, #8
     b36:	9900      	ldr	r1, [sp, #0]
     b38:	4b27      	ldr	r3, [pc, #156]	; (bd8 <xTaskGenericCreate+0x1f0>)
     b3a:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     b3c:	2200      	movs	r2, #0
     b3e:	233b      	movs	r3, #59	; 0x3b
     b40:	54e2      	strb	r2, [r4, r3]
	pxTCB->uxPriority = uxPriority;
     b42:	464b      	mov	r3, r9
     b44:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
     b46:	63e3      	str	r3, [r4, #60]	; 0x3c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     b48:	1d23      	adds	r3, r4, #4
     b4a:	9300      	str	r3, [sp, #0]
     b4c:	0018      	movs	r0, r3
     b4e:	4f23      	ldr	r7, [pc, #140]	; (bdc <xTaskGenericCreate+0x1f4>)
     b50:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     b52:	0020      	movs	r0, r4
     b54:	3018      	adds	r0, #24
     b56:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     b58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     b5a:	2305      	movs	r3, #5
     b5c:	464a      	mov	r2, r9
     b5e:	1a9b      	subs	r3, r3, r2
     b60:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     b62:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     b64:	9a01      	ldr	r2, [sp, #4]
     b66:	0029      	movs	r1, r5
     b68:	4650      	mov	r0, sl
     b6a:	4b1d      	ldr	r3, [pc, #116]	; (be0 <xTaskGenericCreate+0x1f8>)
     b6c:	4798      	blx	r3
     b6e:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     b70:	4230      	tst	r0, r6
     b72:	d100      	bne.n	b76 <xTaskGenericCreate+0x18e>
     b74:	e761      	b.n	a3a <xTaskGenericCreate+0x52>
     b76:	b672      	cpsid	i
     b78:	e7fe      	b.n	b78 <xTaskGenericCreate+0x190>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000279 	.word	0x00000279
     b80:	000002e5 	.word	0x000002e5
     b84:	0000018d 	.word	0x0000018d
     b88:	20003b38 	.word	0x20003b38
     b8c:	20003ac8 	.word	0x20003ac8
     b90:	20003ad4 	.word	0x20003ad4
     b94:	000002ef 	.word	0x000002ef
     b98:	20003b54 	.word	0x20003b54
     b9c:	20003b68 	.word	0x20003b68
     ba0:	20003b84 	.word	0x20003b84
     ba4:	20003bb0 	.word	0x20003bb0
     ba8:	20003b9c 	.word	0x20003b9c
     bac:	20003acc 	.word	0x20003acc
     bb0:	20003ad0 	.word	0x20003ad0
     bb4:	20003b50 	.word	0x20003b50
     bb8:	20003b44 	.word	0x20003b44
     bbc:	20003b4c 	.word	0x20003b4c
     bc0:	0000030b 	.word	0x0000030b
     bc4:	000001a5 	.word	0x000001a5
     bc8:	20003b98 	.word	0x20003b98
     bcc:	00000175 	.word	0x00000175
     bd0:	00001c47 	.word	0x00001c47
     bd4:	3fffffff 	.word	0x3fffffff
     bd8:	00001c57 	.word	0x00001c57
     bdc:	00000305 	.word	0x00000305
     be0:	00000135 	.word	0x00000135

00000be4 <vTaskStartScheduler>:
{
     be4:	b510      	push	{r4, lr}
     be6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     be8:	2300      	movs	r3, #0
     bea:	9303      	str	r3, [sp, #12]
     bec:	9302      	str	r3, [sp, #8]
     bee:	9301      	str	r3, [sp, #4]
     bf0:	9300      	str	r3, [sp, #0]
     bf2:	2264      	movs	r2, #100	; 0x64
     bf4:	490c      	ldr	r1, [pc, #48]	; (c28 <vTaskStartScheduler+0x44>)
     bf6:	480d      	ldr	r0, [pc, #52]	; (c2c <vTaskStartScheduler+0x48>)
     bf8:	4c0d      	ldr	r4, [pc, #52]	; (c30 <vTaskStartScheduler+0x4c>)
     bfa:	47a0      	blx	r4
		if( xReturn == pdPASS )
     bfc:	2801      	cmp	r0, #1
     bfe:	d003      	beq.n	c08 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
     c00:	2800      	cmp	r0, #0
     c02:	d10e      	bne.n	c22 <vTaskStartScheduler+0x3e>
     c04:	b672      	cpsid	i
     c06:	e7fe      	b.n	c06 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <vTaskStartScheduler+0x50>)
     c0a:	4798      	blx	r3
	if( xReturn == pdPASS )
     c0c:	2801      	cmp	r0, #1
     c0e:	d1f7      	bne.n	c00 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
     c10:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
     c12:	2201      	movs	r2, #1
     c14:	4b08      	ldr	r3, [pc, #32]	; (c38 <vTaskStartScheduler+0x54>)
     c16:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
     c18:	2200      	movs	r2, #0
     c1a:	4b08      	ldr	r3, [pc, #32]	; (c3c <vTaskStartScheduler+0x58>)
     c1c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
     c1e:	4b08      	ldr	r3, [pc, #32]	; (c40 <vTaskStartScheduler+0x5c>)
     c20:	4798      	blx	r3
}
     c22:	b004      	add	sp, #16
     c24:	bd10      	pop	{r4, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00001c80 	.word	0x00001c80
     c2c:	00000e85 	.word	0x00000e85
     c30:	000009e9 	.word	0x000009e9
     c34:	00001315 	.word	0x00001315
     c38:	20003b98 	.word	0x20003b98
     c3c:	20003bc4 	.word	0x20003bc4
     c40:	0000023d 	.word	0x0000023d

00000c44 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
     c44:	4a02      	ldr	r2, [pc, #8]	; (c50 <vTaskSuspendAll+0xc>)
     c46:	6813      	ldr	r3, [r2, #0]
     c48:	3301      	adds	r3, #1
     c4a:	6013      	str	r3, [r2, #0]
}
     c4c:	4770      	bx	lr
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	20003b40 	.word	0x20003b40

00000c54 <xTaskGetTickCount>:
{
     c54:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
     c56:	4b04      	ldr	r3, [pc, #16]	; (c68 <xTaskGetTickCount+0x14>)
     c58:	4798      	blx	r3
		xTicks = xTickCount;
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <xTaskGetTickCount+0x18>)
     c5c:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
     c5e:	4b04      	ldr	r3, [pc, #16]	; (c70 <xTaskGetTickCount+0x1c>)
     c60:	4798      	blx	r3
}
     c62:	0020      	movs	r0, r4
     c64:	bd10      	pop	{r4, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	0000018d 	.word	0x0000018d
     c6c:	20003bc4 	.word	0x20003bc4
     c70:	000001a5 	.word	0x000001a5

00000c74 <vTaskIncrementTick>:
{
     c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c76:	4b3b      	ldr	r3, [pc, #236]	; (d64 <vTaskIncrementTick+0xf0>)
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d16d      	bne.n	d5a <vTaskIncrementTick+0xe6>
		++xTickCount;
     c7e:	4b3a      	ldr	r3, [pc, #232]	; (d68 <vTaskIncrementTick+0xf4>)
     c80:	681a      	ldr	r2, [r3, #0]
     c82:	3201      	adds	r2, #1
     c84:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	2b00      	cmp	r3, #0
     c8a:	d118      	bne.n	cbe <vTaskIncrementTick+0x4a>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
     c8c:	4b37      	ldr	r3, [pc, #220]	; (d6c <vTaskIncrementTick+0xf8>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	d001      	beq.n	c9a <vTaskIncrementTick+0x26>
     c96:	b672      	cpsid	i
     c98:	e7fe      	b.n	c98 <vTaskIncrementTick+0x24>
			pxTemp = pxDelayedTaskList;
     c9a:	4b34      	ldr	r3, [pc, #208]	; (d6c <vTaskIncrementTick+0xf8>)
     c9c:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     c9e:	4a34      	ldr	r2, [pc, #208]	; (d70 <vTaskIncrementTick+0xfc>)
     ca0:	6810      	ldr	r0, [r2, #0]
     ca2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     ca4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
     ca6:	4933      	ldr	r1, [pc, #204]	; (d74 <vTaskIncrementTick+0x100>)
     ca8:	680a      	ldr	r2, [r1, #0]
     caa:	3201      	adds	r2, #1
     cac:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d11a      	bne.n	cec <vTaskIncrementTick+0x78>
				xNextTaskUnblockTime = portMAX_DELAY;
     cb6:	2201      	movs	r2, #1
     cb8:	4252      	negs	r2, r2
     cba:	4b2f      	ldr	r3, [pc, #188]	; (d78 <vTaskIncrementTick+0x104>)
     cbc:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
     cbe:	4b2a      	ldr	r3, [pc, #168]	; (d68 <vTaskIncrementTick+0xf4>)
     cc0:	681a      	ldr	r2, [r3, #0]
     cc2:	4b2d      	ldr	r3, [pc, #180]	; (d78 <vTaskIncrementTick+0x104>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	429a      	cmp	r2, r3
     cc8:	d34b      	bcc.n	d62 <vTaskIncrementTick+0xee>
     cca:	4b28      	ldr	r3, [pc, #160]	; (d6c <vTaskIncrementTick+0xf8>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d013      	beq.n	cfc <vTaskIncrementTick+0x88>
     cd4:	4b25      	ldr	r3, [pc, #148]	; (d6c <vTaskIncrementTick+0xf8>)
     cd6:	681b      	ldr	r3, [r3, #0]
     cd8:	68db      	ldr	r3, [r3, #12]
     cda:	68dc      	ldr	r4, [r3, #12]
     cdc:	6863      	ldr	r3, [r4, #4]
     cde:	4a22      	ldr	r2, [pc, #136]	; (d68 <vTaskIncrementTick+0xf4>)
     ce0:	6812      	ldr	r2, [r2, #0]
     ce2:	4293      	cmp	r3, r2
     ce4:	d80f      	bhi.n	d06 <vTaskIncrementTick+0x92>
     ce6:	4f25      	ldr	r7, [pc, #148]	; (d7c <vTaskIncrementTick+0x108>)
     ce8:	4e25      	ldr	r6, [pc, #148]	; (d80 <vTaskIncrementTick+0x10c>)
     cea:	e025      	b.n	d38 <vTaskIncrementTick+0xc4>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     cec:	4b1f      	ldr	r3, [pc, #124]	; (d6c <vTaskIncrementTick+0xf8>)
     cee:	681b      	ldr	r3, [r3, #0]
     cf0:	68db      	ldr	r3, [r3, #12]
     cf2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     cf4:	685a      	ldr	r2, [r3, #4]
     cf6:	4b20      	ldr	r3, [pc, #128]	; (d78 <vTaskIncrementTick+0x104>)
     cf8:	601a      	str	r2, [r3, #0]
     cfa:	e7e0      	b.n	cbe <vTaskIncrementTick+0x4a>
		prvCheckDelayedTasks();
     cfc:	2201      	movs	r2, #1
     cfe:	4252      	negs	r2, r2
     d00:	4b1d      	ldr	r3, [pc, #116]	; (d78 <vTaskIncrementTick+0x104>)
     d02:	601a      	str	r2, [r3, #0]
     d04:	e02d      	b.n	d62 <vTaskIncrementTick+0xee>
     d06:	4a1c      	ldr	r2, [pc, #112]	; (d78 <vTaskIncrementTick+0x104>)
     d08:	6013      	str	r3, [r2, #0]
     d0a:	e02a      	b.n	d62 <vTaskIncrementTick+0xee>
     d0c:	0098      	lsls	r0, r3, #2
     d0e:	18c0      	adds	r0, r0, r3
     d10:	0080      	lsls	r0, r0, #2
     d12:	4b1c      	ldr	r3, [pc, #112]	; (d84 <vTaskIncrementTick+0x110>)
     d14:	1818      	adds	r0, r3, r0
     d16:	0029      	movs	r1, r5
     d18:	4b1b      	ldr	r3, [pc, #108]	; (d88 <vTaskIncrementTick+0x114>)
     d1a:	4798      	blx	r3
     d1c:	4b13      	ldr	r3, [pc, #76]	; (d6c <vTaskIncrementTick+0xf8>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d0ea      	beq.n	cfc <vTaskIncrementTick+0x88>
     d26:	4b11      	ldr	r3, [pc, #68]	; (d6c <vTaskIncrementTick+0xf8>)
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	68db      	ldr	r3, [r3, #12]
     d2c:	68dc      	ldr	r4, [r3, #12]
     d2e:	6863      	ldr	r3, [r4, #4]
     d30:	4a0d      	ldr	r2, [pc, #52]	; (d68 <vTaskIncrementTick+0xf4>)
     d32:	6812      	ldr	r2, [r2, #0]
     d34:	4293      	cmp	r3, r2
     d36:	d8e6      	bhi.n	d06 <vTaskIncrementTick+0x92>
     d38:	1d25      	adds	r5, r4, #4
     d3a:	0028      	movs	r0, r5
     d3c:	47b8      	blx	r7
     d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d40:	2b00      	cmp	r3, #0
     d42:	d003      	beq.n	d4c <vTaskIncrementTick+0xd8>
     d44:	0020      	movs	r0, r4
     d46:	3018      	adds	r0, #24
     d48:	4b0c      	ldr	r3, [pc, #48]	; (d7c <vTaskIncrementTick+0x108>)
     d4a:	4798      	blx	r3
     d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d4e:	6832      	ldr	r2, [r6, #0]
     d50:	4293      	cmp	r3, r2
     d52:	d9db      	bls.n	d0c <vTaskIncrementTick+0x98>
     d54:	4a0a      	ldr	r2, [pc, #40]	; (d80 <vTaskIncrementTick+0x10c>)
     d56:	6013      	str	r3, [r2, #0]
     d58:	e7d8      	b.n	d0c <vTaskIncrementTick+0x98>
		++uxMissedTicks;
     d5a:	4a0c      	ldr	r2, [pc, #48]	; (d8c <vTaskIncrementTick+0x118>)
     d5c:	6813      	ldr	r3, [r2, #0]
     d5e:	3301      	adds	r3, #1
     d60:	6013      	str	r3, [r2, #0]
}
     d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d64:	20003b40 	.word	0x20003b40
     d68:	20003bc4 	.word	0x20003bc4
     d6c:	20003acc 	.word	0x20003acc
     d70:	20003ad0 	.word	0x20003ad0
     d74:	20003b80 	.word	0x20003b80
     d78:	20000004 	.word	0x20000004
     d7c:	0000035d 	.word	0x0000035d
     d80:	20003b4c 	.word	0x20003b4c
     d84:	20003ad4 	.word	0x20003ad4
     d88:	0000030b 	.word	0x0000030b
     d8c:	20003b3c 	.word	0x20003b3c

00000d90 <xTaskResumeAll>:
{
     d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
     d92:	4b2e      	ldr	r3, [pc, #184]	; (e4c <xTaskResumeAll+0xbc>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	2b00      	cmp	r3, #0
     d98:	d101      	bne.n	d9e <xTaskResumeAll+0xe>
     d9a:	b672      	cpsid	i
     d9c:	e7fe      	b.n	d9c <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
     d9e:	4b2c      	ldr	r3, [pc, #176]	; (e50 <xTaskResumeAll+0xc0>)
     da0:	4798      	blx	r3
		--uxSchedulerSuspended;
     da2:	4b2a      	ldr	r3, [pc, #168]	; (e4c <xTaskResumeAll+0xbc>)
     da4:	681a      	ldr	r2, [r3, #0]
     da6:	3a01      	subs	r2, #1
     da8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     daa:	681b      	ldr	r3, [r3, #0]
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     dac:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     dae:	2b00      	cmp	r3, #0
     db0:	d103      	bne.n	dba <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     db2:	4b28      	ldr	r3, [pc, #160]	; (e54 <xTaskResumeAll+0xc4>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	2b00      	cmp	r3, #0
     db8:	d103      	bne.n	dc2 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
     dba:	4b27      	ldr	r3, [pc, #156]	; (e58 <xTaskResumeAll+0xc8>)
     dbc:	4798      	blx	r3
}
     dbe:	0020      	movs	r0, r4
     dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     dc2:	4d26      	ldr	r5, [pc, #152]	; (e5c <xTaskResumeAll+0xcc>)
     dc4:	682b      	ldr	r3, [r5, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d021      	beq.n	e0e <xTaskResumeAll+0x7e>
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     dca:	4b24      	ldr	r3, [pc, #144]	; (e5c <xTaskResumeAll+0xcc>)
     dcc:	68db      	ldr	r3, [r3, #12]
     dce:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
     dd0:	0038      	movs	r0, r7
     dd2:	3018      	adds	r0, #24
     dd4:	4b22      	ldr	r3, [pc, #136]	; (e60 <xTaskResumeAll+0xd0>)
     dd6:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
     dd8:	1d3e      	adds	r6, r7, #4
     dda:	0030      	movs	r0, r6
     ddc:	4b20      	ldr	r3, [pc, #128]	; (e60 <xTaskResumeAll+0xd0>)
     dde:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
     de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     de2:	4a20      	ldr	r2, [pc, #128]	; (e64 <xTaskResumeAll+0xd4>)
     de4:	6812      	ldr	r2, [r2, #0]
     de6:	4293      	cmp	r3, r2
     de8:	d901      	bls.n	dee <xTaskResumeAll+0x5e>
     dea:	4a1e      	ldr	r2, [pc, #120]	; (e64 <xTaskResumeAll+0xd4>)
     dec:	6013      	str	r3, [r2, #0]
     dee:	0098      	lsls	r0, r3, #2
     df0:	18c0      	adds	r0, r0, r3
     df2:	0080      	lsls	r0, r0, #2
     df4:	4b1c      	ldr	r3, [pc, #112]	; (e68 <xTaskResumeAll+0xd8>)
     df6:	1818      	adds	r0, r3, r0
     df8:	0031      	movs	r1, r6
     dfa:	4b1c      	ldr	r3, [pc, #112]	; (e6c <xTaskResumeAll+0xdc>)
     dfc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     dfe:	4b1c      	ldr	r3, [pc, #112]	; (e70 <xTaskResumeAll+0xe0>)
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e06:	429a      	cmp	r2, r3
     e08:	d3dc      	bcc.n	dc4 <xTaskResumeAll+0x34>
						xYieldRequired = pdTRUE;
     e0a:	2401      	movs	r4, #1
     e0c:	e7da      	b.n	dc4 <xTaskResumeAll+0x34>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e0e:	4b19      	ldr	r3, [pc, #100]	; (e74 <xTaskResumeAll+0xe4>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	2b00      	cmp	r3, #0
     e14:	d013      	beq.n	e3e <xTaskResumeAll+0xae>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e16:	4b17      	ldr	r3, [pc, #92]	; (e74 <xTaskResumeAll+0xe4>)
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d008      	beq.n	e30 <xTaskResumeAll+0xa0>
						vTaskIncrementTick();
     e1e:	4d16      	ldr	r5, [pc, #88]	; (e78 <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
     e20:	4c14      	ldr	r4, [pc, #80]	; (e74 <xTaskResumeAll+0xe4>)
						vTaskIncrementTick();
     e22:	47a8      	blx	r5
						--uxMissedTicks;
     e24:	6823      	ldr	r3, [r4, #0]
     e26:	3b01      	subs	r3, #1
     e28:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e2a:	6823      	ldr	r3, [r4, #0]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d1f8      	bne.n	e22 <xTaskResumeAll+0x92>
					xMissedYield = pdFALSE;
     e30:	2200      	movs	r2, #0
     e32:	4b12      	ldr	r3, [pc, #72]	; (e7c <xTaskResumeAll+0xec>)
     e34:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
     e36:	4b12      	ldr	r3, [pc, #72]	; (e80 <xTaskResumeAll+0xf0>)
     e38:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
     e3a:	2401      	movs	r4, #1
     e3c:	e7bd      	b.n	dba <xTaskResumeAll+0x2a>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e3e:	2c01      	cmp	r4, #1
     e40:	d0f6      	beq.n	e30 <xTaskResumeAll+0xa0>
     e42:	4b0e      	ldr	r3, [pc, #56]	; (e7c <xTaskResumeAll+0xec>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	2b01      	cmp	r3, #1
     e48:	d1b7      	bne.n	dba <xTaskResumeAll+0x2a>
     e4a:	e7f1      	b.n	e30 <xTaskResumeAll+0xa0>
     e4c:	20003b40 	.word	0x20003b40
     e50:	0000018d 	.word	0x0000018d
     e54:	20003b38 	.word	0x20003b38
     e58:	000001a5 	.word	0x000001a5
     e5c:	20003b84 	.word	0x20003b84
     e60:	0000035d 	.word	0x0000035d
     e64:	20003b4c 	.word	0x20003b4c
     e68:	20003ad4 	.word	0x20003ad4
     e6c:	0000030b 	.word	0x0000030b
     e70:	20003ac8 	.word	0x20003ac8
     e74:	20003b3c 	.word	0x20003b3c
     e78:	00000c75 	.word	0x00000c75
     e7c:	20003b7c 	.word	0x20003b7c
     e80:	00000175 	.word	0x00000175

00000e84 <prvIdleTask>:
{
     e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e86:	46ce      	mov	lr, r9
     e88:	4647      	mov	r7, r8
     e8a:	b580      	push	{r7, lr}
			vTaskSuspendAll();
     e8c:	4b16      	ldr	r3, [pc, #88]	; (ee8 <prvIdleTask+0x64>)
     e8e:	4698      	mov	r8, r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     e90:	4f16      	ldr	r7, [pc, #88]	; (eec <prvIdleTask+0x68>)
			xTaskResumeAll();
     e92:	4e17      	ldr	r6, [pc, #92]	; (ef0 <prvIdleTask+0x6c>)
     e94:	e026      	b.n	ee4 <prvIdleTask+0x60>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     e96:	4b17      	ldr	r3, [pc, #92]	; (ef4 <prvIdleTask+0x70>)
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	2b01      	cmp	r3, #1
     e9c:	d820      	bhi.n	ee0 <prvIdleTask+0x5c>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     e9e:	682b      	ldr	r3, [r5, #0]
     ea0:	2b00      	cmp	r3, #0
     ea2:	d0f8      	beq.n	e96 <prvIdleTask+0x12>
			vTaskSuspendAll();
     ea4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     ea6:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
     ea8:	47b0      	blx	r6
			if( xListIsEmpty == pdFALSE )
     eaa:	2c00      	cmp	r4, #0
     eac:	d0f7      	beq.n	e9e <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
     eae:	4b12      	ldr	r3, [pc, #72]	; (ef8 <prvIdleTask+0x74>)
     eb0:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     eb2:	4b0e      	ldr	r3, [pc, #56]	; (eec <prvIdleTask+0x68>)
     eb4:	68db      	ldr	r3, [r3, #12]
     eb6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
     eb8:	1d20      	adds	r0, r4, #4
     eba:	4b10      	ldr	r3, [pc, #64]	; (efc <prvIdleTask+0x78>)
     ebc:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
     ebe:	4a10      	ldr	r2, [pc, #64]	; (f00 <prvIdleTask+0x7c>)
     ec0:	6813      	ldr	r3, [r2, #0]
     ec2:	3b01      	subs	r3, #1
     ec4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
     ec6:	4a0f      	ldr	r2, [pc, #60]	; (f04 <prvIdleTask+0x80>)
     ec8:	6813      	ldr	r3, [r2, #0]
     eca:	3b01      	subs	r3, #1
     ecc:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
     ece:	4b0e      	ldr	r3, [pc, #56]	; (f08 <prvIdleTask+0x84>)
     ed0:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     ed2:	6b20      	ldr	r0, [r4, #48]	; 0x30
     ed4:	4b0d      	ldr	r3, [pc, #52]	; (f0c <prvIdleTask+0x88>)
     ed6:	4699      	mov	r9, r3
     ed8:	4798      	blx	r3
		vPortFree( pxTCB );
     eda:	0020      	movs	r0, r4
     edc:	47c8      	blx	r9
     ede:	e7de      	b.n	e9e <prvIdleTask+0x1a>
				taskYIELD();
     ee0:	4b0b      	ldr	r3, [pc, #44]	; (f10 <prvIdleTask+0x8c>)
     ee2:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     ee4:	4d07      	ldr	r5, [pc, #28]	; (f04 <prvIdleTask+0x80>)
     ee6:	e7da      	b.n	e9e <prvIdleTask+0x1a>
     ee8:	00000c45 	.word	0x00000c45
     eec:	20003bb0 	.word	0x20003bb0
     ef0:	00000d91 	.word	0x00000d91
     ef4:	20003ad4 	.word	0x20003ad4
     ef8:	0000018d 	.word	0x0000018d
     efc:	0000035d 	.word	0x0000035d
     f00:	20003b38 	.word	0x20003b38
     f04:	20003b48 	.word	0x20003b48
     f08:	000001a5 	.word	0x000001a5
     f0c:	000002e5 	.word	0x000002e5
     f10:	00000175 	.word	0x00000175

00000f14 <vTaskSwitchContext>:
{
     f14:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     f16:	4b24      	ldr	r3, [pc, #144]	; (fa8 <vTaskSwitchContext+0x94>)
     f18:	681b      	ldr	r3, [r3, #0]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d11e      	bne.n	f5c <vTaskSwitchContext+0x48>
		taskSELECT_HIGHEST_PRIORITY_TASK();
     f1e:	4b23      	ldr	r3, [pc, #140]	; (fac <vTaskSwitchContext+0x98>)
     f20:	681a      	ldr	r2, [r3, #0]
     f22:	0093      	lsls	r3, r2, #2
     f24:	189b      	adds	r3, r3, r2
     f26:	009b      	lsls	r3, r3, #2
     f28:	4a21      	ldr	r2, [pc, #132]	; (fb0 <vTaskSwitchContext+0x9c>)
     f2a:	589b      	ldr	r3, [r3, r2]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d119      	bne.n	f64 <vTaskSwitchContext+0x50>
     f30:	4b1e      	ldr	r3, [pc, #120]	; (fac <vTaskSwitchContext+0x98>)
     f32:	681b      	ldr	r3, [r3, #0]
     f34:	2b00      	cmp	r3, #0
     f36:	d00f      	beq.n	f58 <vTaskSwitchContext+0x44>
     f38:	4a1c      	ldr	r2, [pc, #112]	; (fac <vTaskSwitchContext+0x98>)
     f3a:	4c1d      	ldr	r4, [pc, #116]	; (fb0 <vTaskSwitchContext+0x9c>)
     f3c:	0010      	movs	r0, r2
     f3e:	6813      	ldr	r3, [r2, #0]
     f40:	3b01      	subs	r3, #1
     f42:	6013      	str	r3, [r2, #0]
     f44:	6811      	ldr	r1, [r2, #0]
     f46:	008b      	lsls	r3, r1, #2
     f48:	185b      	adds	r3, r3, r1
     f4a:	009b      	lsls	r3, r3, #2
     f4c:	591b      	ldr	r3, [r3, r4]
     f4e:	2b00      	cmp	r3, #0
     f50:	d108      	bne.n	f64 <vTaskSwitchContext+0x50>
     f52:	6803      	ldr	r3, [r0, #0]
     f54:	2b00      	cmp	r3, #0
     f56:	d1f2      	bne.n	f3e <vTaskSwitchContext+0x2a>
     f58:	b672      	cpsid	i
     f5a:	e7fe      	b.n	f5a <vTaskSwitchContext+0x46>
		xMissedYield = pdTRUE;
     f5c:	2201      	movs	r2, #1
     f5e:	4b15      	ldr	r3, [pc, #84]	; (fb4 <vTaskSwitchContext+0xa0>)
     f60:	601a      	str	r2, [r3, #0]
}
     f62:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
     f64:	4b11      	ldr	r3, [pc, #68]	; (fac <vTaskSwitchContext+0x98>)
     f66:	681a      	ldr	r2, [r3, #0]
     f68:	4811      	ldr	r0, [pc, #68]	; (fb0 <vTaskSwitchContext+0x9c>)
     f6a:	0093      	lsls	r3, r2, #2
     f6c:	1899      	adds	r1, r3, r2
     f6e:	0089      	lsls	r1, r1, #2
     f70:	1841      	adds	r1, r0, r1
     f72:	684c      	ldr	r4, [r1, #4]
     f74:	6864      	ldr	r4, [r4, #4]
     f76:	604c      	str	r4, [r1, #4]
     f78:	189b      	adds	r3, r3, r2
     f7a:	009b      	lsls	r3, r3, #2
     f7c:	3308      	adds	r3, #8
     f7e:	18c3      	adds	r3, r0, r3
     f80:	429c      	cmp	r4, r3
     f82:	d009      	beq.n	f98 <vTaskSwitchContext+0x84>
     f84:	0093      	lsls	r3, r2, #2
     f86:	189a      	adds	r2, r3, r2
     f88:	0092      	lsls	r2, r2, #2
     f8a:	4b09      	ldr	r3, [pc, #36]	; (fb0 <vTaskSwitchContext+0x9c>)
     f8c:	189a      	adds	r2, r3, r2
     f8e:	6853      	ldr	r3, [r2, #4]
     f90:	68da      	ldr	r2, [r3, #12]
     f92:	4b09      	ldr	r3, [pc, #36]	; (fb8 <vTaskSwitchContext+0xa4>)
     f94:	601a      	str	r2, [r3, #0]
}
     f96:	e7e4      	b.n	f62 <vTaskSwitchContext+0x4e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
     f98:	6860      	ldr	r0, [r4, #4]
     f9a:	0093      	lsls	r3, r2, #2
     f9c:	189b      	adds	r3, r3, r2
     f9e:	009b      	lsls	r3, r3, #2
     fa0:	4903      	ldr	r1, [pc, #12]	; (fb0 <vTaskSwitchContext+0x9c>)
     fa2:	18cb      	adds	r3, r1, r3
     fa4:	6058      	str	r0, [r3, #4]
     fa6:	e7ed      	b.n	f84 <vTaskSwitchContext+0x70>
     fa8:	20003b40 	.word	0x20003b40
     fac:	20003b4c 	.word	0x20003b4c
     fb0:	20003ad4 	.word	0x20003ad4
     fb4:	20003b7c 	.word	0x20003b7c
     fb8:	20003ac8 	.word	0x20003ac8

00000fbc <vTaskPlaceOnEventList>:
{
     fbc:	b570      	push	{r4, r5, r6, lr}
     fbe:	000c      	movs	r4, r1
	configASSERT( pxEventList );
     fc0:	2800      	cmp	r0, #0
     fc2:	d010      	beq.n	fe6 <vTaskPlaceOnEventList+0x2a>
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     fc4:	4d0c      	ldr	r5, [pc, #48]	; (ff8 <vTaskPlaceOnEventList+0x3c>)
     fc6:	6829      	ldr	r1, [r5, #0]
     fc8:	3118      	adds	r1, #24
     fca:	4b0c      	ldr	r3, [pc, #48]	; (ffc <vTaskPlaceOnEventList+0x40>)
     fcc:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     fce:	6828      	ldr	r0, [r5, #0]
     fd0:	3004      	adds	r0, #4
     fd2:	4b0b      	ldr	r3, [pc, #44]	; (1000 <vTaskPlaceOnEventList+0x44>)
     fd4:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
     fd6:	1c63      	adds	r3, r4, #1
     fd8:	d007      	beq.n	fea <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <vTaskPlaceOnEventList+0x48>)
     fdc:	6818      	ldr	r0, [r3, #0]
     fde:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     fe0:	4b09      	ldr	r3, [pc, #36]	; (1008 <vTaskPlaceOnEventList+0x4c>)
     fe2:	4798      	blx	r3
}
     fe4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
     fe6:	b672      	cpsid	i
     fe8:	e7fe      	b.n	fe8 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     fea:	4b03      	ldr	r3, [pc, #12]	; (ff8 <vTaskPlaceOnEventList+0x3c>)
     fec:	6819      	ldr	r1, [r3, #0]
     fee:	3104      	adds	r1, #4
     ff0:	4806      	ldr	r0, [pc, #24]	; (100c <vTaskPlaceOnEventList+0x50>)
     ff2:	4b07      	ldr	r3, [pc, #28]	; (1010 <vTaskPlaceOnEventList+0x54>)
     ff4:	4798      	blx	r3
     ff6:	e7f5      	b.n	fe4 <vTaskPlaceOnEventList+0x28>
     ff8:	20003ac8 	.word	0x20003ac8
     ffc:	00000327 	.word	0x00000327
    1000:	0000035d 	.word	0x0000035d
    1004:	20003bc4 	.word	0x20003bc4
    1008:	00000991 	.word	0x00000991
    100c:	20003b9c 	.word	0x20003b9c
    1010:	0000030b 	.word	0x0000030b

00001014 <vTaskPlaceOnEventListRestricted>:
	{
    1014:	b570      	push	{r4, r5, r6, lr}
    1016:	000d      	movs	r5, r1
		configASSERT( pxEventList );
    1018:	2800      	cmp	r0, #0
    101a:	d101      	bne.n	1020 <vTaskPlaceOnEventListRestricted+0xc>
    101c:	b672      	cpsid	i
    101e:	e7fe      	b.n	101e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    1020:	4c07      	ldr	r4, [pc, #28]	; (1040 <vTaskPlaceOnEventListRestricted+0x2c>)
    1022:	6821      	ldr	r1, [r4, #0]
    1024:	3118      	adds	r1, #24
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <vTaskPlaceOnEventListRestricted+0x30>)
    1028:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    102a:	6820      	ldr	r0, [r4, #0]
    102c:	3004      	adds	r0, #4
    102e:	4b06      	ldr	r3, [pc, #24]	; (1048 <vTaskPlaceOnEventListRestricted+0x34>)
    1030:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
    1032:	4b06      	ldr	r3, [pc, #24]	; (104c <vTaskPlaceOnEventListRestricted+0x38>)
    1034:	6818      	ldr	r0, [r3, #0]
    1036:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    1038:	4b05      	ldr	r3, [pc, #20]	; (1050 <vTaskPlaceOnEventListRestricted+0x3c>)
    103a:	4798      	blx	r3
	}
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	20003ac8 	.word	0x20003ac8
    1044:	0000030b 	.word	0x0000030b
    1048:	0000035d 	.word	0x0000035d
    104c:	20003bc4 	.word	0x20003bc4
    1050:	00000991 	.word	0x00000991

00001054 <xTaskRemoveFromEventList>:
{
    1054:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1056:	68c3      	ldr	r3, [r0, #12]
    1058:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    105a:	2c00      	cmp	r4, #0
    105c:	d023      	beq.n	10a6 <xTaskRemoveFromEventList+0x52>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    105e:	0025      	movs	r5, r4
    1060:	3518      	adds	r5, #24
    1062:	0028      	movs	r0, r5
    1064:	4b13      	ldr	r3, [pc, #76]	; (10b4 <xTaskRemoveFromEventList+0x60>)
    1066:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1068:	4b13      	ldr	r3, [pc, #76]	; (10b8 <xTaskRemoveFromEventList+0x64>)
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	2b00      	cmp	r3, #0
    106e:	d11c      	bne.n	10aa <xTaskRemoveFromEventList+0x56>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1070:	1d25      	adds	r5, r4, #4
    1072:	0028      	movs	r0, r5
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <xTaskRemoveFromEventList+0x60>)
    1076:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    1078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    107a:	4a10      	ldr	r2, [pc, #64]	; (10bc <xTaskRemoveFromEventList+0x68>)
    107c:	6812      	ldr	r2, [r2, #0]
    107e:	4293      	cmp	r3, r2
    1080:	d901      	bls.n	1086 <xTaskRemoveFromEventList+0x32>
    1082:	4a0e      	ldr	r2, [pc, #56]	; (10bc <xTaskRemoveFromEventList+0x68>)
    1084:	6013      	str	r3, [r2, #0]
    1086:	0098      	lsls	r0, r3, #2
    1088:	18c0      	adds	r0, r0, r3
    108a:	0080      	lsls	r0, r0, #2
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <xTaskRemoveFromEventList+0x6c>)
    108e:	1818      	adds	r0, r3, r0
    1090:	0029      	movs	r1, r5
    1092:	4b0c      	ldr	r3, [pc, #48]	; (10c4 <xTaskRemoveFromEventList+0x70>)
    1094:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1096:	4b0c      	ldr	r3, [pc, #48]	; (10c8 <xTaskRemoveFromEventList+0x74>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    109e:	2000      	movs	r0, #0
    10a0:	429a      	cmp	r2, r3
    10a2:	4140      	adcs	r0, r0
}
    10a4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    10a6:	b672      	cpsid	i
    10a8:	e7fe      	b.n	10a8 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    10aa:	0029      	movs	r1, r5
    10ac:	4807      	ldr	r0, [pc, #28]	; (10cc <xTaskRemoveFromEventList+0x78>)
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <xTaskRemoveFromEventList+0x70>)
    10b0:	4798      	blx	r3
    10b2:	e7f0      	b.n	1096 <xTaskRemoveFromEventList+0x42>
    10b4:	0000035d 	.word	0x0000035d
    10b8:	20003b40 	.word	0x20003b40
    10bc:	20003b4c 	.word	0x20003b4c
    10c0:	20003ad4 	.word	0x20003ad4
    10c4:	0000030b 	.word	0x0000030b
    10c8:	20003ac8 	.word	0x20003ac8
    10cc:	20003b84 	.word	0x20003b84

000010d0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
    10d0:	2800      	cmp	r0, #0
    10d2:	d006      	beq.n	10e2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <vTaskSetTimeOutState+0x18>)
    10d6:	681b      	ldr	r3, [r3, #0]
    10d8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <vTaskSetTimeOutState+0x1c>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	6043      	str	r3, [r0, #4]
}
    10e0:	4770      	bx	lr
	configASSERT( pxTimeOut );
    10e2:	b672      	cpsid	i
    10e4:	e7fe      	b.n	10e4 <vTaskSetTimeOutState+0x14>
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	20003b80 	.word	0x20003b80
    10ec:	20003bc4 	.word	0x20003bc4

000010f0 <xTaskCheckForTimeOut>:
{
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	0004      	movs	r4, r0
    10f4:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
    10f6:	2800      	cmp	r0, #0
    10f8:	d01c      	beq.n	1134 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    10fa:	2900      	cmp	r1, #0
    10fc:	d01c      	beq.n	1138 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
    10fe:	4b15      	ldr	r3, [pc, #84]	; (1154 <xTaskCheckForTimeOut+0x64>)
    1100:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
    1102:	6833      	ldr	r3, [r6, #0]
    1104:	1c5a      	adds	r2, r3, #1
    1106:	d022      	beq.n	114e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1108:	4a13      	ldr	r2, [pc, #76]	; (1158 <xTaskCheckForTimeOut+0x68>)
    110a:	6812      	ldr	r2, [r2, #0]
    110c:	6821      	ldr	r1, [r4, #0]
    110e:	4291      	cmp	r1, r2
    1110:	d005      	beq.n	111e <xTaskCheckForTimeOut+0x2e>
    1112:	4a12      	ldr	r2, [pc, #72]	; (115c <xTaskCheckForTimeOut+0x6c>)
    1114:	6812      	ldr	r2, [r2, #0]
			xReturn = pdTRUE;
    1116:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1118:	6861      	ldr	r1, [r4, #4]
    111a:	4291      	cmp	r1, r2
    111c:	d906      	bls.n	112c <xTaskCheckForTimeOut+0x3c>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    111e:	4a0f      	ldr	r2, [pc, #60]	; (115c <xTaskCheckForTimeOut+0x6c>)
    1120:	6811      	ldr	r1, [r2, #0]
    1122:	6860      	ldr	r0, [r4, #4]
    1124:	1a09      	subs	r1, r1, r0
			xReturn = pdTRUE;
    1126:	2501      	movs	r5, #1
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1128:	428b      	cmp	r3, r1
    112a:	d807      	bhi.n	113c <xTaskCheckForTimeOut+0x4c>
	taskEXIT_CRITICAL();
    112c:	4b0c      	ldr	r3, [pc, #48]	; (1160 <xTaskCheckForTimeOut+0x70>)
    112e:	4798      	blx	r3
}
    1130:	0028      	movs	r0, r5
    1132:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    1134:	b672      	cpsid	i
    1136:	e7fe      	b.n	1136 <xTaskCheckForTimeOut+0x46>
	configASSERT( pxTicksToWait );
    1138:	b672      	cpsid	i
    113a:	e7fe      	b.n	113a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    113c:	6812      	ldr	r2, [r2, #0]
    113e:	1a12      	subs	r2, r2, r0
    1140:	1a9b      	subs	r3, r3, r2
    1142:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1144:	0020      	movs	r0, r4
    1146:	4b07      	ldr	r3, [pc, #28]	; (1164 <xTaskCheckForTimeOut+0x74>)
    1148:	4798      	blx	r3
			xReturn = pdFALSE;
    114a:	2500      	movs	r5, #0
    114c:	e7ee      	b.n	112c <xTaskCheckForTimeOut+0x3c>
				xReturn = pdFALSE;
    114e:	2500      	movs	r5, #0
    1150:	e7ec      	b.n	112c <xTaskCheckForTimeOut+0x3c>
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	0000018d 	.word	0x0000018d
    1158:	20003b80 	.word	0x20003b80
    115c:	20003bc4 	.word	0x20003bc4
    1160:	000001a5 	.word	0x000001a5
    1164:	000010d1 	.word	0x000010d1

00001168 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
    1168:	2201      	movs	r2, #1
    116a:	4b01      	ldr	r3, [pc, #4]	; (1170 <vTaskMissedYield+0x8>)
    116c:	601a      	str	r2, [r3, #0]
}
    116e:	4770      	bx	lr
    1170:	20003b7c 	.word	0x20003b7c

00001174 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1174:	4b01      	ldr	r3, [pc, #4]	; (117c <xTaskGetCurrentTaskHandle+0x8>)
    1176:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    1178:	4770      	bx	lr
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	20003ac8 	.word	0x20003ac8

00001180 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
    1180:	4b05      	ldr	r3, [pc, #20]	; (1198 <xTaskGetSchedulerState+0x18>)
    1182:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1184:	2000      	movs	r0, #0
		if( xSchedulerRunning == pdFALSE )
    1186:	2b00      	cmp	r3, #0
    1188:	d004      	beq.n	1194 <xTaskGetSchedulerState+0x14>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <xTaskGetSchedulerState+0x1c>)
    118c:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    118e:	1e43      	subs	r3, r0, #1
    1190:	4198      	sbcs	r0, r3
    1192:	3001      	adds	r0, #1
			}
		}

		return xReturn;
	}
    1194:	4770      	bx	lr
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	20003b98 	.word	0x20003b98
    119c:	20003b40 	.word	0x20003b40

000011a0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	1e04      	subs	r4, r0, #0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    11a4:	d017      	beq.n	11d6 <vTaskPriorityInherit+0x36>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    11a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    11a8:	4b17      	ldr	r3, [pc, #92]	; (1208 <vTaskPriorityInherit+0x68>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11ae:	429a      	cmp	r2, r3
    11b0:	d211      	bcs.n	11d6 <vTaskPriorityInherit+0x36>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    11b2:	4b15      	ldr	r3, [pc, #84]	; (1208 <vTaskPriorityInherit+0x68>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    11b8:	2305      	movs	r3, #5
    11ba:	1a5b      	subs	r3, r3, r1
    11bc:	6183      	str	r3, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    11be:	0093      	lsls	r3, r2, #2
    11c0:	189b      	adds	r3, r3, r2
    11c2:	009b      	lsls	r3, r3, #2
    11c4:	4a11      	ldr	r2, [pc, #68]	; (120c <vTaskPriorityInherit+0x6c>)
    11c6:	18d3      	adds	r3, r2, r3
    11c8:	6942      	ldr	r2, [r0, #20]
    11ca:	429a      	cmp	r2, r3
    11cc:	d004      	beq.n	11d8 <vTaskPriorityInherit+0x38>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    11ce:	4b0e      	ldr	r3, [pc, #56]	; (1208 <vTaskPriorityInherit+0x68>)
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11d4:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    11d6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    11d8:	1d05      	adds	r5, r0, #4
    11da:	0028      	movs	r0, r5
    11dc:	4b0c      	ldr	r3, [pc, #48]	; (1210 <vTaskPriorityInherit+0x70>)
    11de:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    11e0:	4b09      	ldr	r3, [pc, #36]	; (1208 <vTaskPriorityInherit+0x68>)
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11e6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
    11e8:	4a0a      	ldr	r2, [pc, #40]	; (1214 <vTaskPriorityInherit+0x74>)
    11ea:	6812      	ldr	r2, [r2, #0]
    11ec:	4293      	cmp	r3, r2
    11ee:	d901      	bls.n	11f4 <vTaskPriorityInherit+0x54>
    11f0:	4a08      	ldr	r2, [pc, #32]	; (1214 <vTaskPriorityInherit+0x74>)
    11f2:	6013      	str	r3, [r2, #0]
    11f4:	0098      	lsls	r0, r3, #2
    11f6:	18c0      	adds	r0, r0, r3
    11f8:	0080      	lsls	r0, r0, #2
    11fa:	4b04      	ldr	r3, [pc, #16]	; (120c <vTaskPriorityInherit+0x6c>)
    11fc:	1818      	adds	r0, r3, r0
    11fe:	0029      	movs	r1, r5
    1200:	4b05      	ldr	r3, [pc, #20]	; (1218 <vTaskPriorityInherit+0x78>)
    1202:	4798      	blx	r3
    1204:	e7e7      	b.n	11d6 <vTaskPriorityInherit+0x36>
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	20003ac8 	.word	0x20003ac8
    120c:	20003ad4 	.word	0x20003ad4
    1210:	0000035d 	.word	0x0000035d
    1214:	20003b4c 	.word	0x20003b4c
    1218:	0000030b 	.word	0x0000030b

0000121c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	1e04      	subs	r4, r0, #0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1220:	d01a      	beq.n	1258 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1224:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    1226:	4293      	cmp	r3, r2
    1228:	d016      	beq.n	1258 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    122a:	1d05      	adds	r5, r0, #4
    122c:	0028      	movs	r0, r5
    122e:	4b0b      	ldr	r3, [pc, #44]	; (125c <vTaskPriorityDisinherit+0x40>)
    1230:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1232:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1234:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1236:	2305      	movs	r3, #5
    1238:	1a1b      	subs	r3, r3, r0
    123a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <vTaskPriorityDisinherit+0x44>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	4298      	cmp	r0, r3
    1242:	d901      	bls.n	1248 <vTaskPriorityDisinherit+0x2c>
    1244:	4b06      	ldr	r3, [pc, #24]	; (1260 <vTaskPriorityDisinherit+0x44>)
    1246:	6018      	str	r0, [r3, #0]
    1248:	0083      	lsls	r3, r0, #2
    124a:	1818      	adds	r0, r3, r0
    124c:	0080      	lsls	r0, r0, #2
    124e:	4b05      	ldr	r3, [pc, #20]	; (1264 <vTaskPriorityDisinherit+0x48>)
    1250:	1818      	adds	r0, r3, r0
    1252:	0029      	movs	r1, r5
    1254:	4b04      	ldr	r3, [pc, #16]	; (1268 <vTaskPriorityDisinherit+0x4c>)
    1256:	4798      	blx	r3
			}
		}
	}
    1258:	bd70      	pop	{r4, r5, r6, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	0000035d 	.word	0x0000035d
    1260:	20003b4c 	.word	0x20003b4c
    1264:	20003ad4 	.word	0x20003ad4
    1268:	0000030b 	.word	0x0000030b

0000126c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
    126c:	b510      	push	{r4, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    126e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1270:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    1272:	4291      	cmp	r1, r2
    1274:	d80b      	bhi.n	128e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    1276:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1278:	2401      	movs	r4, #1
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    127a:	6983      	ldr	r3, [r0, #24]
    127c:	429a      	cmp	r2, r3
    127e:	d211      	bcs.n	12a4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1280:	1d01      	adds	r1, r0, #4
    1282:	4b09      	ldr	r3, [pc, #36]	; (12a8 <prvInsertTimerInActiveList+0x3c>)
    1284:	6818      	ldr	r0, [r3, #0]
    1286:	4b09      	ldr	r3, [pc, #36]	; (12ac <prvInsertTimerInActiveList+0x40>)
    1288:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
    128a:	2400      	movs	r4, #0
    128c:	e00a      	b.n	12a4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    128e:	429a      	cmp	r2, r3
    1290:	d202      	bcs.n	1298 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1292:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1294:	4299      	cmp	r1, r3
    1296:	d205      	bcs.n	12a4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1298:	1d01      	adds	r1, r0, #4
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <prvInsertTimerInActiveList+0x44>)
    129c:	6818      	ldr	r0, [r3, #0]
    129e:	4b03      	ldr	r3, [pc, #12]	; (12ac <prvInsertTimerInActiveList+0x40>)
    12a0:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
    12a2:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    12a4:	0020      	movs	r0, r4
    12a6:	bd10      	pop	{r4, pc}
    12a8:	20003bcc 	.word	0x20003bcc
    12ac:	00000327 	.word	0x00000327
    12b0:	20003bc8 	.word	0x20003bc8

000012b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    12b4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    12b6:	4b0e      	ldr	r3, [pc, #56]	; (12f0 <prvCheckForValidListAndQueue+0x3c>)
    12b8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    12ba:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <prvCheckForValidListAndQueue+0x40>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	2b00      	cmp	r3, #0
    12c0:	d002      	beq.n	12c8 <prvCheckForValidListAndQueue+0x14>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
    12c2:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <prvCheckForValidListAndQueue+0x44>)
    12c4:	4798      	blx	r3
}
    12c6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    12c8:	4d0c      	ldr	r5, [pc, #48]	; (12fc <prvCheckForValidListAndQueue+0x48>)
    12ca:	0028      	movs	r0, r5
    12cc:	4e0c      	ldr	r6, [pc, #48]	; (1300 <prvCheckForValidListAndQueue+0x4c>)
    12ce:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    12d0:	4c0c      	ldr	r4, [pc, #48]	; (1304 <prvCheckForValidListAndQueue+0x50>)
    12d2:	0020      	movs	r0, r4
    12d4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    12d6:	4b0c      	ldr	r3, [pc, #48]	; (1308 <prvCheckForValidListAndQueue+0x54>)
    12d8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    12da:	4b0c      	ldr	r3, [pc, #48]	; (130c <prvCheckForValidListAndQueue+0x58>)
    12dc:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
    12de:	2200      	movs	r2, #0
    12e0:	210c      	movs	r1, #12
    12e2:	2002      	movs	r0, #2
    12e4:	4b0a      	ldr	r3, [pc, #40]	; (1310 <prvCheckForValidListAndQueue+0x5c>)
    12e6:	4798      	blx	r3
    12e8:	4b02      	ldr	r3, [pc, #8]	; (12f4 <prvCheckForValidListAndQueue+0x40>)
    12ea:	6018      	str	r0, [r3, #0]
    12ec:	e7e9      	b.n	12c2 <prvCheckForValidListAndQueue+0xe>
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	0000018d 	.word	0x0000018d
    12f4:	20003bfc 	.word	0x20003bfc
    12f8:	000001a5 	.word	0x000001a5
    12fc:	20003bd0 	.word	0x20003bd0
    1300:	000002ef 	.word	0x000002ef
    1304:	20003be4 	.word	0x20003be4
    1308:	20003bc8 	.word	0x20003bc8
    130c:	20003bcc 	.word	0x20003bcc
    1310:	00000595 	.word	0x00000595

00001314 <xTimerCreateTimerTask>:
{
    1314:	b510      	push	{r4, lr}
    1316:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    1318:	4b0b      	ldr	r3, [pc, #44]	; (1348 <xTimerCreateTimerTask+0x34>)
    131a:	4798      	blx	r3
	if( xTimerQueue != NULL )
    131c:	4b0b      	ldr	r3, [pc, #44]	; (134c <xTimerCreateTimerTask+0x38>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	2b00      	cmp	r3, #0
    1322:	d00f      	beq.n	1344 <xTimerCreateTimerTask+0x30>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1324:	2300      	movs	r3, #0
    1326:	9303      	str	r3, [sp, #12]
    1328:	9302      	str	r3, [sp, #8]
    132a:	9301      	str	r3, [sp, #4]
    132c:	3302      	adds	r3, #2
    132e:	9300      	str	r3, [sp, #0]
    1330:	2300      	movs	r3, #0
    1332:	2250      	movs	r2, #80	; 0x50
    1334:	4906      	ldr	r1, [pc, #24]	; (1350 <xTimerCreateTimerTask+0x3c>)
    1336:	4807      	ldr	r0, [pc, #28]	; (1354 <xTimerCreateTimerTask+0x40>)
    1338:	4c07      	ldr	r4, [pc, #28]	; (1358 <xTimerCreateTimerTask+0x44>)
    133a:	47a0      	blx	r4
	configASSERT( xReturn );
    133c:	2800      	cmp	r0, #0
    133e:	d001      	beq.n	1344 <xTimerCreateTimerTask+0x30>
}
    1340:	b004      	add	sp, #16
    1342:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    1344:	b672      	cpsid	i
    1346:	e7fe      	b.n	1346 <xTimerCreateTimerTask+0x32>
    1348:	000012b5 	.word	0x000012b5
    134c:	20003bfc 	.word	0x20003bfc
    1350:	00001c88 	.word	0x00001c88
    1354:	000014c9 	.word	0x000014c9
    1358:	000009e9 	.word	0x000009e9

0000135c <xTimerCreate>:
{
    135c:	b5f0      	push	{r4, r5, r6, r7, lr}
    135e:	46c6      	mov	lr, r8
    1360:	b500      	push	{lr}
    1362:	4680      	mov	r8, r0
    1364:	000d      	movs	r5, r1
    1366:	0017      	movs	r7, r2
    1368:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
    136a:	2900      	cmp	r1, #0
    136c:	d101      	bne.n	1372 <xTimerCreate+0x16>
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
    136e:	b672      	cpsid	i
    1370:	e7fe      	b.n	1370 <xTimerCreate+0x14>
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
    1372:	2028      	movs	r0, #40	; 0x28
    1374:	4b09      	ldr	r3, [pc, #36]	; (139c <xTimerCreate+0x40>)
    1376:	4798      	blx	r3
    1378:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    137a:	d00b      	beq.n	1394 <xTimerCreate+0x38>
			prvCheckForValidListAndQueue();
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <xTimerCreate+0x44>)
    137e:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
    1380:	4643      	mov	r3, r8
    1382:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1384:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    1386:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    1388:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    138a:	9b06      	ldr	r3, [sp, #24]
    138c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    138e:	1d20      	adds	r0, r4, #4
    1390:	4b04      	ldr	r3, [pc, #16]	; (13a4 <xTimerCreate+0x48>)
    1392:	4798      	blx	r3
}
    1394:	0020      	movs	r0, r4
    1396:	bc04      	pop	{r2}
    1398:	4690      	mov	r8, r2
    139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    139c:	00000279 	.word	0x00000279
    13a0:	000012b5 	.word	0x000012b5
    13a4:	00000305 	.word	0x00000305

000013a8 <xTimerGenericCommand>:
{
    13a8:	b530      	push	{r4, r5, lr}
    13aa:	b085      	sub	sp, #20
    13ac:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
    13ae:	4b13      	ldr	r3, [pc, #76]	; (13fc <xTimerGenericCommand+0x54>)
    13b0:	681c      	ldr	r4, [r3, #0]
    13b2:	2c00      	cmp	r4, #0
    13b4:	d020      	beq.n	13f8 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
    13b6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
    13b8:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
    13ba:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
    13bc:	2d00      	cmp	r5, #0
    13be:	d007      	beq.n	13d0 <xTimerGenericCommand+0x28>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    13c0:	2300      	movs	r3, #0
    13c2:	002a      	movs	r2, r5
    13c4:	a901      	add	r1, sp, #4
    13c6:	0020      	movs	r0, r4
    13c8:	4c0d      	ldr	r4, [pc, #52]	; (1400 <xTimerGenericCommand+0x58>)
    13ca:	47a0      	blx	r4
}
    13cc:	b005      	add	sp, #20
    13ce:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    13d0:	4b0c      	ldr	r3, [pc, #48]	; (1404 <xTimerGenericCommand+0x5c>)
    13d2:	4798      	blx	r3
    13d4:	2801      	cmp	r0, #1
    13d6:	d007      	beq.n	13e8 <xTimerGenericCommand+0x40>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    13d8:	4b08      	ldr	r3, [pc, #32]	; (13fc <xTimerGenericCommand+0x54>)
    13da:	6818      	ldr	r0, [r3, #0]
    13dc:	2300      	movs	r3, #0
    13de:	2200      	movs	r2, #0
    13e0:	a901      	add	r1, sp, #4
    13e2:	4c09      	ldr	r4, [pc, #36]	; (1408 <xTimerGenericCommand+0x60>)
    13e4:	47a0      	blx	r4
    13e6:	e7f1      	b.n	13cc <xTimerGenericCommand+0x24>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <xTimerGenericCommand+0x54>)
    13ea:	6818      	ldr	r0, [r3, #0]
    13ec:	2300      	movs	r3, #0
    13ee:	9a08      	ldr	r2, [sp, #32]
    13f0:	a901      	add	r1, sp, #4
    13f2:	4c05      	ldr	r4, [pc, #20]	; (1408 <xTimerGenericCommand+0x60>)
    13f4:	47a0      	blx	r4
    13f6:	e7e9      	b.n	13cc <xTimerGenericCommand+0x24>
portBASE_TYPE xReturn = pdFAIL;
    13f8:	2000      	movs	r0, #0
	return xReturn;
    13fa:	e7e7      	b.n	13cc <xTimerGenericCommand+0x24>
    13fc:	20003bfc 	.word	0x20003bfc
    1400:	00000731 	.word	0x00000731
    1404:	00001181 	.word	0x00001181
    1408:	000005e5 	.word	0x000005e5

0000140c <prvSampleTimeNow>:
{
    140c:	b5f0      	push	{r4, r5, r6, r7, lr}
    140e:	46d6      	mov	lr, sl
    1410:	464f      	mov	r7, r9
    1412:	4646      	mov	r6, r8
    1414:	b5c0      	push	{r6, r7, lr}
    1416:	b082      	sub	sp, #8
    1418:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
    141a:	4b24      	ldr	r3, [pc, #144]	; (14ac <prvSampleTimeNow+0xa0>)
    141c:	4798      	blx	r3
    141e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    1420:	4b23      	ldr	r3, [pc, #140]	; (14b0 <prvSampleTimeNow+0xa4>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	4298      	cmp	r0, r3
    1426:	d317      	bcc.n	1458 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    1428:	2300      	movs	r3, #0
    142a:	464a      	mov	r2, r9
    142c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    142e:	4b20      	ldr	r3, [pc, #128]	; (14b0 <prvSampleTimeNow+0xa4>)
    1430:	4642      	mov	r2, r8
    1432:	601a      	str	r2, [r3, #0]
}
    1434:	4640      	mov	r0, r8
    1436:	b002      	add	sp, #8
    1438:	bc1c      	pop	{r2, r3, r4}
    143a:	4690      	mov	r8, r2
    143c:	4699      	mov	r9, r3
    143e:	46a2      	mov	sl, r4
    1440:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    1442:	2300      	movs	r3, #0
    1444:	9300      	str	r3, [sp, #0]
    1446:	4652      	mov	r2, sl
    1448:	2100      	movs	r1, #0
    144a:	0020      	movs	r0, r4
    144c:	4c19      	ldr	r4, [pc, #100]	; (14b4 <prvSampleTimeNow+0xa8>)
    144e:	47a0      	blx	r4
				configASSERT( xResult );
    1450:	2800      	cmp	r0, #0
    1452:	d103      	bne.n	145c <prvSampleTimeNow+0x50>
    1454:	b672      	cpsid	i
    1456:	e7fe      	b.n	1456 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1458:	4e17      	ldr	r6, [pc, #92]	; (14b8 <prvSampleTimeNow+0xac>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
    145a:	4f18      	ldr	r7, [pc, #96]	; (14bc <prvSampleTimeNow+0xb0>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    145c:	6833      	ldr	r3, [r6, #0]
    145e:	681a      	ldr	r2, [r3, #0]
    1460:	2a00      	cmp	r2, #0
    1462:	d019      	beq.n	1498 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1464:	68da      	ldr	r2, [r3, #12]
    1466:	6812      	ldr	r2, [r2, #0]
    1468:	4692      	mov	sl, r2
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    146a:	68db      	ldr	r3, [r3, #12]
    146c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
    146e:	1d25      	adds	r5, r4, #4
    1470:	0028      	movs	r0, r5
    1472:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    1474:	0020      	movs	r0, r4
    1476:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1478:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    147a:	69e3      	ldr	r3, [r4, #28]
    147c:	2b01      	cmp	r3, #1
    147e:	d1ed      	bne.n	145c <prvSampleTimeNow+0x50>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1480:	69a3      	ldr	r3, [r4, #24]
    1482:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    1484:	459a      	cmp	sl, r3
    1486:	d2dc      	bcs.n	1442 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1488:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    148a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    148c:	4b0a      	ldr	r3, [pc, #40]	; (14b8 <prvSampleTimeNow+0xac>)
    148e:	6818      	ldr	r0, [r3, #0]
    1490:	0029      	movs	r1, r5
    1492:	4b0b      	ldr	r3, [pc, #44]	; (14c0 <prvSampleTimeNow+0xb4>)
    1494:	4798      	blx	r3
    1496:	e7e1      	b.n	145c <prvSampleTimeNow+0x50>
	pxCurrentTimerList = pxOverflowTimerList;
    1498:	4a0a      	ldr	r2, [pc, #40]	; (14c4 <prvSampleTimeNow+0xb8>)
    149a:	4907      	ldr	r1, [pc, #28]	; (14b8 <prvSampleTimeNow+0xac>)
    149c:	6810      	ldr	r0, [r2, #0]
    149e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    14a0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    14a2:	2301      	movs	r3, #1
    14a4:	464a      	mov	r2, r9
    14a6:	6013      	str	r3, [r2, #0]
    14a8:	e7c1      	b.n	142e <prvSampleTimeNow+0x22>
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00000c55 	.word	0x00000c55
    14b0:	20003bf8 	.word	0x20003bf8
    14b4:	000013a9 	.word	0x000013a9
    14b8:	20003bc8 	.word	0x20003bc8
    14bc:	0000035d 	.word	0x0000035d
    14c0:	00000327 	.word	0x00000327
    14c4:	20003bcc 	.word	0x20003bcc

000014c8 <prvTimerTask>:
{
    14c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ca:	b087      	sub	sp, #28
			uxListRemove( &( pxTimer->xTimerListItem ) );
    14cc:	4f4e      	ldr	r7, [pc, #312]	; (1608 <prvTimerTask+0x140>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    14ce:	4b4f      	ldr	r3, [pc, #316]	; (160c <prvTimerTask+0x144>)
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    14d4:	2a00      	cmp	r2, #0
    14d6:	d100      	bne.n	14da <prvTimerTask+0x12>
    14d8:	e087      	b.n	15ea <prvTimerTask+0x122>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    14da:	68db      	ldr	r3, [r3, #12]
    14dc:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    14de:	4b4c      	ldr	r3, [pc, #304]	; (1610 <prvTimerTask+0x148>)
    14e0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    14e2:	a803      	add	r0, sp, #12
    14e4:	4b4b      	ldr	r3, [pc, #300]	; (1614 <prvTimerTask+0x14c>)
    14e6:	4798      	blx	r3
    14e8:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    14ea:	9b03      	ldr	r3, [sp, #12]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d000      	beq.n	14f2 <prvTimerTask+0x2a>
    14f0:	e086      	b.n	1600 <prvTimerTask+0x138>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    14f2:	42a0      	cmp	r0, r4
    14f4:	d20c      	bcs.n	1510 <prvTimerTask+0x48>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    14f6:	1b61      	subs	r1, r4, r5
    14f8:	4b47      	ldr	r3, [pc, #284]	; (1618 <prvTimerTask+0x150>)
    14fa:	6818      	ldr	r0, [r3, #0]
    14fc:	4b47      	ldr	r3, [pc, #284]	; (161c <prvTimerTask+0x154>)
    14fe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1500:	4b47      	ldr	r3, [pc, #284]	; (1620 <prvTimerTask+0x158>)
    1502:	4798      	blx	r3
    1504:	2800      	cmp	r0, #0
    1506:	d101      	bne.n	150c <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
    1508:	4b46      	ldr	r3, [pc, #280]	; (1624 <prvTimerTask+0x15c>)
    150a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    150c:	4e42      	ldr	r6, [pc, #264]	; (1618 <prvTimerTask+0x150>)
    150e:	e033      	b.n	1578 <prvTimerTask+0xb0>
				xTaskResumeAll();
    1510:	4b43      	ldr	r3, [pc, #268]	; (1620 <prvTimerTask+0x158>)
    1512:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1514:	4b3d      	ldr	r3, [pc, #244]	; (160c <prvTimerTask+0x144>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	68db      	ldr	r3, [r3, #12]
    151a:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
    151c:	1d30      	adds	r0, r6, #4
    151e:	4b3a      	ldr	r3, [pc, #232]	; (1608 <prvTimerTask+0x140>)
    1520:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    1522:	69f3      	ldr	r3, [r6, #28]
    1524:	2b01      	cmp	r3, #1
    1526:	d113      	bne.n	1550 <prvTimerTask+0x88>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1528:	69b3      	ldr	r3, [r6, #24]
    152a:	18e1      	adds	r1, r4, r3
    152c:	0023      	movs	r3, r4
    152e:	002a      	movs	r2, r5
    1530:	0030      	movs	r0, r6
    1532:	4d3d      	ldr	r5, [pc, #244]	; (1628 <prvTimerTask+0x160>)
    1534:	47a8      	blx	r5
    1536:	2801      	cmp	r0, #1
    1538:	d10a      	bne.n	1550 <prvTimerTask+0x88>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    153a:	2300      	movs	r3, #0
    153c:	9300      	str	r3, [sp, #0]
    153e:	0022      	movs	r2, r4
    1540:	2100      	movs	r1, #0
    1542:	0030      	movs	r0, r6
    1544:	4c39      	ldr	r4, [pc, #228]	; (162c <prvTimerTask+0x164>)
    1546:	47a0      	blx	r4
			configASSERT( xResult );
    1548:	2800      	cmp	r0, #0
    154a:	d101      	bne.n	1550 <prvTimerTask+0x88>
    154c:	b672      	cpsid	i
    154e:	e7fe      	b.n	154e <prvTimerTask+0x86>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    1550:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1552:	0030      	movs	r0, r6
    1554:	4798      	blx	r3
    1556:	e7d9      	b.n	150c <prvTimerTask+0x44>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
    1558:	9904      	ldr	r1, [sp, #16]
    155a:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    155c:	2900      	cmp	r1, #0
    155e:	d006      	beq.n	156e <prvTimerTask+0xa6>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1560:	1841      	adds	r1, r0, r1
    1562:	0003      	movs	r3, r0
    1564:	0002      	movs	r2, r0
    1566:	0020      	movs	r0, r4
    1568:	4c2f      	ldr	r4, [pc, #188]	; (1628 <prvTimerTask+0x160>)
    156a:	47a0      	blx	r4
    156c:	e004      	b.n	1578 <prvTimerTask+0xb0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    156e:	b672      	cpsid	i
    1570:	e7fe      	b.n	1570 <prvTimerTask+0xa8>
				vPortFree( pxTimer );
    1572:	0020      	movs	r0, r4
    1574:	4b2e      	ldr	r3, [pc, #184]	; (1630 <prvTimerTask+0x168>)
    1576:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    1578:	4d2e      	ldr	r5, [pc, #184]	; (1634 <prvTimerTask+0x16c>)
    157a:	2300      	movs	r3, #0
    157c:	2200      	movs	r2, #0
    157e:	a903      	add	r1, sp, #12
    1580:	6830      	ldr	r0, [r6, #0]
    1582:	47a8      	blx	r5
    1584:	2800      	cmp	r0, #0
    1586:	d0a2      	beq.n	14ce <prvTimerTask+0x6>
		pxTimer = xMessage.pxTimer;
    1588:	9c05      	ldr	r4, [sp, #20]
		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    158a:	6963      	ldr	r3, [r4, #20]
    158c:	2b00      	cmp	r3, #0
    158e:	d001      	beq.n	1594 <prvTimerTask+0xcc>
			uxListRemove( &( pxTimer->xTimerListItem ) );
    1590:	1d20      	adds	r0, r4, #4
    1592:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1594:	a802      	add	r0, sp, #8
    1596:	4b1f      	ldr	r3, [pc, #124]	; (1614 <prvTimerTask+0x14c>)
    1598:	4798      	blx	r3
		switch( xMessage.xMessageID )
    159a:	9b03      	ldr	r3, [sp, #12]
    159c:	2b02      	cmp	r3, #2
    159e:	d0db      	beq.n	1558 <prvTimerTask+0x90>
    15a0:	2b03      	cmp	r3, #3
    15a2:	d0e6      	beq.n	1572 <prvTimerTask+0xaa>
    15a4:	2b00      	cmp	r3, #0
    15a6:	d1e8      	bne.n	157a <prvTimerTask+0xb2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
    15a8:	9b04      	ldr	r3, [sp, #16]
    15aa:	69a2      	ldr	r2, [r4, #24]
    15ac:	4694      	mov	ip, r2
    15ae:	4463      	add	r3, ip
    15b0:	0019      	movs	r1, r3
    15b2:	9b04      	ldr	r3, [sp, #16]
    15b4:	0002      	movs	r2, r0
    15b6:	0020      	movs	r0, r4
    15b8:	4d1b      	ldr	r5, [pc, #108]	; (1628 <prvTimerTask+0x160>)
    15ba:	47a8      	blx	r5
    15bc:	2801      	cmp	r0, #1
    15be:	d1db      	bne.n	1578 <prvTimerTask+0xb0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    15c0:	0020      	movs	r0, r4
    15c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15c4:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    15c6:	69e3      	ldr	r3, [r4, #28]
    15c8:	2b01      	cmp	r3, #1
    15ca:	d1d5      	bne.n	1578 <prvTimerTask+0xb0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    15cc:	9b04      	ldr	r3, [sp, #16]
    15ce:	69a1      	ldr	r1, [r4, #24]
    15d0:	468c      	mov	ip, r1
    15d2:	4463      	add	r3, ip
    15d4:	001a      	movs	r2, r3
    15d6:	2300      	movs	r3, #0
    15d8:	9300      	str	r3, [sp, #0]
    15da:	2100      	movs	r1, #0
    15dc:	0020      	movs	r0, r4
    15de:	4c13      	ldr	r4, [pc, #76]	; (162c <prvTimerTask+0x164>)
    15e0:	47a0      	blx	r4
						configASSERT( xResult );
    15e2:	2800      	cmp	r0, #0
    15e4:	d1c8      	bne.n	1578 <prvTimerTask+0xb0>
    15e6:	b672      	cpsid	i
    15e8:	e7fe      	b.n	15e8 <prvTimerTask+0x120>
	vTaskSuspendAll();
    15ea:	4b09      	ldr	r3, [pc, #36]	; (1610 <prvTimerTask+0x148>)
    15ec:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    15ee:	a803      	add	r0, sp, #12
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <prvTimerTask+0x14c>)
    15f2:	4798      	blx	r3
    15f4:	0005      	movs	r5, r0
		xNextExpireTime = ( portTickType ) 0U;
    15f6:	2400      	movs	r4, #0
		if( xTimerListsWereSwitched == pdFALSE )
    15f8:	9b03      	ldr	r3, [sp, #12]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d100      	bne.n	1600 <prvTimerTask+0x138>
    15fe:	e77a      	b.n	14f6 <prvTimerTask+0x2e>
			xTaskResumeAll();
    1600:	4b07      	ldr	r3, [pc, #28]	; (1620 <prvTimerTask+0x158>)
    1602:	4798      	blx	r3
    1604:	e782      	b.n	150c <prvTimerTask+0x44>
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	0000035d 	.word	0x0000035d
    160c:	20003bc8 	.word	0x20003bc8
    1610:	00000c45 	.word	0x00000c45
    1614:	0000140d 	.word	0x0000140d
    1618:	20003bfc 	.word	0x20003bfc
    161c:	00000941 	.word	0x00000941
    1620:	00000d91 	.word	0x00000d91
    1624:	00000175 	.word	0x00000175
    1628:	0000126d 	.word	0x0000126d
    162c:	000013a9 	.word	0x000013a9
    1630:	000002e5 	.word	0x000002e5
    1634:	000007c9 	.word	0x000007c9

00001638 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1638:	b510      	push	{r4, lr}
    163a:	4b02      	ldr	r3, [pc, #8]	; (1644 <SERCOM0_Handler+0xc>)
    163c:	681b      	ldr	r3, [r3, #0]
    163e:	2000      	movs	r0, #0
    1640:	4798      	blx	r3
    1642:	bd10      	pop	{r4, pc}
    1644:	20003c00 	.word	0x20003c00

00001648 <SERCOM1_Handler>:
    1648:	b510      	push	{r4, lr}
    164a:	4b02      	ldr	r3, [pc, #8]	; (1654 <SERCOM1_Handler+0xc>)
    164c:	685b      	ldr	r3, [r3, #4]
    164e:	2001      	movs	r0, #1
    1650:	4798      	blx	r3
    1652:	bd10      	pop	{r4, pc}
    1654:	20003c00 	.word	0x20003c00

00001658 <SERCOM2_Handler>:
    1658:	b510      	push	{r4, lr}
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <SERCOM2_Handler+0xc>)
    165c:	689b      	ldr	r3, [r3, #8]
    165e:	2002      	movs	r0, #2
    1660:	4798      	blx	r3
    1662:	bd10      	pop	{r4, pc}
    1664:	20003c00 	.word	0x20003c00

00001668 <SERCOM3_Handler>:
    1668:	b510      	push	{r4, lr}
    166a:	4b02      	ldr	r3, [pc, #8]	; (1674 <SERCOM3_Handler+0xc>)
    166c:	68db      	ldr	r3, [r3, #12]
    166e:	2003      	movs	r0, #3
    1670:	4798      	blx	r3
    1672:	bd10      	pop	{r4, pc}
    1674:	20003c00 	.word	0x20003c00

00001678 <SERCOM4_Handler>:
    1678:	b510      	push	{r4, lr}
    167a:	4b02      	ldr	r3, [pc, #8]	; (1684 <SERCOM4_Handler+0xc>)
    167c:	691b      	ldr	r3, [r3, #16]
    167e:	2004      	movs	r0, #4
    1680:	4798      	blx	r3
    1682:	bd10      	pop	{r4, pc}
    1684:	20003c00 	.word	0x20003c00

00001688 <SERCOM5_Handler>:
    1688:	b510      	push	{r4, lr}
    168a:	4b02      	ldr	r3, [pc, #8]	; (1694 <SERCOM5_Handler+0xc>)
    168c:	695b      	ldr	r3, [r3, #20]
    168e:	2005      	movs	r0, #5
    1690:	4798      	blx	r3
    1692:	bd10      	pop	{r4, pc}
    1694:	20003c00 	.word	0x20003c00

00001698 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1698:	4770      	bx	lr
	...

0000169c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    169c:	4b0c      	ldr	r3, [pc, #48]	; (16d0 <cpu_irq_enter_critical+0x34>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	2b00      	cmp	r3, #0
    16a2:	d106      	bne.n	16b2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    16a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    16a8:	2b00      	cmp	r3, #0
    16aa:	d007      	beq.n	16bc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16ac:	2200      	movs	r2, #0
    16ae:	4b09      	ldr	r3, [pc, #36]	; (16d4 <cpu_irq_enter_critical+0x38>)
    16b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16b2:	4a07      	ldr	r2, [pc, #28]	; (16d0 <cpu_irq_enter_critical+0x34>)
    16b4:	6813      	ldr	r3, [r2, #0]
    16b6:	3301      	adds	r3, #1
    16b8:	6013      	str	r3, [r2, #0]
}
    16ba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    16bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    16be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    16c2:	2200      	movs	r2, #0
    16c4:	4b04      	ldr	r3, [pc, #16]	; (16d8 <cpu_irq_enter_critical+0x3c>)
    16c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    16c8:	3201      	adds	r2, #1
    16ca:	4b02      	ldr	r3, [pc, #8]	; (16d4 <cpu_irq_enter_critical+0x38>)
    16cc:	701a      	strb	r2, [r3, #0]
    16ce:	e7f0      	b.n	16b2 <cpu_irq_enter_critical+0x16>
    16d0:	20003c18 	.word	0x20003c18
    16d4:	20003c1c 	.word	0x20003c1c
    16d8:	20000008 	.word	0x20000008

000016dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    16dc:	4b08      	ldr	r3, [pc, #32]	; (1700 <cpu_irq_leave_critical+0x24>)
    16de:	681a      	ldr	r2, [r3, #0]
    16e0:	3a01      	subs	r2, #1
    16e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d109      	bne.n	16fe <cpu_irq_leave_critical+0x22>
    16ea:	4b06      	ldr	r3, [pc, #24]	; (1704 <cpu_irq_leave_critical+0x28>)
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d005      	beq.n	16fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    16f2:	2201      	movs	r2, #1
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <cpu_irq_leave_critical+0x2c>)
    16f6:	701a      	strb	r2, [r3, #0]
    16f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    16fc:	b662      	cpsie	i
	}
}
    16fe:	4770      	bx	lr
    1700:	20003c18 	.word	0x20003c18
    1704:	20003c1c 	.word	0x20003c1c
    1708:	20000008 	.word	0x20000008

0000170c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    170c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    170e:	490c      	ldr	r1, [pc, #48]	; (1740 <system_clock_source_osc8m_set_config+0x34>)
    1710:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1712:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1714:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1716:	7840      	ldrb	r0, [r0, #1]
    1718:	2201      	movs	r2, #1
    171a:	4010      	ands	r0, r2
    171c:	0180      	lsls	r0, r0, #6
    171e:	2640      	movs	r6, #64	; 0x40
    1720:	43b3      	bics	r3, r6
    1722:	4303      	orrs	r3, r0
    1724:	402a      	ands	r2, r5
    1726:	01d2      	lsls	r2, r2, #7
    1728:	2080      	movs	r0, #128	; 0x80
    172a:	4383      	bics	r3, r0
    172c:	4313      	orrs	r3, r2
    172e:	2203      	movs	r2, #3
    1730:	4022      	ands	r2, r4
    1732:	0212      	lsls	r2, r2, #8
    1734:	4803      	ldr	r0, [pc, #12]	; (1744 <system_clock_source_osc8m_set_config+0x38>)
    1736:	4003      	ands	r3, r0
    1738:	4313      	orrs	r3, r2
    173a:	620b      	str	r3, [r1, #32]
}
    173c:	bd70      	pop	{r4, r5, r6, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	40000800 	.word	0x40000800
    1744:	fffffcff 	.word	0xfffffcff

00001748 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1748:	2808      	cmp	r0, #8
    174a:	d803      	bhi.n	1754 <system_clock_source_enable+0xc>
    174c:	0080      	lsls	r0, r0, #2
    174e:	4b25      	ldr	r3, [pc, #148]	; (17e4 <system_clock_source_enable+0x9c>)
    1750:	581b      	ldr	r3, [r3, r0]
    1752:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1754:	2017      	movs	r0, #23
    1756:	e044      	b.n	17e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1758:	4a23      	ldr	r2, [pc, #140]	; (17e8 <system_clock_source_enable+0xa0>)
    175a:	6a13      	ldr	r3, [r2, #32]
    175c:	2102      	movs	r1, #2
    175e:	430b      	orrs	r3, r1
    1760:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1762:	2000      	movs	r0, #0
    1764:	e03d      	b.n	17e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1766:	4a20      	ldr	r2, [pc, #128]	; (17e8 <system_clock_source_enable+0xa0>)
    1768:	6993      	ldr	r3, [r2, #24]
    176a:	2102      	movs	r1, #2
    176c:	430b      	orrs	r3, r1
    176e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1770:	2000      	movs	r0, #0
		break;
    1772:	e036      	b.n	17e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1774:	4a1c      	ldr	r2, [pc, #112]	; (17e8 <system_clock_source_enable+0xa0>)
    1776:	8a13      	ldrh	r3, [r2, #16]
    1778:	2102      	movs	r1, #2
    177a:	430b      	orrs	r3, r1
    177c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    177e:	2000      	movs	r0, #0
		break;
    1780:	e02f      	b.n	17e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1782:	4a19      	ldr	r2, [pc, #100]	; (17e8 <system_clock_source_enable+0xa0>)
    1784:	8a93      	ldrh	r3, [r2, #20]
    1786:	2102      	movs	r1, #2
    1788:	430b      	orrs	r3, r1
    178a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    178c:	2000      	movs	r0, #0
		break;
    178e:	e028      	b.n	17e2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1790:	4916      	ldr	r1, [pc, #88]	; (17ec <system_clock_source_enable+0xa4>)
    1792:	680b      	ldr	r3, [r1, #0]
    1794:	2202      	movs	r2, #2
    1796:	4313      	orrs	r3, r2
    1798:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    179a:	4b13      	ldr	r3, [pc, #76]	; (17e8 <system_clock_source_enable+0xa0>)
    179c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    179e:	0019      	movs	r1, r3
    17a0:	320e      	adds	r2, #14
    17a2:	68cb      	ldr	r3, [r1, #12]
    17a4:	421a      	tst	r2, r3
    17a6:	d0fc      	beq.n	17a2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    17a8:	4a10      	ldr	r2, [pc, #64]	; (17ec <system_clock_source_enable+0xa4>)
    17aa:	6891      	ldr	r1, [r2, #8]
    17ac:	4b0e      	ldr	r3, [pc, #56]	; (17e8 <system_clock_source_enable+0xa0>)
    17ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    17b0:	6852      	ldr	r2, [r2, #4]
    17b2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    17b4:	2200      	movs	r2, #0
    17b6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    17b8:	0019      	movs	r1, r3
    17ba:	3210      	adds	r2, #16
    17bc:	68cb      	ldr	r3, [r1, #12]
    17be:	421a      	tst	r2, r3
    17c0:	d0fc      	beq.n	17bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    17c2:	4b0a      	ldr	r3, [pc, #40]	; (17ec <system_clock_source_enable+0xa4>)
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	b29b      	uxth	r3, r3
    17c8:	4a07      	ldr	r2, [pc, #28]	; (17e8 <system_clock_source_enable+0xa0>)
    17ca:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    17cc:	2000      	movs	r0, #0
    17ce:	e008      	b.n	17e2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    17d0:	4905      	ldr	r1, [pc, #20]	; (17e8 <system_clock_source_enable+0xa0>)
    17d2:	2244      	movs	r2, #68	; 0x44
    17d4:	5c8b      	ldrb	r3, [r1, r2]
    17d6:	2002      	movs	r0, #2
    17d8:	4303      	orrs	r3, r0
    17da:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    17dc:	2000      	movs	r0, #0
		break;
    17de:	e000      	b.n	17e2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    17e0:	2000      	movs	r0, #0
}
    17e2:	4770      	bx	lr
    17e4:	00001c90 	.word	0x00001c90
    17e8:	40000800 	.word	0x40000800
    17ec:	20003c20 	.word	0x20003c20

000017f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    17f0:	b530      	push	{r4, r5, lr}
    17f2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17f4:	22c2      	movs	r2, #194	; 0xc2
    17f6:	00d2      	lsls	r2, r2, #3
    17f8:	4b1a      	ldr	r3, [pc, #104]	; (1864 <system_clock_init+0x74>)
    17fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    17fc:	4a1a      	ldr	r2, [pc, #104]	; (1868 <system_clock_init+0x78>)
    17fe:	6853      	ldr	r3, [r2, #4]
    1800:	211e      	movs	r1, #30
    1802:	438b      	bics	r3, r1
    1804:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1806:	2301      	movs	r3, #1
    1808:	466a      	mov	r2, sp
    180a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    180c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    180e:	4d17      	ldr	r5, [pc, #92]	; (186c <system_clock_init+0x7c>)
    1810:	b2e0      	uxtb	r0, r4
    1812:	4669      	mov	r1, sp
    1814:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1816:	3401      	adds	r4, #1
    1818:	2c25      	cmp	r4, #37	; 0x25
    181a:	d1f9      	bne.n	1810 <system_clock_init+0x20>
	config->run_in_standby  = false;
    181c:	a803      	add	r0, sp, #12
    181e:	2400      	movs	r4, #0
    1820:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1822:	2501      	movs	r5, #1
    1824:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1826:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1828:	4b11      	ldr	r3, [pc, #68]	; (1870 <system_clock_init+0x80>)
    182a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    182c:	2006      	movs	r0, #6
    182e:	4b11      	ldr	r3, [pc, #68]	; (1874 <system_clock_init+0x84>)
    1830:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1832:	4b11      	ldr	r3, [pc, #68]	; (1878 <system_clock_init+0x88>)
    1834:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1836:	4b11      	ldr	r3, [pc, #68]	; (187c <system_clock_init+0x8c>)
    1838:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    183a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    183c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    183e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1840:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1842:	466b      	mov	r3, sp
    1844:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1846:	2306      	movs	r3, #6
    1848:	466a      	mov	r2, sp
    184a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    184c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    184e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1850:	4669      	mov	r1, sp
    1852:	2000      	movs	r0, #0
    1854:	4b0a      	ldr	r3, [pc, #40]	; (1880 <system_clock_init+0x90>)
    1856:	4798      	blx	r3
    1858:	2000      	movs	r0, #0
    185a:	4b0a      	ldr	r3, [pc, #40]	; (1884 <system_clock_init+0x94>)
    185c:	4798      	blx	r3
#endif
}
    185e:	b005      	add	sp, #20
    1860:	bd30      	pop	{r4, r5, pc}
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	40000800 	.word	0x40000800
    1868:	41004000 	.word	0x41004000
    186c:	00001a05 	.word	0x00001a05
    1870:	0000170d 	.word	0x0000170d
    1874:	00001749 	.word	0x00001749
    1878:	00001889 	.word	0x00001889
    187c:	40000400 	.word	0x40000400
    1880:	000018ad 	.word	0x000018ad
    1884:	00001965 	.word	0x00001965

00001888 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1888:	4a06      	ldr	r2, [pc, #24]	; (18a4 <system_gclk_init+0x1c>)
    188a:	6993      	ldr	r3, [r2, #24]
    188c:	2108      	movs	r1, #8
    188e:	430b      	orrs	r3, r1
    1890:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1892:	2201      	movs	r2, #1
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <system_gclk_init+0x20>)
    1896:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1898:	0019      	movs	r1, r3
    189a:	780b      	ldrb	r3, [r1, #0]
    189c:	4213      	tst	r3, r2
    189e:	d1fc      	bne.n	189a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	40000400 	.word	0x40000400
    18a8:	40000c00 	.word	0x40000c00

000018ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18b0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18b2:	780d      	ldrb	r5, [r1, #0]
    18b4:	022d      	lsls	r5, r5, #8
    18b6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18b8:	784b      	ldrb	r3, [r1, #1]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d002      	beq.n	18c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18be:	2380      	movs	r3, #128	; 0x80
    18c0:	02db      	lsls	r3, r3, #11
    18c2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18c4:	7a4b      	ldrb	r3, [r1, #9]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d002      	beq.n	18d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    18ca:	2380      	movs	r3, #128	; 0x80
    18cc:	031b      	lsls	r3, r3, #12
    18ce:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    18d0:	6848      	ldr	r0, [r1, #4]
    18d2:	2801      	cmp	r0, #1
    18d4:	d910      	bls.n	18f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    18d6:	1e43      	subs	r3, r0, #1
    18d8:	4218      	tst	r0, r3
    18da:	d134      	bne.n	1946 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18dc:	2802      	cmp	r0, #2
    18de:	d930      	bls.n	1942 <system_gclk_gen_set_config+0x96>
    18e0:	2302      	movs	r3, #2
    18e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    18e4:	3201      	adds	r2, #1
						mask <<= 1) {
    18e6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    18e8:	4298      	cmp	r0, r3
    18ea:	d8fb      	bhi.n	18e4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18ec:	0212      	lsls	r2, r2, #8
    18ee:	4332      	orrs	r2, r6
    18f0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	035b      	lsls	r3, r3, #13
    18f6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    18f8:	7a0b      	ldrb	r3, [r1, #8]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d002      	beq.n	1904 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    18fe:	2380      	movs	r3, #128	; 0x80
    1900:	039b      	lsls	r3, r3, #14
    1902:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1904:	4a13      	ldr	r2, [pc, #76]	; (1954 <system_gclk_gen_set_config+0xa8>)
    1906:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1908:	b25b      	sxtb	r3, r3
    190a:	2b00      	cmp	r3, #0
    190c:	dbfb      	blt.n	1906 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    190e:	4b12      	ldr	r3, [pc, #72]	; (1958 <system_gclk_gen_set_config+0xac>)
    1910:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1912:	4b12      	ldr	r3, [pc, #72]	; (195c <system_gclk_gen_set_config+0xb0>)
    1914:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1916:	4a0f      	ldr	r2, [pc, #60]	; (1954 <system_gclk_gen_set_config+0xa8>)
    1918:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    191a:	b25b      	sxtb	r3, r3
    191c:	2b00      	cmp	r3, #0
    191e:	dbfb      	blt.n	1918 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1920:	4b0c      	ldr	r3, [pc, #48]	; (1954 <system_gclk_gen_set_config+0xa8>)
    1922:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1924:	001a      	movs	r2, r3
    1926:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1928:	b25b      	sxtb	r3, r3
    192a:	2b00      	cmp	r3, #0
    192c:	dbfb      	blt.n	1926 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    192e:	4a09      	ldr	r2, [pc, #36]	; (1954 <system_gclk_gen_set_config+0xa8>)
    1930:	6853      	ldr	r3, [r2, #4]
    1932:	2180      	movs	r1, #128	; 0x80
    1934:	0249      	lsls	r1, r1, #9
    1936:	400b      	ands	r3, r1
    1938:	431d      	orrs	r5, r3
    193a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <system_gclk_gen_set_config+0xb4>)
    193e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1940:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1942:	2200      	movs	r2, #0
    1944:	e7d2      	b.n	18ec <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1946:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1948:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    194a:	2380      	movs	r3, #128	; 0x80
    194c:	029b      	lsls	r3, r3, #10
    194e:	431d      	orrs	r5, r3
    1950:	e7d2      	b.n	18f8 <system_gclk_gen_set_config+0x4c>
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	40000c00 	.word	0x40000c00
    1958:	0000169d 	.word	0x0000169d
    195c:	40000c08 	.word	0x40000c08
    1960:	000016dd 	.word	0x000016dd

00001964 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1964:	b510      	push	{r4, lr}
    1966:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1968:	4a0b      	ldr	r2, [pc, #44]	; (1998 <system_gclk_gen_enable+0x34>)
    196a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    196c:	b25b      	sxtb	r3, r3
    196e:	2b00      	cmp	r3, #0
    1970:	dbfb      	blt.n	196a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <system_gclk_gen_enable+0x38>)
    1974:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1976:	4b0a      	ldr	r3, [pc, #40]	; (19a0 <system_gclk_gen_enable+0x3c>)
    1978:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    197a:	4a07      	ldr	r2, [pc, #28]	; (1998 <system_gclk_gen_enable+0x34>)
    197c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    197e:	b25b      	sxtb	r3, r3
    1980:	2b00      	cmp	r3, #0
    1982:	dbfb      	blt.n	197c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1984:	4a04      	ldr	r2, [pc, #16]	; (1998 <system_gclk_gen_enable+0x34>)
    1986:	6851      	ldr	r1, [r2, #4]
    1988:	2380      	movs	r3, #128	; 0x80
    198a:	025b      	lsls	r3, r3, #9
    198c:	430b      	orrs	r3, r1
    198e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <system_gclk_gen_enable+0x40>)
    1992:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1994:	bd10      	pop	{r4, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	40000c00 	.word	0x40000c00
    199c:	0000169d 	.word	0x0000169d
    19a0:	40000c04 	.word	0x40000c04
    19a4:	000016dd 	.word	0x000016dd

000019a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19a8:	b510      	push	{r4, lr}
    19aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19ac:	4b0f      	ldr	r3, [pc, #60]	; (19ec <system_gclk_chan_disable+0x44>)
    19ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19b0:	4b0f      	ldr	r3, [pc, #60]	; (19f0 <system_gclk_chan_disable+0x48>)
    19b2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19b4:	4a0f      	ldr	r2, [pc, #60]	; (19f4 <system_gclk_chan_disable+0x4c>)
    19b6:	8853      	ldrh	r3, [r2, #2]
    19b8:	051b      	lsls	r3, r3, #20
    19ba:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19bc:	8853      	ldrh	r3, [r2, #2]
    19be:	490e      	ldr	r1, [pc, #56]	; (19f8 <system_gclk_chan_disable+0x50>)
    19c0:	400b      	ands	r3, r1
    19c2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19c4:	8853      	ldrh	r3, [r2, #2]
    19c6:	490d      	ldr	r1, [pc, #52]	; (19fc <system_gclk_chan_disable+0x54>)
    19c8:	400b      	ands	r3, r1
    19ca:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19cc:	0011      	movs	r1, r2
    19ce:	2280      	movs	r2, #128	; 0x80
    19d0:	01d2      	lsls	r2, r2, #7
    19d2:	884b      	ldrh	r3, [r1, #2]
    19d4:	4213      	tst	r3, r2
    19d6:	d1fc      	bne.n	19d2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19d8:	4906      	ldr	r1, [pc, #24]	; (19f4 <system_gclk_chan_disable+0x4c>)
    19da:	884a      	ldrh	r2, [r1, #2]
    19dc:	0203      	lsls	r3, r0, #8
    19de:	4806      	ldr	r0, [pc, #24]	; (19f8 <system_gclk_chan_disable+0x50>)
    19e0:	4002      	ands	r2, r0
    19e2:	4313      	orrs	r3, r2
    19e4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19e6:	4b06      	ldr	r3, [pc, #24]	; (1a00 <system_gclk_chan_disable+0x58>)
    19e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19ea:	bd10      	pop	{r4, pc}
    19ec:	0000169d 	.word	0x0000169d
    19f0:	40000c02 	.word	0x40000c02
    19f4:	40000c00 	.word	0x40000c00
    19f8:	fffff0ff 	.word	0xfffff0ff
    19fc:	ffffbfff 	.word	0xffffbfff
    1a00:	000016dd 	.word	0x000016dd

00001a04 <system_gclk_chan_set_config>:
{
    1a04:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a06:	780c      	ldrb	r4, [r1, #0]
    1a08:	0224      	lsls	r4, r4, #8
    1a0a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a0c:	4b02      	ldr	r3, [pc, #8]	; (1a18 <system_gclk_chan_set_config+0x14>)
    1a0e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a10:	b2a4      	uxth	r4, r4
    1a12:	4b02      	ldr	r3, [pc, #8]	; (1a1c <system_gclk_chan_set_config+0x18>)
    1a14:	805c      	strh	r4, [r3, #2]
}
    1a16:	bd10      	pop	{r4, pc}
    1a18:	000019a9 	.word	0x000019a9
    1a1c:	40000c00 	.word	0x40000c00

00001a20 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1a20:	4770      	bx	lr
	...

00001a24 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1a24:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1a26:	4b05      	ldr	r3, [pc, #20]	; (1a3c <system_init+0x18>)
    1a28:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1a2a:	4b05      	ldr	r3, [pc, #20]	; (1a40 <system_init+0x1c>)
    1a2c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1a2e:	4b05      	ldr	r3, [pc, #20]	; (1a44 <system_init+0x20>)
    1a30:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1a32:	4b05      	ldr	r3, [pc, #20]	; (1a48 <system_init+0x24>)
    1a34:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1a36:	4b05      	ldr	r3, [pc, #20]	; (1a4c <system_init+0x28>)
    1a38:	4798      	blx	r3
}
    1a3a:	bd10      	pop	{r4, pc}
    1a3c:	000017f1 	.word	0x000017f1
    1a40:	00001699 	.word	0x00001699
    1a44:	00001a21 	.word	0x00001a21
    1a48:	00001a21 	.word	0x00001a21
    1a4c:	00001a21 	.word	0x00001a21

00001a50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1a50:	e7fe      	b.n	1a50 <Dummy_Handler>
	...

00001a54 <Reset_Handler>:
{
    1a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1a56:	4a2a      	ldr	r2, [pc, #168]	; (1b00 <Reset_Handler+0xac>)
    1a58:	4b2a      	ldr	r3, [pc, #168]	; (1b04 <Reset_Handler+0xb0>)
    1a5a:	429a      	cmp	r2, r3
    1a5c:	d011      	beq.n	1a82 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1a5e:	001a      	movs	r2, r3
    1a60:	4b29      	ldr	r3, [pc, #164]	; (1b08 <Reset_Handler+0xb4>)
    1a62:	429a      	cmp	r2, r3
    1a64:	d20d      	bcs.n	1a82 <Reset_Handler+0x2e>
    1a66:	4a29      	ldr	r2, [pc, #164]	; (1b0c <Reset_Handler+0xb8>)
    1a68:	3303      	adds	r3, #3
    1a6a:	1a9b      	subs	r3, r3, r2
    1a6c:	089b      	lsrs	r3, r3, #2
    1a6e:	3301      	adds	r3, #1
    1a70:	009b      	lsls	r3, r3, #2
    1a72:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1a74:	4823      	ldr	r0, [pc, #140]	; (1b04 <Reset_Handler+0xb0>)
    1a76:	4922      	ldr	r1, [pc, #136]	; (1b00 <Reset_Handler+0xac>)
    1a78:	588c      	ldr	r4, [r1, r2]
    1a7a:	5084      	str	r4, [r0, r2]
    1a7c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1a7e:	429a      	cmp	r2, r3
    1a80:	d1fa      	bne.n	1a78 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1a82:	4a23      	ldr	r2, [pc, #140]	; (1b10 <Reset_Handler+0xbc>)
    1a84:	4b23      	ldr	r3, [pc, #140]	; (1b14 <Reset_Handler+0xc0>)
    1a86:	429a      	cmp	r2, r3
    1a88:	d20a      	bcs.n	1aa0 <Reset_Handler+0x4c>
    1a8a:	43d3      	mvns	r3, r2
    1a8c:	4921      	ldr	r1, [pc, #132]	; (1b14 <Reset_Handler+0xc0>)
    1a8e:	185b      	adds	r3, r3, r1
    1a90:	2103      	movs	r1, #3
    1a92:	438b      	bics	r3, r1
    1a94:	3304      	adds	r3, #4
    1a96:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1a98:	2100      	movs	r1, #0
    1a9a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1a9c:	4293      	cmp	r3, r2
    1a9e:	d1fc      	bne.n	1a9a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1aa0:	4a1d      	ldr	r2, [pc, #116]	; (1b18 <Reset_Handler+0xc4>)
    1aa2:	21ff      	movs	r1, #255	; 0xff
    1aa4:	4b1d      	ldr	r3, [pc, #116]	; (1b1c <Reset_Handler+0xc8>)
    1aa6:	438b      	bics	r3, r1
    1aa8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1aaa:	39fd      	subs	r1, #253	; 0xfd
    1aac:	2390      	movs	r3, #144	; 0x90
    1aae:	005b      	lsls	r3, r3, #1
    1ab0:	4a1b      	ldr	r2, [pc, #108]	; (1b20 <Reset_Handler+0xcc>)
    1ab2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ab4:	4a1b      	ldr	r2, [pc, #108]	; (1b24 <Reset_Handler+0xd0>)
    1ab6:	78d3      	ldrb	r3, [r2, #3]
    1ab8:	2503      	movs	r5, #3
    1aba:	43ab      	bics	r3, r5
    1abc:	2402      	movs	r4, #2
    1abe:	4323      	orrs	r3, r4
    1ac0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1ac2:	78d3      	ldrb	r3, [r2, #3]
    1ac4:	270c      	movs	r7, #12
    1ac6:	43bb      	bics	r3, r7
    1ac8:	2608      	movs	r6, #8
    1aca:	4333      	orrs	r3, r6
    1acc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ace:	4b16      	ldr	r3, [pc, #88]	; (1b28 <Reset_Handler+0xd4>)
    1ad0:	7b98      	ldrb	r0, [r3, #14]
    1ad2:	2230      	movs	r2, #48	; 0x30
    1ad4:	4390      	bics	r0, r2
    1ad6:	2220      	movs	r2, #32
    1ad8:	4310      	orrs	r0, r2
    1ada:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1adc:	7b99      	ldrb	r1, [r3, #14]
    1ade:	43b9      	bics	r1, r7
    1ae0:	4331      	orrs	r1, r6
    1ae2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1ae4:	7b9a      	ldrb	r2, [r3, #14]
    1ae6:	43aa      	bics	r2, r5
    1ae8:	4322      	orrs	r2, r4
    1aea:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1aec:	4a0f      	ldr	r2, [pc, #60]	; (1b2c <Reset_Handler+0xd8>)
    1aee:	6853      	ldr	r3, [r2, #4]
    1af0:	2180      	movs	r1, #128	; 0x80
    1af2:	430b      	orrs	r3, r1
    1af4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1af6:	4b0e      	ldr	r3, [pc, #56]	; (1b30 <Reset_Handler+0xdc>)
    1af8:	4798      	blx	r3
        main();
    1afa:	4b0e      	ldr	r3, [pc, #56]	; (1b34 <Reset_Handler+0xe0>)
    1afc:	4798      	blx	r3
    1afe:	e7fe      	b.n	1afe <Reset_Handler+0xaa>
    1b00:	00001cdc 	.word	0x00001cdc
    1b04:	20000000 	.word	0x20000000
    1b08:	2000000c 	.word	0x2000000c
    1b0c:	20000004 	.word	0x20000004
    1b10:	2000000c 	.word	0x2000000c
    1b14:	20003c38 	.word	0x20003c38
    1b18:	e000ed00 	.word	0xe000ed00
    1b1c:	00000000 	.word	0x00000000
    1b20:	41007000 	.word	0x41007000
    1b24:	41005000 	.word	0x41005000
    1b28:	41004800 	.word	0x41004800
    1b2c:	41004000 	.word	0x41004000
    1b30:	00001bed 	.word	0x00001bed
    1b34:	00001b89 	.word	0x00001b89

00001b38 <mrBlinky>:
	return arch_ioport_port_to_base(port)->IN.reg & mask;
}

inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->OUTTGL.reg = arch_ioport_pin_to_mask(pin);
    1b38:	2280      	movs	r2, #128	; 0x80
    1b3a:	0292      	lsls	r2, r2, #10
    1b3c:	4b01      	ldr	r3, [pc, #4]	; (1b44 <mrBlinky+0xc>)
    1b3e:	61da      	str	r2, [r3, #28]
uint16_t timeout = 0;

 void mrBlinky(xTimerHandle pxtimer)
 {
	ioport_toggle_pin_level(17);		
 }
    1b40:	4770      	bx	lr
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	41004400 	.word	0x41004400

00001b48 <initIO>:

void initIO()
{
    1b48:	b510      	push	{r4, lr}
	for (uint32_t i = 0; i < 32; i++) {
    1b4a:	2300      	movs	r3, #0
		if (mask & (1 << i)) {
    1b4c:	2101      	movs	r1, #1
    1b4e:	2480      	movs	r4, #128	; 0x80
    1b50:	02a4      	lsls	r4, r4, #10
	for (uint32_t i = 0; i < 32; i++) {
    1b52:	3301      	adds	r3, #1
    1b54:	2b20      	cmp	r3, #32
    1b56:	d009      	beq.n	1b6c <initIO+0x24>
		if (mask & (1 << i)) {
    1b58:	000a      	movs	r2, r1
    1b5a:	409a      	lsls	r2, r3
    1b5c:	4222      	tst	r2, r4
    1b5e:	d0f8      	beq.n	1b52 <initIO+0xa>
			base->PINCFG[i].reg &= ~PORT_PINCFG_PMUXEN;
    1b60:	4a07      	ldr	r2, [pc, #28]	; (1b80 <initIO+0x38>)
    1b62:	1898      	adds	r0, r3, r2
    1b64:	7802      	ldrb	r2, [r0, #0]
    1b66:	438a      	bics	r2, r1
    1b68:	7002      	strb	r2, [r0, #0]
    1b6a:	e7f2      	b.n	1b52 <initIO+0xa>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1b6c:	4b05      	ldr	r3, [pc, #20]	; (1b84 <initIO+0x3c>)
    1b6e:	2280      	movs	r2, #128	; 0x80
    1b70:	0292      	lsls	r2, r2, #10
    1b72:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    1b74:	2151      	movs	r1, #81	; 0x51
    1b76:	5c5a      	ldrb	r2, [r3, r1]
    1b78:	2002      	movs	r0, #2
    1b7a:	4302      	orrs	r2, r0
    1b7c:	545a      	strb	r2, [r3, r1]
	ioport_enable_pin(17);
	ioport_set_pin_dir(17, IOPORT_DIR_OUTPUT);

}
    1b7e:	bd10      	pop	{r4, pc}
    1b80:	41004440 	.word	0x41004440
    1b84:	41004400 	.word	0x41004400

00001b88 <main>:

int main (void)
{
    1b88:	b510      	push	{r4, lr}
    1b8a:	b082      	sub	sp, #8
	xTimerHandle Timer_id;
	uint16_t timeout = 0;

	system_init();
    1b8c:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <main+0x40>)
    1b8e:	4798      	blx	r3
	system_clock_init();
    1b90:	4b0e      	ldr	r3, [pc, #56]	; (1bcc <main+0x44>)
    1b92:	4798      	blx	r3
	arch_ioport_init();
	initIO();
    1b94:	4b0e      	ldr	r3, [pc, #56]	; (1bd0 <main+0x48>)
    1b96:	4798      	blx	r3


	/************************************************************************/
	/* Create timer to toggle Pin 13 LED                                                                      */
	/************************************************************************/
	Timer_id = xTimerCreate("Timer",1000, pdTRUE,0,mrBlinky);
    1b98:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <main+0x4c>)
    1b9a:	9300      	str	r3, [sp, #0]
    1b9c:	2300      	movs	r3, #0
    1b9e:	2201      	movs	r2, #1
    1ba0:	21fa      	movs	r1, #250	; 0xfa
    1ba2:	0089      	lsls	r1, r1, #2
    1ba4:	480c      	ldr	r0, [pc, #48]	; (1bd8 <main+0x50>)
    1ba6:	4c0d      	ldr	r4, [pc, #52]	; (1bdc <main+0x54>)
    1ba8:	47a0      	blx	r4
    1baa:	0004      	movs	r4, r0
	xTimerStart(Timer_id, 0);
    1bac:	4b0c      	ldr	r3, [pc, #48]	; (1be0 <main+0x58>)
    1bae:	4798      	blx	r3
    1bb0:	0002      	movs	r2, r0
    1bb2:	2300      	movs	r3, #0
    1bb4:	9300      	str	r3, [sp, #0]
    1bb6:	2100      	movs	r1, #0
    1bb8:	0020      	movs	r0, r4
    1bba:	4c0a      	ldr	r4, [pc, #40]	; (1be4 <main+0x5c>)
    1bbc:	47a0      	blx	r4
	vTaskStartScheduler();
    1bbe:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <main+0x60>)
    1bc0:	4798      	blx	r3
	//while(1);
}
    1bc2:	2000      	movs	r0, #0
    1bc4:	b002      	add	sp, #8
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	00001a25 	.word	0x00001a25
    1bcc:	000017f1 	.word	0x000017f1
    1bd0:	00001b49 	.word	0x00001b49
    1bd4:	00001b39 	.word	0x00001b39
    1bd8:	00001cb4 	.word	0x00001cb4
    1bdc:	0000135d 	.word	0x0000135d
    1be0:	00000c55 	.word	0x00000c55
    1be4:	000013a9 	.word	0x000013a9
    1be8:	00000be5 	.word	0x00000be5

00001bec <__libc_init_array>:
    1bec:	b570      	push	{r4, r5, r6, lr}
    1bee:	2600      	movs	r6, #0
    1bf0:	4d0c      	ldr	r5, [pc, #48]	; (1c24 <__libc_init_array+0x38>)
    1bf2:	4c0d      	ldr	r4, [pc, #52]	; (1c28 <__libc_init_array+0x3c>)
    1bf4:	1b64      	subs	r4, r4, r5
    1bf6:	10a4      	asrs	r4, r4, #2
    1bf8:	42a6      	cmp	r6, r4
    1bfa:	d109      	bne.n	1c10 <__libc_init_array+0x24>
    1bfc:	2600      	movs	r6, #0
    1bfe:	f000 f85d 	bl	1cbc <_init>
    1c02:	4d0a      	ldr	r5, [pc, #40]	; (1c2c <__libc_init_array+0x40>)
    1c04:	4c0a      	ldr	r4, [pc, #40]	; (1c30 <__libc_init_array+0x44>)
    1c06:	1b64      	subs	r4, r4, r5
    1c08:	10a4      	asrs	r4, r4, #2
    1c0a:	42a6      	cmp	r6, r4
    1c0c:	d105      	bne.n	1c1a <__libc_init_array+0x2e>
    1c0e:	bd70      	pop	{r4, r5, r6, pc}
    1c10:	00b3      	lsls	r3, r6, #2
    1c12:	58eb      	ldr	r3, [r5, r3]
    1c14:	4798      	blx	r3
    1c16:	3601      	adds	r6, #1
    1c18:	e7ee      	b.n	1bf8 <__libc_init_array+0xc>
    1c1a:	00b3      	lsls	r3, r6, #2
    1c1c:	58eb      	ldr	r3, [r5, r3]
    1c1e:	4798      	blx	r3
    1c20:	3601      	adds	r6, #1
    1c22:	e7f2      	b.n	1c0a <__libc_init_array+0x1e>
    1c24:	00001cc8 	.word	0x00001cc8
    1c28:	00001cc8 	.word	0x00001cc8
    1c2c:	00001cc8 	.word	0x00001cc8
    1c30:	00001ccc 	.word	0x00001ccc

00001c34 <memcpy>:
    1c34:	2300      	movs	r3, #0
    1c36:	b510      	push	{r4, lr}
    1c38:	429a      	cmp	r2, r3
    1c3a:	d100      	bne.n	1c3e <memcpy+0xa>
    1c3c:	bd10      	pop	{r4, pc}
    1c3e:	5ccc      	ldrb	r4, [r1, r3]
    1c40:	54c4      	strb	r4, [r0, r3]
    1c42:	3301      	adds	r3, #1
    1c44:	e7f8      	b.n	1c38 <memcpy+0x4>

00001c46 <memset>:
    1c46:	0003      	movs	r3, r0
    1c48:	1882      	adds	r2, r0, r2
    1c4a:	4293      	cmp	r3, r2
    1c4c:	d100      	bne.n	1c50 <memset+0xa>
    1c4e:	4770      	bx	lr
    1c50:	7019      	strb	r1, [r3, #0]
    1c52:	3301      	adds	r3, #1
    1c54:	e7f9      	b.n	1c4a <memset+0x4>

00001c56 <strncpy>:
    1c56:	b570      	push	{r4, r5, r6, lr}
    1c58:	0004      	movs	r4, r0
    1c5a:	2a00      	cmp	r2, #0
    1c5c:	d100      	bne.n	1c60 <strncpy+0xa>
    1c5e:	bd70      	pop	{r4, r5, r6, pc}
    1c60:	780d      	ldrb	r5, [r1, #0]
    1c62:	1e56      	subs	r6, r2, #1
    1c64:	1c63      	adds	r3, r4, #1
    1c66:	7025      	strb	r5, [r4, #0]
    1c68:	3101      	adds	r1, #1
    1c6a:	2d00      	cmp	r5, #0
    1c6c:	d105      	bne.n	1c7a <strncpy+0x24>
    1c6e:	18a4      	adds	r4, r4, r2
    1c70:	429c      	cmp	r4, r3
    1c72:	d0f4      	beq.n	1c5e <strncpy+0x8>
    1c74:	701d      	strb	r5, [r3, #0]
    1c76:	3301      	adds	r3, #1
    1c78:	e7fa      	b.n	1c70 <strncpy+0x1a>
    1c7a:	001c      	movs	r4, r3
    1c7c:	0032      	movs	r2, r6
    1c7e:	e7ec      	b.n	1c5a <strncpy+0x4>
    1c80:	454c4449 	.word	0x454c4449
    1c84:	00000000 	.word	0x00000000
    1c88:	20726d54 	.word	0x20726d54
    1c8c:	00637653 	.word	0x00637653
    1c90:	00001774 	.word	0x00001774
    1c94:	00001754 	.word	0x00001754
    1c98:	00001754 	.word	0x00001754
    1c9c:	000017e0 	.word	0x000017e0
    1ca0:	00001766 	.word	0x00001766
    1ca4:	00001782 	.word	0x00001782
    1ca8:	00001758 	.word	0x00001758
    1cac:	00001790 	.word	0x00001790
    1cb0:	000017d0 	.word	0x000017d0
    1cb4:	656d6954 	.word	0x656d6954
    1cb8:	00000072 	.word	0x00000072

00001cbc <_init>:
    1cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1cc2:	bc08      	pop	{r3}
    1cc4:	469e      	mov	lr, r3
    1cc6:	4770      	bx	lr

00001cc8 <__init_array_start>:
    1cc8:	000000dd 	.word	0x000000dd

00001ccc <_fini>:
    1ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1cd2:	bc08      	pop	{r3}
    1cd4:	469e      	mov	lr, r3
    1cd6:	4770      	bx	lr

00001cd8 <__fini_array_start>:
    1cd8:	000000b5 	.word	0x000000b5
