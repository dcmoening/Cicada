
cicada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000042ac  000042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  000042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000160  20000010  000042c4  00020010  2**2
                  ALLOC
  4 .stack        00002000  20000170  00004424  00020010  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  7 .debug_info   00026a9d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000353f  00000000  00000000  00046b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a74  00000000  00000000  0004a06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006a0  00000000  00000000  00050ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006c0  00000000  00000000  00051181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019327  00000000  00000000  00051841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b165  00000000  00000000  0006ab68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008c4bb  00000000  00000000  00075ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001458  00000000  00000000  00102188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 21 00 20 91 1f 00 00 8d 1f 00 00 8d 1f 00 00     p!. ............
	...
      2c:	c5 0a 00 00 00 00 00 00 00 00 00 00 ed 0a 00 00     ................
      3c:	31 0b 00 00 8d 1f 00 00 8d 1f 00 00 8d 1f 00 00     1...............
      4c:	8d 1f 00 00 8d 1f 00 00 8d 1f 00 00 8d 1f 00 00     ................
      5c:	8d 1f 00 00 8d 1f 00 00 ed 1b 00 00 fd 1b 00 00     ................
      6c:	0d 1c 00 00 1d 1c 00 00 2d 1c 00 00 3d 1c 00 00     ........-...=...
      7c:	8d 1f 00 00 8d 1f 00 00 8d 1f 00 00 8d 1f 00 00     ................
      8c:	8d 1f 00 00 8d 1f 00 00 00 00 00 00 00 00 00 00     ................
      9c:	8d 1f 00 00 8d 1f 00 00 8d 1f 00 00 8d 1f 00 00     ................
      ac:	8d 1f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	000042b4 	.word	0x000042b4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	000042b4 	.word	0x000042b4
     10c:	000042b4 	.word	0x000042b4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001d4d 	.word	0x00001d4d
     140:	000021dd 	.word	0x000021dd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1ac:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1ae:	2207      	movs	r2, #7
     1b0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1b2:	421a      	tst	r2, r3
     1b4:	d1fc      	bne.n	1b0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1b6:	4770      	bx	lr

000001b8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ba:	46d6      	mov	lr, sl
     1bc:	464f      	mov	r7, r9
     1be:	4646      	mov	r6, r8
     1c0:	b5c0      	push	{r6, r7, lr}
     1c2:	b08a      	sub	sp, #40	; 0x28
     1c4:	0006      	movs	r6, r0
     1c6:	000f      	movs	r7, r1
     1c8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1ca:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1cc:	0008      	movs	r0, r1
     1ce:	4ba0      	ldr	r3, [pc, #640]	; (450 <i2c_master_init+0x298>)
     1d0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1d2:	4aa0      	ldr	r2, [pc, #640]	; (454 <i2c_master_init+0x29c>)
     1d4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1d6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1d8:	2301      	movs	r3, #1
     1da:	40ab      	lsls	r3, r5
     1dc:	430b      	orrs	r3, r1
     1de:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     1e0:	a909      	add	r1, sp, #36	; 0x24
     1e2:	7b23      	ldrb	r3, [r4, #12]
     1e4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1e6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1e8:	b2c5      	uxtb	r5, r0
     1ea:	0028      	movs	r0, r5
     1ec:	4b9a      	ldr	r3, [pc, #616]	; (458 <i2c_master_init+0x2a0>)
     1ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1f0:	0028      	movs	r0, r5
     1f2:	4b9a      	ldr	r3, [pc, #616]	; (45c <i2c_master_init+0x2a4>)
     1f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1f6:	7b20      	ldrb	r0, [r4, #12]
     1f8:	2100      	movs	r1, #0
     1fa:	4b99      	ldr	r3, [pc, #612]	; (460 <i2c_master_init+0x2a8>)
     1fc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1fe:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     200:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     202:	079b      	lsls	r3, r3, #30
     204:	d505      	bpl.n	212 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     206:	b00a      	add	sp, #40	; 0x28
     208:	bc1c      	pop	{r2, r3, r4}
     20a:	4690      	mov	r8, r2
     20c:	4699      	mov	r9, r3
     20e:	46a2      	mov	sl, r4
     210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     212:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     214:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     216:	07db      	lsls	r3, r3, #31
     218:	d4f5      	bmi.n	206 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     21a:	6830      	ldr	r0, [r6, #0]
     21c:	4b8c      	ldr	r3, [pc, #560]	; (450 <i2c_master_init+0x298>)
     21e:	4699      	mov	r9, r3
     220:	4798      	blx	r3
     222:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     224:	498f      	ldr	r1, [pc, #572]	; (464 <i2c_master_init+0x2ac>)
     226:	4b90      	ldr	r3, [pc, #576]	; (468 <i2c_master_init+0x2b0>)
     228:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     22a:	00ad      	lsls	r5, r5, #2
     22c:	4b8f      	ldr	r3, [pc, #572]	; (46c <i2c_master_init+0x2b4>)
     22e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     230:	2300      	movs	r3, #0
     232:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     234:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     236:	2500      	movs	r5, #0
     238:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     23a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     23c:	2225      	movs	r2, #37	; 0x25
     23e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     240:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     242:	3314      	adds	r3, #20
     244:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     246:	6833      	ldr	r3, [r6, #0]
     248:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     24a:	0018      	movs	r0, r3
     24c:	47c8      	blx	r9
     24e:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     250:	2380      	movs	r3, #128	; 0x80
     252:	aa08      	add	r2, sp, #32
     254:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     256:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     258:	2301      	movs	r3, #1
     25a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     25c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     25e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     260:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     262:	2800      	cmp	r0, #0
     264:	d100      	bne.n	268 <i2c_master_init+0xb0>
     266:	e0af      	b.n	3c8 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     268:	ab08      	add	r3, sp, #32
     26a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     26c:	2302      	movs	r3, #2
     26e:	aa08      	add	r2, sp, #32
     270:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     272:	0c00      	lsrs	r0, r0, #16
     274:	b2c0      	uxtb	r0, r0
     276:	0011      	movs	r1, r2
     278:	4b7d      	ldr	r3, [pc, #500]	; (470 <i2c_master_init+0x2b8>)
     27a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     27c:	2f00      	cmp	r7, #0
     27e:	d100      	bne.n	282 <i2c_master_init+0xca>
     280:	e0a7      	b.n	3d2 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     282:	ab08      	add	r3, sp, #32
     284:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     286:	2302      	movs	r3, #2
     288:	aa08      	add	r2, sp, #32
     28a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     28c:	0c3f      	lsrs	r7, r7, #16
     28e:	b2f8      	uxtb	r0, r7
     290:	0011      	movs	r1, r2
     292:	4b77      	ldr	r3, [pc, #476]	; (470 <i2c_master_init+0x2b8>)
     294:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     296:	8aa3      	ldrh	r3, [r4, #20]
     298:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     29a:	8ae3      	ldrh	r3, [r4, #22]
     29c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     29e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2a0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2a2:	2b00      	cmp	r3, #0
     2a4:	d104      	bne.n	2b0 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2a6:	4b73      	ldr	r3, [pc, #460]	; (474 <i2c_master_init+0x2bc>)
     2a8:	789b      	ldrb	r3, [r3, #2]
     2aa:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ac:	0fdb      	lsrs	r3, r3, #31
     2ae:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2b0:	68a1      	ldr	r1, [r4, #8]
     2b2:	6923      	ldr	r3, [r4, #16]
     2b4:	430b      	orrs	r3, r1
     2b6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2b8:	2224      	movs	r2, #36	; 0x24
     2ba:	5ca2      	ldrb	r2, [r4, r2]
     2bc:	2a00      	cmp	r2, #0
     2be:	d002      	beq.n	2c6 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2c0:	2280      	movs	r2, #128	; 0x80
     2c2:	05d2      	lsls	r2, r2, #23
     2c4:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2c8:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2ca:	222c      	movs	r2, #44	; 0x2c
     2cc:	5ca2      	ldrb	r2, [r4, r2]
     2ce:	2a00      	cmp	r2, #0
     2d0:	d103      	bne.n	2da <i2c_master_init+0x122>
     2d2:	2280      	movs	r2, #128	; 0x80
     2d4:	0492      	lsls	r2, r2, #18
     2d6:	4291      	cmp	r1, r2
     2d8:	d102      	bne.n	2e0 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2da:	2280      	movs	r2, #128	; 0x80
     2dc:	0512      	lsls	r2, r2, #20
     2de:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     2e0:	222d      	movs	r2, #45	; 0x2d
     2e2:	5ca2      	ldrb	r2, [r4, r2]
     2e4:	2a00      	cmp	r2, #0
     2e6:	d002      	beq.n	2ee <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2e8:	2280      	movs	r2, #128	; 0x80
     2ea:	0412      	lsls	r2, r2, #16
     2ec:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     2ee:	222e      	movs	r2, #46	; 0x2e
     2f0:	5ca2      	ldrb	r2, [r4, r2]
     2f2:	2a00      	cmp	r2, #0
     2f4:	d002      	beq.n	2fc <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2f6:	2280      	movs	r2, #128	; 0x80
     2f8:	03d2      	lsls	r2, r2, #15
     2fa:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2fc:	4642      	mov	r2, r8
     2fe:	6812      	ldr	r2, [r2, #0]
     300:	4313      	orrs	r3, r2
     302:	4642      	mov	r2, r8
     304:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     306:	2380      	movs	r3, #128	; 0x80
     308:	005b      	lsls	r3, r3, #1
     30a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     30c:	4648      	mov	r0, r9
     30e:	3014      	adds	r0, #20
     310:	b2c0      	uxtb	r0, r0
     312:	4b59      	ldr	r3, [pc, #356]	; (478 <i2c_master_init+0x2c0>)
     314:	4798      	blx	r3
     316:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     318:	23fa      	movs	r3, #250	; 0xfa
     31a:	009b      	lsls	r3, r3, #2
     31c:	6822      	ldr	r2, [r4, #0]
     31e:	435a      	muls	r2, r3
     320:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     322:	6863      	ldr	r3, [r4, #4]
     324:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     326:	4d55      	ldr	r5, [pc, #340]	; (47c <i2c_master_init+0x2c4>)
     328:	47a8      	blx	r5
     32a:	9000      	str	r0, [sp, #0]
     32c:	9101      	str	r1, [sp, #4]
     32e:	464b      	mov	r3, r9
     330:	0058      	lsls	r0, r3, #1
     332:	47a8      	blx	r5
     334:	9002      	str	r0, [sp, #8]
     336:	9103      	str	r1, [sp, #12]
     338:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     33a:	47a8      	blx	r5
     33c:	9004      	str	r0, [sp, #16]
     33e:	9105      	str	r1, [sp, #20]
     340:	4f4f      	ldr	r7, [pc, #316]	; (480 <i2c_master_init+0x2c8>)
     342:	4a50      	ldr	r2, [pc, #320]	; (484 <i2c_master_init+0x2cc>)
     344:	4b50      	ldr	r3, [pc, #320]	; (488 <i2c_master_init+0x2d0>)
     346:	9800      	ldr	r0, [sp, #0]
     348:	9901      	ldr	r1, [sp, #4]
     34a:	47b8      	blx	r7
     34c:	0002      	movs	r2, r0
     34e:	000b      	movs	r3, r1
     350:	9804      	ldr	r0, [sp, #16]
     352:	9905      	ldr	r1, [sp, #20]
     354:	47b8      	blx	r7
     356:	4e4d      	ldr	r6, [pc, #308]	; (48c <i2c_master_init+0x2d4>)
     358:	2200      	movs	r2, #0
     35a:	4b4d      	ldr	r3, [pc, #308]	; (490 <i2c_master_init+0x2d8>)
     35c:	47b0      	blx	r6
     35e:	9004      	str	r0, [sp, #16]
     360:	9105      	str	r1, [sp, #20]
     362:	4648      	mov	r0, r9
     364:	47a8      	blx	r5
     366:	0002      	movs	r2, r0
     368:	000b      	movs	r3, r1
     36a:	9804      	ldr	r0, [sp, #16]
     36c:	9905      	ldr	r1, [sp, #20]
     36e:	47b8      	blx	r7
     370:	0002      	movs	r2, r0
     372:	000b      	movs	r3, r1
     374:	4d47      	ldr	r5, [pc, #284]	; (494 <i2c_master_init+0x2dc>)
     376:	9800      	ldr	r0, [sp, #0]
     378:	9901      	ldr	r1, [sp, #4]
     37a:	47a8      	blx	r5
     37c:	9a02      	ldr	r2, [sp, #8]
     37e:	9b03      	ldr	r3, [sp, #12]
     380:	47b0      	blx	r6
     382:	2200      	movs	r2, #0
     384:	4b44      	ldr	r3, [pc, #272]	; (498 <i2c_master_init+0x2e0>)
     386:	47a8      	blx	r5
     388:	9a02      	ldr	r2, [sp, #8]
     38a:	9b03      	ldr	r3, [sp, #12]
     38c:	4d43      	ldr	r5, [pc, #268]	; (49c <i2c_master_init+0x2e4>)
     38e:	47a8      	blx	r5
     390:	4b43      	ldr	r3, [pc, #268]	; (4a0 <i2c_master_init+0x2e8>)
     392:	4798      	blx	r3
     394:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     396:	2380      	movs	r3, #128	; 0x80
     398:	049b      	lsls	r3, r3, #18
     39a:	68a2      	ldr	r2, [r4, #8]
     39c:	429a      	cmp	r2, r3
     39e:	d01e      	beq.n	3de <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3a0:	0003      	movs	r3, r0
     3a2:	2040      	movs	r0, #64	; 0x40
     3a4:	2dff      	cmp	r5, #255	; 0xff
     3a6:	d900      	bls.n	3aa <i2c_master_init+0x1f2>
     3a8:	e72d      	b.n	206 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     3aa:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3ac:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3ae:	25ff      	movs	r5, #255	; 0xff
     3b0:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3b2:	0624      	lsls	r4, r4, #24
     3b4:	4325      	orrs	r5, r4
     3b6:	0400      	lsls	r0, r0, #16
     3b8:	23ff      	movs	r3, #255	; 0xff
     3ba:	041b      	lsls	r3, r3, #16
     3bc:	4018      	ands	r0, r3
     3be:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3c0:	4643      	mov	r3, r8
     3c2:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3c4:	2000      	movs	r0, #0
     3c6:	e71e      	b.n	206 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3c8:	2100      	movs	r1, #0
     3ca:	4640      	mov	r0, r8
     3cc:	4b35      	ldr	r3, [pc, #212]	; (4a4 <i2c_master_init+0x2ec>)
     3ce:	4798      	blx	r3
     3d0:	e74a      	b.n	268 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3d2:	2101      	movs	r1, #1
     3d4:	4640      	mov	r0, r8
     3d6:	4b33      	ldr	r3, [pc, #204]	; (4a4 <i2c_master_init+0x2ec>)
     3d8:	4798      	blx	r3
     3da:	0007      	movs	r7, r0
     3dc:	e751      	b.n	282 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3de:	26fa      	movs	r6, #250	; 0xfa
     3e0:	00b6      	lsls	r6, r6, #2
     3e2:	4653      	mov	r3, sl
     3e4:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     3e6:	9800      	ldr	r0, [sp, #0]
     3e8:	9901      	ldr	r1, [sp, #4]
     3ea:	0002      	movs	r2, r0
     3ec:	000b      	movs	r3, r1
     3ee:	4c27      	ldr	r4, [pc, #156]	; (48c <i2c_master_init+0x2d4>)
     3f0:	47a0      	blx	r4
     3f2:	9000      	str	r0, [sp, #0]
     3f4:	9101      	str	r1, [sp, #4]
     3f6:	0030      	movs	r0, r6
     3f8:	4b20      	ldr	r3, [pc, #128]	; (47c <i2c_master_init+0x2c4>)
     3fa:	4798      	blx	r3
     3fc:	2200      	movs	r2, #0
     3fe:	4b2a      	ldr	r3, [pc, #168]	; (4a8 <i2c_master_init+0x2f0>)
     400:	47b8      	blx	r7
     402:	0002      	movs	r2, r0
     404:	000b      	movs	r3, r1
     406:	9800      	ldr	r0, [sp, #0]
     408:	9901      	ldr	r1, [sp, #4]
     40a:	4c24      	ldr	r4, [pc, #144]	; (49c <i2c_master_init+0x2e4>)
     40c:	47a0      	blx	r4
     40e:	2200      	movs	r2, #0
     410:	4b21      	ldr	r3, [pc, #132]	; (498 <i2c_master_init+0x2e0>)
     412:	4c20      	ldr	r4, [pc, #128]	; (494 <i2c_master_init+0x2dc>)
     414:	47a0      	blx	r4
     416:	4b22      	ldr	r3, [pc, #136]	; (4a0 <i2c_master_init+0x2e8>)
     418:	4798      	blx	r3
     41a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     41c:	d00c      	beq.n	438 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     41e:	0031      	movs	r1, r6
     420:	9807      	ldr	r0, [sp, #28]
     422:	4b22      	ldr	r3, [pc, #136]	; (4ac <i2c_master_init+0x2f4>)
     424:	4798      	blx	r3
     426:	3802      	subs	r0, #2
     428:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     42a:	002b      	movs	r3, r5
     42c:	2dff      	cmp	r5, #255	; 0xff
     42e:	d80c      	bhi.n	44a <i2c_master_init+0x292>
     430:	28ff      	cmp	r0, #255	; 0xff
     432:	d9bc      	bls.n	3ae <i2c_master_init+0x1f6>
     434:	2040      	movs	r0, #64	; 0x40
     436:	e6e6      	b.n	206 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     438:	0071      	lsls	r1, r6, #1
     43a:	1e48      	subs	r0, r1, #1
     43c:	9b07      	ldr	r3, [sp, #28]
     43e:	469c      	mov	ip, r3
     440:	4460      	add	r0, ip
     442:	4b1a      	ldr	r3, [pc, #104]	; (4ac <i2c_master_init+0x2f4>)
     444:	4798      	blx	r3
     446:	3801      	subs	r0, #1
     448:	e7ef      	b.n	42a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     44a:	2040      	movs	r0, #64	; 0x40
     44c:	e6db      	b.n	206 <i2c_master_init+0x4e>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	00001b45 	.word	0x00001b45
     454:	40000400 	.word	0x40000400
     458:	00001e65 	.word	0x00001e65
     45c:	00001dd9 	.word	0x00001dd9
     460:	00001981 	.word	0x00001981
     464:	000008d9 	.word	0x000008d9
     468:	00001b81 	.word	0x00001b81
     46c:	20000158 	.word	0x20000158
     470:	00001f5d 	.word	0x00001f5d
     474:	41002000 	.word	0x41002000
     478:	00001e81 	.word	0x00001e81
     47c:	00003ee5 	.word	0x00003ee5
     480:	000032cd 	.word	0x000032cd
     484:	e826d695 	.word	0xe826d695
     488:	3e112e0b 	.word	0x3e112e0b
     48c:	00002445 	.word	0x00002445
     490:	40240000 	.word	0x40240000
     494:	000037cd 	.word	0x000037cd
     498:	3ff00000 	.word	0x3ff00000
     49c:	00002a65 	.word	0x00002a65
     4a0:	00003df9 	.word	0x00003df9
     4a4:	000019cd 	.word	0x000019cd
     4a8:	40080000 	.word	0x40080000
     4ac:	000021dd 	.word	0x000021dd

000004b0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4b0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4b2:	7e1a      	ldrb	r2, [r3, #24]
     4b4:	0792      	lsls	r2, r2, #30
     4b6:	d507      	bpl.n	4c8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4b8:	2202      	movs	r2, #2
     4ba:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4bc:	8b5b      	ldrh	r3, [r3, #26]
     4be:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4c0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     4c2:	17db      	asrs	r3, r3, #31
     4c4:	4018      	ands	r0, r3
}
     4c6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4c8:	8b5a      	ldrh	r2, [r3, #26]
     4ca:	0752      	lsls	r2, r2, #29
     4cc:	d506      	bpl.n	4dc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4ce:	6859      	ldr	r1, [r3, #4]
     4d0:	22c0      	movs	r2, #192	; 0xc0
     4d2:	0292      	lsls	r2, r2, #10
     4d4:	430a      	orrs	r2, r1
     4d6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     4d8:	2018      	movs	r0, #24
     4da:	e7f4      	b.n	4c6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     4dc:	2000      	movs	r0, #0
     4de:	e7f2      	b.n	4c6 <_i2c_master_address_response+0x16>

000004e0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4e0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4e2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4e4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4e6:	2401      	movs	r4, #1
     4e8:	2502      	movs	r5, #2
     4ea:	7e11      	ldrb	r1, [r2, #24]
     4ec:	4221      	tst	r1, r4
     4ee:	d10b      	bne.n	508 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4f0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4f2:	4229      	tst	r1, r5
     4f4:	d106      	bne.n	504 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4f6:	3301      	adds	r3, #1
     4f8:	b29b      	uxth	r3, r3
     4fa:	8901      	ldrh	r1, [r0, #8]
     4fc:	4299      	cmp	r1, r3
     4fe:	d8f4      	bhi.n	4ea <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     500:	2012      	movs	r0, #18
     502:	e002      	b.n	50a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     504:	2000      	movs	r0, #0
     506:	e000      	b.n	50a <_i2c_master_wait_for_bus+0x2a>
     508:	2000      	movs	r0, #0
}
     50a:	bd30      	pop	{r4, r5, pc}

0000050c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     50c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     50e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     510:	6862      	ldr	r2, [r4, #4]
     512:	2380      	movs	r3, #128	; 0x80
     514:	02db      	lsls	r3, r3, #11
     516:	4313      	orrs	r3, r2
     518:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     51a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     51c:	4b02      	ldr	r3, [pc, #8]	; (528 <_i2c_master_send_hs_master_code+0x1c>)
     51e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     520:	2301      	movs	r3, #1
     522:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     524:	bd10      	pop	{r4, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	000004e1 	.word	0x000004e1

0000052c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     52c:	b5f0      	push	{r4, r5, r6, r7, lr}
     52e:	46de      	mov	lr, fp
     530:	4657      	mov	r7, sl
     532:	464e      	mov	r6, r9
     534:	4645      	mov	r5, r8
     536:	b5e0      	push	{r5, r6, r7, lr}
     538:	b083      	sub	sp, #12
     53a:	0006      	movs	r6, r0
     53c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     53e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     540:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     542:	682b      	ldr	r3, [r5, #0]
     544:	011b      	lsls	r3, r3, #4
     546:	0fdb      	lsrs	r3, r3, #31
     548:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     54a:	7a4b      	ldrb	r3, [r1, #9]
     54c:	2b00      	cmp	r3, #0
     54e:	d12b      	bne.n	5a8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     550:	686b      	ldr	r3, [r5, #4]
     552:	4a58      	ldr	r2, [pc, #352]	; (6b4 <_i2c_master_read_packet+0x188>)
     554:	4013      	ands	r3, r2
     556:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     558:	464b      	mov	r3, r9
     55a:	7a1b      	ldrb	r3, [r3, #8]
     55c:	2b00      	cmp	r3, #0
     55e:	d127      	bne.n	5b0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     560:	464b      	mov	r3, r9
     562:	881b      	ldrh	r3, [r3, #0]
     564:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     566:	464a      	mov	r2, r9
     568:	7a52      	ldrb	r2, [r2, #9]
     56a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     56c:	4313      	orrs	r3, r2
     56e:	2201      	movs	r2, #1
     570:	4313      	orrs	r3, r2
     572:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     574:	0030      	movs	r0, r6
     576:	4b50      	ldr	r3, [pc, #320]	; (6b8 <_i2c_master_read_packet+0x18c>)
     578:	4798      	blx	r3
     57a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     57c:	4653      	mov	r3, sl
     57e:	2b00      	cmp	r3, #0
     580:	d003      	beq.n	58a <_i2c_master_read_packet+0x5e>
     582:	464b      	mov	r3, r9
     584:	885b      	ldrh	r3, [r3, #2]
     586:	2b01      	cmp	r3, #1
     588:	d03b      	beq.n	602 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     58a:	686b      	ldr	r3, [r5, #4]
     58c:	4a49      	ldr	r2, [pc, #292]	; (6b4 <_i2c_master_read_packet+0x188>)
     58e:	4013      	ands	r3, r2
     590:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     592:	9b01      	ldr	r3, [sp, #4]
     594:	2b00      	cmp	r3, #0
     596:	d03a      	beq.n	60e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     598:	9801      	ldr	r0, [sp, #4]
     59a:	b003      	add	sp, #12
     59c:	bc3c      	pop	{r2, r3, r4, r5}
     59e:	4690      	mov	r8, r2
     5a0:	4699      	mov	r9, r3
     5a2:	46a2      	mov	sl, r4
     5a4:	46ab      	mov	fp, r5
     5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5a8:	7a89      	ldrb	r1, [r1, #10]
     5aa:	4b44      	ldr	r3, [pc, #272]	; (6bc <_i2c_master_read_packet+0x190>)
     5ac:	4798      	blx	r3
     5ae:	e7cf      	b.n	550 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     5b0:	464b      	mov	r3, r9
     5b2:	881b      	ldrh	r3, [r3, #0]
     5b4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5b6:	464a      	mov	r2, r9
     5b8:	7a52      	ldrb	r2, [r2, #9]
     5ba:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     5bc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5be:	2280      	movs	r2, #128	; 0x80
     5c0:	0212      	lsls	r2, r2, #8
     5c2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     5c4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     5c6:	0030      	movs	r0, r6
     5c8:	4b3b      	ldr	r3, [pc, #236]	; (6b8 <_i2c_master_read_packet+0x18c>)
     5ca:	4798      	blx	r3
     5cc:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5ce:	686b      	ldr	r3, [r5, #4]
     5d0:	4a38      	ldr	r2, [pc, #224]	; (6b4 <_i2c_master_read_packet+0x188>)
     5d2:	4013      	ands	r3, r2
     5d4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d1de      	bne.n	598 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     5da:	0030      	movs	r0, r6
     5dc:	4b38      	ldr	r3, [pc, #224]	; (6c0 <_i2c_master_read_packet+0x194>)
     5de:	4798      	blx	r3
     5e0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     5e2:	2800      	cmp	r0, #0
     5e4:	d1d8      	bne.n	598 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5e6:	464b      	mov	r3, r9
     5e8:	881b      	ldrh	r3, [r3, #0]
     5ea:	0a1b      	lsrs	r3, r3, #8
     5ec:	2278      	movs	r2, #120	; 0x78
     5ee:	4313      	orrs	r3, r2
     5f0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5f2:	464a      	mov	r2, r9
     5f4:	7a52      	ldrb	r2, [r2, #9]
     5f6:	0392      	lsls	r2, r2, #14
     5f8:	2101      	movs	r1, #1
     5fa:	430a      	orrs	r2, r1
     5fc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5fe:	626b      	str	r3, [r5, #36]	; 0x24
     600:	e7b8      	b.n	574 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     602:	686a      	ldr	r2, [r5, #4]
     604:	2380      	movs	r3, #128	; 0x80
     606:	02db      	lsls	r3, r3, #11
     608:	4313      	orrs	r3, r2
     60a:	606b      	str	r3, [r5, #4]
     60c:	e7c1      	b.n	592 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     60e:	0030      	movs	r0, r6
     610:	4b2b      	ldr	r3, [pc, #172]	; (6c0 <_i2c_master_read_packet+0x194>)
     612:	4798      	blx	r3
     614:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     616:	2800      	cmp	r0, #0
     618:	d1be      	bne.n	598 <_i2c_master_read_packet+0x6c>
     61a:	3c01      	subs	r4, #1
     61c:	b2a4      	uxth	r4, r4
     61e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     620:	4b28      	ldr	r3, [pc, #160]	; (6c4 <_i2c_master_read_packet+0x198>)
     622:	469b      	mov	fp, r3
     624:	e015      	b.n	652 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     626:	2c01      	cmp	r4, #1
     628:	d020      	beq.n	66c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     62a:	0030      	movs	r0, r6
     62c:	4b26      	ldr	r3, [pc, #152]	; (6c8 <_i2c_master_read_packet+0x19c>)
     62e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     630:	4643      	mov	r3, r8
     632:	1c5f      	adds	r7, r3, #1
     634:	b2bf      	uxth	r7, r7
     636:	2328      	movs	r3, #40	; 0x28
     638:	5ceb      	ldrb	r3, [r5, r3]
     63a:	464a      	mov	r2, r9
     63c:	6852      	ldr	r2, [r2, #4]
     63e:	4641      	mov	r1, r8
     640:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     642:	0030      	movs	r0, r6
     644:	4b1c      	ldr	r3, [pc, #112]	; (6b8 <_i2c_master_read_packet+0x18c>)
     646:	4798      	blx	r3
     648:	3c01      	subs	r4, #1
     64a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     64c:	2800      	cmp	r0, #0
     64e:	d115      	bne.n	67c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     650:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     652:	455c      	cmp	r4, fp
     654:	d014      	beq.n	680 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     656:	8b6b      	ldrh	r3, [r5, #26]
     658:	069b      	lsls	r3, r3, #26
     65a:	d527      	bpl.n	6ac <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     65c:	7af3      	ldrb	r3, [r6, #11]
     65e:	2b00      	cmp	r3, #0
     660:	d0e3      	beq.n	62a <_i2c_master_read_packet+0xfe>
     662:	4653      	mov	r3, sl
     664:	2b00      	cmp	r3, #0
     666:	d1de      	bne.n	626 <_i2c_master_read_packet+0xfa>
     668:	2c00      	cmp	r4, #0
     66a:	d1de      	bne.n	62a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     66c:	686a      	ldr	r2, [r5, #4]
     66e:	2380      	movs	r3, #128	; 0x80
     670:	02db      	lsls	r3, r3, #11
     672:	4313      	orrs	r3, r2
     674:	606b      	str	r3, [r5, #4]
     676:	3c01      	subs	r4, #1
     678:	b2a4      	uxth	r4, r4
     67a:	e7ea      	b.n	652 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     67c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     67e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     680:	7ab3      	ldrb	r3, [r6, #10]
     682:	2b00      	cmp	r3, #0
     684:	d109      	bne.n	69a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     686:	0030      	movs	r0, r6
     688:	4b0f      	ldr	r3, [pc, #60]	; (6c8 <_i2c_master_read_packet+0x19c>)
     68a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     68c:	2328      	movs	r3, #40	; 0x28
     68e:	5cea      	ldrb	r2, [r5, r3]
     690:	464b      	mov	r3, r9
     692:	685b      	ldr	r3, [r3, #4]
     694:	4641      	mov	r1, r8
     696:	545a      	strb	r2, [r3, r1]
     698:	e77e      	b.n	598 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     69a:	0030      	movs	r0, r6
     69c:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <_i2c_master_read_packet+0x19c>)
     69e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6a0:	686a      	ldr	r2, [r5, #4]
     6a2:	23c0      	movs	r3, #192	; 0xc0
     6a4:	029b      	lsls	r3, r3, #10
     6a6:	4313      	orrs	r3, r2
     6a8:	606b      	str	r3, [r5, #4]
     6aa:	e7ec      	b.n	686 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     6ac:	2341      	movs	r3, #65	; 0x41
     6ae:	9301      	str	r3, [sp, #4]
     6b0:	e772      	b.n	598 <_i2c_master_read_packet+0x6c>
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	fffbffff 	.word	0xfffbffff
     6b8:	000004e1 	.word	0x000004e1
     6bc:	0000050d 	.word	0x0000050d
     6c0:	000004b1 	.word	0x000004b1
     6c4:	0000ffff 	.word	0x0000ffff
     6c8:	000001ad 	.word	0x000001ad

000006cc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ce:	46de      	mov	lr, fp
     6d0:	4657      	mov	r7, sl
     6d2:	464e      	mov	r6, r9
     6d4:	4645      	mov	r5, r8
     6d6:	b5e0      	push	{r5, r6, r7, lr}
     6d8:	b083      	sub	sp, #12
     6da:	0006      	movs	r6, r0
     6dc:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6de:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6e0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     6e2:	4b32      	ldr	r3, [pc, #200]	; (7ac <_i2c_master_write_packet+0xe0>)
     6e4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6e6:	7a7b      	ldrb	r3, [r7, #9]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d11d      	bne.n	728 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6ec:	686b      	ldr	r3, [r5, #4]
     6ee:	4a30      	ldr	r2, [pc, #192]	; (7b0 <_i2c_master_write_packet+0xe4>)
     6f0:	4013      	ands	r3, r2
     6f2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     6f4:	7a3b      	ldrb	r3, [r7, #8]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d01b      	beq.n	732 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6fa:	883b      	ldrh	r3, [r7, #0]
     6fc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6fe:	7a7a      	ldrb	r2, [r7, #9]
     700:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     702:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     704:	2280      	movs	r2, #128	; 0x80
     706:	0212      	lsls	r2, r2, #8
     708:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     70a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     70c:	0030      	movs	r0, r6
     70e:	4b29      	ldr	r3, [pc, #164]	; (7b4 <_i2c_master_write_packet+0xe8>)
     710:	4798      	blx	r3
     712:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     714:	2800      	cmp	r0, #0
     716:	d013      	beq.n	740 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     718:	9801      	ldr	r0, [sp, #4]
     71a:	b003      	add	sp, #12
     71c:	bc3c      	pop	{r2, r3, r4, r5}
     71e:	4690      	mov	r8, r2
     720:	4699      	mov	r9, r3
     722:	46a2      	mov	sl, r4
     724:	46ab      	mov	fp, r5
     726:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     728:	7ab9      	ldrb	r1, [r7, #10]
     72a:	0030      	movs	r0, r6
     72c:	4b22      	ldr	r3, [pc, #136]	; (7b8 <_i2c_master_write_packet+0xec>)
     72e:	4798      	blx	r3
     730:	e7dc      	b.n	6ec <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     732:	883b      	ldrh	r3, [r7, #0]
     734:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     736:	7a7a      	ldrb	r2, [r7, #9]
     738:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     73a:	4313      	orrs	r3, r2
     73c:	626b      	str	r3, [r5, #36]	; 0x24
     73e:	e7e5      	b.n	70c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     740:	0030      	movs	r0, r6
     742:	4b1e      	ldr	r3, [pc, #120]	; (7bc <_i2c_master_write_packet+0xf0>)
     744:	4798      	blx	r3
     746:	1e03      	subs	r3, r0, #0
     748:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     74a:	d1e5      	bne.n	718 <_i2c_master_write_packet+0x4c>
     74c:	46a0      	mov	r8, r4
     74e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     750:	3320      	adds	r3, #32
     752:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     754:	4b15      	ldr	r3, [pc, #84]	; (7ac <_i2c_master_write_packet+0xe0>)
     756:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     758:	4b16      	ldr	r3, [pc, #88]	; (7b4 <_i2c_master_write_packet+0xe8>)
     75a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     75c:	4544      	cmp	r4, r8
     75e:	d015      	beq.n	78c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     760:	8b6b      	ldrh	r3, [r5, #26]
     762:	464a      	mov	r2, r9
     764:	4213      	tst	r3, r2
     766:	d01d      	beq.n	7a4 <_i2c_master_write_packet+0xd8>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     768:	687b      	ldr	r3, [r7, #4]
     76a:	5d1a      	ldrb	r2, [r3, r4]
     76c:	2328      	movs	r3, #40	; 0x28
     76e:	54ea      	strb	r2, [r5, r3]
			_i2c_master_wait_for_sync(module);
     770:	0030      	movs	r0, r6
     772:	47d8      	blx	fp
			tmp_status = _i2c_master_wait_for_bus(module);
     774:	0030      	movs	r0, r6
     776:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     778:	2800      	cmp	r0, #0
     77a:	d106      	bne.n	78a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     77c:	8b6b      	ldrh	r3, [r5, #26]
     77e:	3401      	adds	r4, #1
     780:	075b      	lsls	r3, r3, #29
     782:	d5eb      	bpl.n	75c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     784:	231e      	movs	r3, #30
     786:	9301      	str	r3, [sp, #4]
     788:	e000      	b.n	78c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     78a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     78c:	7ab3      	ldrb	r3, [r6, #10]
     78e:	2b00      	cmp	r3, #0
     790:	d0c2      	beq.n	718 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     792:	0030      	movs	r0, r6
     794:	4b05      	ldr	r3, [pc, #20]	; (7ac <_i2c_master_write_packet+0xe0>)
     796:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     798:	686a      	ldr	r2, [r5, #4]
     79a:	23c0      	movs	r3, #192	; 0xc0
     79c:	029b      	lsls	r3, r3, #10
     79e:	4313      	orrs	r3, r2
     7a0:	606b      	str	r3, [r5, #4]
     7a2:	e7b9      	b.n	718 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     7a4:	2341      	movs	r3, #65	; 0x41
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	e7b6      	b.n	718 <_i2c_master_write_packet+0x4c>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	000001ad 	.word	0x000001ad
     7b0:	fffbffff 	.word	0xfffbffff
     7b4:	000004e1 	.word	0x000004e1
     7b8:	0000050d 	.word	0x0000050d
     7bc:	000004b1 	.word	0x000004b1

000007c0 <i2c_master_read_packet_wait>:
{
     7c0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     7c2:	8b83      	ldrh	r3, [r0, #28]
     7c4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7c6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7c8:	2b00      	cmp	r3, #0
     7ca:	d001      	beq.n	7d0 <i2c_master_read_packet_wait+0x10>
}
     7cc:	0010      	movs	r0, r2
     7ce:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7d0:	3301      	adds	r3, #1
     7d2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7d4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7d6:	4b02      	ldr	r3, [pc, #8]	; (7e0 <i2c_master_read_packet_wait+0x20>)
     7d8:	4798      	blx	r3
     7da:	0002      	movs	r2, r0
     7dc:	e7f6      	b.n	7cc <i2c_master_read_packet_wait+0xc>
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0000052d 	.word	0x0000052d

000007e4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7e4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     7e6:	8b83      	ldrh	r3, [r0, #28]
     7e8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7ea:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7ec:	2b00      	cmp	r3, #0
     7ee:	d001      	beq.n	7f4 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     7f0:	0010      	movs	r0, r2
     7f2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7f4:	3301      	adds	r3, #1
     7f6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7f8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7fa:	4b02      	ldr	r3, [pc, #8]	; (804 <i2c_master_write_packet_wait+0x20>)
     7fc:	4798      	blx	r3
     7fe:	0002      	movs	r2, r0
     800:	e7f6      	b.n	7f0 <i2c_master_write_packet_wait+0xc>
     802:	46c0      	nop			; (mov r8, r8)
     804:	000006cd 	.word	0x000006cd

00000808 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     808:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     80a:	2207      	movs	r2, #7
     80c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     80e:	421a      	tst	r2, r3
     810:	d1fc      	bne.n	80c <_i2c_master_wait_for_sync+0x4>
}
     812:	4770      	bx	lr

00000814 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     814:	b570      	push	{r4, r5, r6, lr}
     816:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     818:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     81a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     81c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     81e:	8b83      	ldrh	r3, [r0, #28]
     820:	1aed      	subs	r5, r5, r3
     822:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     824:	8b83      	ldrh	r3, [r0, #28]
     826:	3b01      	subs	r3, #1
     828:	b29b      	uxth	r3, r3
     82a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     82c:	0113      	lsls	r3, r2, #4
     82e:	d51d      	bpl.n	86c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     830:	7ac3      	ldrb	r3, [r0, #11]
     832:	2b00      	cmp	r3, #0
     834:	d003      	beq.n	83e <_i2c_master_read+0x2a>
     836:	8b83      	ldrh	r3, [r0, #28]
     838:	b29b      	uxth	r3, r3
     83a:	2b01      	cmp	r3, #1
     83c:	d010      	beq.n	860 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     83e:	8ba3      	ldrh	r3, [r4, #28]
     840:	b29b      	uxth	r3, r3
     842:	2b00      	cmp	r3, #0
     844:	d102      	bne.n	84c <_i2c_master_read+0x38>
		if (module->send_stop) {
     846:	7aa3      	ldrb	r3, [r4, #10]
     848:	2b00      	cmp	r3, #0
     84a:	d11c      	bne.n	886 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     84c:	0020      	movs	r0, r4
     84e:	4b12      	ldr	r3, [pc, #72]	; (898 <_i2c_master_read+0x84>)
     850:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     852:	6a23      	ldr	r3, [r4, #32]
     854:	195d      	adds	r5, r3, r5
     856:	2328      	movs	r3, #40	; 0x28
     858:	5cf3      	ldrb	r3, [r6, r3]
     85a:	b2db      	uxtb	r3, r3
     85c:	702b      	strb	r3, [r5, #0]
}
     85e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     860:	6872      	ldr	r2, [r6, #4]
     862:	2380      	movs	r3, #128	; 0x80
     864:	02db      	lsls	r3, r3, #11
     866:	4313      	orrs	r3, r2
     868:	6073      	str	r3, [r6, #4]
     86a:	e7e8      	b.n	83e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     86c:	7ac3      	ldrb	r3, [r0, #11]
     86e:	2b00      	cmp	r3, #0
     870:	d0e5      	beq.n	83e <_i2c_master_read+0x2a>
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	b29b      	uxth	r3, r3
     876:	2b00      	cmp	r3, #0
     878:	d1e1      	bne.n	83e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     87a:	6872      	ldr	r2, [r6, #4]
     87c:	2380      	movs	r3, #128	; 0x80
     87e:	02db      	lsls	r3, r3, #11
     880:	4313      	orrs	r3, r2
     882:	6073      	str	r3, [r6, #4]
     884:	e7db      	b.n	83e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     886:	0020      	movs	r0, r4
     888:	4b03      	ldr	r3, [pc, #12]	; (898 <_i2c_master_read+0x84>)
     88a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     88c:	6872      	ldr	r2, [r6, #4]
     88e:	23c0      	movs	r3, #192	; 0xc0
     890:	029b      	lsls	r3, r3, #10
     892:	4313      	orrs	r3, r2
     894:	6073      	str	r3, [r6, #4]
     896:	e7d9      	b.n	84c <_i2c_master_read+0x38>
     898:	00000809 	.word	0x00000809

0000089c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8a0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     8a2:	8b6b      	ldrh	r3, [r5, #26]
     8a4:	075b      	lsls	r3, r3, #29
     8a6:	d503      	bpl.n	8b0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     8a8:	221e      	movs	r2, #30
     8aa:	2325      	movs	r3, #37	; 0x25
     8ac:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     8ae:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     8b0:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     8b2:	8b83      	ldrh	r3, [r0, #28]
     8b4:	1af6      	subs	r6, r6, r3
     8b6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     8b8:	8b83      	ldrh	r3, [r0, #28]
     8ba:	3b01      	subs	r3, #1
     8bc:	b29b      	uxth	r3, r3
     8be:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     8c0:	4b04      	ldr	r3, [pc, #16]	; (8d4 <_i2c_master_write+0x38>)
     8c2:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     8c4:	6a23      	ldr	r3, [r4, #32]
     8c6:	199e      	adds	r6, r3, r6
     8c8:	7833      	ldrb	r3, [r6, #0]
     8ca:	b2db      	uxtb	r3, r3
     8cc:	2228      	movs	r2, #40	; 0x28
     8ce:	54ab      	strb	r3, [r5, r2]
     8d0:	e7ed      	b.n	8ae <_i2c_master_write+0x12>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	00000809 	.word	0x00000809

000008d8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     8da:	0080      	lsls	r0, r0, #2
     8dc:	4b75      	ldr	r3, [pc, #468]	; (ab4 <_i2c_master_interrupt_handler+0x1dc>)
     8de:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8e0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8e2:	682b      	ldr	r3, [r5, #0]
     8e4:	011b      	lsls	r3, r3, #4
     8e6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8e8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8ea:	7e26      	ldrb	r6, [r4, #24]
     8ec:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8ee:	8b63      	ldrh	r3, [r4, #26]
     8f0:	b29b      	uxth	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	d103      	bne.n	8fe <_i2c_master_interrupt_handler+0x26>
     8f6:	8ba3      	ldrh	r3, [r4, #28]
     8f8:	b29b      	uxth	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	d123      	bne.n	946 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8fe:	8b63      	ldrh	r3, [r4, #26]
     900:	b29b      	uxth	r3, r3
     902:	2b00      	cmp	r3, #0
     904:	d008      	beq.n	918 <_i2c_master_interrupt_handler+0x40>
     906:	8ba3      	ldrh	r3, [r4, #28]
     908:	b29b      	uxth	r3, r3
     90a:	2b00      	cmp	r3, #0
     90c:	d104      	bne.n	918 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     90e:	3325      	adds	r3, #37	; 0x25
     910:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     912:	2b05      	cmp	r3, #5
     914:	d100      	bne.n	918 <_i2c_master_interrupt_handler+0x40>
     916:	e06d      	b.n	9f4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     918:	8b63      	ldrh	r3, [r4, #26]
     91a:	b29b      	uxth	r3, r3
     91c:	2b00      	cmp	r3, #0
     91e:	d024      	beq.n	96a <_i2c_master_interrupt_handler+0x92>
     920:	8ba3      	ldrh	r3, [r4, #28]
     922:	b29b      	uxth	r3, r3
     924:	2b00      	cmp	r3, #0
     926:	d020      	beq.n	96a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     928:	8b6b      	ldrh	r3, [r5, #26]
     92a:	069b      	lsls	r3, r3, #26
     92c:	d500      	bpl.n	930 <_i2c_master_interrupt_handler+0x58>
     92e:	e081      	b.n	a34 <_i2c_master_interrupt_handler+0x15c>
     930:	2a00      	cmp	r2, #0
     932:	d004      	beq.n	93e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     934:	8ba3      	ldrh	r3, [r4, #28]
     936:	b29b      	uxth	r3, r3
     938:	2b01      	cmp	r3, #1
     93a:	d100      	bne.n	93e <_i2c_master_interrupt_handler+0x66>
     93c:	e07a      	b.n	a34 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     93e:	2241      	movs	r2, #65	; 0x41
     940:	2325      	movs	r3, #37	; 0x25
     942:	54e2      	strb	r2, [r4, r3]
     944:	e011      	b.n	96a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     946:	7e2b      	ldrb	r3, [r5, #24]
     948:	07db      	lsls	r3, r3, #31
     94a:	d507      	bpl.n	95c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     94c:	2301      	movs	r3, #1
     94e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     950:	8b6b      	ldrh	r3, [r5, #26]
     952:	079b      	lsls	r3, r3, #30
     954:	d52e      	bpl.n	9b4 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     956:	2241      	movs	r2, #65	; 0x41
     958:	2325      	movs	r3, #37	; 0x25
     95a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     95c:	8ba3      	ldrh	r3, [r4, #28]
     95e:	b29b      	uxth	r3, r3
     960:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     962:	2325      	movs	r3, #37	; 0x25
     964:	5ce3      	ldrb	r3, [r4, r3]
     966:	2b05      	cmp	r3, #5
     968:	d038      	beq.n	9dc <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     96a:	8b63      	ldrh	r3, [r4, #26]
     96c:	b29b      	uxth	r3, r3
     96e:	2b00      	cmp	r3, #0
     970:	d007      	beq.n	982 <_i2c_master_interrupt_handler+0xaa>
     972:	8ba3      	ldrh	r3, [r4, #28]
     974:	b29b      	uxth	r3, r3
     976:	2b00      	cmp	r3, #0
     978:	d103      	bne.n	982 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     97a:	3325      	adds	r3, #37	; 0x25
     97c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     97e:	2b05      	cmp	r3, #5
     980:	d064      	beq.n	a4c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     982:	2325      	movs	r3, #37	; 0x25
     984:	5ce3      	ldrb	r3, [r4, r3]
     986:	2b05      	cmp	r3, #5
     988:	d013      	beq.n	9b2 <_i2c_master_interrupt_handler+0xda>
     98a:	2325      	movs	r3, #37	; 0x25
     98c:	5ce3      	ldrb	r3, [r4, r3]
     98e:	2b00      	cmp	r3, #0
     990:	d00f      	beq.n	9b2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     992:	2303      	movs	r3, #3
     994:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     996:	2300      	movs	r3, #0
     998:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     99a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     99c:	3325      	adds	r3, #37	; 0x25
     99e:	5ce3      	ldrb	r3, [r4, r3]
     9a0:	2b41      	cmp	r3, #65	; 0x41
     9a2:	d003      	beq.n	9ac <_i2c_master_interrupt_handler+0xd4>
     9a4:	7aa3      	ldrb	r3, [r4, #10]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d000      	beq.n	9ac <_i2c_master_interrupt_handler+0xd4>
     9aa:	e075      	b.n	a98 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     9ac:	0773      	lsls	r3, r6, #29
     9ae:	d500      	bpl.n	9b2 <_i2c_master_interrupt_handler+0xda>
     9b0:	e07b      	b.n	aaa <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     9b2:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     9b4:	8b6b      	ldrh	r3, [r5, #26]
     9b6:	075b      	lsls	r3, r3, #29
     9b8:	d5d0      	bpl.n	95c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     9ba:	2218      	movs	r2, #24
     9bc:	2325      	movs	r3, #37	; 0x25
     9be:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     9c0:	2300      	movs	r3, #0
     9c2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     9c4:	7aa3      	ldrb	r3, [r4, #10]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d0c8      	beq.n	95c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     9ca:	0020      	movs	r0, r4
     9cc:	4b3a      	ldr	r3, [pc, #232]	; (ab8 <_i2c_master_interrupt_handler+0x1e0>)
     9ce:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9d0:	686a      	ldr	r2, [r5, #4]
     9d2:	23c0      	movs	r3, #192	; 0xc0
     9d4:	029b      	lsls	r3, r3, #10
     9d6:	4313      	orrs	r3, r2
     9d8:	606b      	str	r3, [r5, #4]
     9da:	e7bf      	b.n	95c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9dc:	331f      	adds	r3, #31
     9de:	5ce3      	ldrb	r3, [r4, r3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d003      	beq.n	9ec <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9e4:	0020      	movs	r0, r4
     9e6:	4b35      	ldr	r3, [pc, #212]	; (abc <_i2c_master_interrupt_handler+0x1e4>)
     9e8:	4798      	blx	r3
     9ea:	e7be      	b.n	96a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9ec:	0020      	movs	r0, r4
     9ee:	4b34      	ldr	r3, [pc, #208]	; (ac0 <_i2c_master_interrupt_handler+0x1e8>)
     9f0:	4798      	blx	r3
     9f2:	e7ba      	b.n	96a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9f4:	331f      	adds	r3, #31
     9f6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     9f8:	2b00      	cmp	r3, #0
     9fa:	d000      	beq.n	9fe <_i2c_master_interrupt_handler+0x126>
     9fc:	e78c      	b.n	918 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     9fe:	3303      	adds	r3, #3
     a00:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a02:	2300      	movs	r3, #0
     a04:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a06:	3325      	adds	r3, #37	; 0x25
     a08:	2200      	movs	r2, #0
     a0a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     a0c:	7aa3      	ldrb	r3, [r4, #10]
     a0e:	2b00      	cmp	r3, #0
     a10:	d107      	bne.n	a22 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     a12:	2301      	movs	r3, #1
     a14:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     a16:	07f3      	lsls	r3, r6, #31
     a18:	d5a7      	bpl.n	96a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a1a:	68e3      	ldr	r3, [r4, #12]
     a1c:	0020      	movs	r0, r4
     a1e:	4798      	blx	r3
     a20:	e7a3      	b.n	96a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     a22:	0020      	movs	r0, r4
     a24:	4b24      	ldr	r3, [pc, #144]	; (ab8 <_i2c_master_interrupt_handler+0x1e0>)
     a26:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a28:	686a      	ldr	r2, [r5, #4]
     a2a:	23c0      	movs	r3, #192	; 0xc0
     a2c:	029b      	lsls	r3, r3, #10
     a2e:	4313      	orrs	r3, r2
     a30:	606b      	str	r3, [r5, #4]
     a32:	e7f0      	b.n	a16 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a34:	2324      	movs	r3, #36	; 0x24
     a36:	5ce3      	ldrb	r3, [r4, r3]
     a38:	2b00      	cmp	r3, #0
     a3a:	d103      	bne.n	a44 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     a3c:	0020      	movs	r0, r4
     a3e:	4b20      	ldr	r3, [pc, #128]	; (ac0 <_i2c_master_interrupt_handler+0x1e8>)
     a40:	4798      	blx	r3
     a42:	e792      	b.n	96a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a44:	0020      	movs	r0, r4
     a46:	4b1d      	ldr	r3, [pc, #116]	; (abc <_i2c_master_interrupt_handler+0x1e4>)
     a48:	4798      	blx	r3
     a4a:	e78e      	b.n	96a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a4c:	331f      	adds	r3, #31
     a4e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a50:	2b01      	cmp	r3, #1
     a52:	d196      	bne.n	982 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a54:	7e2b      	ldrb	r3, [r5, #24]
     a56:	079b      	lsls	r3, r3, #30
     a58:	d501      	bpl.n	a5e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a5a:	2302      	movs	r3, #2
     a5c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a5e:	2303      	movs	r3, #3
     a60:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a62:	2300      	movs	r3, #0
     a64:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a66:	3325      	adds	r3, #37	; 0x25
     a68:	2200      	movs	r2, #0
     a6a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a6c:	07b3      	lsls	r3, r6, #30
     a6e:	d503      	bpl.n	a78 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a70:	2324      	movs	r3, #36	; 0x24
     a72:	5ce3      	ldrb	r3, [r4, r3]
     a74:	2b01      	cmp	r3, #1
     a76:	d00b      	beq.n	a90 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a78:	07f3      	lsls	r3, r6, #31
     a7a:	d400      	bmi.n	a7e <_i2c_master_interrupt_handler+0x1a6>
     a7c:	e781      	b.n	982 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a7e:	2324      	movs	r3, #36	; 0x24
     a80:	5ce3      	ldrb	r3, [r4, r3]
     a82:	2b00      	cmp	r3, #0
     a84:	d000      	beq.n	a88 <_i2c_master_interrupt_handler+0x1b0>
     a86:	e77c      	b.n	982 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a88:	68e3      	ldr	r3, [r4, #12]
     a8a:	0020      	movs	r0, r4
     a8c:	4798      	blx	r3
     a8e:	e778      	b.n	982 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a90:	6923      	ldr	r3, [r4, #16]
     a92:	0020      	movs	r0, r4
     a94:	4798      	blx	r3
     a96:	e774      	b.n	982 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a98:	0020      	movs	r0, r4
     a9a:	4b07      	ldr	r3, [pc, #28]	; (ab8 <_i2c_master_interrupt_handler+0x1e0>)
     a9c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a9e:	686a      	ldr	r2, [r5, #4]
     aa0:	23e0      	movs	r3, #224	; 0xe0
     aa2:	02db      	lsls	r3, r3, #11
     aa4:	4313      	orrs	r3, r2
     aa6:	606b      	str	r3, [r5, #4]
     aa8:	e780      	b.n	9ac <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     aaa:	6963      	ldr	r3, [r4, #20]
     aac:	0020      	movs	r0, r4
     aae:	4798      	blx	r3
}
     ab0:	e77f      	b.n	9b2 <_i2c_master_interrupt_handler+0xda>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	20000158 	.word	0x20000158
     ab8:	00000809 	.word	0x00000809
     abc:	00000815 	.word	0x00000815
     ac0:	0000089d 	.word	0x0000089d

00000ac4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     ac4:	4b08      	ldr	r3, [pc, #32]	; (ae8 <pxCurrentTCBConst2>)
     ac6:	6819      	ldr	r1, [r3, #0]
     ac8:	6808      	ldr	r0, [r1, #0]
     aca:	3010      	adds	r0, #16
     acc:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ace:	46a0      	mov	r8, r4
     ad0:	46a9      	mov	r9, r5
     ad2:	46b2      	mov	sl, r6
     ad4:	46bb      	mov	fp, r7
     ad6:	f380 8809 	msr	PSP, r0
     ada:	3820      	subs	r0, #32
     adc:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ade:	4671      	mov	r1, lr
     ae0:	200d      	movs	r0, #13
     ae2:	4301      	orrs	r1, r0
     ae4:	4708      	bx	r1
     ae6:	46c0      	nop			; (mov r8, r8)

00000ae8 <pxCurrentTCBConst2>:
     ae8:	2000002c 	.word	0x2000002c

00000aec <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     aec:	f3ef 8009 	mrs	r0, PSP
     af0:	4b0e      	ldr	r3, [pc, #56]	; (b2c <pxCurrentTCBConst>)
     af2:	681a      	ldr	r2, [r3, #0]
     af4:	3820      	subs	r0, #32
     af6:	6010      	str	r0, [r2, #0]
     af8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     afa:	4644      	mov	r4, r8
     afc:	464d      	mov	r5, r9
     afe:	4656      	mov	r6, sl
     b00:	465f      	mov	r7, fp
     b02:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     b04:	b508      	push	{r3, lr}
     b06:	b672      	cpsid	i
     b08:	f000 fee6 	bl	18d8 <vTaskSwitchContext>
     b0c:	b662      	cpsie	i
     b0e:	bc0c      	pop	{r2, r3}
     b10:	6811      	ldr	r1, [r2, #0]
     b12:	6808      	ldr	r0, [r1, #0]
     b14:	3010      	adds	r0, #16
     b16:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     b18:	46a0      	mov	r8, r4
     b1a:	46a9      	mov	r9, r5
     b1c:	46b2      	mov	sl, r6
     b1e:	46bb      	mov	fp, r7
     b20:	f380 8809 	msr	PSP, r0
     b24:	3820      	subs	r0, #32
     b26:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     b28:	4718      	bx	r3
     b2a:	46c0      	nop			; (mov r8, r8)

00000b2c <pxCurrentTCBConst>:
     b2c:	2000002c 	.word	0x2000002c

00000b30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     b30:	b510      	push	{r4, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     b32:	2280      	movs	r2, #128	; 0x80
     b34:	0552      	lsls	r2, r2, #21
     b36:	4b03      	ldr	r3, [pc, #12]	; (b44 <SysTick_Handler+0x14>)
     b38:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     b3a:	b672      	cpsid	i
	{
		vTaskIncrementTick();
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <SysTick_Handler+0x18>)
     b3e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     b40:	b662      	cpsie	i
}
     b42:	bd10      	pop	{r4, pc}
     b44:	e000ed04 	.word	0xe000ed04
     b48:	000017bd 	.word	0x000017bd

00000b4c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
     b4c:	2800      	cmp	r0, #0
     b4e:	d00a      	beq.n	b66 <null_ptr_check+0x1a>
     b50:	6843      	ldr	r3, [r0, #4]
     b52:	2b00      	cmp	r3, #0
     b54:	d00a      	beq.n	b6c <null_ptr_check+0x20>
     b56:	6883      	ldr	r3, [r0, #8]
     b58:	2b00      	cmp	r3, #0
     b5a:	d00a      	beq.n	b72 <null_ptr_check+0x26>
     b5c:	68c3      	ldr	r3, [r0, #12]
     b5e:	4258      	negs	r0, r3
     b60:	4158      	adcs	r0, r3
     b62:	4240      	negs	r0, r0
	} else {
		rslt = BMP280_OK;
	}

	return rslt;
}
     b64:	4770      	bx	lr
		rslt = BMP280_E_NULL_PTR;
     b66:	2001      	movs	r0, #1
     b68:	4240      	negs	r0, r0
     b6a:	e7fb      	b.n	b64 <null_ptr_check+0x18>
     b6c:	2001      	movs	r0, #1
     b6e:	4240      	negs	r0, r0
     b70:	e7f8      	b.n	b64 <null_ptr_check+0x18>
     b72:	2001      	movs	r0, #1
     b74:	4240      	negs	r0, r0
     b76:	e7f5      	b.n	b64 <null_ptr_check+0x18>

00000b78 <bmp280_get_regs>:
{
     b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b7a:	0007      	movs	r7, r0
     b7c:	000e      	movs	r6, r1
     b7e:	0015      	movs	r5, r2
     b80:	001c      	movs	r4, r3
	rslt = null_ptr_check(dev);
     b82:	0018      	movs	r0, r3
     b84:	4b0e      	ldr	r3, [pc, #56]	; (bc0 <bmp280_get_regs+0x48>)
     b86:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (reg_data != NULL)) {
     b88:	2800      	cmp	r0, #0
     b8a:	d112      	bne.n	bb2 <bmp280_get_regs+0x3a>
     b8c:	2e00      	cmp	r6, #0
     b8e:	d013      	beq.n	bb8 <bmp280_get_regs+0x40>
		if (dev->intf == BMP280_SPI_INTF)
     b90:	78a3      	ldrb	r3, [r4, #2]
     b92:	2b00      	cmp	r3, #0
     b94:	d101      	bne.n	b9a <bmp280_get_regs+0x22>
			reg_addr = reg_addr | 0x80;
     b96:	3380      	adds	r3, #128	; 0x80
     b98:	431f      	orrs	r7, r3
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
     b9a:	b2ab      	uxth	r3, r5
     b9c:	7860      	ldrb	r0, [r4, #1]
     b9e:	6864      	ldr	r4, [r4, #4]
     ba0:	0032      	movs	r2, r6
     ba2:	0039      	movs	r1, r7
     ba4:	47a0      	blx	r4
		if (rslt != BMP280_OK)
     ba6:	2800      	cmp	r0, #0
     ba8:	d100      	bne.n	bac <bmp280_get_regs+0x34>
}
     baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rslt = BMP280_E_COMM_FAIL;
     bac:	2004      	movs	r0, #4
     bae:	4240      	negs	r0, r0
     bb0:	e7fb      	b.n	baa <bmp280_get_regs+0x32>
		rslt = BMP280_E_NULL_PTR;
     bb2:	2001      	movs	r0, #1
     bb4:	4240      	negs	r0, r0
     bb6:	e7f8      	b.n	baa <bmp280_get_regs+0x32>
     bb8:	2001      	movs	r0, #1
     bba:	4240      	negs	r0, r0
     bbc:	e7f5      	b.n	baa <bmp280_get_regs+0x32>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	00000b4d 	.word	0x00000b4d

00000bc4 <bmp280_set_regs>:
{
     bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc6:	b083      	sub	sp, #12
     bc8:	0005      	movs	r5, r0
     bca:	000e      	movs	r6, r1
     bcc:	001f      	movs	r7, r3
     bce:	1c14      	adds	r4, r2, #0
     bd0:	2a04      	cmp	r2, #4
     bd2:	d900      	bls.n	bd6 <bmp280_set_regs+0x12>
     bd4:	2404      	movs	r4, #4
     bd6:	b2e4      	uxtb	r4, r4
	rslt = null_ptr_check(dev);
     bd8:	0038      	movs	r0, r7
     bda:	4b23      	ldr	r3, [pc, #140]	; (c68 <bmp280_set_regs+0xa4>)
     bdc:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
     bde:	2800      	cmp	r0, #0
     be0:	d135      	bne.n	c4e <bmp280_set_regs+0x8a>
     be2:	2d00      	cmp	r5, #0
     be4:	d036      	beq.n	c54 <bmp280_set_regs+0x90>
     be6:	2e00      	cmp	r6, #0
     be8:	d037      	beq.n	c5a <bmp280_set_regs+0x96>
		if (len != 0) {
     bea:	2c00      	cmp	r4, #0
     bec:	d038      	beq.n	c60 <bmp280_set_regs+0x9c>
			temp_buff[0] = reg_data[0];
     bee:	7833      	ldrb	r3, [r6, #0]
     bf0:	466a      	mov	r2, sp
     bf2:	7013      	strb	r3, [r2, #0]
			if (dev->intf == BMP280_SPI_INTF) {
     bf4:	78bb      	ldrb	r3, [r7, #2]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d10b      	bne.n	c12 <bmp280_set_regs+0x4e>
     bfa:	002a      	movs	r2, r5
     bfc:	1e63      	subs	r3, r4, #1
     bfe:	b2db      	uxtb	r3, r3
     c00:	3301      	adds	r3, #1
     c02:	18eb      	adds	r3, r5, r3
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
     c04:	307f      	adds	r0, #127	; 0x7f
     c06:	7811      	ldrb	r1, [r2, #0]
     c08:	4001      	ands	r1, r0
     c0a:	7011      	strb	r1, [r2, #0]
     c0c:	3201      	adds	r2, #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
     c0e:	429a      	cmp	r2, r3
     c10:	d1f9      	bne.n	c06 <bmp280_set_regs+0x42>
			if (len > 1) {
     c12:	2c01      	cmp	r4, #1
     c14:	d916      	bls.n	c44 <bmp280_set_regs+0x80>
     c16:	4669      	mov	r1, sp
     c18:	2201      	movs	r2, #1
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
	uint8_t index;

	for (index = 1; index < len; index++) {
		temp_buff[(index * 2) - 1] = reg_addr[index];
     c1a:	5cab      	ldrb	r3, [r5, r2]
     c1c:	704b      	strb	r3, [r1, #1]
		temp_buff[index * 2] = reg_data[index];
     c1e:	5cb3      	ldrb	r3, [r6, r2]
     c20:	708b      	strb	r3, [r1, #2]
     c22:	3102      	adds	r1, #2
     c24:	3201      	adds	r2, #1
	for (index = 1; index < len; index++) {
     c26:	b2d3      	uxtb	r3, r2
     c28:	429c      	cmp	r4, r3
     c2a:	d8f6      	bhi.n	c1a <bmp280_set_regs+0x56>
				temp_len = ((len * 2) - 1);
     c2c:	0064      	lsls	r4, r4, #1
     c2e:	3c01      	subs	r4, #1
     c30:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
     c32:	7829      	ldrb	r1, [r5, #0]
     c34:	7878      	ldrb	r0, [r7, #1]
     c36:	68bc      	ldr	r4, [r7, #8]
     c38:	466a      	mov	r2, sp
     c3a:	47a0      	blx	r4
			if (rslt != BMP280_OK)
     c3c:	2800      	cmp	r0, #0
     c3e:	d103      	bne.n	c48 <bmp280_set_regs+0x84>
}
     c40:	b003      	add	sp, #12
     c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp_len = len;
     c44:	b2a3      	uxth	r3, r4
     c46:	e7f4      	b.n	c32 <bmp280_set_regs+0x6e>
				rslt = BMP280_E_COMM_FAIL;
     c48:	2004      	movs	r0, #4
     c4a:	4240      	negs	r0, r0
     c4c:	e7f8      	b.n	c40 <bmp280_set_regs+0x7c>
		rslt = BMP280_E_NULL_PTR;
     c4e:	2001      	movs	r0, #1
     c50:	4240      	negs	r0, r0
     c52:	e7f5      	b.n	c40 <bmp280_set_regs+0x7c>
     c54:	2001      	movs	r0, #1
     c56:	4240      	negs	r0, r0
     c58:	e7f2      	b.n	c40 <bmp280_set_regs+0x7c>
     c5a:	2001      	movs	r0, #1
     c5c:	4240      	negs	r0, r0
     c5e:	e7ef      	b.n	c40 <bmp280_set_regs+0x7c>
			rslt = BMP280_E_INVALID_LEN;
     c60:	2003      	movs	r0, #3
     c62:	4240      	negs	r0, r0
     c64:	e7ec      	b.n	c40 <bmp280_set_regs+0x7c>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00000b4d 	.word	0x00000b4d

00000c6c <bmp280_soft_reset>:
{
     c6c:	b530      	push	{r4, r5, lr}
     c6e:	b083      	sub	sp, #12
     c70:	0005      	movs	r5, r0
	uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
     c72:	22e0      	movs	r2, #224	; 0xe0
     c74:	466b      	mov	r3, sp
     c76:	71da      	strb	r2, [r3, #7]
	uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
     c78:	3a2a      	subs	r2, #42	; 0x2a
     c7a:	466b      	mov	r3, sp
     c7c:	719a      	strb	r2, [r3, #6]
	rslt = null_ptr_check(dev);
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <bmp280_soft_reset+0x3c>)
     c80:	4798      	blx	r3
     c82:	1e04      	subs	r4, r0, #0
	if (rslt == BMP280_OK) {
     c84:	d002      	beq.n	c8c <bmp280_soft_reset+0x20>
}
     c86:	0020      	movs	r0, r4
     c88:	b003      	add	sp, #12
     c8a:	bd30      	pop	{r4, r5, pc}
		rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     c8c:	002b      	movs	r3, r5
     c8e:	2201      	movs	r2, #1
     c90:	4669      	mov	r1, sp
     c92:	3106      	adds	r1, #6
     c94:	4668      	mov	r0, sp
     c96:	3007      	adds	r0, #7
     c98:	4c04      	ldr	r4, [pc, #16]	; (cac <bmp280_soft_reset+0x40>)
     c9a:	47a0      	blx	r4
     c9c:	0004      	movs	r4, r0
		dev->delay_ms(2);
     c9e:	68eb      	ldr	r3, [r5, #12]
     ca0:	2002      	movs	r0, #2
     ca2:	4798      	blx	r3
     ca4:	e7ef      	b.n	c86 <bmp280_soft_reset+0x1a>
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	00000b4d 	.word	0x00000b4d
     cac:	00000bc5 	.word	0x00000bc5

00000cb0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	b083      	sub	sp, #12
     cb4:	0006      	movs	r6, r0
     cb6:	000f      	movs	r7, r1
     cb8:	0015      	movs	r5, r2
	int8_t rslt;
	uint8_t temp[2] = { 0, 0 };
     cba:	ab01      	add	r3, sp, #4
     cbc:	2200      	movs	r2, #0
     cbe:	701a      	strb	r2, [r3, #0]
     cc0:	705a      	strb	r2, [r3, #1]
	uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
     cc2:	4b2f      	ldr	r3, [pc, #188]	; (d80 <conf_sensor+0xd0>)
     cc4:	881b      	ldrh	r3, [r3, #0]
     cc6:	466a      	mov	r2, sp
     cc8:	8013      	strh	r3, [r2, #0]

	rslt = null_ptr_check(dev);
     cca:	0028      	movs	r0, r5
     ccc:	4b2d      	ldr	r3, [pc, #180]	; (d84 <conf_sensor+0xd4>)
     cce:	4798      	blx	r3

	if ((rslt == BMP280_OK) && (conf != NULL)) {
     cd0:	2800      	cmp	r0, #0
     cd2:	d14f      	bne.n	d74 <conf_sensor+0xc4>
     cd4:	2f00      	cmp	r7, #0
     cd6:	d050      	beq.n	d7a <conf_sensor+0xca>

		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
     cd8:	002b      	movs	r3, r5
     cda:	2202      	movs	r2, #2
     cdc:	a901      	add	r1, sp, #4
     cde:	30f4      	adds	r0, #244	; 0xf4
     ce0:	4c29      	ldr	r4, [pc, #164]	; (d88 <conf_sensor+0xd8>)
     ce2:	47a0      	blx	r4
     ce4:	1e04      	subs	r4, r0, #0

		if (rslt == BMP280_OK) {
     ce6:	d002      	beq.n	cee <conf_sensor+0x3e>
	} else {
		rslt = BMP280_E_NULL_PTR;
	}

	return rslt;
}
     ce8:	0020      	movs	r0, r4
     cea:	b003      	add	sp, #12
     cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = bmp280_soft_reset(dev);
     cee:	0028      	movs	r0, r5
     cf0:	4b26      	ldr	r3, [pc, #152]	; (d8c <conf_sensor+0xdc>)
     cf2:	4798      	blx	r3
     cf4:	1e04      	subs	r4, r0, #0
			if (rslt == BMP280_OK) {
     cf6:	d1f7      	bne.n	ce8 <conf_sensor+0x38>
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
     cf8:	a901      	add	r1, sp, #4
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
     cfa:	780a      	ldrb	r2, [r1, #0]
     cfc:	231f      	movs	r3, #31
     cfe:	401a      	ands	r2, r3
     d00:	7838      	ldrb	r0, [r7, #0]
     d02:	0140      	lsls	r0, r0, #5
     d04:	4302      	orrs	r2, r0
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
     d06:	201c      	movs	r0, #28
     d08:	4684      	mov	ip, r0
     d0a:	4382      	bics	r2, r0
     d0c:	7878      	ldrb	r0, [r7, #1]
     d0e:	0080      	lsls	r0, r0, #2
     d10:	341c      	adds	r4, #28
     d12:	4020      	ands	r0, r4
     d14:	4302      	orrs	r2, r0
     d16:	700a      	strb	r2, [r1, #0]
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
     d18:	784a      	ldrb	r2, [r1, #1]
     d1a:	4013      	ands	r3, r2
     d1c:	78ba      	ldrb	r2, [r7, #2]
     d1e:	0152      	lsls	r2, r2, #5
     d20:	4313      	orrs	r3, r2
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
     d22:	4662      	mov	r2, ip
     d24:	4393      	bics	r3, r2
     d26:	78fa      	ldrb	r2, [r7, #3]
     d28:	0092      	lsls	r2, r2, #2
     d2a:	4014      	ands	r4, r2
     d2c:	4323      	orrs	r3, r4
				temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
     d2e:	2201      	movs	r2, #1
     d30:	4393      	bics	r3, r2
     d32:	7938      	ldrb	r0, [r7, #4]
     d34:	4002      	ands	r2, r0
     d36:	4313      	orrs	r3, r2
     d38:	704b      	strb	r3, [r1, #1]
				rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
     d3a:	002b      	movs	r3, r5
     d3c:	2202      	movs	r2, #2
     d3e:	4668      	mov	r0, sp
     d40:	4c13      	ldr	r4, [pc, #76]	; (d90 <conf_sensor+0xe0>)
     d42:	47a0      	blx	r4
     d44:	1e04      	subs	r4, r0, #0
				if (rslt == BMP280_OK) {
     d46:	d1cf      	bne.n	ce8 <conf_sensor+0x38>
					dev->conf = *conf;
     d48:	0028      	movs	r0, r5
     d4a:	302c      	adds	r0, #44	; 0x2c
     d4c:	2205      	movs	r2, #5
     d4e:	0039      	movs	r1, r7
     d50:	4b10      	ldr	r3, [pc, #64]	; (d94 <conf_sensor+0xe4>)
     d52:	4798      	blx	r3
					if (mode != BMP280_SLEEP_MODE) {
     d54:	2e00      	cmp	r6, #0
     d56:	d0c7      	beq.n	ce8 <conf_sensor+0x38>
						temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
     d58:	a901      	add	r1, sp, #4
     d5a:	780b      	ldrb	r3, [r1, #0]
     d5c:	2203      	movs	r2, #3
     d5e:	4393      	bics	r3, r2
     d60:	4016      	ands	r6, r2
     d62:	431e      	orrs	r6, r3
     d64:	700e      	strb	r6, [r1, #0]
						rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
     d66:	002b      	movs	r3, r5
     d68:	3a02      	subs	r2, #2
     d6a:	4668      	mov	r0, sp
     d6c:	4c08      	ldr	r4, [pc, #32]	; (d90 <conf_sensor+0xe0>)
     d6e:	47a0      	blx	r4
     d70:	0004      	movs	r4, r0
     d72:	e7b9      	b.n	ce8 <conf_sensor+0x38>
		rslt = BMP280_E_NULL_PTR;
     d74:	2401      	movs	r4, #1
     d76:	4264      	negs	r4, r4
     d78:	e7b6      	b.n	ce8 <conf_sensor+0x38>
     d7a:	2401      	movs	r4, #1
     d7c:	4264      	negs	r4, r4
     d7e:	e7b3      	b.n	ce8 <conf_sensor+0x38>
     d80:	000041cc 	.word	0x000041cc
     d84:	00000b4d 	.word	0x00000b4d
     d88:	00000b79 	.word	0x00000b79
     d8c:	00000c6d 	.word	0x00000c6d
     d90:	00000bc5 	.word	0x00000bc5
     d94:	000041a9 	.word	0x000041a9

00000d98 <bmp280_init>:
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	b086      	sub	sp, #24
     d9c:	0004      	movs	r4, r0
	rslt = null_ptr_check(dev);
     d9e:	4b48      	ldr	r3, [pc, #288]	; (ec0 <bmp280_init+0x128>)
     da0:	4798      	blx	r3
	if (rslt == BMP280_OK) {
     da2:	2800      	cmp	r0, #0
     da4:	d000      	beq.n	da8 <bmp280_init+0x10>
     da6:	e086      	b.n	eb6 <bmp280_init+0x11e>
     da8:	2505      	movs	r5, #5
			rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
     daa:	4e46      	ldr	r6, [pc, #280]	; (ec4 <bmp280_init+0x12c>)
     dac:	e061      	b.n	e72 <bmp280_init+0xda>
	uint8_t temp[BMP280_CALIB_DATA_SIZE] = {0};
     dae:	2218      	movs	r2, #24
     db0:	2100      	movs	r1, #0
     db2:	4668      	mov	r0, sp
     db4:	4b44      	ldr	r3, [pc, #272]	; (ec8 <bmp280_init+0x130>)
     db6:	4798      	blx	r3
	rslt = null_ptr_check(dev);
     db8:	0020      	movs	r0, r4
     dba:	4b41      	ldr	r3, [pc, #260]	; (ec0 <bmp280_init+0x128>)
     dbc:	4798      	blx	r3
	if (rslt == BMP280_OK) {
     dbe:	2800      	cmp	r0, #0
     dc0:	d167      	bne.n	e92 <bmp280_init+0xfa>
		rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
     dc2:	0023      	movs	r3, r4
     dc4:	2218      	movs	r2, #24
     dc6:	4669      	mov	r1, sp
     dc8:	3088      	adds	r0, #136	; 0x88
     dca:	4e3e      	ldr	r6, [pc, #248]	; (ec4 <bmp280_init+0x12c>)
     dcc:	47b0      	blx	r6
		if (rslt == BMP280_OK) {
     dce:	2800      	cmp	r0, #0
     dd0:	d15f      	bne.n	e92 <bmp280_init+0xfa>
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
     dd2:	466b      	mov	r3, sp
     dd4:	785a      	ldrb	r2, [r3, #1]
     dd6:	0212      	lsls	r2, r2, #8
			| ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	4313      	orrs	r3, r2
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
     ddc:	8223      	strh	r3, [r4, #16]
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
     dde:	466b      	mov	r3, sp
     de0:	78da      	ldrb	r2, [r3, #3]
     de2:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
     de4:	789b      	ldrb	r3, [r3, #2]
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
     de6:	4313      	orrs	r3, r2
     de8:	8263      	strh	r3, [r4, #18]
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
     dea:	466b      	mov	r3, sp
     dec:	795a      	ldrb	r2, [r3, #5]
     dee:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
     df0:	791b      	ldrb	r3, [r3, #4]
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
     df2:	4313      	orrs	r3, r2
     df4:	82a3      	strh	r3, [r4, #20]
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
     df6:	466b      	mov	r3, sp
     df8:	79da      	ldrb	r2, [r3, #7]
     dfa:	0212      	lsls	r2, r2, #8
			| ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
     dfc:	799b      	ldrb	r3, [r3, #6]
     dfe:	4313      	orrs	r3, r2
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
     e00:	82e3      	strh	r3, [r4, #22]
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
     e02:	466b      	mov	r3, sp
     e04:	7a5a      	ldrb	r2, [r3, #9]
     e06:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
     e08:	7a1b      	ldrb	r3, [r3, #8]
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
     e0a:	4313      	orrs	r3, r2
     e0c:	8323      	strh	r3, [r4, #24]
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
     e0e:	466b      	mov	r3, sp
     e10:	7ada      	ldrb	r2, [r3, #11]
     e12:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
     e14:	7a9b      	ldrb	r3, [r3, #10]
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
     e16:	4313      	orrs	r3, r2
     e18:	8363      	strh	r3, [r4, #26]
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
     e1a:	466b      	mov	r3, sp
     e1c:	7b5a      	ldrb	r2, [r3, #13]
     e1e:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
     e20:	7b1b      	ldrb	r3, [r3, #12]
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
     e22:	4313      	orrs	r3, r2
     e24:	83a3      	strh	r3, [r4, #28]
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
     e26:	466b      	mov	r3, sp
     e28:	7bda      	ldrb	r2, [r3, #15]
     e2a:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
     e2c:	7b9b      	ldrb	r3, [r3, #14]
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
     e2e:	4313      	orrs	r3, r2
     e30:	83e3      	strh	r3, [r4, #30]
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
     e32:	466b      	mov	r3, sp
     e34:	7c5a      	ldrb	r2, [r3, #17]
     e36:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
     e38:	7c1b      	ldrb	r3, [r3, #16]
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
     e3a:	4313      	orrs	r3, r2
     e3c:	8423      	strh	r3, [r4, #32]
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
     e3e:	466b      	mov	r3, sp
     e40:	7cda      	ldrb	r2, [r3, #19]
     e42:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
     e44:	7c9b      	ldrb	r3, [r3, #18]
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
     e46:	4313      	orrs	r3, r2
     e48:	8463      	strh	r3, [r4, #34]	; 0x22
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
     e4a:	466b      	mov	r3, sp
     e4c:	7d5a      	ldrb	r2, [r3, #21]
     e4e:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
     e50:	7d1b      	ldrb	r3, [r3, #20]
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
     e52:	4313      	orrs	r3, r2
     e54:	84a3      	strh	r3, [r4, #36]	; 0x24
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
     e56:	466b      	mov	r3, sp
     e58:	7dda      	ldrb	r2, [r3, #23]
     e5a:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
     e5c:	7d9b      	ldrb	r3, [r3, #22]
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
     e5e:	4313      	orrs	r3, r2
     e60:	84e3      	strh	r3, [r4, #38]	; 0x26
     e62:	e016      	b.n	e92 <bmp280_init+0xfa>
			dev->delay_ms(10);
     e64:	200a      	movs	r0, #10
     e66:	68e3      	ldr	r3, [r4, #12]
     e68:	4798      	blx	r3
     e6a:	3d01      	subs	r5, #1
     e6c:	b2ed      	uxtb	r5, r5
		while (try_count) {
     e6e:	2d00      	cmp	r5, #0
     e70:	d01f      	beq.n	eb2 <bmp280_init+0x11a>
			rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
     e72:	0023      	movs	r3, r4
     e74:	2201      	movs	r2, #1
     e76:	0021      	movs	r1, r4
     e78:	20d0      	movs	r0, #208	; 0xd0
     e7a:	47b0      	blx	r6
			if ((rslt == BMP280_OK) && (dev->chip_id == BMP280_CHIP_ID1
     e7c:	2800      	cmp	r0, #0
     e7e:	d1f1      	bne.n	e64 <bmp280_init+0xcc>
			|| dev->chip_id == BMP280_CHIP_ID3)) {
     e80:	7823      	ldrb	r3, [r4, #0]
			if ((rslt == BMP280_OK) && (dev->chip_id == BMP280_CHIP_ID1
     e82:	3b56      	subs	r3, #86	; 0x56
     e84:	2b02      	cmp	r3, #2
     e86:	d8ed      	bhi.n	e64 <bmp280_init+0xcc>
				rslt = bmp280_soft_reset(dev);
     e88:	0020      	movs	r0, r4
     e8a:	4b10      	ldr	r3, [pc, #64]	; (ecc <bmp280_init+0x134>)
     e8c:	4798      	blx	r3
				if (rslt == BMP280_OK)
     e8e:	2800      	cmp	r0, #0
     e90:	d08d      	beq.n	dae <bmp280_init+0x16>
		if (!try_count)
     e92:	2d00      	cmp	r5, #0
     e94:	d011      	beq.n	eba <bmp280_init+0x122>
		if (rslt == BMP280_OK) {
     e96:	2800      	cmp	r0, #0
     e98:	d10d      	bne.n	eb6 <bmp280_init+0x11e>
			dev->conf.filter = BMP280_FILTER_OFF;
     e9a:	2300      	movs	r3, #0
     e9c:	222f      	movs	r2, #47	; 0x2f
     e9e:	54a3      	strb	r3, [r4, r2]
			dev->conf.os_pres = BMP280_OS_NONE;
     ea0:	3a02      	subs	r2, #2
     ea2:	54a3      	strb	r3, [r4, r2]
			dev->conf.os_temp = BMP280_OS_NONE;
     ea4:	3a01      	subs	r2, #1
     ea6:	54a3      	strb	r3, [r4, r2]
			dev->conf.odr = BMP280_ODR_0_5_MS;
     ea8:	3202      	adds	r2, #2
     eaa:	54a3      	strb	r3, [r4, r2]
			dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
     eac:	3202      	adds	r2, #2
     eae:	54a3      	strb	r3, [r4, r2]
     eb0:	e001      	b.n	eb6 <bmp280_init+0x11e>
			rslt = BMP280_E_DEV_NOT_FOUND;
     eb2:	2002      	movs	r0, #2
     eb4:	4240      	negs	r0, r0
}
     eb6:	b006      	add	sp, #24
     eb8:	bd70      	pop	{r4, r5, r6, pc}
			rslt = BMP280_E_DEV_NOT_FOUND;
     eba:	2002      	movs	r0, #2
     ebc:	4240      	negs	r0, r0
     ebe:	e7fa      	b.n	eb6 <bmp280_init+0x11e>
     ec0:	00000b4d 	.word	0x00000b4d
     ec4:	00000b79 	.word	0x00000b79
     ec8:	000041bb 	.word	0x000041bb
     ecc:	00000c6d 	.word	0x00000c6d

00000ed0 <bmp280_get_config>:
{
     ed0:	b570      	push	{r4, r5, r6, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	0004      	movs	r4, r0
     ed6:	000e      	movs	r6, r1
	uint8_t temp[2] = {0, 0};
     ed8:	ab01      	add	r3, sp, #4
     eda:	2200      	movs	r2, #0
     edc:	701a      	strb	r2, [r3, #0]
     ede:	705a      	strb	r2, [r3, #1]
	rslt = null_ptr_check(dev);
     ee0:	0008      	movs	r0, r1
     ee2:	4b17      	ldr	r3, [pc, #92]	; (f40 <bmp280_get_config+0x70>)
     ee4:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (conf != NULL)) {
     ee6:	2800      	cmp	r0, #0
     ee8:	d123      	bne.n	f32 <bmp280_get_config+0x62>
     eea:	2c00      	cmp	r4, #0
     eec:	d024      	beq.n	f38 <bmp280_get_config+0x68>
		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
     eee:	0033      	movs	r3, r6
     ef0:	2202      	movs	r2, #2
     ef2:	a901      	add	r1, sp, #4
     ef4:	30f4      	adds	r0, #244	; 0xf4
     ef6:	4d13      	ldr	r5, [pc, #76]	; (f44 <bmp280_get_config+0x74>)
     ef8:	47a8      	blx	r5
     efa:	1e05      	subs	r5, r0, #0
		if (rslt == BMP280_OK) {
     efc:	d116      	bne.n	f2c <bmp280_get_config+0x5c>
			conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
     efe:	a901      	add	r1, sp, #4
     f00:	780b      	ldrb	r3, [r1, #0]
     f02:	095a      	lsrs	r2, r3, #5
     f04:	7022      	strb	r2, [r4, #0]
			conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
     f06:	109b      	asrs	r3, r3, #2
     f08:	2207      	movs	r2, #7
     f0a:	4013      	ands	r3, r2
     f0c:	7063      	strb	r3, [r4, #1]
			conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
     f0e:	7849      	ldrb	r1, [r1, #1]
     f10:	094b      	lsrs	r3, r1, #5
     f12:	70a3      	strb	r3, [r4, #2]
			conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
     f14:	108b      	asrs	r3, r1, #2
     f16:	401a      	ands	r2, r3
     f18:	70e2      	strb	r2, [r4, #3]
			conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
     f1a:	2301      	movs	r3, #1
     f1c:	400b      	ands	r3, r1
     f1e:	7123      	strb	r3, [r4, #4]
			dev->conf = *conf;
     f20:	0030      	movs	r0, r6
     f22:	302c      	adds	r0, #44	; 0x2c
     f24:	2205      	movs	r2, #5
     f26:	0021      	movs	r1, r4
     f28:	4b07      	ldr	r3, [pc, #28]	; (f48 <bmp280_get_config+0x78>)
     f2a:	4798      	blx	r3
}
     f2c:	0028      	movs	r0, r5
     f2e:	b002      	add	sp, #8
     f30:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BMP280_E_NULL_PTR;
     f32:	2501      	movs	r5, #1
     f34:	426d      	negs	r5, r5
     f36:	e7f9      	b.n	f2c <bmp280_get_config+0x5c>
     f38:	2501      	movs	r5, #1
     f3a:	426d      	negs	r5, r5
     f3c:	e7f6      	b.n	f2c <bmp280_get_config+0x5c>
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000b4d 	.word	0x00000b4d
     f44:	00000b79 	.word	0x00000b79
     f48:	000041a9 	.word	0x000041a9

00000f4c <bmp280_set_config>:
{
     f4c:	b510      	push	{r4, lr}
     f4e:	000a      	movs	r2, r1
	return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
     f50:	0001      	movs	r1, r0
     f52:	2000      	movs	r0, #0
     f54:	4b01      	ldr	r3, [pc, #4]	; (f5c <bmp280_set_config+0x10>)
     f56:	4798      	blx	r3
}
     f58:	bd10      	pop	{r4, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	00000cb1 	.word	0x00000cb1

00000f60 <bmp280_set_power_mode>:
{
     f60:	b570      	push	{r4, r5, r6, lr}
     f62:	0005      	movs	r5, r0
     f64:	000c      	movs	r4, r1
	rslt = null_ptr_check(dev);
     f66:	0008      	movs	r0, r1
     f68:	4b05      	ldr	r3, [pc, #20]	; (f80 <bmp280_set_power_mode+0x20>)
     f6a:	4798      	blx	r3
	if (rslt == BMP280_OK)
     f6c:	2800      	cmp	r0, #0
     f6e:	d000      	beq.n	f72 <bmp280_set_power_mode+0x12>
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
		rslt = conf_sensor(mode, &dev->conf, dev);
     f72:	0021      	movs	r1, r4
     f74:	312c      	adds	r1, #44	; 0x2c
     f76:	0022      	movs	r2, r4
     f78:	0028      	movs	r0, r5
     f7a:	4b02      	ldr	r3, [pc, #8]	; (f84 <bmp280_set_power_mode+0x24>)
     f7c:	4798      	blx	r3
     f7e:	e7f7      	b.n	f70 <bmp280_set_power_mode+0x10>
     f80:	00000b4d 	.word	0x00000b4d
     f84:	00000cb1 	.word	0x00000cb1

00000f88 <bmp280_get_uncomp_data>:
{
     f88:	b530      	push	{r4, r5, lr}
     f8a:	b083      	sub	sp, #12
     f8c:	0004      	movs	r4, r0
     f8e:	000d      	movs	r5, r1
	uint8_t temp[6] = {0};
     f90:	2206      	movs	r2, #6
     f92:	2100      	movs	r1, #0
     f94:	4668      	mov	r0, sp
     f96:	4b17      	ldr	r3, [pc, #92]	; (ff4 <bmp280_get_uncomp_data+0x6c>)
     f98:	4798      	blx	r3
	rslt = null_ptr_check(dev);
     f9a:	0028      	movs	r0, r5
     f9c:	4b16      	ldr	r3, [pc, #88]	; (ff8 <bmp280_get_uncomp_data+0x70>)
     f9e:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (uncomp_data != NULL)) {
     fa0:	2800      	cmp	r0, #0
     fa2:	d121      	bne.n	fe8 <bmp280_get_uncomp_data+0x60>
     fa4:	2c00      	cmp	r4, #0
     fa6:	d022      	beq.n	fee <bmp280_get_uncomp_data+0x66>
		rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
     fa8:	002b      	movs	r3, r5
     faa:	2206      	movs	r2, #6
     fac:	4669      	mov	r1, sp
     fae:	30f7      	adds	r0, #247	; 0xf7
     fb0:	4d12      	ldr	r5, [pc, #72]	; (ffc <bmp280_get_uncomp_data+0x74>)
     fb2:	47a8      	blx	r5
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
     fb4:	466b      	mov	r3, sp
     fb6:	781b      	ldrb	r3, [r3, #0]
     fb8:	031b      	lsls	r3, r3, #12
     fba:	466a      	mov	r2, sp
     fbc:	7852      	ldrb	r2, [r2, #1]
     fbe:	0112      	lsls	r2, r2, #4
     fc0:	4313      	orrs	r3, r2
		| ((uint32_t) temp[2] >> 4));
     fc2:	466a      	mov	r2, sp
     fc4:	7892      	ldrb	r2, [r2, #2]
     fc6:	0912      	lsrs	r2, r2, #4
     fc8:	4313      	orrs	r3, r2
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
     fca:	6063      	str	r3, [r4, #4]
		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
     fcc:	466b      	mov	r3, sp
     fce:	78db      	ldrb	r3, [r3, #3]
     fd0:	031b      	lsls	r3, r3, #12
     fd2:	466a      	mov	r2, sp
     fd4:	7912      	ldrb	r2, [r2, #4]
     fd6:	0112      	lsls	r2, r2, #4
     fd8:	4313      	orrs	r3, r2
		| (((int32_t) (temp[5])) >> 4));
     fda:	466a      	mov	r2, sp
     fdc:	7952      	ldrb	r2, [r2, #5]
     fde:	0912      	lsrs	r2, r2, #4
		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
     fe0:	4313      	orrs	r3, r2
     fe2:	6023      	str	r3, [r4, #0]
}
     fe4:	b003      	add	sp, #12
     fe6:	bd30      	pop	{r4, r5, pc}
		rslt = BMP280_E_NULL_PTR;
     fe8:	2001      	movs	r0, #1
     fea:	4240      	negs	r0, r0
     fec:	e7fa      	b.n	fe4 <bmp280_get_uncomp_data+0x5c>
     fee:	2001      	movs	r0, #1
     ff0:	4240      	negs	r0, r0
     ff2:	e7f7      	b.n	fe4 <bmp280_get_uncomp_data+0x5c>
     ff4:	000041bb 	.word	0x000041bb
     ff8:	00000b4d 	.word	0x00000b4d
     ffc:	00000b79 	.word	0x00000b79

00001000 <bmp280_comp_temp_32bit>:
{
    1000:	b570      	push	{r4, r5, r6, lr}
    1002:	0005      	movs	r5, r0
    1004:	000c      	movs	r4, r1
	rslt = null_ptr_check(dev);
    1006:	0008      	movs	r0, r1
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <bmp280_comp_temp_32bit+0x44>)
    100a:	4798      	blx	r3
    100c:	0003      	movs	r3, r0
	int32_t temperature = 0;
    100e:	2000      	movs	r0, #0
	if (rslt == BMP280_OK) {
    1010:	2b00      	cmp	r3, #0
    1012:	d115      	bne.n	1040 <bmp280_comp_temp_32bit+0x40>
		var1 = ((((uncomp_temp >> 3) - ((int32_t) dev->calib_param.dig_t1 << 1)))
    1014:	8a23      	ldrh	r3, [r4, #16]
		var2 = (((((uncomp_temp >> 4) - ((int32_t) dev->calib_param.dig_t1))
    1016:	092a      	lsrs	r2, r5, #4
    1018:	1ad2      	subs	r2, r2, r3
		var1 = ((((uncomp_temp >> 3) - ((int32_t) dev->calib_param.dig_t1 << 1)))
    101a:	08ed      	lsrs	r5, r5, #3
    101c:	005b      	lsls	r3, r3, #1
    101e:	1aeb      	subs	r3, r5, r3
		* ((int32_t) dev->calib_param.dig_t2)) >> 11;
    1020:	2112      	movs	r1, #18
    1022:	5e60      	ldrsh	r0, [r4, r1]
    1024:	4358      	muls	r0, r3
    1026:	0ac0      	lsrs	r0, r0, #11
		* ((uncomp_temp >> 4) - ((int32_t) dev->calib_param.dig_t1))) >> 12)
    1028:	4352      	muls	r2, r2
    102a:	0b12      	lsrs	r2, r2, #12
		* ((int32_t) dev->calib_param.dig_t3)) >> 14;
    102c:	2114      	movs	r1, #20
    102e:	5e63      	ldrsh	r3, [r4, r1]
    1030:	4353      	muls	r3, r2
    1032:	0b9b      	lsrs	r3, r3, #14
		dev->calib_param.t_fine = var1 + var2;
    1034:	18c3      	adds	r3, r0, r3
    1036:	62a3      	str	r3, [r4, #40]	; 0x28
		temperature = (dev->calib_param.t_fine * 5 + 128) >> 8;
    1038:	0098      	lsls	r0, r3, #2
    103a:	18c0      	adds	r0, r0, r3
    103c:	3080      	adds	r0, #128	; 0x80
    103e:	1200      	asrs	r0, r0, #8
}
    1040:	bd70      	pop	{r4, r5, r6, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	00000b4d 	.word	0x00000b4d

00001048 <bmp280_comp_pres_32bit>:
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	0004      	movs	r4, r0
    104c:	000d      	movs	r5, r1
	rslt = null_ptr_check(dev);
    104e:	0008      	movs	r0, r1
    1050:	4b28      	ldr	r3, [pc, #160]	; (10f4 <bmp280_comp_pres_32bit+0xac>)
    1052:	4798      	blx	r3
    1054:	0003      	movs	r3, r0
	uint32_t pressure = 0;
    1056:	2000      	movs	r0, #0
	if (rslt == BMP280_OK) {
    1058:	2b00      	cmp	r3, #0
    105a:	d145      	bne.n	10e8 <bmp280_comp_pres_32bit+0xa0>
		var1 = (((int32_t) dev->calib_param.t_fine) >> 1) - (int32_t) 64000;
    105c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    105e:	105a      	asrs	r2, r3, #1
    1060:	4b25      	ldr	r3, [pc, #148]	; (10f8 <bmp280_comp_pres_32bit+0xb0>)
    1062:	469c      	mov	ip, r3
    1064:	4462      	add	r2, ip
		var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t) dev->calib_param.dig_p6);
    1066:	1093      	asrs	r3, r2, #2
    1068:	435b      	muls	r3, r3
    106a:	12d9      	asrs	r1, r3, #11
    106c:	2620      	movs	r6, #32
    106e:	5fa8      	ldrsh	r0, [r5, r6]
    1070:	4341      	muls	r1, r0
		var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) << 1);
    1072:	261e      	movs	r6, #30
    1074:	5fa8      	ldrsh	r0, [r5, r6]
    1076:	4350      	muls	r0, r2
    1078:	0040      	lsls	r0, r0, #1
    107a:	1840      	adds	r0, r0, r1
		var2 = (var2 >> 2) + (((int32_t) dev->calib_param.dig_p4) << 16);
    107c:	1080      	asrs	r0, r0, #2
		var1 = (((dev->calib_param.dig_p3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
    107e:	211a      	movs	r1, #26
    1080:	5e6e      	ldrsh	r6, [r5, r1]
    1082:	1359      	asrs	r1, r3, #13
    1084:	4371      	muls	r1, r6
    1086:	10c9      	asrs	r1, r1, #3
		+ ((((int32_t) dev->calib_param.dig_p2) * var1) >> 1)) >> 18;
    1088:	2618      	movs	r6, #24
    108a:	5fab      	ldrsh	r3, [r5, r6]
    108c:	435a      	muls	r2, r3
    108e:	1052      	asrs	r2, r2, #1
    1090:	1889      	adds	r1, r1, r2
		var1 = (((dev->calib_param.dig_p3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
    1092:	1489      	asrs	r1, r1, #18
		var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) >> 15);
    1094:	2380      	movs	r3, #128	; 0x80
    1096:	021b      	lsls	r3, r3, #8
    1098:	469c      	mov	ip, r3
    109a:	4461      	add	r1, ip
    109c:	8aeb      	ldrh	r3, [r5, #22]
    109e:	4359      	muls	r1, r3
    10a0:	13c9      	asrs	r1, r1, #15
		var2 = (var2 >> 2) + (((int32_t) dev->calib_param.dig_p4) << 16);
    10a2:	221c      	movs	r2, #28
    10a4:	5eab      	ldrsh	r3, [r5, r2]
    10a6:	041b      	lsls	r3, r3, #16
    10a8:	1818      	adds	r0, r3, r0
		pressure = (((uint32_t) (((int32_t) 1048576) - uncomp_pres) - (var2 >> 12))) * 3125;
    10aa:	1300      	asrs	r0, r0, #12
    10ac:	1904      	adds	r4, r0, r4
			pressure = 0;
    10ae:	2000      	movs	r0, #0
		if (var1 != 0) {
    10b0:	2900      	cmp	r1, #0
    10b2:	d019      	beq.n	10e8 <bmp280_comp_pres_32bit+0xa0>
		pressure = (((uint32_t) (((int32_t) 1048576) - uncomp_pres) - (var2 >> 12))) * 3125;
    10b4:	4811      	ldr	r0, [pc, #68]	; (10fc <bmp280_comp_pres_32bit+0xb4>)
    10b6:	4360      	muls	r0, r4
			if (pressure < 0x80000000)
    10b8:	4b11      	ldr	r3, [pc, #68]	; (1100 <bmp280_comp_pres_32bit+0xb8>)
    10ba:	18c0      	adds	r0, r0, r3
    10bc:	d415      	bmi.n	10ea <bmp280_comp_pres_32bit+0xa2>
				pressure = (pressure << 1) / ((uint32_t) var1);
    10be:	0040      	lsls	r0, r0, #1
    10c0:	4b10      	ldr	r3, [pc, #64]	; (1104 <bmp280_comp_pres_32bit+0xbc>)
    10c2:	4798      	blx	r3
			* ((int32_t) (((pressure >> 3) * (pressure >> 3)) >> 13))) >> 12;
    10c4:	08c3      	lsrs	r3, r0, #3
    10c6:	435b      	muls	r3, r3
    10c8:	0b5a      	lsrs	r2, r3, #13
			var1 = (((int32_t) dev->calib_param.dig_p9)
    10ca:	2126      	movs	r1, #38	; 0x26
    10cc:	5e6b      	ldrsh	r3, [r5, r1]
			* ((int32_t) (((pressure >> 3) * (pressure >> 3)) >> 13))) >> 12;
    10ce:	4353      	muls	r3, r2
			var1 = (((int32_t) dev->calib_param.dig_p9)
    10d0:	131b      	asrs	r3, r3, #12
			var2 = (((int32_t) (pressure >> 2)) * ((int32_t) dev->calib_param.dig_p8)) >> 13;
    10d2:	0881      	lsrs	r1, r0, #2
    10d4:	2424      	movs	r4, #36	; 0x24
    10d6:	5f2a      	ldrsh	r2, [r5, r4]
    10d8:	434a      	muls	r2, r1
    10da:	1352      	asrs	r2, r2, #13
			pressure = (uint32_t) ((int32_t) pressure + ((var1 + var2 + dev->calib_param.dig_p7) >> 4));
    10dc:	189b      	adds	r3, r3, r2
    10de:	2122      	movs	r1, #34	; 0x22
    10e0:	5e6a      	ldrsh	r2, [r5, r1]
    10e2:	189b      	adds	r3, r3, r2
    10e4:	111b      	asrs	r3, r3, #4
    10e6:	1818      	adds	r0, r3, r0
}
    10e8:	bd70      	pop	{r4, r5, r6, pc}
				pressure = (pressure / (uint32_t) var1) * 2;
    10ea:	4b06      	ldr	r3, [pc, #24]	; (1104 <bmp280_comp_pres_32bit+0xbc>)
    10ec:	4798      	blx	r3
    10ee:	0040      	lsls	r0, r0, #1
    10f0:	e7e8      	b.n	10c4 <bmp280_comp_pres_32bit+0x7c>
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	00000b4d 	.word	0x00000b4d
    10f8:	ffff0600 	.word	0xffff0600
    10fc:	fffff3cb 	.word	0xfffff3cb
    1100:	c3500000 	.word	0xc3500000
    1104:	000021dd 	.word	0x000021dd

00001108 <bmp280_comp_pres_64bit>:
{
    1108:	b5f0      	push	{r4, r5, r6, r7, lr}
    110a:	46d6      	mov	lr, sl
    110c:	464f      	mov	r7, r9
    110e:	4646      	mov	r6, r8
    1110:	b5c0      	push	{r6, r7, lr}
    1112:	b086      	sub	sp, #24
    1114:	9003      	str	r0, [sp, #12]
    1116:	4688      	mov	r8, r1
	rslt = null_ptr_check(dev);
    1118:	0008      	movs	r0, r1
    111a:	4b59      	ldr	r3, [pc, #356]	; (1280 <bmp280_comp_pres_64bit+0x178>)
    111c:	4798      	blx	r3
	int64_t pressure = 0;
    111e:	2600      	movs	r6, #0
	if (rslt == BMP280_OK) {
    1120:	2800      	cmp	r0, #0
    1122:	d000      	beq.n	1126 <bmp280_comp_pres_64bit+0x1e>
    1124:	e0a5      	b.n	1272 <bmp280_comp_pres_64bit+0x16a>
		var1 = ((int64_t) (dev->calib_param.t_fine)) - 128000;
    1126:	4644      	mov	r4, r8
    1128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    112a:	17d3      	asrs	r3, r2, #31
    112c:	4855      	ldr	r0, [pc, #340]	; (1284 <bmp280_comp_pres_64bit+0x17c>)
    112e:	2101      	movs	r1, #1
    1130:	4249      	negs	r1, r1
    1132:	1812      	adds	r2, r2, r0
    1134:	414b      	adcs	r3, r1
    1136:	0014      	movs	r4, r2
    1138:	001d      	movs	r5, r3
		var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
    113a:	4b53      	ldr	r3, [pc, #332]	; (1288 <bmp280_comp_pres_64bit+0x180>)
    113c:	4699      	mov	r9, r3
    113e:	0022      	movs	r2, r4
    1140:	002b      	movs	r3, r5
    1142:	0020      	movs	r0, r4
    1144:	0029      	movs	r1, r5
    1146:	47c8      	blx	r9
    1148:	9000      	str	r0, [sp, #0]
    114a:	9101      	str	r1, [sp, #4]
		+ ((var1 * (int64_t) dev->calib_param.dig_p2) << 12);
    114c:	4643      	mov	r3, r8
    114e:	2018      	movs	r0, #24
    1150:	5e18      	ldrsh	r0, [r3, r0]
    1152:	17c1      	asrs	r1, r0, #31
    1154:	9404      	str	r4, [sp, #16]
    1156:	9505      	str	r5, [sp, #20]
    1158:	0022      	movs	r2, r4
    115a:	002b      	movs	r3, r5
    115c:	47c8      	blx	r9
    115e:	0d03      	lsrs	r3, r0, #20
    1160:	030d      	lsls	r5, r1, #12
    1162:	431d      	orrs	r5, r3
    1164:	0304      	lsls	r4, r0, #12
		var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) >> 8)
    1166:	4643      	mov	r3, r8
    1168:	201a      	movs	r0, #26
    116a:	5e18      	ldrsh	r0, [r3, r0]
    116c:	17c1      	asrs	r1, r0, #31
    116e:	9a00      	ldr	r2, [sp, #0]
    1170:	9b01      	ldr	r3, [sp, #4]
    1172:	47c8      	blx	r9
    1174:	4684      	mov	ip, r0
    1176:	468a      	mov	sl, r1
    1178:	0608      	lsls	r0, r1, #24
    117a:	4661      	mov	r1, ip
    117c:	0a0a      	lsrs	r2, r1, #8
    117e:	4302      	orrs	r2, r0
    1180:	4651      	mov	r1, sl
    1182:	120b      	asrs	r3, r1, #8
    1184:	18a4      	adds	r4, r4, r2
    1186:	415d      	adcs	r5, r3
		var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t) dev->calib_param.dig_p1)) >> 33;
    1188:	2000      	movs	r0, #0
    118a:	2180      	movs	r1, #128	; 0x80
    118c:	0209      	lsls	r1, r1, #8
    118e:	1900      	adds	r0, r0, r4
    1190:	4169      	adcs	r1, r5
    1192:	4643      	mov	r3, r8
    1194:	8ada      	ldrh	r2, [r3, #22]
    1196:	2300      	movs	r3, #0
    1198:	47c8      	blx	r9
    119a:	104e      	asrs	r6, r1, #1
    119c:	17cf      	asrs	r7, r1, #31
		if (var1 != 0) {
    119e:	0033      	movs	r3, r6
    11a0:	433b      	orrs	r3, r7
    11a2:	d066      	beq.n	1272 <bmp280_comp_pres_64bit+0x16a>
		var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
    11a4:	4643      	mov	r3, r8
    11a6:	2020      	movs	r0, #32
    11a8:	5e18      	ldrsh	r0, [r3, r0]
    11aa:	17c1      	asrs	r1, r0, #31
    11ac:	9a00      	ldr	r2, [sp, #0]
    11ae:	9b01      	ldr	r3, [sp, #4]
    11b0:	47c8      	blx	r9
    11b2:	9000      	str	r0, [sp, #0]
    11b4:	9101      	str	r1, [sp, #4]
		var2 = var2 + ((var1 * (int64_t) dev->calib_param.dig_p5) << 17);
    11b6:	4643      	mov	r3, r8
    11b8:	201e      	movs	r0, #30
    11ba:	5e18      	ldrsh	r0, [r3, r0]
    11bc:	17c1      	asrs	r1, r0, #31
    11be:	9a04      	ldr	r2, [sp, #16]
    11c0:	9b05      	ldr	r3, [sp, #20]
    11c2:	47c8      	blx	r9
    11c4:	468c      	mov	ip, r1
    11c6:	0bc1      	lsrs	r1, r0, #15
    11c8:	4664      	mov	r4, ip
    11ca:	0463      	lsls	r3, r4, #17
    11cc:	430b      	orrs	r3, r1
    11ce:	0442      	lsls	r2, r0, #17
    11d0:	9c00      	ldr	r4, [sp, #0]
    11d2:	9d01      	ldr	r5, [sp, #4]
    11d4:	18a4      	adds	r4, r4, r2
    11d6:	415d      	adcs	r5, r3
    11d8:	9400      	str	r4, [sp, #0]
    11da:	9501      	str	r5, [sp, #4]
			pressure = 1048576 - uncomp_press;
    11dc:	2480      	movs	r4, #128	; 0x80
    11de:	0364      	lsls	r4, r4, #13
    11e0:	9903      	ldr	r1, [sp, #12]
    11e2:	1a64      	subs	r4, r4, r1
			pressure = (((pressure << 31) - var2) * 3125) / var1;
    11e4:	0861      	lsrs	r1, r4, #1
    11e6:	07e0      	lsls	r0, r4, #31
		var2 = var2 + (((int64_t) dev->calib_param.dig_p4) << 35);
    11e8:	4644      	mov	r4, r8
    11ea:	231c      	movs	r3, #28
    11ec:	5ee4      	ldrsh	r4, [r4, r3]
    11ee:	46a4      	mov	ip, r4
    11f0:	2400      	movs	r4, #0
    11f2:	4663      	mov	r3, ip
    11f4:	00dd      	lsls	r5, r3, #3
    11f6:	9a00      	ldr	r2, [sp, #0]
    11f8:	9b01      	ldr	r3, [sp, #4]
    11fa:	1912      	adds	r2, r2, r4
    11fc:	416b      	adcs	r3, r5
			pressure = (((pressure << 31) - var2) * 3125) / var1;
    11fe:	1a80      	subs	r0, r0, r2
    1200:	4199      	sbcs	r1, r3
    1202:	4a22      	ldr	r2, [pc, #136]	; (128c <bmp280_comp_pres_64bit+0x184>)
    1204:	2300      	movs	r3, #0
    1206:	47c8      	blx	r9
    1208:	0032      	movs	r2, r6
    120a:	003b      	movs	r3, r7
    120c:	4c20      	ldr	r4, [pc, #128]	; (1290 <bmp280_comp_pres_64bit+0x188>)
    120e:	47a0      	blx	r4
    1210:	0004      	movs	r4, r0
    1212:	000d      	movs	r5, r1
			var1 = (((int64_t) dev->calib_param.dig_p9) * (pressure >> 13) * (pressure >> 13)) >> 25;
    1214:	04cb      	lsls	r3, r1, #19
    1216:	0b47      	lsrs	r7, r0, #13
    1218:	431f      	orrs	r7, r3
    121a:	134e      	asrs	r6, r1, #13
    121c:	4643      	mov	r3, r8
    121e:	2026      	movs	r0, #38	; 0x26
    1220:	5e18      	ldrsh	r0, [r3, r0]
    1222:	17c1      	asrs	r1, r0, #31
    1224:	003a      	movs	r2, r7
    1226:	0033      	movs	r3, r6
    1228:	47c8      	blx	r9
    122a:	003a      	movs	r2, r7
    122c:	0033      	movs	r3, r6
    122e:	47c8      	blx	r9
    1230:	01cb      	lsls	r3, r1, #7
    1232:	0e46      	lsrs	r6, r0, #25
    1234:	431e      	orrs	r6, r3
    1236:	164f      	asrs	r7, r1, #25
			pressure = ((pressure + var1 + var2) >> 8) + (((int64_t) dev->calib_param.dig_p7) << 4);
    1238:	1936      	adds	r6, r6, r4
    123a:	416f      	adcs	r7, r5
			var2 = (((int64_t) dev->calib_param.dig_p8) * pressure) >> 19;
    123c:	4643      	mov	r3, r8
    123e:	2024      	movs	r0, #36	; 0x24
    1240:	5e18      	ldrsh	r0, [r3, r0]
    1242:	17c1      	asrs	r1, r0, #31
    1244:	0022      	movs	r2, r4
    1246:	002b      	movs	r3, r5
    1248:	47c8      	blx	r9
    124a:	034c      	lsls	r4, r1, #13
    124c:	0cc2      	lsrs	r2, r0, #19
    124e:	4322      	orrs	r2, r4
    1250:	14cb      	asrs	r3, r1, #19
			pressure = ((pressure + var1 + var2) >> 8) + (((int64_t) dev->calib_param.dig_p7) << 4);
    1252:	1992      	adds	r2, r2, r6
    1254:	417b      	adcs	r3, r7
    1256:	0619      	lsls	r1, r3, #24
    1258:	0a16      	lsrs	r6, r2, #8
    125a:	430e      	orrs	r6, r1
    125c:	121f      	asrs	r7, r3, #8
    125e:	4643      	mov	r3, r8
    1260:	2122      	movs	r1, #34	; 0x22
    1262:	5e59      	ldrsh	r1, [r3, r1]
    1264:	17cc      	asrs	r4, r1, #31
    1266:	0f08      	lsrs	r0, r1, #28
    1268:	0123      	lsls	r3, r4, #4
    126a:	4303      	orrs	r3, r0
    126c:	010a      	lsls	r2, r1, #4
    126e:	18b6      	adds	r6, r6, r2
    1270:	415f      	adcs	r7, r3
}
    1272:	0030      	movs	r0, r6
    1274:	b006      	add	sp, #24
    1276:	bc1c      	pop	{r2, r3, r4}
    1278:	4690      	mov	r8, r2
    127a:	4699      	mov	r9, r3
    127c:	46a2      	mov	sl, r4
    127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1280:	00000b4d 	.word	0x00000b4d
    1284:	fffe0c00 	.word	0xfffe0c00
    1288:	000023b9 	.word	0x000023b9
    128c:	00000c35 	.word	0x00000c35
    1290:	00002371 	.word	0x00002371

00001294 <bmp280_comp_temp_double>:
{
    1294:	b5f0      	push	{r4, r5, r6, r7, lr}
    1296:	b087      	sub	sp, #28
    1298:	0004      	movs	r4, r0
    129a:	000f      	movs	r7, r1
	rslt = null_ptr_check(dev);
    129c:	0008      	movs	r0, r1
    129e:	4b33      	ldr	r3, [pc, #204]	; (136c <bmp280_comp_temp_double+0xd8>)
    12a0:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    12a2:	2800      	cmp	r0, #0
    12a4:	d15f      	bne.n	1366 <bmp280_comp_temp_double+0xd2>
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    12a6:	4e32      	ldr	r6, [pc, #200]	; (1370 <bmp280_comp_temp_double+0xdc>)
    12a8:	0020      	movs	r0, r4
    12aa:	47b0      	blx	r6
    12ac:	9000      	str	r0, [sp, #0]
    12ae:	9101      	str	r1, [sp, #4]
    12b0:	8a38      	ldrh	r0, [r7, #16]
    12b2:	47b0      	blx	r6
    12b4:	0004      	movs	r4, r0
    12b6:	000d      	movs	r5, r1
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
    12b8:	4e2e      	ldr	r6, [pc, #184]	; (1374 <bmp280_comp_temp_double+0xe0>)
    12ba:	2200      	movs	r2, #0
    12bc:	4b2e      	ldr	r3, [pc, #184]	; (1378 <bmp280_comp_temp_double+0xe4>)
    12be:	9800      	ldr	r0, [sp, #0]
    12c0:	9901      	ldr	r1, [sp, #4]
    12c2:	47b0      	blx	r6
    12c4:	9004      	str	r0, [sp, #16]
    12c6:	9105      	str	r1, [sp, #20]
    12c8:	2200      	movs	r2, #0
    12ca:	4b2c      	ldr	r3, [pc, #176]	; (137c <bmp280_comp_temp_double+0xe8>)
    12cc:	9402      	str	r4, [sp, #8]
    12ce:	9503      	str	r5, [sp, #12]
    12d0:	0020      	movs	r0, r4
    12d2:	0029      	movs	r1, r5
    12d4:	47b0      	blx	r6
    12d6:	0002      	movs	r2, r0
    12d8:	000b      	movs	r3, r1
    12da:	4c29      	ldr	r4, [pc, #164]	; (1380 <bmp280_comp_temp_double+0xec>)
    12dc:	9804      	ldr	r0, [sp, #16]
    12de:	9905      	ldr	r1, [sp, #20]
    12e0:	47a0      	blx	r4
    12e2:	9004      	str	r0, [sp, #16]
    12e4:	9105      	str	r1, [sp, #20]
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    12e6:	2200      	movs	r2, #0
    12e8:	4b26      	ldr	r3, [pc, #152]	; (1384 <bmp280_comp_temp_double+0xf0>)
    12ea:	9800      	ldr	r0, [sp, #0]
    12ec:	9901      	ldr	r1, [sp, #4]
    12ee:	47b0      	blx	r6
    12f0:	9000      	str	r0, [sp, #0]
    12f2:	9101      	str	r1, [sp, #4]
    12f4:	2200      	movs	r2, #0
    12f6:	4b24      	ldr	r3, [pc, #144]	; (1388 <bmp280_comp_temp_double+0xf4>)
    12f8:	9802      	ldr	r0, [sp, #8]
    12fa:	9903      	ldr	r1, [sp, #12]
    12fc:	47b0      	blx	r6
    12fe:	0002      	movs	r2, r0
    1300:	000b      	movs	r3, r1
    1302:	9800      	ldr	r0, [sp, #0]
    1304:	9901      	ldr	r1, [sp, #4]
    1306:	47a0      	blx	r4
    1308:	9000      	str	r0, [sp, #0]
    130a:	9101      	str	r1, [sp, #4]
		* ((double) dev->calib_param.dig_t2);
    130c:	2312      	movs	r3, #18
    130e:	5ef8      	ldrsh	r0, [r7, r3]
    1310:	4c1e      	ldr	r4, [pc, #120]	; (138c <bmp280_comp_temp_double+0xf8>)
    1312:	47a0      	blx	r4
    1314:	0002      	movs	r2, r0
    1316:	000b      	movs	r3, r1
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    1318:	9800      	ldr	r0, [sp, #0]
    131a:	9901      	ldr	r1, [sp, #4]
    131c:	47b0      	blx	r6
    131e:	9000      	str	r0, [sp, #0]
    1320:	9101      	str	r1, [sp, #4]
		* ((double) dev->calib_param.dig_t3);
    1322:	2314      	movs	r3, #20
    1324:	5ef8      	ldrsh	r0, [r7, r3]
    1326:	47a0      	blx	r4
    1328:	0004      	movs	r4, r0
    132a:	000d      	movs	r5, r1
		* (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0))
    132c:	9804      	ldr	r0, [sp, #16]
    132e:	9905      	ldr	r1, [sp, #20]
    1330:	0002      	movs	r2, r0
    1332:	000b      	movs	r3, r1
    1334:	47b0      	blx	r6
    1336:	0002      	movs	r2, r0
    1338:	000b      	movs	r3, r1
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
    133a:	0020      	movs	r0, r4
    133c:	0029      	movs	r1, r5
    133e:	47b0      	blx	r6
    1340:	0002      	movs	r2, r0
    1342:	000b      	movs	r3, r1
		dev->calib_param.t_fine = (int32_t) (var1 + var2);
    1344:	9800      	ldr	r0, [sp, #0]
    1346:	9901      	ldr	r1, [sp, #4]
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <bmp280_comp_temp_double+0xfc>)
    134a:	47a0      	blx	r4
    134c:	0004      	movs	r4, r0
    134e:	000d      	movs	r5, r1
    1350:	4b10      	ldr	r3, [pc, #64]	; (1394 <bmp280_comp_temp_double+0x100>)
    1352:	4798      	blx	r3
    1354:	62b8      	str	r0, [r7, #40]	; 0x28
		temperature = (var1 + var2) / 5120.0;
    1356:	2200      	movs	r2, #0
    1358:	4b0f      	ldr	r3, [pc, #60]	; (1398 <bmp280_comp_temp_double+0x104>)
    135a:	0020      	movs	r0, r4
    135c:	0029      	movs	r1, r5
    135e:	4c0f      	ldr	r4, [pc, #60]	; (139c <bmp280_comp_temp_double+0x108>)
    1360:	47a0      	blx	r4
}
    1362:	b007      	add	sp, #28
    1364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	double temperature = 0;
    1366:	2000      	movs	r0, #0
    1368:	2100      	movs	r1, #0
	return temperature;
    136a:	e7fa      	b.n	1362 <bmp280_comp_temp_double+0xce>
    136c:	00000b4d 	.word	0x00000b4d
    1370:	00003ee5 	.word	0x00003ee5
    1374:	000032cd 	.word	0x000032cd
    1378:	3ee00000 	.word	0x3ee00000
    137c:	3f200000 	.word	0x3f200000
    1380:	000037cd 	.word	0x000037cd
    1384:	3f100000 	.word	0x3f100000
    1388:	3f500000 	.word	0x3f500000
    138c:	00003e61 	.word	0x00003e61
    1390:	00002445 	.word	0x00002445
    1394:	00003df9 	.word	0x00003df9
    1398:	40b40000 	.word	0x40b40000
    139c:	00002a65 	.word	0x00002a65

000013a0 <bmp280_comp_pres_double>:
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	46c6      	mov	lr, r8
    13a4:	b500      	push	{lr}
    13a6:	b088      	sub	sp, #32
    13a8:	9002      	str	r0, [sp, #8]
    13aa:	000c      	movs	r4, r1
	rslt = null_ptr_check(dev);
    13ac:	0008      	movs	r0, r1
    13ae:	4b6a      	ldr	r3, [pc, #424]	; (1558 <bmp280_comp_pres_double+0x1b8>)
    13b0:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    13b2:	2800      	cmp	r0, #0
    13b4:	d000      	beq.n	13b8 <bmp280_comp_pres_double+0x18>
    13b6:	e0c5      	b.n	1544 <bmp280_comp_pres_double+0x1a4>
		var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
    13b8:	4f68      	ldr	r7, [pc, #416]	; (155c <bmp280_comp_pres_double+0x1bc>)
    13ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    13bc:	47b8      	blx	r7
    13be:	4d68      	ldr	r5, [pc, #416]	; (1560 <bmp280_comp_pres_double+0x1c0>)
    13c0:	2200      	movs	r2, #0
    13c2:	4b68      	ldr	r3, [pc, #416]	; (1564 <bmp280_comp_pres_double+0x1c4>)
    13c4:	47a8      	blx	r5
    13c6:	2200      	movs	r2, #0
    13c8:	4b67      	ldr	r3, [pc, #412]	; (1568 <bmp280_comp_pres_double+0x1c8>)
    13ca:	4e68      	ldr	r6, [pc, #416]	; (156c <bmp280_comp_pres_double+0x1cc>)
    13cc:	47b0      	blx	r6
    13ce:	9000      	str	r0, [sp, #0]
    13d0:	9101      	str	r1, [sp, #4]
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
    13d2:	231a      	movs	r3, #26
    13d4:	5ee0      	ldrsh	r0, [r4, r3]
    13d6:	47b8      	blx	r7
    13d8:	9a00      	ldr	r2, [sp, #0]
    13da:	9b01      	ldr	r3, [sp, #4]
    13dc:	47a8      	blx	r5
    13de:	9a00      	ldr	r2, [sp, #0]
    13e0:	9b01      	ldr	r3, [sp, #4]
    13e2:	47a8      	blx	r5
    13e4:	2200      	movs	r2, #0
    13e6:	23fb      	movs	r3, #251	; 0xfb
    13e8:	059b      	lsls	r3, r3, #22
    13ea:	47a8      	blx	r5
    13ec:	9004      	str	r0, [sp, #16]
    13ee:	9105      	str	r1, [sp, #20]
		+ ((double) dev->calib_param.dig_p2) * var1) / 524288.0;
    13f0:	2318      	movs	r3, #24
    13f2:	5ee0      	ldrsh	r0, [r4, r3]
    13f4:	47b8      	blx	r7
    13f6:	9a00      	ldr	r2, [sp, #0]
    13f8:	9b01      	ldr	r3, [sp, #4]
    13fa:	47a8      	blx	r5
    13fc:	0002      	movs	r2, r0
    13fe:	000b      	movs	r3, r1
    1400:	4e5b      	ldr	r6, [pc, #364]	; (1570 <bmp280_comp_pres_double+0x1d0>)
    1402:	9804      	ldr	r0, [sp, #16]
    1404:	9905      	ldr	r1, [sp, #20]
    1406:	47b0      	blx	r6
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
    1408:	2200      	movs	r2, #0
    140a:	23fb      	movs	r3, #251	; 0xfb
    140c:	059b      	lsls	r3, r3, #22
    140e:	47a8      	blx	r5
		var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
    1410:	2200      	movs	r2, #0
    1412:	23fc      	movs	r3, #252	; 0xfc
    1414:	059b      	lsls	r3, r3, #22
    1416:	47a8      	blx	r5
    1418:	2200      	movs	r2, #0
    141a:	4b56      	ldr	r3, [pc, #344]	; (1574 <bmp280_comp_pres_double+0x1d4>)
    141c:	47b0      	blx	r6
    141e:	0006      	movs	r6, r0
    1420:	000f      	movs	r7, r1
    1422:	8ae0      	ldrh	r0, [r4, #22]
    1424:	4b54      	ldr	r3, [pc, #336]	; (1578 <bmp280_comp_pres_double+0x1d8>)
    1426:	4798      	blx	r3
    1428:	0032      	movs	r2, r6
    142a:	003b      	movs	r3, r7
    142c:	47a8      	blx	r5
    142e:	0005      	movs	r5, r0
    1430:	000e      	movs	r6, r1
		if (var1 != 0) {
    1432:	2200      	movs	r2, #0
    1434:	2300      	movs	r3, #0
    1436:	9504      	str	r5, [sp, #16]
    1438:	9605      	str	r6, [sp, #20]
    143a:	4d50      	ldr	r5, [pc, #320]	; (157c <bmp280_comp_pres_double+0x1dc>)
    143c:	47a8      	blx	r5
    143e:	2800      	cmp	r0, #0
    1440:	d000      	beq.n	1444 <bmp280_comp_pres_double+0xa4>
    1442:	e085      	b.n	1550 <bmp280_comp_pres_double+0x1b0>
		var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
    1444:	2320      	movs	r3, #32
    1446:	5ee0      	ldrsh	r0, [r4, r3]
    1448:	4b44      	ldr	r3, [pc, #272]	; (155c <bmp280_comp_pres_double+0x1bc>)
    144a:	4698      	mov	r8, r3
    144c:	4798      	blx	r3
    144e:	0006      	movs	r6, r0
    1450:	000f      	movs	r7, r1
    1452:	4d43      	ldr	r5, [pc, #268]	; (1560 <bmp280_comp_pres_double+0x1c0>)
    1454:	9800      	ldr	r0, [sp, #0]
    1456:	9901      	ldr	r1, [sp, #4]
    1458:	0002      	movs	r2, r0
    145a:	000b      	movs	r3, r1
    145c:	47a8      	blx	r5
    145e:	0002      	movs	r2, r0
    1460:	000b      	movs	r3, r1
    1462:	0030      	movs	r0, r6
    1464:	0039      	movs	r1, r7
    1466:	47a8      	blx	r5
    1468:	2200      	movs	r2, #0
    146a:	23fc      	movs	r3, #252	; 0xfc
    146c:	059b      	lsls	r3, r3, #22
    146e:	47a8      	blx	r5
    1470:	9006      	str	r0, [sp, #24]
    1472:	9107      	str	r1, [sp, #28]
		var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
    1474:	231e      	movs	r3, #30
    1476:	5ee0      	ldrsh	r0, [r4, r3]
    1478:	47c0      	blx	r8
    147a:	9a00      	ldr	r2, [sp, #0]
    147c:	9b01      	ldr	r3, [sp, #4]
    147e:	47a8      	blx	r5
    1480:	4f3b      	ldr	r7, [pc, #236]	; (1570 <bmp280_comp_pres_double+0x1d0>)
    1482:	0002      	movs	r2, r0
    1484:	000b      	movs	r3, r1
    1486:	47b8      	blx	r7
    1488:	9a06      	ldr	r2, [sp, #24]
    148a:	9b07      	ldr	r3, [sp, #28]
    148c:	47b8      	blx	r7
		var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
    148e:	2200      	movs	r2, #0
    1490:	4b3b      	ldr	r3, [pc, #236]	; (1580 <bmp280_comp_pres_double+0x1e0>)
    1492:	47a8      	blx	r5
    1494:	9000      	str	r0, [sp, #0]
    1496:	9101      	str	r1, [sp, #4]
		pressure = 1048576.0 - (double) uncomp_pres;
    1498:	9802      	ldr	r0, [sp, #8]
    149a:	4b37      	ldr	r3, [pc, #220]	; (1578 <bmp280_comp_pres_double+0x1d8>)
    149c:	4798      	blx	r3
    149e:	0002      	movs	r2, r0
    14a0:	000b      	movs	r3, r1
    14a2:	4e32      	ldr	r6, [pc, #200]	; (156c <bmp280_comp_pres_double+0x1cc>)
    14a4:	2000      	movs	r0, #0
    14a6:	4937      	ldr	r1, [pc, #220]	; (1584 <bmp280_comp_pres_double+0x1e4>)
    14a8:	47b0      	blx	r6
    14aa:	9002      	str	r0, [sp, #8]
    14ac:	9103      	str	r1, [sp, #12]
		var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
    14ae:	231c      	movs	r3, #28
    14b0:	5ee0      	ldrsh	r0, [r4, r3]
    14b2:	47c0      	blx	r8
    14b4:	2200      	movs	r2, #0
    14b6:	4b34      	ldr	r3, [pc, #208]	; (1588 <bmp280_comp_pres_double+0x1e8>)
    14b8:	47a8      	blx	r5
    14ba:	9a00      	ldr	r2, [sp, #0]
    14bc:	9b01      	ldr	r3, [sp, #4]
    14be:	47b8      	blx	r7
			pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
    14c0:	2200      	movs	r2, #0
    14c2:	4b32      	ldr	r3, [pc, #200]	; (158c <bmp280_comp_pres_double+0x1ec>)
    14c4:	47a8      	blx	r5
    14c6:	0002      	movs	r2, r0
    14c8:	000b      	movs	r3, r1
    14ca:	9802      	ldr	r0, [sp, #8]
    14cc:	9903      	ldr	r1, [sp, #12]
    14ce:	47b0      	blx	r6
    14d0:	2200      	movs	r2, #0
    14d2:	4b2f      	ldr	r3, [pc, #188]	; (1590 <bmp280_comp_pres_double+0x1f0>)
    14d4:	47a8      	blx	r5
    14d6:	9a04      	ldr	r2, [sp, #16]
    14d8:	9b05      	ldr	r3, [sp, #20]
    14da:	4e2e      	ldr	r6, [pc, #184]	; (1594 <bmp280_comp_pres_double+0x1f4>)
    14dc:	47b0      	blx	r6
    14de:	9000      	str	r0, [sp, #0]
    14e0:	9101      	str	r1, [sp, #4]
			var1 = ((double) dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
    14e2:	2326      	movs	r3, #38	; 0x26
    14e4:	5ee0      	ldrsh	r0, [r4, r3]
    14e6:	47c0      	blx	r8
    14e8:	9a00      	ldr	r2, [sp, #0]
    14ea:	9b01      	ldr	r3, [sp, #4]
    14ec:	47a8      	blx	r5
    14ee:	9a00      	ldr	r2, [sp, #0]
    14f0:	9b01      	ldr	r3, [sp, #4]
    14f2:	47a8      	blx	r5
    14f4:	2200      	movs	r2, #0
    14f6:	23f8      	movs	r3, #248	; 0xf8
    14f8:	059b      	lsls	r3, r3, #22
    14fa:	47a8      	blx	r5
    14fc:	9002      	str	r0, [sp, #8]
    14fe:	9103      	str	r1, [sp, #12]
			var2 = pressure * ((double) dev->calib_param.dig_p8) / 32768.0;
    1500:	2324      	movs	r3, #36	; 0x24
    1502:	5ee0      	ldrsh	r0, [r4, r3]
    1504:	47c0      	blx	r8
    1506:	9a00      	ldr	r2, [sp, #0]
    1508:	9b01      	ldr	r3, [sp, #4]
    150a:	47a8      	blx	r5
    150c:	2200      	movs	r2, #0
    150e:	23fc      	movs	r3, #252	; 0xfc
    1510:	059b      	lsls	r3, r3, #22
    1512:	47a8      	blx	r5
    1514:	0002      	movs	r2, r0
    1516:	000b      	movs	r3, r1
			pressure = pressure + (var1 + var2 + ((double) dev->calib_param.dig_p7)) / 16.0;
    1518:	9802      	ldr	r0, [sp, #8]
    151a:	9903      	ldr	r1, [sp, #12]
    151c:	47b8      	blx	r7
    151e:	9002      	str	r0, [sp, #8]
    1520:	9103      	str	r1, [sp, #12]
    1522:	2322      	movs	r3, #34	; 0x22
    1524:	5ee0      	ldrsh	r0, [r4, r3]
    1526:	47c0      	blx	r8
    1528:	0002      	movs	r2, r0
    152a:	000b      	movs	r3, r1
    152c:	9802      	ldr	r0, [sp, #8]
    152e:	9903      	ldr	r1, [sp, #12]
    1530:	47b8      	blx	r7
    1532:	2200      	movs	r2, #0
    1534:	4b18      	ldr	r3, [pc, #96]	; (1598 <bmp280_comp_pres_double+0x1f8>)
    1536:	47a8      	blx	r5
    1538:	0002      	movs	r2, r0
    153a:	000b      	movs	r3, r1
    153c:	9800      	ldr	r0, [sp, #0]
    153e:	9901      	ldr	r1, [sp, #4]
    1540:	47b8      	blx	r7
    1542:	e001      	b.n	1548 <bmp280_comp_pres_double+0x1a8>
	double pressure = 0;
    1544:	2000      	movs	r0, #0
    1546:	2100      	movs	r1, #0
}
    1548:	b008      	add	sp, #32
    154a:	bc04      	pop	{r2}
    154c:	4690      	mov	r8, r2
    154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pressure = 0;
    1550:	2000      	movs	r0, #0
    1552:	2100      	movs	r1, #0
	return pressure;
    1554:	e7f8      	b.n	1548 <bmp280_comp_pres_double+0x1a8>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	00000b4d 	.word	0x00000b4d
    155c:	00003e61 	.word	0x00003e61
    1560:	000032cd 	.word	0x000032cd
    1564:	3fe00000 	.word	0x3fe00000
    1568:	40ef4000 	.word	0x40ef4000
    156c:	000037cd 	.word	0x000037cd
    1570:	00002445 	.word	0x00002445
    1574:	3ff00000 	.word	0x3ff00000
    1578:	00003ee5 	.word	0x00003ee5
    157c:	00002315 	.word	0x00002315
    1580:	3fd00000 	.word	0x3fd00000
    1584:	41300000 	.word	0x41300000
    1588:	40f00000 	.word	0x40f00000
    158c:	3f300000 	.word	0x3f300000
    1590:	40b86a00 	.word	0x40b86a00
    1594:	00002a65 	.word	0x00002a65
    1598:	3fb00000 	.word	0x3fb00000

0000159c <bmp280_compute_meas_time>:
{
    159c:	b510      	push	{r4, lr}
    159e:	0004      	movs	r4, r0
	rslt = null_ptr_check(dev);
    15a0:	4b11      	ldr	r3, [pc, #68]	; (15e8 <bmp280_compute_meas_time+0x4c>)
    15a2:	4798      	blx	r3
	uint32_t period = 0;
    15a4:	2300      	movs	r3, #0
	if (rslt == BMP280_OK) {
    15a6:	2800      	cmp	r0, #0
    15a8:	d11b      	bne.n	15e2 <bmp280_compute_meas_time+0x46>
		p_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_pres) >> 1);
    15aa:	332d      	adds	r3, #45	; 0x2d
    15ac:	5ce2      	ldrb	r2, [r4, r3]
		t_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_temp) >> 1);
    15ae:	3b01      	subs	r3, #1
    15b0:	5ce1      	ldrb	r1, [r4, r3]
    15b2:	3b2b      	subs	r3, #43	; 0x2b
    15b4:	0018      	movs	r0, r3
    15b6:	4088      	lsls	r0, r1
    15b8:	0840      	lsrs	r0, r0, #1
		p_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_pres) >> 1);
    15ba:	4093      	lsls	r3, r2
    15bc:	085b      	lsrs	r3, r3, #1
    15be:	18c3      	adds	r3, r0, r3
    15c0:	20fa      	movs	r0, #250	; 0xfa
    15c2:	00c0      	lsls	r0, r0, #3
    15c4:	4358      	muls	r0, r3
		p_startup = (dev->conf.os_pres) ? 500 : 0;
    15c6:	2300      	movs	r3, #0
    15c8:	2a00      	cmp	r2, #0
    15ca:	d001      	beq.n	15d0 <bmp280_compute_meas_time+0x34>
    15cc:	23fa      	movs	r3, #250	; 0xfa
    15ce:	005b      	lsls	r3, r3, #1
		period = startup + t_dur + p_startup + p_dur + 500;
    15d0:	4a06      	ldr	r2, [pc, #24]	; (15ec <bmp280_compute_meas_time+0x50>)
    15d2:	4694      	mov	ip, r2
    15d4:	4460      	add	r0, ip
    15d6:	18c0      	adds	r0, r0, r3
		period /= 1000; /* Convert to milliseconds */
    15d8:	21fa      	movs	r1, #250	; 0xfa
    15da:	0089      	lsls	r1, r1, #2
    15dc:	4b04      	ldr	r3, [pc, #16]	; (15f0 <bmp280_compute_meas_time+0x54>)
    15de:	4798      	blx	r3
    15e0:	0003      	movs	r3, r0
	return (uint8_t)period;
    15e2:	b2d8      	uxtb	r0, r3
}
    15e4:	bd10      	pop	{r4, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	00000b4d 	.word	0x00000b4d
    15ec:	000005dc 	.word	0x000005dc
    15f0:	000021dd 	.word	0x000021dd

000015f4 <BMP_Delay_MS>:
	rslt = bmp280_init(&bmp);
	
}

void BMP_Delay_MS(uint32_t delay)
{
    15f4:	b510      	push	{r4, lr}
	delay_ms(delay);
    15f6:	2800      	cmp	r0, #0
    15f8:	d103      	bne.n	1602 <BMP_Delay_MS+0xe>
    15fa:	2001      	movs	r0, #1
    15fc:	4b02      	ldr	r3, [pc, #8]	; (1608 <BMP_Delay_MS+0x14>)
    15fe:	4798      	blx	r3
}
    1600:	bd10      	pop	{r4, pc}
	delay_ms(delay);
    1602:	4b02      	ldr	r3, [pc, #8]	; (160c <BMP_Delay_MS+0x18>)
    1604:	4798      	blx	r3
    1606:	e7fb      	b.n	1600 <BMP_Delay_MS+0xc>
    1608:	00000155 	.word	0x00000155
    160c:	00000181 	.word	0x00000181

00001610 <BMP_280_Write>:

	return rslt;
}

uint8_t BMP_280_Write(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    1610:	b510      	push	{r4, lr}
	uint8_t rslt;
	rslt = I2C_Write(addr, startRegister, data, cnt);
    1612:	4c01      	ldr	r4, [pc, #4]	; (1618 <BMP_280_Write+0x8>)
    1614:	47a0      	blx	r4
	
	return rslt;
}
    1616:	bd10      	pop	{r4, pc}
    1618:	00002159 	.word	0x00002159

0000161c <BMP_280_Read>:
{
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
    161e:	b083      	sub	sp, #12
    1620:	0005      	movs	r5, r0
    1622:	9200      	str	r2, [sp, #0]
    1624:	001f      	movs	r7, r3
    1626:	466b      	mov	r3, sp
    1628:	1ddc      	adds	r4, r3, #7
    162a:	71d9      	strb	r1, [r3, #7]
	rslt = I2C_Write(addr, startRegister, &startRegister, 1);
    162c:	2301      	movs	r3, #1
    162e:	0022      	movs	r2, r4
    1630:	4e04      	ldr	r6, [pc, #16]	; (1644 <BMP_280_Read+0x28>)
    1632:	47b0      	blx	r6
	rslt = I2C_Read(addr,startRegister,data,cnt);
    1634:	7821      	ldrb	r1, [r4, #0]
    1636:	003b      	movs	r3, r7
    1638:	9a00      	ldr	r2, [sp, #0]
    163a:	0028      	movs	r0, r5
    163c:	4c02      	ldr	r4, [pc, #8]	; (1648 <BMP_280_Read+0x2c>)
    163e:	47a0      	blx	r4
}
    1640:	b003      	add	sp, #12
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1644:	00002159 	.word	0x00002159
    1648:	00002129 	.word	0x00002129

0000164c <InitBMP280>:
{	
    164c:	b510      	push	{r4, lr}
	bmp.dev_id = BMP280_I2C_ADDR_PRIM;
    164e:	4807      	ldr	r0, [pc, #28]	; (166c <InitBMP280+0x20>)
    1650:	2376      	movs	r3, #118	; 0x76
    1652:	7043      	strb	r3, [r0, #1]
	bmp.intf = BMP280_I2C_INTF;
    1654:	3b75      	subs	r3, #117	; 0x75
    1656:	7083      	strb	r3, [r0, #2]
	bmp.read = BMP_280_Read;
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <InitBMP280+0x24>)
    165a:	6043      	str	r3, [r0, #4]
	bmp.write = BMP_280_Write;
    165c:	4b05      	ldr	r3, [pc, #20]	; (1674 <InitBMP280+0x28>)
    165e:	6083      	str	r3, [r0, #8]
	bmp.delay_ms = BMP_Delay_MS;
    1660:	4b05      	ldr	r3, [pc, #20]	; (1678 <InitBMP280+0x2c>)
    1662:	60c3      	str	r3, [r0, #12]
	rslt = bmp280_init(&bmp);
    1664:	4b05      	ldr	r3, [pc, #20]	; (167c <InitBMP280+0x30>)
    1666:	4798      	blx	r3
}
    1668:	bd10      	pop	{r4, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	200000f0 	.word	0x200000f0
    1670:	0000161d 	.word	0x0000161d
    1674:	00001611 	.word	0x00001611
    1678:	000015f5 	.word	0x000015f5
    167c:	00000d99 	.word	0x00000d99

00001680 <ConfigureBMP280>:


void ConfigureBMP280()
{
    1680:	b530      	push	{r4, r5, lr}
    1682:	b083      	sub	sp, #12
	int8_t rslt;

	/* Always read the current settings before writing, especially when
	 * all the configuration is not modified 
	 */
	rslt = bmp280_get_config(&conf, &bmp);
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <ConfigureBMP280+0x40>)
    1686:	0021      	movs	r1, r4
    1688:	4668      	mov	r0, sp
    168a:	4d0e      	ldr	r5, [pc, #56]	; (16c4 <ConfigureBMP280+0x44>)
    168c:	47a8      	blx	r5
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	/* Overwrite the desired settings */
	conf.filter = BMP280_FILTER_COEFF_2;
    168e:	2301      	movs	r3, #1
    1690:	466a      	mov	r2, sp
    1692:	70d3      	strb	r3, [r2, #3]
	conf.os_pres = BMP280_OS_16X;
    1694:	3304      	adds	r3, #4
    1696:	7053      	strb	r3, [r2, #1]
	conf.os_temp = BMP280_OS_4X;
    1698:	2203      	movs	r2, #3
    169a:	4669      	mov	r1, sp
    169c:	700a      	strb	r2, [r1, #0]
	conf.odr = BMP280_ODR_1000_MS;
    169e:	708b      	strb	r3, [r1, #2]
	

	rslt = bmp280_set_config(&conf, &bmp);
    16a0:	0021      	movs	r1, r4
    16a2:	4668      	mov	r0, sp
    16a4:	4b08      	ldr	r3, [pc, #32]	; (16c8 <ConfigureBMP280+0x48>)
    16a6:	4798      	blx	r3
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	rslt = bmp280_get_config(&conf, &bmp);
    16a8:	0021      	movs	r1, r4
    16aa:	4668      	mov	r0, sp
    16ac:	47a8      	blx	r5

	/* Always set the power mode after setting the configuration */

	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
    16ae:	0021      	movs	r1, r4
    16b0:	2003      	movs	r0, #3
    16b2:	4b06      	ldr	r3, [pc, #24]	; (16cc <ConfigureBMP280+0x4c>)
    16b4:	4798      	blx	r3
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	rslt = bmp280_get_config(&conf, &bmp);
    16b6:	0021      	movs	r1, r4
    16b8:	4668      	mov	r0, sp
    16ba:	47a8      	blx	r5
}
    16bc:	b003      	add	sp, #12
    16be:	bd30      	pop	{r4, r5, pc}
    16c0:	200000f0 	.word	0x200000f0
    16c4:	00000ed1 	.word	0x00000ed1
    16c8:	00000f4d 	.word	0x00000f4d
    16cc:	00000f61 	.word	0x00000f61

000016d0 <BMP280_ReadCompPresTemp>:

void BMP280_ReadCompPresTemp(double *compTemperature, double *compPressure)
{
    16d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d2:	46d6      	mov	lr, sl
    16d4:	464f      	mov	r7, r9
    16d6:	b580      	push	{r7, lr}
    16d8:	b085      	sub	sp, #20
    16da:	4681      	mov	r9, r0
    16dc:	468a      	mov	sl, r1
	struct bmp280_uncomp_data ucomp_data;
	int8_t rslt;

	uint8_t meas_dur = bmp280_compute_meas_time(&bmp);
    16de:	4c1c      	ldr	r4, [pc, #112]	; (1750 <BMP280_ReadCompPresTemp+0x80>)
    16e0:	0020      	movs	r0, r4
    16e2:	4b1c      	ldr	r3, [pc, #112]	; (1754 <BMP280_ReadCompPresTemp+0x84>)
    16e4:	4798      	blx	r3
    16e6:	9001      	str	r0, [sp, #4]
    16e8:	0005      	movs	r5, r0

	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
    16ea:	0021      	movs	r1, r4
    16ec:	a802      	add	r0, sp, #8
    16ee:	4b1a      	ldr	r3, [pc, #104]	; (1758 <BMP280_ReadCompPresTemp+0x88>)
    16f0:	4798      	blx	r3

	int32_t temp32 = bmp280_comp_temp_32bit(ucomp_data.uncomp_temp, &bmp);
    16f2:	0021      	movs	r1, r4
    16f4:	9802      	ldr	r0, [sp, #8]
    16f6:	4b19      	ldr	r3, [pc, #100]	; (175c <BMP280_ReadCompPresTemp+0x8c>)
    16f8:	4798      	blx	r3
	uint32_t pres32 = bmp280_comp_pres_32bit(ucomp_data.uncomp_press, &bmp);
    16fa:	9b03      	ldr	r3, [sp, #12]
    16fc:	9300      	str	r3, [sp, #0]
    16fe:	0021      	movs	r1, r4
    1700:	0018      	movs	r0, r3
    1702:	4b17      	ldr	r3, [pc, #92]	; (1760 <BMP280_ReadCompPresTemp+0x90>)
    1704:	4798      	blx	r3
	uint32_t pres64 = bmp280_comp_pres_64bit(ucomp_data.uncomp_press, &bmp);
    1706:	9b03      	ldr	r3, [sp, #12]
    1708:	9300      	str	r3, [sp, #0]
    170a:	0021      	movs	r1, r4
    170c:	0018      	movs	r0, r3
    170e:	4b15      	ldr	r3, [pc, #84]	; (1764 <BMP280_ReadCompPresTemp+0x94>)
    1710:	4798      	blx	r3
	double temp = bmp280_comp_temp_double(ucomp_data.uncomp_temp, &bmp);
    1712:	0021      	movs	r1, r4
    1714:	9802      	ldr	r0, [sp, #8]
    1716:	4b14      	ldr	r3, [pc, #80]	; (1768 <BMP280_ReadCompPresTemp+0x98>)
    1718:	4798      	blx	r3
    171a:	0006      	movs	r6, r0
    171c:	000f      	movs	r7, r1
	double pres = bmp280_comp_pres_double(ucomp_data.uncomp_press, &bmp);
    171e:	9803      	ldr	r0, [sp, #12]
    1720:	0021      	movs	r1, r4
    1722:	4b12      	ldr	r3, [pc, #72]	; (176c <BMP280_ReadCompPresTemp+0x9c>)
    1724:	4798      	blx	r3

	*compPressure = pres;
    1726:	4653      	mov	r3, sl
    1728:	6018      	str	r0, [r3, #0]
    172a:	6059      	str	r1, [r3, #4]
	*compTemperature = temp;
    172c:	464b      	mov	r3, r9
    172e:	601e      	str	r6, [r3, #0]
    1730:	605f      	str	r7, [r3, #4]
	delay_ms(meas_dur);
    1732:	2d00      	cmp	r5, #0
    1734:	d107      	bne.n	1746 <BMP280_ReadCompPresTemp+0x76>
    1736:	2001      	movs	r0, #1
    1738:	4b0d      	ldr	r3, [pc, #52]	; (1770 <BMP280_ReadCompPresTemp+0xa0>)
    173a:	4798      	blx	r3
    173c:	b005      	add	sp, #20
    173e:	bc0c      	pop	{r2, r3}
    1740:	4691      	mov	r9, r2
    1742:	469a      	mov	sl, r3
    1744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(meas_dur);
    1746:	9801      	ldr	r0, [sp, #4]
    1748:	4b0a      	ldr	r3, [pc, #40]	; (1774 <BMP280_ReadCompPresTemp+0xa4>)
    174a:	4798      	blx	r3
    174c:	e7f6      	b.n	173c <BMP280_ReadCompPresTemp+0x6c>
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	200000f0 	.word	0x200000f0
    1754:	0000159d 	.word	0x0000159d
    1758:	00000f89 	.word	0x00000f89
    175c:	00001001 	.word	0x00001001
    1760:	00001049 	.word	0x00001049
    1764:	00001109 	.word	0x00001109
    1768:	00001295 	.word	0x00001295
    176c:	000013a1 	.word	0x000013a1
    1770:	00000155 	.word	0x00000155
    1774:	00000181 	.word	0x00000181

00001778 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1778:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    177a:	685a      	ldr	r2, [r3, #4]
    177c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    177e:	6842      	ldr	r2, [r0, #4]
    1780:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1786:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1788:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    178a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    178c:	6803      	ldr	r3, [r0, #0]
    178e:	3301      	adds	r3, #1
    1790:	6003      	str	r3, [r0, #0]
}
    1792:	4770      	bx	lr

00001794 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1794:	6843      	ldr	r3, [r0, #4]
    1796:	6882      	ldr	r2, [r0, #8]
    1798:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    179a:	6883      	ldr	r3, [r0, #8]
    179c:	6842      	ldr	r2, [r0, #4]
    179e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    17a0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    17a2:	685a      	ldr	r2, [r3, #4]
    17a4:	4290      	cmp	r0, r2
    17a6:	d006      	beq.n	17b6 <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    17a8:	2200      	movs	r2, #0
    17aa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    17ac:	681a      	ldr	r2, [r3, #0]
    17ae:	3a01      	subs	r2, #1
    17b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    17b2:	6818      	ldr	r0, [r3, #0]
}
    17b4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    17b6:	6882      	ldr	r2, [r0, #8]
    17b8:	605a      	str	r2, [r3, #4]
    17ba:	e7f5      	b.n	17a8 <uxListRemove+0x14>

000017bc <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    17be:	4b3b      	ldr	r3, [pc, #236]	; (18ac <vTaskIncrementTick+0xf0>)
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d16d      	bne.n	18a2 <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
    17c6:	4b3a      	ldr	r3, [pc, #232]	; (18b0 <vTaskIncrementTick+0xf4>)
    17c8:	681a      	ldr	r2, [r3, #0]
    17ca:	3201      	adds	r2, #1
    17cc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d118      	bne.n	1806 <vTaskIncrementTick+0x4a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    17d4:	4b37      	ldr	r3, [pc, #220]	; (18b4 <vTaskIncrementTick+0xf8>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	d001      	beq.n	17e2 <vTaskIncrementTick+0x26>
    17de:	b672      	cpsid	i
    17e0:	e7fe      	b.n	17e0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
    17e2:	4b34      	ldr	r3, [pc, #208]	; (18b4 <vTaskIncrementTick+0xf8>)
    17e4:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    17e6:	4a34      	ldr	r2, [pc, #208]	; (18b8 <vTaskIncrementTick+0xfc>)
    17e8:	6810      	ldr	r0, [r2, #0]
    17ea:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    17ec:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
    17ee:	4933      	ldr	r1, [pc, #204]	; (18bc <vTaskIncrementTick+0x100>)
    17f0:	680a      	ldr	r2, [r1, #0]
    17f2:	3201      	adds	r2, #1
    17f4:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d11a      	bne.n	1834 <vTaskIncrementTick+0x78>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    17fe:	2201      	movs	r2, #1
    1800:	4252      	negs	r2, r2
    1802:	4b2f      	ldr	r3, [pc, #188]	; (18c0 <vTaskIncrementTick+0x104>)
    1804:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1806:	4b2a      	ldr	r3, [pc, #168]	; (18b0 <vTaskIncrementTick+0xf4>)
    1808:	681a      	ldr	r2, [r3, #0]
    180a:	4b2d      	ldr	r3, [pc, #180]	; (18c0 <vTaskIncrementTick+0x104>)
    180c:	681b      	ldr	r3, [r3, #0]
    180e:	429a      	cmp	r2, r3
    1810:	d34b      	bcc.n	18aa <vTaskIncrementTick+0xee>
    1812:	4b28      	ldr	r3, [pc, #160]	; (18b4 <vTaskIncrementTick+0xf8>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	681b      	ldr	r3, [r3, #0]
    1818:	2b00      	cmp	r3, #0
    181a:	d013      	beq.n	1844 <vTaskIncrementTick+0x88>
    181c:	4b25      	ldr	r3, [pc, #148]	; (18b4 <vTaskIncrementTick+0xf8>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	68db      	ldr	r3, [r3, #12]
    1822:	68dc      	ldr	r4, [r3, #12]
    1824:	6863      	ldr	r3, [r4, #4]
    1826:	4a22      	ldr	r2, [pc, #136]	; (18b0 <vTaskIncrementTick+0xf4>)
    1828:	6812      	ldr	r2, [r2, #0]
    182a:	4293      	cmp	r3, r2
    182c:	d80f      	bhi.n	184e <vTaskIncrementTick+0x92>
    182e:	4f25      	ldr	r7, [pc, #148]	; (18c4 <vTaskIncrementTick+0x108>)
    1830:	4e25      	ldr	r6, [pc, #148]	; (18c8 <vTaskIncrementTick+0x10c>)
    1832:	e025      	b.n	1880 <vTaskIncrementTick+0xc4>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1834:	4b1f      	ldr	r3, [pc, #124]	; (18b4 <vTaskIncrementTick+0xf8>)
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	68db      	ldr	r3, [r3, #12]
    183a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    183c:	685a      	ldr	r2, [r3, #4]
    183e:	4b20      	ldr	r3, [pc, #128]	; (18c0 <vTaskIncrementTick+0x104>)
    1840:	601a      	str	r2, [r3, #0]
    1842:	e7e0      	b.n	1806 <vTaskIncrementTick+0x4a>
		prvCheckDelayedTasks();
    1844:	2201      	movs	r2, #1
    1846:	4252      	negs	r2, r2
    1848:	4b1d      	ldr	r3, [pc, #116]	; (18c0 <vTaskIncrementTick+0x104>)
    184a:	601a      	str	r2, [r3, #0]
    184c:	e02d      	b.n	18aa <vTaskIncrementTick+0xee>
    184e:	4a1c      	ldr	r2, [pc, #112]	; (18c0 <vTaskIncrementTick+0x104>)
    1850:	6013      	str	r3, [r2, #0]
    1852:	e02a      	b.n	18aa <vTaskIncrementTick+0xee>
    1854:	0098      	lsls	r0, r3, #2
    1856:	18c0      	adds	r0, r0, r3
    1858:	0080      	lsls	r0, r0, #2
    185a:	4b1c      	ldr	r3, [pc, #112]	; (18cc <vTaskIncrementTick+0x110>)
    185c:	1818      	adds	r0, r3, r0
    185e:	0029      	movs	r1, r5
    1860:	4b1b      	ldr	r3, [pc, #108]	; (18d0 <vTaskIncrementTick+0x114>)
    1862:	4798      	blx	r3
    1864:	4b13      	ldr	r3, [pc, #76]	; (18b4 <vTaskIncrementTick+0xf8>)
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	2b00      	cmp	r3, #0
    186c:	d0ea      	beq.n	1844 <vTaskIncrementTick+0x88>
    186e:	4b11      	ldr	r3, [pc, #68]	; (18b4 <vTaskIncrementTick+0xf8>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	68db      	ldr	r3, [r3, #12]
    1874:	68dc      	ldr	r4, [r3, #12]
    1876:	6863      	ldr	r3, [r4, #4]
    1878:	4a0d      	ldr	r2, [pc, #52]	; (18b0 <vTaskIncrementTick+0xf4>)
    187a:	6812      	ldr	r2, [r2, #0]
    187c:	4293      	cmp	r3, r2
    187e:	d8e6      	bhi.n	184e <vTaskIncrementTick+0x92>
    1880:	1d25      	adds	r5, r4, #4
    1882:	0028      	movs	r0, r5
    1884:	47b8      	blx	r7
    1886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1888:	2b00      	cmp	r3, #0
    188a:	d003      	beq.n	1894 <vTaskIncrementTick+0xd8>
    188c:	0020      	movs	r0, r4
    188e:	3018      	adds	r0, #24
    1890:	4b0c      	ldr	r3, [pc, #48]	; (18c4 <vTaskIncrementTick+0x108>)
    1892:	4798      	blx	r3
    1894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1896:	6832      	ldr	r2, [r6, #0]
    1898:	4293      	cmp	r3, r2
    189a:	d9db      	bls.n	1854 <vTaskIncrementTick+0x98>
    189c:	4a0a      	ldr	r2, [pc, #40]	; (18c8 <vTaskIncrementTick+0x10c>)
    189e:	6013      	str	r3, [r2, #0]
    18a0:	e7d8      	b.n	1854 <vTaskIncrementTick+0x98>
	}
	else
	{
		++uxMissedTicks;
    18a2:	4a0c      	ldr	r2, [pc, #48]	; (18d4 <vTaskIncrementTick+0x118>)
    18a4:	6813      	ldr	r3, [r2, #0]
    18a6:	3301      	adds	r3, #1
    18a8:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
    18aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ac:	200000a0 	.word	0x200000a0
    18b0:	200000b0 	.word	0x200000b0
    18b4:	20000030 	.word	0x20000030
    18b8:	20000034 	.word	0x20000034
    18bc:	200000ac 	.word	0x200000ac
    18c0:	20000008 	.word	0x20000008
    18c4:	00001795 	.word	0x00001795
    18c8:	200000a4 	.word	0x200000a4
    18cc:	20000038 	.word	0x20000038
    18d0:	00001779 	.word	0x00001779
    18d4:	2000009c 	.word	0x2000009c

000018d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    18d8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    18da:	4b24      	ldr	r3, [pc, #144]	; (196c <vTaskSwitchContext+0x94>)
    18dc:	681b      	ldr	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d11e      	bne.n	1920 <vTaskSwitchContext+0x48>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    18e2:	4b23      	ldr	r3, [pc, #140]	; (1970 <vTaskSwitchContext+0x98>)
    18e4:	681a      	ldr	r2, [r3, #0]
    18e6:	0093      	lsls	r3, r2, #2
    18e8:	189b      	adds	r3, r3, r2
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	4a21      	ldr	r2, [pc, #132]	; (1974 <vTaskSwitchContext+0x9c>)
    18ee:	589b      	ldr	r3, [r3, r2]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d119      	bne.n	1928 <vTaskSwitchContext+0x50>
    18f4:	4b1e      	ldr	r3, [pc, #120]	; (1970 <vTaskSwitchContext+0x98>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d00f      	beq.n	191c <vTaskSwitchContext+0x44>
    18fc:	4a1c      	ldr	r2, [pc, #112]	; (1970 <vTaskSwitchContext+0x98>)
    18fe:	4c1d      	ldr	r4, [pc, #116]	; (1974 <vTaskSwitchContext+0x9c>)
    1900:	0010      	movs	r0, r2
    1902:	6813      	ldr	r3, [r2, #0]
    1904:	3b01      	subs	r3, #1
    1906:	6013      	str	r3, [r2, #0]
    1908:	6811      	ldr	r1, [r2, #0]
    190a:	008b      	lsls	r3, r1, #2
    190c:	185b      	adds	r3, r3, r1
    190e:	009b      	lsls	r3, r3, #2
    1910:	591b      	ldr	r3, [r3, r4]
    1912:	2b00      	cmp	r3, #0
    1914:	d108      	bne.n	1928 <vTaskSwitchContext+0x50>
    1916:	6803      	ldr	r3, [r0, #0]
    1918:	2b00      	cmp	r3, #0
    191a:	d1f2      	bne.n	1902 <vTaskSwitchContext+0x2a>
    191c:	b672      	cpsid	i
    191e:	e7fe      	b.n	191e <vTaskSwitchContext+0x46>
		xMissedYield = pdTRUE;
    1920:	2201      	movs	r2, #1
    1922:	4b15      	ldr	r3, [pc, #84]	; (1978 <vTaskSwitchContext+0xa0>)
    1924:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
    1926:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1928:	4b11      	ldr	r3, [pc, #68]	; (1970 <vTaskSwitchContext+0x98>)
    192a:	681a      	ldr	r2, [r3, #0]
    192c:	4811      	ldr	r0, [pc, #68]	; (1974 <vTaskSwitchContext+0x9c>)
    192e:	0093      	lsls	r3, r2, #2
    1930:	1899      	adds	r1, r3, r2
    1932:	0089      	lsls	r1, r1, #2
    1934:	1841      	adds	r1, r0, r1
    1936:	684c      	ldr	r4, [r1, #4]
    1938:	6864      	ldr	r4, [r4, #4]
    193a:	604c      	str	r4, [r1, #4]
    193c:	189b      	adds	r3, r3, r2
    193e:	009b      	lsls	r3, r3, #2
    1940:	3308      	adds	r3, #8
    1942:	18c3      	adds	r3, r0, r3
    1944:	429c      	cmp	r4, r3
    1946:	d009      	beq.n	195c <vTaskSwitchContext+0x84>
    1948:	0093      	lsls	r3, r2, #2
    194a:	189a      	adds	r2, r3, r2
    194c:	0092      	lsls	r2, r2, #2
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <vTaskSwitchContext+0x9c>)
    1950:	189a      	adds	r2, r3, r2
    1952:	6853      	ldr	r3, [r2, #4]
    1954:	68da      	ldr	r2, [r3, #12]
    1956:	4b09      	ldr	r3, [pc, #36]	; (197c <vTaskSwitchContext+0xa4>)
    1958:	601a      	str	r2, [r3, #0]
}
    195a:	e7e4      	b.n	1926 <vTaskSwitchContext+0x4e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    195c:	6860      	ldr	r0, [r4, #4]
    195e:	0093      	lsls	r3, r2, #2
    1960:	189b      	adds	r3, r3, r2
    1962:	009b      	lsls	r3, r3, #2
    1964:	4903      	ldr	r1, [pc, #12]	; (1974 <vTaskSwitchContext+0x9c>)
    1966:	18cb      	adds	r3, r1, r3
    1968:	6058      	str	r0, [r3, #4]
    196a:	e7ed      	b.n	1948 <vTaskSwitchContext+0x70>
    196c:	200000a0 	.word	0x200000a0
    1970:	200000a4 	.word	0x200000a4
    1974:	20000038 	.word	0x20000038
    1978:	200000a8 	.word	0x200000a8
    197c:	2000002c 	.word	0x2000002c

00001980 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1980:	b510      	push	{r4, lr}
    1982:	b082      	sub	sp, #8
    1984:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1986:	4b0e      	ldr	r3, [pc, #56]	; (19c0 <sercom_set_gclk_generator+0x40>)
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	2b00      	cmp	r3, #0
    198c:	d007      	beq.n	199e <sercom_set_gclk_generator+0x1e>
    198e:	2900      	cmp	r1, #0
    1990:	d105      	bne.n	199e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1992:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <sercom_set_gclk_generator+0x40>)
    1994:	785b      	ldrb	r3, [r3, #1]
    1996:	4283      	cmp	r3, r0
    1998:	d010      	beq.n	19bc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    199a:	201d      	movs	r0, #29
    199c:	e00c      	b.n	19b8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    199e:	a901      	add	r1, sp, #4
    19a0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    19a2:	2013      	movs	r0, #19
    19a4:	4b07      	ldr	r3, [pc, #28]	; (19c4 <sercom_set_gclk_generator+0x44>)
    19a6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    19a8:	2013      	movs	r0, #19
    19aa:	4b07      	ldr	r3, [pc, #28]	; (19c8 <sercom_set_gclk_generator+0x48>)
    19ac:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    19ae:	4b04      	ldr	r3, [pc, #16]	; (19c0 <sercom_set_gclk_generator+0x40>)
    19b0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    19b2:	2201      	movs	r2, #1
    19b4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    19b6:	2000      	movs	r0, #0
}
    19b8:	b002      	add	sp, #8
    19ba:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    19bc:	2000      	movs	r0, #0
    19be:	e7fb      	b.n	19b8 <sercom_set_gclk_generator+0x38>
    19c0:	200000b4 	.word	0x200000b4
    19c4:	00001e65 	.word	0x00001e65
    19c8:	00001dd9 	.word	0x00001dd9

000019cc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    19cc:	4b40      	ldr	r3, [pc, #256]	; (1ad0 <_sercom_get_default_pad+0x104>)
    19ce:	4298      	cmp	r0, r3
    19d0:	d031      	beq.n	1a36 <_sercom_get_default_pad+0x6a>
    19d2:	d90a      	bls.n	19ea <_sercom_get_default_pad+0x1e>
    19d4:	4b3f      	ldr	r3, [pc, #252]	; (1ad4 <_sercom_get_default_pad+0x108>)
    19d6:	4298      	cmp	r0, r3
    19d8:	d04d      	beq.n	1a76 <_sercom_get_default_pad+0xaa>
    19da:	4b3f      	ldr	r3, [pc, #252]	; (1ad8 <_sercom_get_default_pad+0x10c>)
    19dc:	4298      	cmp	r0, r3
    19de:	d05a      	beq.n	1a96 <_sercom_get_default_pad+0xca>
    19e0:	4b3e      	ldr	r3, [pc, #248]	; (1adc <_sercom_get_default_pad+0x110>)
    19e2:	4298      	cmp	r0, r3
    19e4:	d037      	beq.n	1a56 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    19e6:	2000      	movs	r0, #0
}
    19e8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    19ea:	4b3d      	ldr	r3, [pc, #244]	; (1ae0 <_sercom_get_default_pad+0x114>)
    19ec:	4298      	cmp	r0, r3
    19ee:	d00c      	beq.n	1a0a <_sercom_get_default_pad+0x3e>
    19f0:	4b3c      	ldr	r3, [pc, #240]	; (1ae4 <_sercom_get_default_pad+0x118>)
    19f2:	4298      	cmp	r0, r3
    19f4:	d1f7      	bne.n	19e6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    19f6:	2901      	cmp	r1, #1
    19f8:	d017      	beq.n	1a2a <_sercom_get_default_pad+0x5e>
    19fa:	2900      	cmp	r1, #0
    19fc:	d05d      	beq.n	1aba <_sercom_get_default_pad+0xee>
    19fe:	2902      	cmp	r1, #2
    1a00:	d015      	beq.n	1a2e <_sercom_get_default_pad+0x62>
    1a02:	2903      	cmp	r1, #3
    1a04:	d015      	beq.n	1a32 <_sercom_get_default_pad+0x66>
	return 0;
    1a06:	2000      	movs	r0, #0
    1a08:	e7ee      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a0a:	2901      	cmp	r1, #1
    1a0c:	d007      	beq.n	1a1e <_sercom_get_default_pad+0x52>
    1a0e:	2900      	cmp	r1, #0
    1a10:	d051      	beq.n	1ab6 <_sercom_get_default_pad+0xea>
    1a12:	2902      	cmp	r1, #2
    1a14:	d005      	beq.n	1a22 <_sercom_get_default_pad+0x56>
    1a16:	2903      	cmp	r1, #3
    1a18:	d005      	beq.n	1a26 <_sercom_get_default_pad+0x5a>
	return 0;
    1a1a:	2000      	movs	r0, #0
    1a1c:	e7e4      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a1e:	4832      	ldr	r0, [pc, #200]	; (1ae8 <_sercom_get_default_pad+0x11c>)
    1a20:	e7e2      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a22:	4832      	ldr	r0, [pc, #200]	; (1aec <_sercom_get_default_pad+0x120>)
    1a24:	e7e0      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a26:	4832      	ldr	r0, [pc, #200]	; (1af0 <_sercom_get_default_pad+0x124>)
    1a28:	e7de      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a2a:	4832      	ldr	r0, [pc, #200]	; (1af4 <_sercom_get_default_pad+0x128>)
    1a2c:	e7dc      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a2e:	4832      	ldr	r0, [pc, #200]	; (1af8 <_sercom_get_default_pad+0x12c>)
    1a30:	e7da      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a32:	4832      	ldr	r0, [pc, #200]	; (1afc <_sercom_get_default_pad+0x130>)
    1a34:	e7d8      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a36:	2901      	cmp	r1, #1
    1a38:	d007      	beq.n	1a4a <_sercom_get_default_pad+0x7e>
    1a3a:	2900      	cmp	r1, #0
    1a3c:	d03f      	beq.n	1abe <_sercom_get_default_pad+0xf2>
    1a3e:	2902      	cmp	r1, #2
    1a40:	d005      	beq.n	1a4e <_sercom_get_default_pad+0x82>
    1a42:	2903      	cmp	r1, #3
    1a44:	d005      	beq.n	1a52 <_sercom_get_default_pad+0x86>
	return 0;
    1a46:	2000      	movs	r0, #0
    1a48:	e7ce      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a4a:	482d      	ldr	r0, [pc, #180]	; (1b00 <_sercom_get_default_pad+0x134>)
    1a4c:	e7cc      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a4e:	482d      	ldr	r0, [pc, #180]	; (1b04 <_sercom_get_default_pad+0x138>)
    1a50:	e7ca      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a52:	482d      	ldr	r0, [pc, #180]	; (1b08 <_sercom_get_default_pad+0x13c>)
    1a54:	e7c8      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a56:	2901      	cmp	r1, #1
    1a58:	d007      	beq.n	1a6a <_sercom_get_default_pad+0x9e>
    1a5a:	2900      	cmp	r1, #0
    1a5c:	d031      	beq.n	1ac2 <_sercom_get_default_pad+0xf6>
    1a5e:	2902      	cmp	r1, #2
    1a60:	d005      	beq.n	1a6e <_sercom_get_default_pad+0xa2>
    1a62:	2903      	cmp	r1, #3
    1a64:	d005      	beq.n	1a72 <_sercom_get_default_pad+0xa6>
	return 0;
    1a66:	2000      	movs	r0, #0
    1a68:	e7be      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a6a:	4828      	ldr	r0, [pc, #160]	; (1b0c <_sercom_get_default_pad+0x140>)
    1a6c:	e7bc      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a6e:	4828      	ldr	r0, [pc, #160]	; (1b10 <_sercom_get_default_pad+0x144>)
    1a70:	e7ba      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a72:	4828      	ldr	r0, [pc, #160]	; (1b14 <_sercom_get_default_pad+0x148>)
    1a74:	e7b8      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a76:	2901      	cmp	r1, #1
    1a78:	d007      	beq.n	1a8a <_sercom_get_default_pad+0xbe>
    1a7a:	2900      	cmp	r1, #0
    1a7c:	d023      	beq.n	1ac6 <_sercom_get_default_pad+0xfa>
    1a7e:	2902      	cmp	r1, #2
    1a80:	d005      	beq.n	1a8e <_sercom_get_default_pad+0xc2>
    1a82:	2903      	cmp	r1, #3
    1a84:	d005      	beq.n	1a92 <_sercom_get_default_pad+0xc6>
	return 0;
    1a86:	2000      	movs	r0, #0
    1a88:	e7ae      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a8a:	4823      	ldr	r0, [pc, #140]	; (1b18 <_sercom_get_default_pad+0x14c>)
    1a8c:	e7ac      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a8e:	4823      	ldr	r0, [pc, #140]	; (1b1c <_sercom_get_default_pad+0x150>)
    1a90:	e7aa      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a92:	4823      	ldr	r0, [pc, #140]	; (1b20 <_sercom_get_default_pad+0x154>)
    1a94:	e7a8      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1a96:	2901      	cmp	r1, #1
    1a98:	d007      	beq.n	1aaa <_sercom_get_default_pad+0xde>
    1a9a:	2900      	cmp	r1, #0
    1a9c:	d015      	beq.n	1aca <_sercom_get_default_pad+0xfe>
    1a9e:	2902      	cmp	r1, #2
    1aa0:	d005      	beq.n	1aae <_sercom_get_default_pad+0xe2>
    1aa2:	2903      	cmp	r1, #3
    1aa4:	d005      	beq.n	1ab2 <_sercom_get_default_pad+0xe6>
	return 0;
    1aa6:	2000      	movs	r0, #0
    1aa8:	e79e      	b.n	19e8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1aaa:	481e      	ldr	r0, [pc, #120]	; (1b24 <_sercom_get_default_pad+0x158>)
    1aac:	e79c      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1aae:	481e      	ldr	r0, [pc, #120]	; (1b28 <_sercom_get_default_pad+0x15c>)
    1ab0:	e79a      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1ab2:	481e      	ldr	r0, [pc, #120]	; (1b2c <_sercom_get_default_pad+0x160>)
    1ab4:	e798      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1ab6:	481e      	ldr	r0, [pc, #120]	; (1b30 <_sercom_get_default_pad+0x164>)
    1ab8:	e796      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1aba:	2003      	movs	r0, #3
    1abc:	e794      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1abe:	481d      	ldr	r0, [pc, #116]	; (1b34 <_sercom_get_default_pad+0x168>)
    1ac0:	e792      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1ac2:	481d      	ldr	r0, [pc, #116]	; (1b38 <_sercom_get_default_pad+0x16c>)
    1ac4:	e790      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1ac6:	481d      	ldr	r0, [pc, #116]	; (1b3c <_sercom_get_default_pad+0x170>)
    1ac8:	e78e      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1aca:	481d      	ldr	r0, [pc, #116]	; (1b40 <_sercom_get_default_pad+0x174>)
    1acc:	e78c      	b.n	19e8 <_sercom_get_default_pad+0x1c>
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	42001000 	.word	0x42001000
    1ad4:	42001800 	.word	0x42001800
    1ad8:	42001c00 	.word	0x42001c00
    1adc:	42001400 	.word	0x42001400
    1ae0:	42000800 	.word	0x42000800
    1ae4:	42000c00 	.word	0x42000c00
    1ae8:	00050003 	.word	0x00050003
    1aec:	00060003 	.word	0x00060003
    1af0:	00070003 	.word	0x00070003
    1af4:	00010003 	.word	0x00010003
    1af8:	001e0003 	.word	0x001e0003
    1afc:	001f0003 	.word	0x001f0003
    1b00:	00090003 	.word	0x00090003
    1b04:	000a0003 	.word	0x000a0003
    1b08:	000b0003 	.word	0x000b0003
    1b0c:	00110003 	.word	0x00110003
    1b10:	00120003 	.word	0x00120003
    1b14:	00130003 	.word	0x00130003
    1b18:	000d0003 	.word	0x000d0003
    1b1c:	000e0003 	.word	0x000e0003
    1b20:	000f0003 	.word	0x000f0003
    1b24:	00170003 	.word	0x00170003
    1b28:	00180003 	.word	0x00180003
    1b2c:	00190003 	.word	0x00190003
    1b30:	00040003 	.word	0x00040003
    1b34:	00080003 	.word	0x00080003
    1b38:	00100003 	.word	0x00100003
    1b3c:	000c0003 	.word	0x000c0003
    1b40:	00160003 	.word	0x00160003

00001b44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1b44:	b530      	push	{r4, r5, lr}
    1b46:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1b48:	4b0b      	ldr	r3, [pc, #44]	; (1b78 <_sercom_get_sercom_inst_index+0x34>)
    1b4a:	466a      	mov	r2, sp
    1b4c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b4e:	c232      	stmia	r2!, {r1, r4, r5}
    1b50:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b52:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1b54:	9b00      	ldr	r3, [sp, #0]
    1b56:	4283      	cmp	r3, r0
    1b58:	d00b      	beq.n	1b72 <_sercom_get_sercom_inst_index+0x2e>
    1b5a:	2301      	movs	r3, #1
    1b5c:	009a      	lsls	r2, r3, #2
    1b5e:	4669      	mov	r1, sp
    1b60:	5852      	ldr	r2, [r2, r1]
    1b62:	4282      	cmp	r2, r0
    1b64:	d006      	beq.n	1b74 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b66:	3301      	adds	r3, #1
    1b68:	2b06      	cmp	r3, #6
    1b6a:	d1f7      	bne.n	1b5c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b6c:	2000      	movs	r0, #0
}
    1b6e:	b007      	add	sp, #28
    1b70:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b72:	2300      	movs	r3, #0
			return i;
    1b74:	b2d8      	uxtb	r0, r3
    1b76:	e7fa      	b.n	1b6e <_sercom_get_sercom_inst_index+0x2a>
    1b78:	000041d0 	.word	0x000041d0

00001b7c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1b7c:	4770      	bx	lr
	...

00001b80 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1b82:	4b0a      	ldr	r3, [pc, #40]	; (1bac <_sercom_set_handler+0x2c>)
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	2b00      	cmp	r3, #0
    1b88:	d10c      	bne.n	1ba4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b8a:	4f09      	ldr	r7, [pc, #36]	; (1bb0 <_sercom_set_handler+0x30>)
    1b8c:	4e09      	ldr	r6, [pc, #36]	; (1bb4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1b8e:	4d0a      	ldr	r5, [pc, #40]	; (1bb8 <_sercom_set_handler+0x38>)
    1b90:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b92:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1b94:	195a      	adds	r2, r3, r5
    1b96:	6014      	str	r4, [r2, #0]
    1b98:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b9a:	2b18      	cmp	r3, #24
    1b9c:	d1f9      	bne.n	1b92 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1b9e:	2201      	movs	r2, #1
    1ba0:	4b02      	ldr	r3, [pc, #8]	; (1bac <_sercom_set_handler+0x2c>)
    1ba2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ba4:	0080      	lsls	r0, r0, #2
    1ba6:	4b02      	ldr	r3, [pc, #8]	; (1bb0 <_sercom_set_handler+0x30>)
    1ba8:	50c1      	str	r1, [r0, r3]
}
    1baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bac:	200000b6 	.word	0x200000b6
    1bb0:	200000b8 	.word	0x200000b8
    1bb4:	00001b7d 	.word	0x00001b7d
    1bb8:	20000158 	.word	0x20000158

00001bbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1bbc:	b500      	push	{lr}
    1bbe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1bc0:	2309      	movs	r3, #9
    1bc2:	466a      	mov	r2, sp
    1bc4:	7013      	strb	r3, [r2, #0]
    1bc6:	3301      	adds	r3, #1
    1bc8:	7053      	strb	r3, [r2, #1]
    1bca:	3301      	adds	r3, #1
    1bcc:	7093      	strb	r3, [r2, #2]
    1bce:	3301      	adds	r3, #1
    1bd0:	70d3      	strb	r3, [r2, #3]
    1bd2:	3301      	adds	r3, #1
    1bd4:	7113      	strb	r3, [r2, #4]
    1bd6:	3301      	adds	r3, #1
    1bd8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1bda:	4b03      	ldr	r3, [pc, #12]	; (1be8 <_sercom_get_interrupt_vector+0x2c>)
    1bdc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1bde:	466b      	mov	r3, sp
    1be0:	5618      	ldrsb	r0, [r3, r0]
}
    1be2:	b003      	add	sp, #12
    1be4:	bd00      	pop	{pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001b45 	.word	0x00001b45

00001bec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1bec:	b510      	push	{r4, lr}
    1bee:	4b02      	ldr	r3, [pc, #8]	; (1bf8 <SERCOM0_Handler+0xc>)
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	2000      	movs	r0, #0
    1bf4:	4798      	blx	r3
    1bf6:	bd10      	pop	{r4, pc}
    1bf8:	200000b8 	.word	0x200000b8

00001bfc <SERCOM1_Handler>:
    1bfc:	b510      	push	{r4, lr}
    1bfe:	4b02      	ldr	r3, [pc, #8]	; (1c08 <SERCOM1_Handler+0xc>)
    1c00:	685b      	ldr	r3, [r3, #4]
    1c02:	2001      	movs	r0, #1
    1c04:	4798      	blx	r3
    1c06:	bd10      	pop	{r4, pc}
    1c08:	200000b8 	.word	0x200000b8

00001c0c <SERCOM2_Handler>:
    1c0c:	b510      	push	{r4, lr}
    1c0e:	4b02      	ldr	r3, [pc, #8]	; (1c18 <SERCOM2_Handler+0xc>)
    1c10:	689b      	ldr	r3, [r3, #8]
    1c12:	2002      	movs	r0, #2
    1c14:	4798      	blx	r3
    1c16:	bd10      	pop	{r4, pc}
    1c18:	200000b8 	.word	0x200000b8

00001c1c <SERCOM3_Handler>:
    1c1c:	b510      	push	{r4, lr}
    1c1e:	4b02      	ldr	r3, [pc, #8]	; (1c28 <SERCOM3_Handler+0xc>)
    1c20:	68db      	ldr	r3, [r3, #12]
    1c22:	2003      	movs	r0, #3
    1c24:	4798      	blx	r3
    1c26:	bd10      	pop	{r4, pc}
    1c28:	200000b8 	.word	0x200000b8

00001c2c <SERCOM4_Handler>:
    1c2c:	b510      	push	{r4, lr}
    1c2e:	4b02      	ldr	r3, [pc, #8]	; (1c38 <SERCOM4_Handler+0xc>)
    1c30:	691b      	ldr	r3, [r3, #16]
    1c32:	2004      	movs	r0, #4
    1c34:	4798      	blx	r3
    1c36:	bd10      	pop	{r4, pc}
    1c38:	200000b8 	.word	0x200000b8

00001c3c <SERCOM5_Handler>:
    1c3c:	b510      	push	{r4, lr}
    1c3e:	4b02      	ldr	r3, [pc, #8]	; (1c48 <SERCOM5_Handler+0xc>)
    1c40:	695b      	ldr	r3, [r3, #20]
    1c42:	2005      	movs	r0, #5
    1c44:	4798      	blx	r3
    1c46:	bd10      	pop	{r4, pc}
    1c48:	200000b8 	.word	0x200000b8

00001c4c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c4c:	4b0c      	ldr	r3, [pc, #48]	; (1c80 <cpu_irq_enter_critical+0x34>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d106      	bne.n	1c62 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c54:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d007      	beq.n	1c6c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c5c:	2200      	movs	r2, #0
    1c5e:	4b09      	ldr	r3, [pc, #36]	; (1c84 <cpu_irq_enter_critical+0x38>)
    1c60:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c62:	4a07      	ldr	r2, [pc, #28]	; (1c80 <cpu_irq_enter_critical+0x34>)
    1c64:	6813      	ldr	r3, [r2, #0]
    1c66:	3301      	adds	r3, #1
    1c68:	6013      	str	r3, [r2, #0]
}
    1c6a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c6c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1c6e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c72:	2200      	movs	r2, #0
    1c74:	4b04      	ldr	r3, [pc, #16]	; (1c88 <cpu_irq_enter_critical+0x3c>)
    1c76:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c78:	3201      	adds	r2, #1
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <cpu_irq_enter_critical+0x38>)
    1c7c:	701a      	strb	r2, [r3, #0]
    1c7e:	e7f0      	b.n	1c62 <cpu_irq_enter_critical+0x16>
    1c80:	200000d0 	.word	0x200000d0
    1c84:	200000d4 	.word	0x200000d4
    1c88:	2000000c 	.word	0x2000000c

00001c8c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c8c:	4b08      	ldr	r3, [pc, #32]	; (1cb0 <cpu_irq_leave_critical+0x24>)
    1c8e:	681a      	ldr	r2, [r3, #0]
    1c90:	3a01      	subs	r2, #1
    1c92:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d109      	bne.n	1cae <cpu_irq_leave_critical+0x22>
    1c9a:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <cpu_irq_leave_critical+0x28>)
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d005      	beq.n	1cae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1ca2:	2201      	movs	r2, #1
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <cpu_irq_leave_critical+0x2c>)
    1ca6:	701a      	strb	r2, [r3, #0]
    1ca8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cac:	b662      	cpsie	i
	}
}
    1cae:	4770      	bx	lr
    1cb0:	200000d0 	.word	0x200000d0
    1cb4:	200000d4 	.word	0x200000d4
    1cb8:	2000000c 	.word	0x2000000c

00001cbc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1cbc:	b510      	push	{r4, lr}
	switch (clock_source) {
    1cbe:	2808      	cmp	r0, #8
    1cc0:	d803      	bhi.n	1cca <system_clock_source_get_hz+0xe>
    1cc2:	0080      	lsls	r0, r0, #2
    1cc4:	4b1b      	ldr	r3, [pc, #108]	; (1d34 <system_clock_source_get_hz+0x78>)
    1cc6:	581b      	ldr	r3, [r3, r0]
    1cc8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1cca:	2000      	movs	r0, #0
    1ccc:	e030      	b.n	1d30 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1cce:	4b1a      	ldr	r3, [pc, #104]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1cd0:	6918      	ldr	r0, [r3, #16]
    1cd2:	e02d      	b.n	1d30 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1cd4:	4b19      	ldr	r3, [pc, #100]	; (1d3c <system_clock_source_get_hz+0x80>)
    1cd6:	6a1b      	ldr	r3, [r3, #32]
    1cd8:	059b      	lsls	r3, r3, #22
    1cda:	0f9b      	lsrs	r3, r3, #30
    1cdc:	4818      	ldr	r0, [pc, #96]	; (1d40 <system_clock_source_get_hz+0x84>)
    1cde:	40d8      	lsrs	r0, r3
    1ce0:	e026      	b.n	1d30 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1ce2:	4b15      	ldr	r3, [pc, #84]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1ce4:	6958      	ldr	r0, [r3, #20]
    1ce6:	e023      	b.n	1d30 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ce8:	4b13      	ldr	r3, [pc, #76]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1cea:	681b      	ldr	r3, [r3, #0]
			return 0;
    1cec:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1cee:	079b      	lsls	r3, r3, #30
    1cf0:	d51e      	bpl.n	1d30 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cf2:	4912      	ldr	r1, [pc, #72]	; (1d3c <system_clock_source_get_hz+0x80>)
    1cf4:	2210      	movs	r2, #16
    1cf6:	68cb      	ldr	r3, [r1, #12]
    1cf8:	421a      	tst	r2, r3
    1cfa:	d0fc      	beq.n	1cf6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1cfc:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1cfe:	681b      	ldr	r3, [r3, #0]
    1d00:	075b      	lsls	r3, r3, #29
    1d02:	d401      	bmi.n	1d08 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1d04:	480f      	ldr	r0, [pc, #60]	; (1d44 <system_clock_source_get_hz+0x88>)
    1d06:	e013      	b.n	1d30 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d08:	2000      	movs	r0, #0
    1d0a:	4b0f      	ldr	r3, [pc, #60]	; (1d48 <system_clock_source_get_hz+0x8c>)
    1d0c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d0e:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1d10:	689b      	ldr	r3, [r3, #8]
    1d12:	041b      	lsls	r3, r3, #16
    1d14:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d16:	4358      	muls	r0, r3
    1d18:	e00a      	b.n	1d30 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d1a:	2350      	movs	r3, #80	; 0x50
    1d1c:	4a07      	ldr	r2, [pc, #28]	; (1d3c <system_clock_source_get_hz+0x80>)
    1d1e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d20:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d22:	075b      	lsls	r3, r3, #29
    1d24:	d504      	bpl.n	1d30 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1d26:	4b04      	ldr	r3, [pc, #16]	; (1d38 <system_clock_source_get_hz+0x7c>)
    1d28:	68d8      	ldr	r0, [r3, #12]
    1d2a:	e001      	b.n	1d30 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1d2c:	2080      	movs	r0, #128	; 0x80
    1d2e:	0200      	lsls	r0, r0, #8
	}
}
    1d30:	bd10      	pop	{r4, pc}
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	000041e8 	.word	0x000041e8
    1d38:	200000d8 	.word	0x200000d8
    1d3c:	40000800 	.word	0x40000800
    1d40:	007a1200 	.word	0x007a1200
    1d44:	02dc6c00 	.word	0x02dc6c00
    1d48:	00001e81 	.word	0x00001e81

00001d4c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d4c:	b570      	push	{r4, r5, r6, lr}
    1d4e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d50:	4a1a      	ldr	r2, [pc, #104]	; (1dbc <system_gclk_gen_get_hz+0x70>)
    1d52:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d54:	b25b      	sxtb	r3, r3
    1d56:	2b00      	cmp	r3, #0
    1d58:	dbfb      	blt.n	1d52 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d5a:	4b19      	ldr	r3, [pc, #100]	; (1dc0 <system_gclk_gen_get_hz+0x74>)
    1d5c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d5e:	4b19      	ldr	r3, [pc, #100]	; (1dc4 <system_gclk_gen_get_hz+0x78>)
    1d60:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d62:	4a16      	ldr	r2, [pc, #88]	; (1dbc <system_gclk_gen_get_hz+0x70>)
    1d64:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d66:	b25b      	sxtb	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	dbfb      	blt.n	1d64 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d6c:	4e13      	ldr	r6, [pc, #76]	; (1dbc <system_gclk_gen_get_hz+0x70>)
    1d6e:	6870      	ldr	r0, [r6, #4]
    1d70:	04c0      	lsls	r0, r0, #19
    1d72:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d74:	4b14      	ldr	r3, [pc, #80]	; (1dc8 <system_gclk_gen_get_hz+0x7c>)
    1d76:	4798      	blx	r3
    1d78:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d7a:	4b12      	ldr	r3, [pc, #72]	; (1dc4 <system_gclk_gen_get_hz+0x78>)
    1d7c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d7e:	6876      	ldr	r6, [r6, #4]
    1d80:	02f6      	lsls	r6, r6, #11
    1d82:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d84:	4b11      	ldr	r3, [pc, #68]	; (1dcc <system_gclk_gen_get_hz+0x80>)
    1d86:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d88:	4a0c      	ldr	r2, [pc, #48]	; (1dbc <system_gclk_gen_get_hz+0x70>)
    1d8a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d8c:	b25b      	sxtb	r3, r3
    1d8e:	2b00      	cmp	r3, #0
    1d90:	dbfb      	blt.n	1d8a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d92:	4b0a      	ldr	r3, [pc, #40]	; (1dbc <system_gclk_gen_get_hz+0x70>)
    1d94:	689c      	ldr	r4, [r3, #8]
    1d96:	0224      	lsls	r4, r4, #8
    1d98:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d9a:	4b0d      	ldr	r3, [pc, #52]	; (1dd0 <system_gclk_gen_get_hz+0x84>)
    1d9c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d9e:	2e00      	cmp	r6, #0
    1da0:	d107      	bne.n	1db2 <system_gclk_gen_get_hz+0x66>
    1da2:	2c01      	cmp	r4, #1
    1da4:	d907      	bls.n	1db6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1da6:	0021      	movs	r1, r4
    1da8:	0028      	movs	r0, r5
    1daa:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <system_gclk_gen_get_hz+0x88>)
    1dac:	4798      	blx	r3
    1dae:	0005      	movs	r5, r0
    1db0:	e001      	b.n	1db6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1db2:	3401      	adds	r4, #1
    1db4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1db6:	0028      	movs	r0, r5
    1db8:	bd70      	pop	{r4, r5, r6, pc}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	40000c00 	.word	0x40000c00
    1dc0:	00001c4d 	.word	0x00001c4d
    1dc4:	40000c04 	.word	0x40000c04
    1dc8:	00001cbd 	.word	0x00001cbd
    1dcc:	40000c08 	.word	0x40000c08
    1dd0:	00001c8d 	.word	0x00001c8d
    1dd4:	000021dd 	.word	0x000021dd

00001dd8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1dd8:	b510      	push	{r4, lr}
    1dda:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ddc:	4b06      	ldr	r3, [pc, #24]	; (1df8 <system_gclk_chan_enable+0x20>)
    1dde:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1de0:	4b06      	ldr	r3, [pc, #24]	; (1dfc <system_gclk_chan_enable+0x24>)
    1de2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1de4:	4a06      	ldr	r2, [pc, #24]	; (1e00 <system_gclk_chan_enable+0x28>)
    1de6:	8853      	ldrh	r3, [r2, #2]
    1de8:	2180      	movs	r1, #128	; 0x80
    1dea:	01c9      	lsls	r1, r1, #7
    1dec:	430b      	orrs	r3, r1
    1dee:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1df0:	4b04      	ldr	r3, [pc, #16]	; (1e04 <system_gclk_chan_enable+0x2c>)
    1df2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1df4:	bd10      	pop	{r4, pc}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	00001c4d 	.word	0x00001c4d
    1dfc:	40000c02 	.word	0x40000c02
    1e00:	40000c00 	.word	0x40000c00
    1e04:	00001c8d 	.word	0x00001c8d

00001e08 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e08:	b510      	push	{r4, lr}
    1e0a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e0c:	4b0f      	ldr	r3, [pc, #60]	; (1e4c <system_gclk_chan_disable+0x44>)
    1e0e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <system_gclk_chan_disable+0x48>)
    1e12:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e14:	4a0f      	ldr	r2, [pc, #60]	; (1e54 <system_gclk_chan_disable+0x4c>)
    1e16:	8853      	ldrh	r3, [r2, #2]
    1e18:	051b      	lsls	r3, r3, #20
    1e1a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e1c:	8853      	ldrh	r3, [r2, #2]
    1e1e:	490e      	ldr	r1, [pc, #56]	; (1e58 <system_gclk_chan_disable+0x50>)
    1e20:	400b      	ands	r3, r1
    1e22:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e24:	8853      	ldrh	r3, [r2, #2]
    1e26:	490d      	ldr	r1, [pc, #52]	; (1e5c <system_gclk_chan_disable+0x54>)
    1e28:	400b      	ands	r3, r1
    1e2a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e2c:	0011      	movs	r1, r2
    1e2e:	2280      	movs	r2, #128	; 0x80
    1e30:	01d2      	lsls	r2, r2, #7
    1e32:	884b      	ldrh	r3, [r1, #2]
    1e34:	4213      	tst	r3, r2
    1e36:	d1fc      	bne.n	1e32 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e38:	4906      	ldr	r1, [pc, #24]	; (1e54 <system_gclk_chan_disable+0x4c>)
    1e3a:	884a      	ldrh	r2, [r1, #2]
    1e3c:	0203      	lsls	r3, r0, #8
    1e3e:	4806      	ldr	r0, [pc, #24]	; (1e58 <system_gclk_chan_disable+0x50>)
    1e40:	4002      	ands	r2, r0
    1e42:	4313      	orrs	r3, r2
    1e44:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e46:	4b06      	ldr	r3, [pc, #24]	; (1e60 <system_gclk_chan_disable+0x58>)
    1e48:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e4a:	bd10      	pop	{r4, pc}
    1e4c:	00001c4d 	.word	0x00001c4d
    1e50:	40000c02 	.word	0x40000c02
    1e54:	40000c00 	.word	0x40000c00
    1e58:	fffff0ff 	.word	0xfffff0ff
    1e5c:	ffffbfff 	.word	0xffffbfff
    1e60:	00001c8d 	.word	0x00001c8d

00001e64 <system_gclk_chan_set_config>:
{
    1e64:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e66:	780c      	ldrb	r4, [r1, #0]
    1e68:	0224      	lsls	r4, r4, #8
    1e6a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e6c:	4b02      	ldr	r3, [pc, #8]	; (1e78 <system_gclk_chan_set_config+0x14>)
    1e6e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e70:	b2a4      	uxth	r4, r4
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <system_gclk_chan_set_config+0x18>)
    1e74:	805c      	strh	r4, [r3, #2]
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	00001e09 	.word	0x00001e09
    1e7c:	40000c00 	.word	0x40000c00

00001e80 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e80:	b510      	push	{r4, lr}
    1e82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <system_gclk_chan_get_hz+0x20>)
    1e86:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <system_gclk_chan_get_hz+0x24>)
    1e8a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e8c:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <system_gclk_chan_get_hz+0x28>)
    1e8e:	885c      	ldrh	r4, [r3, #2]
    1e90:	0524      	lsls	r4, r4, #20
    1e92:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1e94:	4b05      	ldr	r3, [pc, #20]	; (1eac <system_gclk_chan_get_hz+0x2c>)
    1e96:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e98:	0020      	movs	r0, r4
    1e9a:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <system_gclk_chan_get_hz+0x30>)
    1e9c:	4798      	blx	r3
}
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	00001c4d 	.word	0x00001c4d
    1ea4:	40000c02 	.word	0x40000c02
    1ea8:	40000c00 	.word	0x40000c00
    1eac:	00001c8d 	.word	0x00001c8d
    1eb0:	00001d4d 	.word	0x00001d4d

00001eb4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1eb4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1eb6:	78d3      	ldrb	r3, [r2, #3]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d135      	bne.n	1f28 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ebc:	7813      	ldrb	r3, [r2, #0]
    1ebe:	2b80      	cmp	r3, #128	; 0x80
    1ec0:	d029      	beq.n	1f16 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ec2:	061b      	lsls	r3, r3, #24
    1ec4:	2480      	movs	r4, #128	; 0x80
    1ec6:	0264      	lsls	r4, r4, #9
    1ec8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1eca:	7854      	ldrb	r4, [r2, #1]
    1ecc:	2502      	movs	r5, #2
    1ece:	43ac      	bics	r4, r5
    1ed0:	d106      	bne.n	1ee0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ed2:	7894      	ldrb	r4, [r2, #2]
    1ed4:	2c00      	cmp	r4, #0
    1ed6:	d120      	bne.n	1f1a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ed8:	2480      	movs	r4, #128	; 0x80
    1eda:	02a4      	lsls	r4, r4, #10
    1edc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ede:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ee0:	7854      	ldrb	r4, [r2, #1]
    1ee2:	3c01      	subs	r4, #1
    1ee4:	2c01      	cmp	r4, #1
    1ee6:	d91c      	bls.n	1f22 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ee8:	040d      	lsls	r5, r1, #16
    1eea:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1eec:	24a0      	movs	r4, #160	; 0xa0
    1eee:	05e4      	lsls	r4, r4, #23
    1ef0:	432c      	orrs	r4, r5
    1ef2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ef4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ef6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ef8:	24d0      	movs	r4, #208	; 0xd0
    1efa:	0624      	lsls	r4, r4, #24
    1efc:	432c      	orrs	r4, r5
    1efe:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f00:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f02:	78d4      	ldrb	r4, [r2, #3]
    1f04:	2c00      	cmp	r4, #0
    1f06:	d122      	bne.n	1f4e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f08:	035b      	lsls	r3, r3, #13
    1f0a:	d51c      	bpl.n	1f46 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f0c:	7893      	ldrb	r3, [r2, #2]
    1f0e:	2b01      	cmp	r3, #1
    1f10:	d01e      	beq.n	1f50 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f12:	6141      	str	r1, [r0, #20]
    1f14:	e017      	b.n	1f46 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1f16:	2300      	movs	r3, #0
    1f18:	e7d7      	b.n	1eca <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f1a:	24c0      	movs	r4, #192	; 0xc0
    1f1c:	02e4      	lsls	r4, r4, #11
    1f1e:	4323      	orrs	r3, r4
    1f20:	e7dd      	b.n	1ede <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f22:	4c0d      	ldr	r4, [pc, #52]	; (1f58 <_system_pinmux_config+0xa4>)
    1f24:	4023      	ands	r3, r4
    1f26:	e7df      	b.n	1ee8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f28:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f2a:	040c      	lsls	r4, r1, #16
    1f2c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f2e:	23a0      	movs	r3, #160	; 0xa0
    1f30:	05db      	lsls	r3, r3, #23
    1f32:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f34:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f36:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f38:	23d0      	movs	r3, #208	; 0xd0
    1f3a:	061b      	lsls	r3, r3, #24
    1f3c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f3e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f40:	78d3      	ldrb	r3, [r2, #3]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d103      	bne.n	1f4e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f46:	7853      	ldrb	r3, [r2, #1]
    1f48:	3b01      	subs	r3, #1
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d902      	bls.n	1f54 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f4e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1f50:	6181      	str	r1, [r0, #24]
    1f52:	e7f8      	b.n	1f46 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1f54:	6081      	str	r1, [r0, #8]
}
    1f56:	e7fa      	b.n	1f4e <_system_pinmux_config+0x9a>
    1f58:	fffbffff 	.word	0xfffbffff

00001f5c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f5c:	b510      	push	{r4, lr}
    1f5e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f60:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f62:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f64:	2900      	cmp	r1, #0
    1f66:	d104      	bne.n	1f72 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1f68:	0943      	lsrs	r3, r0, #5
    1f6a:	01db      	lsls	r3, r3, #7
    1f6c:	4905      	ldr	r1, [pc, #20]	; (1f84 <system_pinmux_pin_set_config+0x28>)
    1f6e:	468c      	mov	ip, r1
    1f70:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f72:	241f      	movs	r4, #31
    1f74:	4020      	ands	r0, r4
    1f76:	2101      	movs	r1, #1
    1f78:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b02      	ldr	r3, [pc, #8]	; (1f88 <system_pinmux_pin_set_config+0x2c>)
    1f7e:	4798      	blx	r3
}
    1f80:	bd10      	pop	{r4, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	41004400 	.word	0x41004400
    1f88:	00001eb5 	.word	0x00001eb5

00001f8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f8c:	e7fe      	b.n	1f8c <Dummy_Handler>
	...

00001f90 <Reset_Handler>:
{
    1f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1f92:	4a2a      	ldr	r2, [pc, #168]	; (203c <STACK_SIZE+0x3c>)
    1f94:	4b2a      	ldr	r3, [pc, #168]	; (2040 <STACK_SIZE+0x40>)
    1f96:	429a      	cmp	r2, r3
    1f98:	d011      	beq.n	1fbe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1f9a:	001a      	movs	r2, r3
    1f9c:	4b29      	ldr	r3, [pc, #164]	; (2044 <STACK_SIZE+0x44>)
    1f9e:	429a      	cmp	r2, r3
    1fa0:	d20d      	bcs.n	1fbe <Reset_Handler+0x2e>
    1fa2:	4a29      	ldr	r2, [pc, #164]	; (2048 <STACK_SIZE+0x48>)
    1fa4:	3303      	adds	r3, #3
    1fa6:	1a9b      	subs	r3, r3, r2
    1fa8:	089b      	lsrs	r3, r3, #2
    1faa:	3301      	adds	r3, #1
    1fac:	009b      	lsls	r3, r3, #2
    1fae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1fb0:	4823      	ldr	r0, [pc, #140]	; (2040 <STACK_SIZE+0x40>)
    1fb2:	4922      	ldr	r1, [pc, #136]	; (203c <STACK_SIZE+0x3c>)
    1fb4:	588c      	ldr	r4, [r1, r2]
    1fb6:	5084      	str	r4, [r0, r2]
    1fb8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1fba:	429a      	cmp	r2, r3
    1fbc:	d1fa      	bne.n	1fb4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1fbe:	4a23      	ldr	r2, [pc, #140]	; (204c <STACK_SIZE+0x4c>)
    1fc0:	4b23      	ldr	r3, [pc, #140]	; (2050 <STACK_SIZE+0x50>)
    1fc2:	429a      	cmp	r2, r3
    1fc4:	d20a      	bcs.n	1fdc <Reset_Handler+0x4c>
    1fc6:	43d3      	mvns	r3, r2
    1fc8:	4921      	ldr	r1, [pc, #132]	; (2050 <STACK_SIZE+0x50>)
    1fca:	185b      	adds	r3, r3, r1
    1fcc:	2103      	movs	r1, #3
    1fce:	438b      	bics	r3, r1
    1fd0:	3304      	adds	r3, #4
    1fd2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1fd4:	2100      	movs	r1, #0
    1fd6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1fd8:	4293      	cmp	r3, r2
    1fda:	d1fc      	bne.n	1fd6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fdc:	4a1d      	ldr	r2, [pc, #116]	; (2054 <STACK_SIZE+0x54>)
    1fde:	21ff      	movs	r1, #255	; 0xff
    1fe0:	4b1d      	ldr	r3, [pc, #116]	; (2058 <STACK_SIZE+0x58>)
    1fe2:	438b      	bics	r3, r1
    1fe4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1fe6:	39fd      	subs	r1, #253	; 0xfd
    1fe8:	2390      	movs	r3, #144	; 0x90
    1fea:	005b      	lsls	r3, r3, #1
    1fec:	4a1b      	ldr	r2, [pc, #108]	; (205c <STACK_SIZE+0x5c>)
    1fee:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ff0:	4a1b      	ldr	r2, [pc, #108]	; (2060 <STACK_SIZE+0x60>)
    1ff2:	78d3      	ldrb	r3, [r2, #3]
    1ff4:	2503      	movs	r5, #3
    1ff6:	43ab      	bics	r3, r5
    1ff8:	2402      	movs	r4, #2
    1ffa:	4323      	orrs	r3, r4
    1ffc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1ffe:	78d3      	ldrb	r3, [r2, #3]
    2000:	270c      	movs	r7, #12
    2002:	43bb      	bics	r3, r7
    2004:	2608      	movs	r6, #8
    2006:	4333      	orrs	r3, r6
    2008:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    200a:	4b16      	ldr	r3, [pc, #88]	; (2064 <STACK_SIZE+0x64>)
    200c:	7b98      	ldrb	r0, [r3, #14]
    200e:	2230      	movs	r2, #48	; 0x30
    2010:	4390      	bics	r0, r2
    2012:	2220      	movs	r2, #32
    2014:	4310      	orrs	r0, r2
    2016:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2018:	7b99      	ldrb	r1, [r3, #14]
    201a:	43b9      	bics	r1, r7
    201c:	4331      	orrs	r1, r6
    201e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2020:	7b9a      	ldrb	r2, [r3, #14]
    2022:	43aa      	bics	r2, r5
    2024:	4322      	orrs	r2, r4
    2026:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2028:	4a0f      	ldr	r2, [pc, #60]	; (2068 <STACK_SIZE+0x68>)
    202a:	6853      	ldr	r3, [r2, #4]
    202c:	2180      	movs	r1, #128	; 0x80
    202e:	430b      	orrs	r3, r1
    2030:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2032:	4b0e      	ldr	r3, [pc, #56]	; (206c <STACK_SIZE+0x6c>)
    2034:	4798      	blx	r3
        main();
    2036:	4b0e      	ldr	r3, [pc, #56]	; (2070 <STACK_SIZE+0x70>)
    2038:	4798      	blx	r3
    203a:	e7fe      	b.n	203a <STACK_SIZE+0x3a>
    203c:	000042b4 	.word	0x000042b4
    2040:	20000000 	.word	0x20000000
    2044:	20000010 	.word	0x20000010
    2048:	20000004 	.word	0x20000004
    204c:	20000010 	.word	0x20000010
    2050:	20000170 	.word	0x20000170
    2054:	e000ed00 	.word	0xe000ed00
    2058:	00000000 	.word	0x00000000
    205c:	41007000 	.word	0x41007000
    2060:	41005000 	.word	0x41005000
    2064:	41004800 	.word	0x41004800
    2068:	41004000 	.word	0x41004000
    206c:	00004161 	.word	0x00004161
    2070:	00002189 	.word	0x00002189

00002074 <configure_i2c_master>:
 #include <I2C.h>



void configure_i2c_master(void)
{
    2074:	b530      	push	{r4, r5, lr}
    2076:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2078:	aa01      	add	r2, sp, #4
    207a:	2364      	movs	r3, #100	; 0x64
    207c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    207e:	4b21      	ldr	r3, [pc, #132]	; (2104 <configure_i2c_master+0x90>)
    2080:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2082:	2300      	movs	r3, #0
    2084:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2086:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2088:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    208a:	2180      	movs	r1, #128	; 0x80
    208c:	0389      	lsls	r1, r1, #14
    208e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2090:	2101      	movs	r1, #1
    2092:	4249      	negs	r1, r1
    2094:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2096:	3125      	adds	r1, #37	; 0x25
    2098:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    209a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    209c:	3108      	adds	r1, #8
    209e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    20a0:	3101      	adds	r1, #1
    20a2:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    20a4:	3101      	adds	r1, #1
    20a6:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    20a8:	33d7      	adds	r3, #215	; 0xd7
    20aa:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    20ac:	4b16      	ldr	r3, [pc, #88]	; (2108 <configure_i2c_master+0x94>)
    20ae:	82d3      	strh	r3, [r2, #22]

	// change pins to use outputs marked on the Feather board (from samd21g18a.h)
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; // sda pin
    20b0:	4b16      	ldr	r3, [pc, #88]	; (210c <configure_i2c_master+0x98>)
    20b2:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; // sck pin
    20b4:	4b16      	ldr	r3, [pc, #88]	; (2110 <configure_i2c_master+0x9c>)
    20b6:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    20b8:	4c16      	ldr	r4, [pc, #88]	; (2114 <configure_i2c_master+0xa0>)
    20ba:	4917      	ldr	r1, [pc, #92]	; (2118 <configure_i2c_master+0xa4>)
    20bc:	0020      	movs	r0, r4
    20be:	4b17      	ldr	r3, [pc, #92]	; (211c <configure_i2c_master+0xa8>)
    20c0:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    20c2:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    20c4:	2207      	movs	r2, #7
    20c6:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    20c8:	421a      	tst	r2, r3
    20ca:	d1fc      	bne.n	20c6 <configure_i2c_master+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    20cc:	6823      	ldr	r3, [r4, #0]
    20ce:	2202      	movs	r2, #2
    20d0:	4313      	orrs	r3, r2
    20d2:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    20d4:	4d0f      	ldr	r5, [pc, #60]	; (2114 <configure_i2c_master+0xa0>)
    20d6:	6828      	ldr	r0, [r5, #0]
    20d8:	4b11      	ldr	r3, [pc, #68]	; (2120 <configure_i2c_master+0xac>)
    20da:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    20dc:	231f      	movs	r3, #31
    20de:	4018      	ands	r0, r3
    20e0:	3b1e      	subs	r3, #30
    20e2:	4083      	lsls	r3, r0
    20e4:	4a0f      	ldr	r2, [pc, #60]	; (2124 <configure_i2c_master+0xb0>)
    20e6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20e8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    20ea:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    20ec:	2110      	movs	r1, #16
    20ee:	8b62      	ldrh	r2, [r4, #26]
    20f0:	420a      	tst	r2, r1
    20f2:	d104      	bne.n	20fe <configure_i2c_master+0x8a>
		timeout_counter++;
    20f4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    20f6:	4283      	cmp	r3, r0
    20f8:	d3f9      	bcc.n	20ee <configure_i2c_master+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    20fa:	2310      	movs	r3, #16
    20fc:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    20fe:	b00f      	add	sp, #60	; 0x3c
    2100:	bd30      	pop	{r4, r5, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	00000d48 	.word	0x00000d48
    2108:	00002710 	.word	0x00002710
    210c:	00160002 	.word	0x00160002
    2110:	00170002 	.word	0x00170002
    2114:	20000130 	.word	0x20000130
    2118:	42001400 	.word	0x42001400
    211c:	000001b9 	.word	0x000001b9
    2120:	00001bbd 	.word	0x00001bbd
    2124:	e000e100 	.word	0xe000e100

00002128 <I2C_Read>:
//u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt
uint8_t I2C_Read(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    2128:	b530      	push	{r4, r5, lr}
    212a:	b085      	sub	sp, #20
	uint8_t retVAl = 0;
	uint8_t timeout;
	struct i2c_master_packet readPacket = {
    212c:	a901      	add	r1, sp, #4
    212e:	8008      	strh	r0, [r1, #0]
    2130:	804b      	strh	r3, [r1, #2]
    2132:	9202      	str	r2, [sp, #8]
    2134:	2300      	movs	r3, #0
    2136:	720b      	strb	r3, [r1, #8]
    2138:	724b      	strb	r3, [r1, #9]
    213a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &readPacket) !=
    213c:	4d04      	ldr	r5, [pc, #16]	; (2150 <I2C_Read+0x28>)
    213e:	4c05      	ldr	r4, [pc, #20]	; (2154 <I2C_Read+0x2c>)
    2140:	a901      	add	r1, sp, #4
    2142:	0028      	movs	r0, r5
    2144:	47a0      	blx	r4
    2146:	2800      	cmp	r0, #0
    2148:	d1fa      	bne.n	2140 <I2C_Read+0x18>
		if (timeout++ == TIMEOUT) {
			retVAl = -1;
		}
	}
	return retVAl;
}
    214a:	b005      	add	sp, #20
    214c:	bd30      	pop	{r4, r5, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	20000130 	.word	0x20000130
    2154:	000007c1 	.word	0x000007c1

00002158 <I2C_Write>:

//u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt
uint8_t I2C_Write(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    2158:	b530      	push	{r4, r5, lr}
    215a:	b085      	sub	sp, #20
	uint8_t retVAl = 0;
	uint8_t timeout;
	struct i2c_master_packet writePacket = {
    215c:	a901      	add	r1, sp, #4
    215e:	8008      	strh	r0, [r1, #0]
    2160:	804b      	strh	r3, [r1, #2]
    2162:	9202      	str	r2, [sp, #8]
    2164:	2300      	movs	r3, #0
    2166:	720b      	strb	r3, [r1, #8]
    2168:	724b      	strb	r3, [r1, #9]
    216a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &writePacket) !=
    216c:	4d04      	ldr	r5, [pc, #16]	; (2180 <I2C_Write+0x28>)
    216e:	4c05      	ldr	r4, [pc, #20]	; (2184 <I2C_Write+0x2c>)
    2170:	a901      	add	r1, sp, #4
    2172:	0028      	movs	r0, r5
    2174:	47a0      	blx	r4
    2176:	2800      	cmp	r0, #0
    2178:	d1fa      	bne.n	2170 <I2C_Write+0x18>
			retVAl = -1;
		}
	}

	return retVAl;
}
    217a:	b005      	add	sp, #20
    217c:	bd30      	pop	{r4, r5, pc}
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	20000130 	.word	0x20000130
    2184:	000007e5 	.word	0x000007e5

00002188 <main>:

//////////////////////////////////////////////////////////////////////////
//Main Function Where The Magic Happens!
//////////////////////////////////////////////////////////////////////////
int main (void)
{	
    2188:	b510      	push	{r4, lr}
    218a:	b084      	sub	sp, #16
	double temperature = 0;
    218c:	2200      	movs	r2, #0
    218e:	2300      	movs	r3, #0
    2190:	9202      	str	r2, [sp, #8]
    2192:	9303      	str	r3, [sp, #12]
	double pressure = 0;
    2194:	9200      	str	r2, [sp, #0]
    2196:	9301      	str	r3, [sp, #4]

	static double final_temp = 0;
	static double final_pres = 0;

	//Initialize I2C settings
	configure_i2c_master();
    2198:	4b0b      	ldr	r3, [pc, #44]	; (21c8 <main+0x40>)
    219a:	4798      	blx	r3

	//Initialize delay settings
	delay_init();
    219c:	4b0b      	ldr	r3, [pc, #44]	; (21cc <main+0x44>)
    219e:	4798      	blx	r3

	//Init BMP280 Data structure
	InitBMP280();
    21a0:	4b0b      	ldr	r3, [pc, #44]	; (21d0 <main+0x48>)
    21a2:	4798      	blx	r3

	//Configure settings for BMP280
	ConfigureBMP280();
    21a4:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <main+0x4c>)
    21a6:	4798      	blx	r3
	
	//Get Temperature and Pressure
	BMP280_ReadCompPresTemp(&temperature, &pressure);
    21a8:	4669      	mov	r1, sp
    21aa:	a802      	add	r0, sp, #8
    21ac:	4c0a      	ldr	r4, [pc, #40]	; (21d8 <main+0x50>)
    21ae:	47a0      	blx	r4

	debug_temp = temperature;
	debug_pres = pressure;	

	BMP280_ReadCompPresTemp(&temperature, &pressure);
    21b0:	4669      	mov	r1, sp
    21b2:	a802      	add	r0, sp, #8
    21b4:	47a0      	blx	r4

	debug_temp = temperature;
	debug_pres = pressure;
	
	BMP280_ReadCompPresTemp(&temperature, &pressure);
    21b6:	4669      	mov	r1, sp
    21b8:	a802      	add	r0, sp, #8
    21ba:	47a0      	blx	r4

	debug_temp = temperature;
	debug_pres = pressure;
	
	BMP280_ReadCompPresTemp(&temperature, &pressure);
    21bc:	4669      	mov	r1, sp
    21be:	a802      	add	r0, sp, #8
    21c0:	47a0      	blx	r4

	debug_temp = temperature;
	debug_pres = pressure;		

	return 0;
}
    21c2:	2000      	movs	r0, #0
    21c4:	b004      	add	sp, #16
    21c6:	bd10      	pop	{r4, pc}
    21c8:	00002075 	.word	0x00002075
    21cc:	00000115 	.word	0x00000115
    21d0:	0000164d 	.word	0x0000164d
    21d4:	00001681 	.word	0x00001681
    21d8:	000016d1 	.word	0x000016d1

000021dc <__udivsi3>:
    21dc:	2200      	movs	r2, #0
    21de:	0843      	lsrs	r3, r0, #1
    21e0:	428b      	cmp	r3, r1
    21e2:	d374      	bcc.n	22ce <__udivsi3+0xf2>
    21e4:	0903      	lsrs	r3, r0, #4
    21e6:	428b      	cmp	r3, r1
    21e8:	d35f      	bcc.n	22aa <__udivsi3+0xce>
    21ea:	0a03      	lsrs	r3, r0, #8
    21ec:	428b      	cmp	r3, r1
    21ee:	d344      	bcc.n	227a <__udivsi3+0x9e>
    21f0:	0b03      	lsrs	r3, r0, #12
    21f2:	428b      	cmp	r3, r1
    21f4:	d328      	bcc.n	2248 <__udivsi3+0x6c>
    21f6:	0c03      	lsrs	r3, r0, #16
    21f8:	428b      	cmp	r3, r1
    21fa:	d30d      	bcc.n	2218 <__udivsi3+0x3c>
    21fc:	22ff      	movs	r2, #255	; 0xff
    21fe:	0209      	lsls	r1, r1, #8
    2200:	ba12      	rev	r2, r2
    2202:	0c03      	lsrs	r3, r0, #16
    2204:	428b      	cmp	r3, r1
    2206:	d302      	bcc.n	220e <__udivsi3+0x32>
    2208:	1212      	asrs	r2, r2, #8
    220a:	0209      	lsls	r1, r1, #8
    220c:	d065      	beq.n	22da <__udivsi3+0xfe>
    220e:	0b03      	lsrs	r3, r0, #12
    2210:	428b      	cmp	r3, r1
    2212:	d319      	bcc.n	2248 <__udivsi3+0x6c>
    2214:	e000      	b.n	2218 <__udivsi3+0x3c>
    2216:	0a09      	lsrs	r1, r1, #8
    2218:	0bc3      	lsrs	r3, r0, #15
    221a:	428b      	cmp	r3, r1
    221c:	d301      	bcc.n	2222 <__udivsi3+0x46>
    221e:	03cb      	lsls	r3, r1, #15
    2220:	1ac0      	subs	r0, r0, r3
    2222:	4152      	adcs	r2, r2
    2224:	0b83      	lsrs	r3, r0, #14
    2226:	428b      	cmp	r3, r1
    2228:	d301      	bcc.n	222e <__udivsi3+0x52>
    222a:	038b      	lsls	r3, r1, #14
    222c:	1ac0      	subs	r0, r0, r3
    222e:	4152      	adcs	r2, r2
    2230:	0b43      	lsrs	r3, r0, #13
    2232:	428b      	cmp	r3, r1
    2234:	d301      	bcc.n	223a <__udivsi3+0x5e>
    2236:	034b      	lsls	r3, r1, #13
    2238:	1ac0      	subs	r0, r0, r3
    223a:	4152      	adcs	r2, r2
    223c:	0b03      	lsrs	r3, r0, #12
    223e:	428b      	cmp	r3, r1
    2240:	d301      	bcc.n	2246 <__udivsi3+0x6a>
    2242:	030b      	lsls	r3, r1, #12
    2244:	1ac0      	subs	r0, r0, r3
    2246:	4152      	adcs	r2, r2
    2248:	0ac3      	lsrs	r3, r0, #11
    224a:	428b      	cmp	r3, r1
    224c:	d301      	bcc.n	2252 <__udivsi3+0x76>
    224e:	02cb      	lsls	r3, r1, #11
    2250:	1ac0      	subs	r0, r0, r3
    2252:	4152      	adcs	r2, r2
    2254:	0a83      	lsrs	r3, r0, #10
    2256:	428b      	cmp	r3, r1
    2258:	d301      	bcc.n	225e <__udivsi3+0x82>
    225a:	028b      	lsls	r3, r1, #10
    225c:	1ac0      	subs	r0, r0, r3
    225e:	4152      	adcs	r2, r2
    2260:	0a43      	lsrs	r3, r0, #9
    2262:	428b      	cmp	r3, r1
    2264:	d301      	bcc.n	226a <__udivsi3+0x8e>
    2266:	024b      	lsls	r3, r1, #9
    2268:	1ac0      	subs	r0, r0, r3
    226a:	4152      	adcs	r2, r2
    226c:	0a03      	lsrs	r3, r0, #8
    226e:	428b      	cmp	r3, r1
    2270:	d301      	bcc.n	2276 <__udivsi3+0x9a>
    2272:	020b      	lsls	r3, r1, #8
    2274:	1ac0      	subs	r0, r0, r3
    2276:	4152      	adcs	r2, r2
    2278:	d2cd      	bcs.n	2216 <__udivsi3+0x3a>
    227a:	09c3      	lsrs	r3, r0, #7
    227c:	428b      	cmp	r3, r1
    227e:	d301      	bcc.n	2284 <__udivsi3+0xa8>
    2280:	01cb      	lsls	r3, r1, #7
    2282:	1ac0      	subs	r0, r0, r3
    2284:	4152      	adcs	r2, r2
    2286:	0983      	lsrs	r3, r0, #6
    2288:	428b      	cmp	r3, r1
    228a:	d301      	bcc.n	2290 <__udivsi3+0xb4>
    228c:	018b      	lsls	r3, r1, #6
    228e:	1ac0      	subs	r0, r0, r3
    2290:	4152      	adcs	r2, r2
    2292:	0943      	lsrs	r3, r0, #5
    2294:	428b      	cmp	r3, r1
    2296:	d301      	bcc.n	229c <__udivsi3+0xc0>
    2298:	014b      	lsls	r3, r1, #5
    229a:	1ac0      	subs	r0, r0, r3
    229c:	4152      	adcs	r2, r2
    229e:	0903      	lsrs	r3, r0, #4
    22a0:	428b      	cmp	r3, r1
    22a2:	d301      	bcc.n	22a8 <__udivsi3+0xcc>
    22a4:	010b      	lsls	r3, r1, #4
    22a6:	1ac0      	subs	r0, r0, r3
    22a8:	4152      	adcs	r2, r2
    22aa:	08c3      	lsrs	r3, r0, #3
    22ac:	428b      	cmp	r3, r1
    22ae:	d301      	bcc.n	22b4 <__udivsi3+0xd8>
    22b0:	00cb      	lsls	r3, r1, #3
    22b2:	1ac0      	subs	r0, r0, r3
    22b4:	4152      	adcs	r2, r2
    22b6:	0883      	lsrs	r3, r0, #2
    22b8:	428b      	cmp	r3, r1
    22ba:	d301      	bcc.n	22c0 <__udivsi3+0xe4>
    22bc:	008b      	lsls	r3, r1, #2
    22be:	1ac0      	subs	r0, r0, r3
    22c0:	4152      	adcs	r2, r2
    22c2:	0843      	lsrs	r3, r0, #1
    22c4:	428b      	cmp	r3, r1
    22c6:	d301      	bcc.n	22cc <__udivsi3+0xf0>
    22c8:	004b      	lsls	r3, r1, #1
    22ca:	1ac0      	subs	r0, r0, r3
    22cc:	4152      	adcs	r2, r2
    22ce:	1a41      	subs	r1, r0, r1
    22d0:	d200      	bcs.n	22d4 <__udivsi3+0xf8>
    22d2:	4601      	mov	r1, r0
    22d4:	4152      	adcs	r2, r2
    22d6:	4610      	mov	r0, r2
    22d8:	4770      	bx	lr
    22da:	e7ff      	b.n	22dc <__udivsi3+0x100>
    22dc:	b501      	push	{r0, lr}
    22de:	2000      	movs	r0, #0
    22e0:	f000 f806 	bl	22f0 <__aeabi_idiv0>
    22e4:	bd02      	pop	{r1, pc}
    22e6:	46c0      	nop			; (mov r8, r8)

000022e8 <__aeabi_uidivmod>:
    22e8:	2900      	cmp	r1, #0
    22ea:	d0f7      	beq.n	22dc <__udivsi3+0x100>
    22ec:	e776      	b.n	21dc <__udivsi3>
    22ee:	4770      	bx	lr

000022f0 <__aeabi_idiv0>:
    22f0:	4770      	bx	lr
    22f2:	46c0      	nop			; (mov r8, r8)

000022f4 <__aeabi_cdrcmple>:
    22f4:	4684      	mov	ip, r0
    22f6:	1c10      	adds	r0, r2, #0
    22f8:	4662      	mov	r2, ip
    22fa:	468c      	mov	ip, r1
    22fc:	1c19      	adds	r1, r3, #0
    22fe:	4663      	mov	r3, ip
    2300:	e000      	b.n	2304 <__aeabi_cdcmpeq>
    2302:	46c0      	nop			; (mov r8, r8)

00002304 <__aeabi_cdcmpeq>:
    2304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2306:	f000 ff7f 	bl	3208 <__ledf2>
    230a:	2800      	cmp	r0, #0
    230c:	d401      	bmi.n	2312 <__aeabi_cdcmpeq+0xe>
    230e:	2100      	movs	r1, #0
    2310:	42c8      	cmn	r0, r1
    2312:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002314 <__aeabi_dcmpeq>:
    2314:	b510      	push	{r4, lr}
    2316:	f000 fed9 	bl	30cc <__eqdf2>
    231a:	4240      	negs	r0, r0
    231c:	3001      	adds	r0, #1
    231e:	bd10      	pop	{r4, pc}

00002320 <__aeabi_dcmplt>:
    2320:	b510      	push	{r4, lr}
    2322:	f000 ff71 	bl	3208 <__ledf2>
    2326:	2800      	cmp	r0, #0
    2328:	db01      	blt.n	232e <__aeabi_dcmplt+0xe>
    232a:	2000      	movs	r0, #0
    232c:	bd10      	pop	{r4, pc}
    232e:	2001      	movs	r0, #1
    2330:	bd10      	pop	{r4, pc}
    2332:	46c0      	nop			; (mov r8, r8)

00002334 <__aeabi_dcmple>:
    2334:	b510      	push	{r4, lr}
    2336:	f000 ff67 	bl	3208 <__ledf2>
    233a:	2800      	cmp	r0, #0
    233c:	dd01      	ble.n	2342 <__aeabi_dcmple+0xe>
    233e:	2000      	movs	r0, #0
    2340:	bd10      	pop	{r4, pc}
    2342:	2001      	movs	r0, #1
    2344:	bd10      	pop	{r4, pc}
    2346:	46c0      	nop			; (mov r8, r8)

00002348 <__aeabi_dcmpgt>:
    2348:	b510      	push	{r4, lr}
    234a:	f000 fef9 	bl	3140 <__gedf2>
    234e:	2800      	cmp	r0, #0
    2350:	dc01      	bgt.n	2356 <__aeabi_dcmpgt+0xe>
    2352:	2000      	movs	r0, #0
    2354:	bd10      	pop	{r4, pc}
    2356:	2001      	movs	r0, #1
    2358:	bd10      	pop	{r4, pc}
    235a:	46c0      	nop			; (mov r8, r8)

0000235c <__aeabi_dcmpge>:
    235c:	b510      	push	{r4, lr}
    235e:	f000 feef 	bl	3140 <__gedf2>
    2362:	2800      	cmp	r0, #0
    2364:	da01      	bge.n	236a <__aeabi_dcmpge+0xe>
    2366:	2000      	movs	r0, #0
    2368:	bd10      	pop	{r4, pc}
    236a:	2001      	movs	r0, #1
    236c:	bd10      	pop	{r4, pc}
    236e:	46c0      	nop			; (mov r8, r8)

00002370 <__aeabi_ldivmod>:
    2370:	2b00      	cmp	r3, #0
    2372:	d115      	bne.n	23a0 <__aeabi_ldivmod+0x30>
    2374:	2a00      	cmp	r2, #0
    2376:	d113      	bne.n	23a0 <__aeabi_ldivmod+0x30>
    2378:	2900      	cmp	r1, #0
    237a:	db06      	blt.n	238a <__aeabi_ldivmod+0x1a>
    237c:	dc01      	bgt.n	2382 <__aeabi_ldivmod+0x12>
    237e:	2800      	cmp	r0, #0
    2380:	d006      	beq.n	2390 <__aeabi_ldivmod+0x20>
    2382:	2000      	movs	r0, #0
    2384:	43c0      	mvns	r0, r0
    2386:	0841      	lsrs	r1, r0, #1
    2388:	e002      	b.n	2390 <__aeabi_ldivmod+0x20>
    238a:	2180      	movs	r1, #128	; 0x80
    238c:	0609      	lsls	r1, r1, #24
    238e:	2000      	movs	r0, #0
    2390:	b407      	push	{r0, r1, r2}
    2392:	4802      	ldr	r0, [pc, #8]	; (239c <__aeabi_ldivmod+0x2c>)
    2394:	a101      	add	r1, pc, #4	; (adr r1, 239c <__aeabi_ldivmod+0x2c>)
    2396:	1840      	adds	r0, r0, r1
    2398:	9002      	str	r0, [sp, #8]
    239a:	bd03      	pop	{r0, r1, pc}
    239c:	ffffff55 	.word	0xffffff55
    23a0:	b403      	push	{r0, r1}
    23a2:	4668      	mov	r0, sp
    23a4:	b501      	push	{r0, lr}
    23a6:	9802      	ldr	r0, [sp, #8]
    23a8:	f000 f830 	bl	240c <__gnu_ldivmod_helper>
    23ac:	9b01      	ldr	r3, [sp, #4]
    23ae:	469e      	mov	lr, r3
    23b0:	b002      	add	sp, #8
    23b2:	bc0c      	pop	{r2, r3}
    23b4:	4770      	bx	lr
    23b6:	46c0      	nop			; (mov r8, r8)

000023b8 <__aeabi_lmul>:
    23b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ba:	46ce      	mov	lr, r9
    23bc:	4647      	mov	r7, r8
    23be:	0415      	lsls	r5, r2, #16
    23c0:	0c2d      	lsrs	r5, r5, #16
    23c2:	002e      	movs	r6, r5
    23c4:	b580      	push	{r7, lr}
    23c6:	0407      	lsls	r7, r0, #16
    23c8:	0c14      	lsrs	r4, r2, #16
    23ca:	0c3f      	lsrs	r7, r7, #16
    23cc:	4699      	mov	r9, r3
    23ce:	0c03      	lsrs	r3, r0, #16
    23d0:	437e      	muls	r6, r7
    23d2:	435d      	muls	r5, r3
    23d4:	4367      	muls	r7, r4
    23d6:	4363      	muls	r3, r4
    23d8:	197f      	adds	r7, r7, r5
    23da:	0c34      	lsrs	r4, r6, #16
    23dc:	19e4      	adds	r4, r4, r7
    23de:	469c      	mov	ip, r3
    23e0:	42a5      	cmp	r5, r4
    23e2:	d903      	bls.n	23ec <__aeabi_lmul+0x34>
    23e4:	2380      	movs	r3, #128	; 0x80
    23e6:	025b      	lsls	r3, r3, #9
    23e8:	4698      	mov	r8, r3
    23ea:	44c4      	add	ip, r8
    23ec:	464b      	mov	r3, r9
    23ee:	4351      	muls	r1, r2
    23f0:	4343      	muls	r3, r0
    23f2:	0436      	lsls	r6, r6, #16
    23f4:	0c36      	lsrs	r6, r6, #16
    23f6:	0c25      	lsrs	r5, r4, #16
    23f8:	0424      	lsls	r4, r4, #16
    23fa:	4465      	add	r5, ip
    23fc:	19a4      	adds	r4, r4, r6
    23fe:	1859      	adds	r1, r3, r1
    2400:	1949      	adds	r1, r1, r5
    2402:	0020      	movs	r0, r4
    2404:	bc0c      	pop	{r2, r3}
    2406:	4690      	mov	r8, r2
    2408:	4699      	mov	r9, r3
    240a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000240c <__gnu_ldivmod_helper>:
    240c:	b5f0      	push	{r4, r5, r6, r7, lr}
    240e:	b083      	sub	sp, #12
    2410:	0016      	movs	r6, r2
    2412:	001f      	movs	r7, r3
    2414:	9000      	str	r0, [sp, #0]
    2416:	9101      	str	r1, [sp, #4]
    2418:	f001 fdba 	bl	3f90 <__divdi3>
    241c:	0004      	movs	r4, r0
    241e:	000d      	movs	r5, r1
    2420:	0002      	movs	r2, r0
    2422:	000b      	movs	r3, r1
    2424:	0030      	movs	r0, r6
    2426:	0039      	movs	r1, r7
    2428:	f7ff ffc6 	bl	23b8 <__aeabi_lmul>
    242c:	9a00      	ldr	r2, [sp, #0]
    242e:	9b01      	ldr	r3, [sp, #4]
    2430:	1a12      	subs	r2, r2, r0
    2432:	418b      	sbcs	r3, r1
    2434:	9908      	ldr	r1, [sp, #32]
    2436:	0020      	movs	r0, r4
    2438:	600a      	str	r2, [r1, #0]
    243a:	604b      	str	r3, [r1, #4]
    243c:	0029      	movs	r1, r5
    243e:	b003      	add	sp, #12
    2440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2442:	46c0      	nop			; (mov r8, r8)

00002444 <__aeabi_dadd>:
    2444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2446:	4645      	mov	r5, r8
    2448:	46de      	mov	lr, fp
    244a:	4657      	mov	r7, sl
    244c:	464e      	mov	r6, r9
    244e:	030c      	lsls	r4, r1, #12
    2450:	b5e0      	push	{r5, r6, r7, lr}
    2452:	004e      	lsls	r6, r1, #1
    2454:	0fc9      	lsrs	r1, r1, #31
    2456:	4688      	mov	r8, r1
    2458:	000d      	movs	r5, r1
    245a:	0a61      	lsrs	r1, r4, #9
    245c:	0f44      	lsrs	r4, r0, #29
    245e:	430c      	orrs	r4, r1
    2460:	00c7      	lsls	r7, r0, #3
    2462:	0319      	lsls	r1, r3, #12
    2464:	0058      	lsls	r0, r3, #1
    2466:	0fdb      	lsrs	r3, r3, #31
    2468:	469b      	mov	fp, r3
    246a:	0a4b      	lsrs	r3, r1, #9
    246c:	0f51      	lsrs	r1, r2, #29
    246e:	430b      	orrs	r3, r1
    2470:	0d76      	lsrs	r6, r6, #21
    2472:	0d40      	lsrs	r0, r0, #21
    2474:	0019      	movs	r1, r3
    2476:	00d2      	lsls	r2, r2, #3
    2478:	45d8      	cmp	r8, fp
    247a:	d100      	bne.n	247e <__aeabi_dadd+0x3a>
    247c:	e0ae      	b.n	25dc <__aeabi_dadd+0x198>
    247e:	1a35      	subs	r5, r6, r0
    2480:	2d00      	cmp	r5, #0
    2482:	dc00      	bgt.n	2486 <__aeabi_dadd+0x42>
    2484:	e0f6      	b.n	2674 <__aeabi_dadd+0x230>
    2486:	2800      	cmp	r0, #0
    2488:	d10f      	bne.n	24aa <__aeabi_dadd+0x66>
    248a:	4313      	orrs	r3, r2
    248c:	d100      	bne.n	2490 <__aeabi_dadd+0x4c>
    248e:	e0db      	b.n	2648 <__aeabi_dadd+0x204>
    2490:	1e6b      	subs	r3, r5, #1
    2492:	2b00      	cmp	r3, #0
    2494:	d000      	beq.n	2498 <__aeabi_dadd+0x54>
    2496:	e137      	b.n	2708 <__aeabi_dadd+0x2c4>
    2498:	1aba      	subs	r2, r7, r2
    249a:	4297      	cmp	r7, r2
    249c:	41bf      	sbcs	r7, r7
    249e:	1a64      	subs	r4, r4, r1
    24a0:	427f      	negs	r7, r7
    24a2:	1be4      	subs	r4, r4, r7
    24a4:	2601      	movs	r6, #1
    24a6:	0017      	movs	r7, r2
    24a8:	e024      	b.n	24f4 <__aeabi_dadd+0xb0>
    24aa:	4bc6      	ldr	r3, [pc, #792]	; (27c4 <__aeabi_dadd+0x380>)
    24ac:	429e      	cmp	r6, r3
    24ae:	d04d      	beq.n	254c <__aeabi_dadd+0x108>
    24b0:	2380      	movs	r3, #128	; 0x80
    24b2:	041b      	lsls	r3, r3, #16
    24b4:	4319      	orrs	r1, r3
    24b6:	2d38      	cmp	r5, #56	; 0x38
    24b8:	dd00      	ble.n	24bc <__aeabi_dadd+0x78>
    24ba:	e107      	b.n	26cc <__aeabi_dadd+0x288>
    24bc:	2d1f      	cmp	r5, #31
    24be:	dd00      	ble.n	24c2 <__aeabi_dadd+0x7e>
    24c0:	e138      	b.n	2734 <__aeabi_dadd+0x2f0>
    24c2:	2020      	movs	r0, #32
    24c4:	1b43      	subs	r3, r0, r5
    24c6:	469a      	mov	sl, r3
    24c8:	000b      	movs	r3, r1
    24ca:	4650      	mov	r0, sl
    24cc:	4083      	lsls	r3, r0
    24ce:	4699      	mov	r9, r3
    24d0:	0013      	movs	r3, r2
    24d2:	4648      	mov	r0, r9
    24d4:	40eb      	lsrs	r3, r5
    24d6:	4318      	orrs	r0, r3
    24d8:	0003      	movs	r3, r0
    24da:	4650      	mov	r0, sl
    24dc:	4082      	lsls	r2, r0
    24de:	1e50      	subs	r0, r2, #1
    24e0:	4182      	sbcs	r2, r0
    24e2:	40e9      	lsrs	r1, r5
    24e4:	431a      	orrs	r2, r3
    24e6:	1aba      	subs	r2, r7, r2
    24e8:	1a61      	subs	r1, r4, r1
    24ea:	4297      	cmp	r7, r2
    24ec:	41a4      	sbcs	r4, r4
    24ee:	0017      	movs	r7, r2
    24f0:	4264      	negs	r4, r4
    24f2:	1b0c      	subs	r4, r1, r4
    24f4:	0223      	lsls	r3, r4, #8
    24f6:	d562      	bpl.n	25be <__aeabi_dadd+0x17a>
    24f8:	0264      	lsls	r4, r4, #9
    24fa:	0a65      	lsrs	r5, r4, #9
    24fc:	2d00      	cmp	r5, #0
    24fe:	d100      	bne.n	2502 <__aeabi_dadd+0xbe>
    2500:	e0df      	b.n	26c2 <__aeabi_dadd+0x27e>
    2502:	0028      	movs	r0, r5
    2504:	f001 fd26 	bl	3f54 <__clzsi2>
    2508:	0003      	movs	r3, r0
    250a:	3b08      	subs	r3, #8
    250c:	2b1f      	cmp	r3, #31
    250e:	dd00      	ble.n	2512 <__aeabi_dadd+0xce>
    2510:	e0d2      	b.n	26b8 <__aeabi_dadd+0x274>
    2512:	2220      	movs	r2, #32
    2514:	003c      	movs	r4, r7
    2516:	1ad2      	subs	r2, r2, r3
    2518:	409d      	lsls	r5, r3
    251a:	40d4      	lsrs	r4, r2
    251c:	409f      	lsls	r7, r3
    251e:	4325      	orrs	r5, r4
    2520:	429e      	cmp	r6, r3
    2522:	dd00      	ble.n	2526 <__aeabi_dadd+0xe2>
    2524:	e0c4      	b.n	26b0 <__aeabi_dadd+0x26c>
    2526:	1b9e      	subs	r6, r3, r6
    2528:	1c73      	adds	r3, r6, #1
    252a:	2b1f      	cmp	r3, #31
    252c:	dd00      	ble.n	2530 <__aeabi_dadd+0xec>
    252e:	e0f1      	b.n	2714 <__aeabi_dadd+0x2d0>
    2530:	2220      	movs	r2, #32
    2532:	0038      	movs	r0, r7
    2534:	0029      	movs	r1, r5
    2536:	1ad2      	subs	r2, r2, r3
    2538:	40d8      	lsrs	r0, r3
    253a:	4091      	lsls	r1, r2
    253c:	4097      	lsls	r7, r2
    253e:	002c      	movs	r4, r5
    2540:	4301      	orrs	r1, r0
    2542:	1e78      	subs	r0, r7, #1
    2544:	4187      	sbcs	r7, r0
    2546:	40dc      	lsrs	r4, r3
    2548:	2600      	movs	r6, #0
    254a:	430f      	orrs	r7, r1
    254c:	077b      	lsls	r3, r7, #29
    254e:	d009      	beq.n	2564 <__aeabi_dadd+0x120>
    2550:	230f      	movs	r3, #15
    2552:	403b      	ands	r3, r7
    2554:	2b04      	cmp	r3, #4
    2556:	d005      	beq.n	2564 <__aeabi_dadd+0x120>
    2558:	1d3b      	adds	r3, r7, #4
    255a:	42bb      	cmp	r3, r7
    255c:	41bf      	sbcs	r7, r7
    255e:	427f      	negs	r7, r7
    2560:	19e4      	adds	r4, r4, r7
    2562:	001f      	movs	r7, r3
    2564:	0223      	lsls	r3, r4, #8
    2566:	d52c      	bpl.n	25c2 <__aeabi_dadd+0x17e>
    2568:	4b96      	ldr	r3, [pc, #600]	; (27c4 <__aeabi_dadd+0x380>)
    256a:	3601      	adds	r6, #1
    256c:	429e      	cmp	r6, r3
    256e:	d100      	bne.n	2572 <__aeabi_dadd+0x12e>
    2570:	e09a      	b.n	26a8 <__aeabi_dadd+0x264>
    2572:	4645      	mov	r5, r8
    2574:	4b94      	ldr	r3, [pc, #592]	; (27c8 <__aeabi_dadd+0x384>)
    2576:	08ff      	lsrs	r7, r7, #3
    2578:	401c      	ands	r4, r3
    257a:	0760      	lsls	r0, r4, #29
    257c:	0576      	lsls	r6, r6, #21
    257e:	0264      	lsls	r4, r4, #9
    2580:	4307      	orrs	r7, r0
    2582:	0b24      	lsrs	r4, r4, #12
    2584:	0d76      	lsrs	r6, r6, #21
    2586:	2100      	movs	r1, #0
    2588:	0324      	lsls	r4, r4, #12
    258a:	0b23      	lsrs	r3, r4, #12
    258c:	0d0c      	lsrs	r4, r1, #20
    258e:	4a8f      	ldr	r2, [pc, #572]	; (27cc <__aeabi_dadd+0x388>)
    2590:	0524      	lsls	r4, r4, #20
    2592:	431c      	orrs	r4, r3
    2594:	4014      	ands	r4, r2
    2596:	0533      	lsls	r3, r6, #20
    2598:	4323      	orrs	r3, r4
    259a:	005b      	lsls	r3, r3, #1
    259c:	07ed      	lsls	r5, r5, #31
    259e:	085b      	lsrs	r3, r3, #1
    25a0:	432b      	orrs	r3, r5
    25a2:	0038      	movs	r0, r7
    25a4:	0019      	movs	r1, r3
    25a6:	bc3c      	pop	{r2, r3, r4, r5}
    25a8:	4690      	mov	r8, r2
    25aa:	4699      	mov	r9, r3
    25ac:	46a2      	mov	sl, r4
    25ae:	46ab      	mov	fp, r5
    25b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25b2:	4664      	mov	r4, ip
    25b4:	4304      	orrs	r4, r0
    25b6:	d100      	bne.n	25ba <__aeabi_dadd+0x176>
    25b8:	e211      	b.n	29de <__aeabi_dadd+0x59a>
    25ba:	0004      	movs	r4, r0
    25bc:	4667      	mov	r7, ip
    25be:	077b      	lsls	r3, r7, #29
    25c0:	d1c6      	bne.n	2550 <__aeabi_dadd+0x10c>
    25c2:	4645      	mov	r5, r8
    25c4:	0760      	lsls	r0, r4, #29
    25c6:	08ff      	lsrs	r7, r7, #3
    25c8:	4307      	orrs	r7, r0
    25ca:	08e4      	lsrs	r4, r4, #3
    25cc:	4b7d      	ldr	r3, [pc, #500]	; (27c4 <__aeabi_dadd+0x380>)
    25ce:	429e      	cmp	r6, r3
    25d0:	d030      	beq.n	2634 <__aeabi_dadd+0x1f0>
    25d2:	0324      	lsls	r4, r4, #12
    25d4:	0576      	lsls	r6, r6, #21
    25d6:	0b24      	lsrs	r4, r4, #12
    25d8:	0d76      	lsrs	r6, r6, #21
    25da:	e7d4      	b.n	2586 <__aeabi_dadd+0x142>
    25dc:	1a33      	subs	r3, r6, r0
    25de:	469a      	mov	sl, r3
    25e0:	2b00      	cmp	r3, #0
    25e2:	dd78      	ble.n	26d6 <__aeabi_dadd+0x292>
    25e4:	2800      	cmp	r0, #0
    25e6:	d031      	beq.n	264c <__aeabi_dadd+0x208>
    25e8:	4876      	ldr	r0, [pc, #472]	; (27c4 <__aeabi_dadd+0x380>)
    25ea:	4286      	cmp	r6, r0
    25ec:	d0ae      	beq.n	254c <__aeabi_dadd+0x108>
    25ee:	2080      	movs	r0, #128	; 0x80
    25f0:	0400      	lsls	r0, r0, #16
    25f2:	4301      	orrs	r1, r0
    25f4:	4653      	mov	r3, sl
    25f6:	2b38      	cmp	r3, #56	; 0x38
    25f8:	dc00      	bgt.n	25fc <__aeabi_dadd+0x1b8>
    25fa:	e0e9      	b.n	27d0 <__aeabi_dadd+0x38c>
    25fc:	430a      	orrs	r2, r1
    25fe:	1e51      	subs	r1, r2, #1
    2600:	418a      	sbcs	r2, r1
    2602:	2100      	movs	r1, #0
    2604:	19d2      	adds	r2, r2, r7
    2606:	42ba      	cmp	r2, r7
    2608:	41bf      	sbcs	r7, r7
    260a:	1909      	adds	r1, r1, r4
    260c:	427c      	negs	r4, r7
    260e:	0017      	movs	r7, r2
    2610:	190c      	adds	r4, r1, r4
    2612:	0223      	lsls	r3, r4, #8
    2614:	d5d3      	bpl.n	25be <__aeabi_dadd+0x17a>
    2616:	4b6b      	ldr	r3, [pc, #428]	; (27c4 <__aeabi_dadd+0x380>)
    2618:	3601      	adds	r6, #1
    261a:	429e      	cmp	r6, r3
    261c:	d100      	bne.n	2620 <__aeabi_dadd+0x1dc>
    261e:	e13a      	b.n	2896 <__aeabi_dadd+0x452>
    2620:	2001      	movs	r0, #1
    2622:	4b69      	ldr	r3, [pc, #420]	; (27c8 <__aeabi_dadd+0x384>)
    2624:	401c      	ands	r4, r3
    2626:	087b      	lsrs	r3, r7, #1
    2628:	4007      	ands	r7, r0
    262a:	431f      	orrs	r7, r3
    262c:	07e0      	lsls	r0, r4, #31
    262e:	4307      	orrs	r7, r0
    2630:	0864      	lsrs	r4, r4, #1
    2632:	e78b      	b.n	254c <__aeabi_dadd+0x108>
    2634:	0023      	movs	r3, r4
    2636:	433b      	orrs	r3, r7
    2638:	d100      	bne.n	263c <__aeabi_dadd+0x1f8>
    263a:	e1cb      	b.n	29d4 <__aeabi_dadd+0x590>
    263c:	2280      	movs	r2, #128	; 0x80
    263e:	0312      	lsls	r2, r2, #12
    2640:	4314      	orrs	r4, r2
    2642:	0324      	lsls	r4, r4, #12
    2644:	0b24      	lsrs	r4, r4, #12
    2646:	e79e      	b.n	2586 <__aeabi_dadd+0x142>
    2648:	002e      	movs	r6, r5
    264a:	e77f      	b.n	254c <__aeabi_dadd+0x108>
    264c:	0008      	movs	r0, r1
    264e:	4310      	orrs	r0, r2
    2650:	d100      	bne.n	2654 <__aeabi_dadd+0x210>
    2652:	e0b4      	b.n	27be <__aeabi_dadd+0x37a>
    2654:	1e58      	subs	r0, r3, #1
    2656:	2800      	cmp	r0, #0
    2658:	d000      	beq.n	265c <__aeabi_dadd+0x218>
    265a:	e0de      	b.n	281a <__aeabi_dadd+0x3d6>
    265c:	18ba      	adds	r2, r7, r2
    265e:	42ba      	cmp	r2, r7
    2660:	419b      	sbcs	r3, r3
    2662:	1864      	adds	r4, r4, r1
    2664:	425b      	negs	r3, r3
    2666:	18e4      	adds	r4, r4, r3
    2668:	0017      	movs	r7, r2
    266a:	2601      	movs	r6, #1
    266c:	0223      	lsls	r3, r4, #8
    266e:	d5a6      	bpl.n	25be <__aeabi_dadd+0x17a>
    2670:	2602      	movs	r6, #2
    2672:	e7d5      	b.n	2620 <__aeabi_dadd+0x1dc>
    2674:	2d00      	cmp	r5, #0
    2676:	d16e      	bne.n	2756 <__aeabi_dadd+0x312>
    2678:	1c70      	adds	r0, r6, #1
    267a:	0540      	lsls	r0, r0, #21
    267c:	0d40      	lsrs	r0, r0, #21
    267e:	2801      	cmp	r0, #1
    2680:	dc00      	bgt.n	2684 <__aeabi_dadd+0x240>
    2682:	e0f9      	b.n	2878 <__aeabi_dadd+0x434>
    2684:	1ab8      	subs	r0, r7, r2
    2686:	4684      	mov	ip, r0
    2688:	4287      	cmp	r7, r0
    268a:	4180      	sbcs	r0, r0
    268c:	1ae5      	subs	r5, r4, r3
    268e:	4240      	negs	r0, r0
    2690:	1a2d      	subs	r5, r5, r0
    2692:	0228      	lsls	r0, r5, #8
    2694:	d400      	bmi.n	2698 <__aeabi_dadd+0x254>
    2696:	e089      	b.n	27ac <__aeabi_dadd+0x368>
    2698:	1bd7      	subs	r7, r2, r7
    269a:	42ba      	cmp	r2, r7
    269c:	4192      	sbcs	r2, r2
    269e:	1b1c      	subs	r4, r3, r4
    26a0:	4252      	negs	r2, r2
    26a2:	1aa5      	subs	r5, r4, r2
    26a4:	46d8      	mov	r8, fp
    26a6:	e729      	b.n	24fc <__aeabi_dadd+0xb8>
    26a8:	4645      	mov	r5, r8
    26aa:	2400      	movs	r4, #0
    26ac:	2700      	movs	r7, #0
    26ae:	e76a      	b.n	2586 <__aeabi_dadd+0x142>
    26b0:	4c45      	ldr	r4, [pc, #276]	; (27c8 <__aeabi_dadd+0x384>)
    26b2:	1af6      	subs	r6, r6, r3
    26b4:	402c      	ands	r4, r5
    26b6:	e749      	b.n	254c <__aeabi_dadd+0x108>
    26b8:	003d      	movs	r5, r7
    26ba:	3828      	subs	r0, #40	; 0x28
    26bc:	4085      	lsls	r5, r0
    26be:	2700      	movs	r7, #0
    26c0:	e72e      	b.n	2520 <__aeabi_dadd+0xdc>
    26c2:	0038      	movs	r0, r7
    26c4:	f001 fc46 	bl	3f54 <__clzsi2>
    26c8:	3020      	adds	r0, #32
    26ca:	e71d      	b.n	2508 <__aeabi_dadd+0xc4>
    26cc:	430a      	orrs	r2, r1
    26ce:	1e51      	subs	r1, r2, #1
    26d0:	418a      	sbcs	r2, r1
    26d2:	2100      	movs	r1, #0
    26d4:	e707      	b.n	24e6 <__aeabi_dadd+0xa2>
    26d6:	2b00      	cmp	r3, #0
    26d8:	d000      	beq.n	26dc <__aeabi_dadd+0x298>
    26da:	e0f3      	b.n	28c4 <__aeabi_dadd+0x480>
    26dc:	1c70      	adds	r0, r6, #1
    26de:	0543      	lsls	r3, r0, #21
    26e0:	0d5b      	lsrs	r3, r3, #21
    26e2:	2b01      	cmp	r3, #1
    26e4:	dc00      	bgt.n	26e8 <__aeabi_dadd+0x2a4>
    26e6:	e0ad      	b.n	2844 <__aeabi_dadd+0x400>
    26e8:	4b36      	ldr	r3, [pc, #216]	; (27c4 <__aeabi_dadd+0x380>)
    26ea:	4298      	cmp	r0, r3
    26ec:	d100      	bne.n	26f0 <__aeabi_dadd+0x2ac>
    26ee:	e0d1      	b.n	2894 <__aeabi_dadd+0x450>
    26f0:	18ba      	adds	r2, r7, r2
    26f2:	42ba      	cmp	r2, r7
    26f4:	41bf      	sbcs	r7, r7
    26f6:	1864      	adds	r4, r4, r1
    26f8:	427f      	negs	r7, r7
    26fa:	19e4      	adds	r4, r4, r7
    26fc:	07e7      	lsls	r7, r4, #31
    26fe:	0852      	lsrs	r2, r2, #1
    2700:	4317      	orrs	r7, r2
    2702:	0864      	lsrs	r4, r4, #1
    2704:	0006      	movs	r6, r0
    2706:	e721      	b.n	254c <__aeabi_dadd+0x108>
    2708:	482e      	ldr	r0, [pc, #184]	; (27c4 <__aeabi_dadd+0x380>)
    270a:	4285      	cmp	r5, r0
    270c:	d100      	bne.n	2710 <__aeabi_dadd+0x2cc>
    270e:	e093      	b.n	2838 <__aeabi_dadd+0x3f4>
    2710:	001d      	movs	r5, r3
    2712:	e6d0      	b.n	24b6 <__aeabi_dadd+0x72>
    2714:	0029      	movs	r1, r5
    2716:	3e1f      	subs	r6, #31
    2718:	40f1      	lsrs	r1, r6
    271a:	2b20      	cmp	r3, #32
    271c:	d100      	bne.n	2720 <__aeabi_dadd+0x2dc>
    271e:	e08d      	b.n	283c <__aeabi_dadd+0x3f8>
    2720:	2240      	movs	r2, #64	; 0x40
    2722:	1ad3      	subs	r3, r2, r3
    2724:	409d      	lsls	r5, r3
    2726:	432f      	orrs	r7, r5
    2728:	1e7d      	subs	r5, r7, #1
    272a:	41af      	sbcs	r7, r5
    272c:	2400      	movs	r4, #0
    272e:	430f      	orrs	r7, r1
    2730:	2600      	movs	r6, #0
    2732:	e744      	b.n	25be <__aeabi_dadd+0x17a>
    2734:	002b      	movs	r3, r5
    2736:	0008      	movs	r0, r1
    2738:	3b20      	subs	r3, #32
    273a:	40d8      	lsrs	r0, r3
    273c:	0003      	movs	r3, r0
    273e:	2d20      	cmp	r5, #32
    2740:	d100      	bne.n	2744 <__aeabi_dadd+0x300>
    2742:	e07d      	b.n	2840 <__aeabi_dadd+0x3fc>
    2744:	2040      	movs	r0, #64	; 0x40
    2746:	1b45      	subs	r5, r0, r5
    2748:	40a9      	lsls	r1, r5
    274a:	430a      	orrs	r2, r1
    274c:	1e51      	subs	r1, r2, #1
    274e:	418a      	sbcs	r2, r1
    2750:	2100      	movs	r1, #0
    2752:	431a      	orrs	r2, r3
    2754:	e6c7      	b.n	24e6 <__aeabi_dadd+0xa2>
    2756:	2e00      	cmp	r6, #0
    2758:	d050      	beq.n	27fc <__aeabi_dadd+0x3b8>
    275a:	4e1a      	ldr	r6, [pc, #104]	; (27c4 <__aeabi_dadd+0x380>)
    275c:	42b0      	cmp	r0, r6
    275e:	d057      	beq.n	2810 <__aeabi_dadd+0x3cc>
    2760:	2680      	movs	r6, #128	; 0x80
    2762:	426b      	negs	r3, r5
    2764:	4699      	mov	r9, r3
    2766:	0436      	lsls	r6, r6, #16
    2768:	4334      	orrs	r4, r6
    276a:	464b      	mov	r3, r9
    276c:	2b38      	cmp	r3, #56	; 0x38
    276e:	dd00      	ble.n	2772 <__aeabi_dadd+0x32e>
    2770:	e0d6      	b.n	2920 <__aeabi_dadd+0x4dc>
    2772:	2b1f      	cmp	r3, #31
    2774:	dd00      	ble.n	2778 <__aeabi_dadd+0x334>
    2776:	e135      	b.n	29e4 <__aeabi_dadd+0x5a0>
    2778:	2620      	movs	r6, #32
    277a:	1af5      	subs	r5, r6, r3
    277c:	0026      	movs	r6, r4
    277e:	40ae      	lsls	r6, r5
    2780:	46b2      	mov	sl, r6
    2782:	003e      	movs	r6, r7
    2784:	40de      	lsrs	r6, r3
    2786:	46ac      	mov	ip, r5
    2788:	0035      	movs	r5, r6
    278a:	4656      	mov	r6, sl
    278c:	432e      	orrs	r6, r5
    278e:	4665      	mov	r5, ip
    2790:	40af      	lsls	r7, r5
    2792:	1e7d      	subs	r5, r7, #1
    2794:	41af      	sbcs	r7, r5
    2796:	40dc      	lsrs	r4, r3
    2798:	4337      	orrs	r7, r6
    279a:	1bd7      	subs	r7, r2, r7
    279c:	42ba      	cmp	r2, r7
    279e:	4192      	sbcs	r2, r2
    27a0:	1b0c      	subs	r4, r1, r4
    27a2:	4252      	negs	r2, r2
    27a4:	1aa4      	subs	r4, r4, r2
    27a6:	0006      	movs	r6, r0
    27a8:	46d8      	mov	r8, fp
    27aa:	e6a3      	b.n	24f4 <__aeabi_dadd+0xb0>
    27ac:	4664      	mov	r4, ip
    27ae:	4667      	mov	r7, ip
    27b0:	432c      	orrs	r4, r5
    27b2:	d000      	beq.n	27b6 <__aeabi_dadd+0x372>
    27b4:	e6a2      	b.n	24fc <__aeabi_dadd+0xb8>
    27b6:	2500      	movs	r5, #0
    27b8:	2600      	movs	r6, #0
    27ba:	2700      	movs	r7, #0
    27bc:	e706      	b.n	25cc <__aeabi_dadd+0x188>
    27be:	001e      	movs	r6, r3
    27c0:	e6c4      	b.n	254c <__aeabi_dadd+0x108>
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	000007ff 	.word	0x000007ff
    27c8:	ff7fffff 	.word	0xff7fffff
    27cc:	800fffff 	.word	0x800fffff
    27d0:	2b1f      	cmp	r3, #31
    27d2:	dc63      	bgt.n	289c <__aeabi_dadd+0x458>
    27d4:	2020      	movs	r0, #32
    27d6:	1ac3      	subs	r3, r0, r3
    27d8:	0008      	movs	r0, r1
    27da:	4098      	lsls	r0, r3
    27dc:	469c      	mov	ip, r3
    27de:	4683      	mov	fp, r0
    27e0:	4653      	mov	r3, sl
    27e2:	0010      	movs	r0, r2
    27e4:	40d8      	lsrs	r0, r3
    27e6:	0003      	movs	r3, r0
    27e8:	4658      	mov	r0, fp
    27ea:	4318      	orrs	r0, r3
    27ec:	4663      	mov	r3, ip
    27ee:	409a      	lsls	r2, r3
    27f0:	1e53      	subs	r3, r2, #1
    27f2:	419a      	sbcs	r2, r3
    27f4:	4653      	mov	r3, sl
    27f6:	4302      	orrs	r2, r0
    27f8:	40d9      	lsrs	r1, r3
    27fa:	e703      	b.n	2604 <__aeabi_dadd+0x1c0>
    27fc:	0026      	movs	r6, r4
    27fe:	433e      	orrs	r6, r7
    2800:	d006      	beq.n	2810 <__aeabi_dadd+0x3cc>
    2802:	43eb      	mvns	r3, r5
    2804:	4699      	mov	r9, r3
    2806:	2b00      	cmp	r3, #0
    2808:	d0c7      	beq.n	279a <__aeabi_dadd+0x356>
    280a:	4e94      	ldr	r6, [pc, #592]	; (2a5c <__aeabi_dadd+0x618>)
    280c:	42b0      	cmp	r0, r6
    280e:	d1ac      	bne.n	276a <__aeabi_dadd+0x326>
    2810:	000c      	movs	r4, r1
    2812:	0017      	movs	r7, r2
    2814:	0006      	movs	r6, r0
    2816:	46d8      	mov	r8, fp
    2818:	e698      	b.n	254c <__aeabi_dadd+0x108>
    281a:	4b90      	ldr	r3, [pc, #576]	; (2a5c <__aeabi_dadd+0x618>)
    281c:	459a      	cmp	sl, r3
    281e:	d00b      	beq.n	2838 <__aeabi_dadd+0x3f4>
    2820:	4682      	mov	sl, r0
    2822:	e6e7      	b.n	25f4 <__aeabi_dadd+0x1b0>
    2824:	2800      	cmp	r0, #0
    2826:	d000      	beq.n	282a <__aeabi_dadd+0x3e6>
    2828:	e09e      	b.n	2968 <__aeabi_dadd+0x524>
    282a:	0018      	movs	r0, r3
    282c:	4310      	orrs	r0, r2
    282e:	d100      	bne.n	2832 <__aeabi_dadd+0x3ee>
    2830:	e0e9      	b.n	2a06 <__aeabi_dadd+0x5c2>
    2832:	001c      	movs	r4, r3
    2834:	0017      	movs	r7, r2
    2836:	46d8      	mov	r8, fp
    2838:	4e88      	ldr	r6, [pc, #544]	; (2a5c <__aeabi_dadd+0x618>)
    283a:	e687      	b.n	254c <__aeabi_dadd+0x108>
    283c:	2500      	movs	r5, #0
    283e:	e772      	b.n	2726 <__aeabi_dadd+0x2e2>
    2840:	2100      	movs	r1, #0
    2842:	e782      	b.n	274a <__aeabi_dadd+0x306>
    2844:	0023      	movs	r3, r4
    2846:	433b      	orrs	r3, r7
    2848:	2e00      	cmp	r6, #0
    284a:	d000      	beq.n	284e <__aeabi_dadd+0x40a>
    284c:	e0ab      	b.n	29a6 <__aeabi_dadd+0x562>
    284e:	2b00      	cmp	r3, #0
    2850:	d100      	bne.n	2854 <__aeabi_dadd+0x410>
    2852:	e0e7      	b.n	2a24 <__aeabi_dadd+0x5e0>
    2854:	000b      	movs	r3, r1
    2856:	4313      	orrs	r3, r2
    2858:	d100      	bne.n	285c <__aeabi_dadd+0x418>
    285a:	e677      	b.n	254c <__aeabi_dadd+0x108>
    285c:	18ba      	adds	r2, r7, r2
    285e:	42ba      	cmp	r2, r7
    2860:	41bf      	sbcs	r7, r7
    2862:	1864      	adds	r4, r4, r1
    2864:	427f      	negs	r7, r7
    2866:	19e4      	adds	r4, r4, r7
    2868:	0223      	lsls	r3, r4, #8
    286a:	d400      	bmi.n	286e <__aeabi_dadd+0x42a>
    286c:	e0f2      	b.n	2a54 <__aeabi_dadd+0x610>
    286e:	4b7c      	ldr	r3, [pc, #496]	; (2a60 <__aeabi_dadd+0x61c>)
    2870:	0017      	movs	r7, r2
    2872:	401c      	ands	r4, r3
    2874:	0006      	movs	r6, r0
    2876:	e669      	b.n	254c <__aeabi_dadd+0x108>
    2878:	0020      	movs	r0, r4
    287a:	4338      	orrs	r0, r7
    287c:	2e00      	cmp	r6, #0
    287e:	d1d1      	bne.n	2824 <__aeabi_dadd+0x3e0>
    2880:	2800      	cmp	r0, #0
    2882:	d15b      	bne.n	293c <__aeabi_dadd+0x4f8>
    2884:	001c      	movs	r4, r3
    2886:	4314      	orrs	r4, r2
    2888:	d100      	bne.n	288c <__aeabi_dadd+0x448>
    288a:	e0a8      	b.n	29de <__aeabi_dadd+0x59a>
    288c:	001c      	movs	r4, r3
    288e:	0017      	movs	r7, r2
    2890:	46d8      	mov	r8, fp
    2892:	e65b      	b.n	254c <__aeabi_dadd+0x108>
    2894:	0006      	movs	r6, r0
    2896:	2400      	movs	r4, #0
    2898:	2700      	movs	r7, #0
    289a:	e697      	b.n	25cc <__aeabi_dadd+0x188>
    289c:	4650      	mov	r0, sl
    289e:	000b      	movs	r3, r1
    28a0:	3820      	subs	r0, #32
    28a2:	40c3      	lsrs	r3, r0
    28a4:	4699      	mov	r9, r3
    28a6:	4653      	mov	r3, sl
    28a8:	2b20      	cmp	r3, #32
    28aa:	d100      	bne.n	28ae <__aeabi_dadd+0x46a>
    28ac:	e095      	b.n	29da <__aeabi_dadd+0x596>
    28ae:	2340      	movs	r3, #64	; 0x40
    28b0:	4650      	mov	r0, sl
    28b2:	1a1b      	subs	r3, r3, r0
    28b4:	4099      	lsls	r1, r3
    28b6:	430a      	orrs	r2, r1
    28b8:	1e51      	subs	r1, r2, #1
    28ba:	418a      	sbcs	r2, r1
    28bc:	464b      	mov	r3, r9
    28be:	2100      	movs	r1, #0
    28c0:	431a      	orrs	r2, r3
    28c2:	e69f      	b.n	2604 <__aeabi_dadd+0x1c0>
    28c4:	2e00      	cmp	r6, #0
    28c6:	d130      	bne.n	292a <__aeabi_dadd+0x4e6>
    28c8:	0026      	movs	r6, r4
    28ca:	433e      	orrs	r6, r7
    28cc:	d067      	beq.n	299e <__aeabi_dadd+0x55a>
    28ce:	43db      	mvns	r3, r3
    28d0:	469a      	mov	sl, r3
    28d2:	2b00      	cmp	r3, #0
    28d4:	d01c      	beq.n	2910 <__aeabi_dadd+0x4cc>
    28d6:	4e61      	ldr	r6, [pc, #388]	; (2a5c <__aeabi_dadd+0x618>)
    28d8:	42b0      	cmp	r0, r6
    28da:	d060      	beq.n	299e <__aeabi_dadd+0x55a>
    28dc:	4653      	mov	r3, sl
    28de:	2b38      	cmp	r3, #56	; 0x38
    28e0:	dd00      	ble.n	28e4 <__aeabi_dadd+0x4a0>
    28e2:	e096      	b.n	2a12 <__aeabi_dadd+0x5ce>
    28e4:	2b1f      	cmp	r3, #31
    28e6:	dd00      	ble.n	28ea <__aeabi_dadd+0x4a6>
    28e8:	e09f      	b.n	2a2a <__aeabi_dadd+0x5e6>
    28ea:	2620      	movs	r6, #32
    28ec:	1af3      	subs	r3, r6, r3
    28ee:	0026      	movs	r6, r4
    28f0:	409e      	lsls	r6, r3
    28f2:	469c      	mov	ip, r3
    28f4:	46b3      	mov	fp, r6
    28f6:	4653      	mov	r3, sl
    28f8:	003e      	movs	r6, r7
    28fa:	40de      	lsrs	r6, r3
    28fc:	0033      	movs	r3, r6
    28fe:	465e      	mov	r6, fp
    2900:	431e      	orrs	r6, r3
    2902:	4663      	mov	r3, ip
    2904:	409f      	lsls	r7, r3
    2906:	1e7b      	subs	r3, r7, #1
    2908:	419f      	sbcs	r7, r3
    290a:	4653      	mov	r3, sl
    290c:	40dc      	lsrs	r4, r3
    290e:	4337      	orrs	r7, r6
    2910:	18bf      	adds	r7, r7, r2
    2912:	4297      	cmp	r7, r2
    2914:	4192      	sbcs	r2, r2
    2916:	1864      	adds	r4, r4, r1
    2918:	4252      	negs	r2, r2
    291a:	18a4      	adds	r4, r4, r2
    291c:	0006      	movs	r6, r0
    291e:	e678      	b.n	2612 <__aeabi_dadd+0x1ce>
    2920:	4327      	orrs	r7, r4
    2922:	1e7c      	subs	r4, r7, #1
    2924:	41a7      	sbcs	r7, r4
    2926:	2400      	movs	r4, #0
    2928:	e737      	b.n	279a <__aeabi_dadd+0x356>
    292a:	4e4c      	ldr	r6, [pc, #304]	; (2a5c <__aeabi_dadd+0x618>)
    292c:	42b0      	cmp	r0, r6
    292e:	d036      	beq.n	299e <__aeabi_dadd+0x55a>
    2930:	2680      	movs	r6, #128	; 0x80
    2932:	425b      	negs	r3, r3
    2934:	0436      	lsls	r6, r6, #16
    2936:	469a      	mov	sl, r3
    2938:	4334      	orrs	r4, r6
    293a:	e7cf      	b.n	28dc <__aeabi_dadd+0x498>
    293c:	0018      	movs	r0, r3
    293e:	4310      	orrs	r0, r2
    2940:	d100      	bne.n	2944 <__aeabi_dadd+0x500>
    2942:	e603      	b.n	254c <__aeabi_dadd+0x108>
    2944:	1ab8      	subs	r0, r7, r2
    2946:	4684      	mov	ip, r0
    2948:	4567      	cmp	r7, ip
    294a:	41ad      	sbcs	r5, r5
    294c:	1ae0      	subs	r0, r4, r3
    294e:	426d      	negs	r5, r5
    2950:	1b40      	subs	r0, r0, r5
    2952:	0205      	lsls	r5, r0, #8
    2954:	d400      	bmi.n	2958 <__aeabi_dadd+0x514>
    2956:	e62c      	b.n	25b2 <__aeabi_dadd+0x16e>
    2958:	1bd7      	subs	r7, r2, r7
    295a:	42ba      	cmp	r2, r7
    295c:	4192      	sbcs	r2, r2
    295e:	1b1c      	subs	r4, r3, r4
    2960:	4252      	negs	r2, r2
    2962:	1aa4      	subs	r4, r4, r2
    2964:	46d8      	mov	r8, fp
    2966:	e5f1      	b.n	254c <__aeabi_dadd+0x108>
    2968:	0018      	movs	r0, r3
    296a:	4310      	orrs	r0, r2
    296c:	d100      	bne.n	2970 <__aeabi_dadd+0x52c>
    296e:	e763      	b.n	2838 <__aeabi_dadd+0x3f4>
    2970:	08f8      	lsrs	r0, r7, #3
    2972:	0767      	lsls	r7, r4, #29
    2974:	4307      	orrs	r7, r0
    2976:	2080      	movs	r0, #128	; 0x80
    2978:	08e4      	lsrs	r4, r4, #3
    297a:	0300      	lsls	r0, r0, #12
    297c:	4204      	tst	r4, r0
    297e:	d008      	beq.n	2992 <__aeabi_dadd+0x54e>
    2980:	08dd      	lsrs	r5, r3, #3
    2982:	4205      	tst	r5, r0
    2984:	d105      	bne.n	2992 <__aeabi_dadd+0x54e>
    2986:	08d2      	lsrs	r2, r2, #3
    2988:	0759      	lsls	r1, r3, #29
    298a:	4311      	orrs	r1, r2
    298c:	000f      	movs	r7, r1
    298e:	002c      	movs	r4, r5
    2990:	46d8      	mov	r8, fp
    2992:	0f7b      	lsrs	r3, r7, #29
    2994:	00e4      	lsls	r4, r4, #3
    2996:	431c      	orrs	r4, r3
    2998:	00ff      	lsls	r7, r7, #3
    299a:	4e30      	ldr	r6, [pc, #192]	; (2a5c <__aeabi_dadd+0x618>)
    299c:	e5d6      	b.n	254c <__aeabi_dadd+0x108>
    299e:	000c      	movs	r4, r1
    29a0:	0017      	movs	r7, r2
    29a2:	0006      	movs	r6, r0
    29a4:	e5d2      	b.n	254c <__aeabi_dadd+0x108>
    29a6:	2b00      	cmp	r3, #0
    29a8:	d038      	beq.n	2a1c <__aeabi_dadd+0x5d8>
    29aa:	000b      	movs	r3, r1
    29ac:	4313      	orrs	r3, r2
    29ae:	d100      	bne.n	29b2 <__aeabi_dadd+0x56e>
    29b0:	e742      	b.n	2838 <__aeabi_dadd+0x3f4>
    29b2:	08f8      	lsrs	r0, r7, #3
    29b4:	0767      	lsls	r7, r4, #29
    29b6:	4307      	orrs	r7, r0
    29b8:	2080      	movs	r0, #128	; 0x80
    29ba:	08e4      	lsrs	r4, r4, #3
    29bc:	0300      	lsls	r0, r0, #12
    29be:	4204      	tst	r4, r0
    29c0:	d0e7      	beq.n	2992 <__aeabi_dadd+0x54e>
    29c2:	08cb      	lsrs	r3, r1, #3
    29c4:	4203      	tst	r3, r0
    29c6:	d1e4      	bne.n	2992 <__aeabi_dadd+0x54e>
    29c8:	08d2      	lsrs	r2, r2, #3
    29ca:	0749      	lsls	r1, r1, #29
    29cc:	4311      	orrs	r1, r2
    29ce:	000f      	movs	r7, r1
    29d0:	001c      	movs	r4, r3
    29d2:	e7de      	b.n	2992 <__aeabi_dadd+0x54e>
    29d4:	2700      	movs	r7, #0
    29d6:	2400      	movs	r4, #0
    29d8:	e5d5      	b.n	2586 <__aeabi_dadd+0x142>
    29da:	2100      	movs	r1, #0
    29dc:	e76b      	b.n	28b6 <__aeabi_dadd+0x472>
    29de:	2500      	movs	r5, #0
    29e0:	2700      	movs	r7, #0
    29e2:	e5f3      	b.n	25cc <__aeabi_dadd+0x188>
    29e4:	464e      	mov	r6, r9
    29e6:	0025      	movs	r5, r4
    29e8:	3e20      	subs	r6, #32
    29ea:	40f5      	lsrs	r5, r6
    29ec:	464b      	mov	r3, r9
    29ee:	002e      	movs	r6, r5
    29f0:	2b20      	cmp	r3, #32
    29f2:	d02d      	beq.n	2a50 <__aeabi_dadd+0x60c>
    29f4:	2540      	movs	r5, #64	; 0x40
    29f6:	1aed      	subs	r5, r5, r3
    29f8:	40ac      	lsls	r4, r5
    29fa:	4327      	orrs	r7, r4
    29fc:	1e7c      	subs	r4, r7, #1
    29fe:	41a7      	sbcs	r7, r4
    2a00:	2400      	movs	r4, #0
    2a02:	4337      	orrs	r7, r6
    2a04:	e6c9      	b.n	279a <__aeabi_dadd+0x356>
    2a06:	2480      	movs	r4, #128	; 0x80
    2a08:	2500      	movs	r5, #0
    2a0a:	0324      	lsls	r4, r4, #12
    2a0c:	4e13      	ldr	r6, [pc, #76]	; (2a5c <__aeabi_dadd+0x618>)
    2a0e:	2700      	movs	r7, #0
    2a10:	e5dc      	b.n	25cc <__aeabi_dadd+0x188>
    2a12:	4327      	orrs	r7, r4
    2a14:	1e7c      	subs	r4, r7, #1
    2a16:	41a7      	sbcs	r7, r4
    2a18:	2400      	movs	r4, #0
    2a1a:	e779      	b.n	2910 <__aeabi_dadd+0x4cc>
    2a1c:	000c      	movs	r4, r1
    2a1e:	0017      	movs	r7, r2
    2a20:	4e0e      	ldr	r6, [pc, #56]	; (2a5c <__aeabi_dadd+0x618>)
    2a22:	e593      	b.n	254c <__aeabi_dadd+0x108>
    2a24:	000c      	movs	r4, r1
    2a26:	0017      	movs	r7, r2
    2a28:	e590      	b.n	254c <__aeabi_dadd+0x108>
    2a2a:	4656      	mov	r6, sl
    2a2c:	0023      	movs	r3, r4
    2a2e:	3e20      	subs	r6, #32
    2a30:	40f3      	lsrs	r3, r6
    2a32:	4699      	mov	r9, r3
    2a34:	4653      	mov	r3, sl
    2a36:	2b20      	cmp	r3, #32
    2a38:	d00e      	beq.n	2a58 <__aeabi_dadd+0x614>
    2a3a:	2340      	movs	r3, #64	; 0x40
    2a3c:	4656      	mov	r6, sl
    2a3e:	1b9b      	subs	r3, r3, r6
    2a40:	409c      	lsls	r4, r3
    2a42:	4327      	orrs	r7, r4
    2a44:	1e7c      	subs	r4, r7, #1
    2a46:	41a7      	sbcs	r7, r4
    2a48:	464b      	mov	r3, r9
    2a4a:	2400      	movs	r4, #0
    2a4c:	431f      	orrs	r7, r3
    2a4e:	e75f      	b.n	2910 <__aeabi_dadd+0x4cc>
    2a50:	2400      	movs	r4, #0
    2a52:	e7d2      	b.n	29fa <__aeabi_dadd+0x5b6>
    2a54:	0017      	movs	r7, r2
    2a56:	e5b2      	b.n	25be <__aeabi_dadd+0x17a>
    2a58:	2400      	movs	r4, #0
    2a5a:	e7f2      	b.n	2a42 <__aeabi_dadd+0x5fe>
    2a5c:	000007ff 	.word	0x000007ff
    2a60:	ff7fffff 	.word	0xff7fffff

00002a64 <__aeabi_ddiv>:
    2a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a66:	4657      	mov	r7, sl
    2a68:	4645      	mov	r5, r8
    2a6a:	46de      	mov	lr, fp
    2a6c:	464e      	mov	r6, r9
    2a6e:	b5e0      	push	{r5, r6, r7, lr}
    2a70:	004c      	lsls	r4, r1, #1
    2a72:	030e      	lsls	r6, r1, #12
    2a74:	b087      	sub	sp, #28
    2a76:	4683      	mov	fp, r0
    2a78:	4692      	mov	sl, r2
    2a7a:	001d      	movs	r5, r3
    2a7c:	4680      	mov	r8, r0
    2a7e:	0b36      	lsrs	r6, r6, #12
    2a80:	0d64      	lsrs	r4, r4, #21
    2a82:	0fcf      	lsrs	r7, r1, #31
    2a84:	2c00      	cmp	r4, #0
    2a86:	d04f      	beq.n	2b28 <__aeabi_ddiv+0xc4>
    2a88:	4b6f      	ldr	r3, [pc, #444]	; (2c48 <__aeabi_ddiv+0x1e4>)
    2a8a:	429c      	cmp	r4, r3
    2a8c:	d035      	beq.n	2afa <__aeabi_ddiv+0x96>
    2a8e:	2380      	movs	r3, #128	; 0x80
    2a90:	0f42      	lsrs	r2, r0, #29
    2a92:	041b      	lsls	r3, r3, #16
    2a94:	00f6      	lsls	r6, r6, #3
    2a96:	4313      	orrs	r3, r2
    2a98:	4333      	orrs	r3, r6
    2a9a:	4699      	mov	r9, r3
    2a9c:	00c3      	lsls	r3, r0, #3
    2a9e:	4698      	mov	r8, r3
    2aa0:	4b6a      	ldr	r3, [pc, #424]	; (2c4c <__aeabi_ddiv+0x1e8>)
    2aa2:	2600      	movs	r6, #0
    2aa4:	469c      	mov	ip, r3
    2aa6:	2300      	movs	r3, #0
    2aa8:	4464      	add	r4, ip
    2aaa:	9303      	str	r3, [sp, #12]
    2aac:	032b      	lsls	r3, r5, #12
    2aae:	0b1b      	lsrs	r3, r3, #12
    2ab0:	469b      	mov	fp, r3
    2ab2:	006b      	lsls	r3, r5, #1
    2ab4:	0fed      	lsrs	r5, r5, #31
    2ab6:	4650      	mov	r0, sl
    2ab8:	0d5b      	lsrs	r3, r3, #21
    2aba:	9501      	str	r5, [sp, #4]
    2abc:	d05e      	beq.n	2b7c <__aeabi_ddiv+0x118>
    2abe:	4a62      	ldr	r2, [pc, #392]	; (2c48 <__aeabi_ddiv+0x1e4>)
    2ac0:	4293      	cmp	r3, r2
    2ac2:	d053      	beq.n	2b6c <__aeabi_ddiv+0x108>
    2ac4:	465a      	mov	r2, fp
    2ac6:	00d1      	lsls	r1, r2, #3
    2ac8:	2280      	movs	r2, #128	; 0x80
    2aca:	0f40      	lsrs	r0, r0, #29
    2acc:	0412      	lsls	r2, r2, #16
    2ace:	4302      	orrs	r2, r0
    2ad0:	430a      	orrs	r2, r1
    2ad2:	4693      	mov	fp, r2
    2ad4:	4652      	mov	r2, sl
    2ad6:	00d1      	lsls	r1, r2, #3
    2ad8:	4a5c      	ldr	r2, [pc, #368]	; (2c4c <__aeabi_ddiv+0x1e8>)
    2ada:	4694      	mov	ip, r2
    2adc:	2200      	movs	r2, #0
    2ade:	4463      	add	r3, ip
    2ae0:	0038      	movs	r0, r7
    2ae2:	4068      	eors	r0, r5
    2ae4:	4684      	mov	ip, r0
    2ae6:	9002      	str	r0, [sp, #8]
    2ae8:	1ae4      	subs	r4, r4, r3
    2aea:	4316      	orrs	r6, r2
    2aec:	2e0f      	cmp	r6, #15
    2aee:	d900      	bls.n	2af2 <__aeabi_ddiv+0x8e>
    2af0:	e0b4      	b.n	2c5c <__aeabi_ddiv+0x1f8>
    2af2:	4b57      	ldr	r3, [pc, #348]	; (2c50 <__aeabi_ddiv+0x1ec>)
    2af4:	00b6      	lsls	r6, r6, #2
    2af6:	599b      	ldr	r3, [r3, r6]
    2af8:	469f      	mov	pc, r3
    2afa:	0003      	movs	r3, r0
    2afc:	4333      	orrs	r3, r6
    2afe:	4699      	mov	r9, r3
    2b00:	d16c      	bne.n	2bdc <__aeabi_ddiv+0x178>
    2b02:	2300      	movs	r3, #0
    2b04:	4698      	mov	r8, r3
    2b06:	3302      	adds	r3, #2
    2b08:	2608      	movs	r6, #8
    2b0a:	9303      	str	r3, [sp, #12]
    2b0c:	e7ce      	b.n	2aac <__aeabi_ddiv+0x48>
    2b0e:	46cb      	mov	fp, r9
    2b10:	4641      	mov	r1, r8
    2b12:	9a03      	ldr	r2, [sp, #12]
    2b14:	9701      	str	r7, [sp, #4]
    2b16:	2a02      	cmp	r2, #2
    2b18:	d165      	bne.n	2be6 <__aeabi_ddiv+0x182>
    2b1a:	9b01      	ldr	r3, [sp, #4]
    2b1c:	4c4a      	ldr	r4, [pc, #296]	; (2c48 <__aeabi_ddiv+0x1e4>)
    2b1e:	469c      	mov	ip, r3
    2b20:	2300      	movs	r3, #0
    2b22:	2200      	movs	r2, #0
    2b24:	4698      	mov	r8, r3
    2b26:	e06b      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2b28:	0003      	movs	r3, r0
    2b2a:	4333      	orrs	r3, r6
    2b2c:	4699      	mov	r9, r3
    2b2e:	d04e      	beq.n	2bce <__aeabi_ddiv+0x16a>
    2b30:	2e00      	cmp	r6, #0
    2b32:	d100      	bne.n	2b36 <__aeabi_ddiv+0xd2>
    2b34:	e1bc      	b.n	2eb0 <__aeabi_ddiv+0x44c>
    2b36:	0030      	movs	r0, r6
    2b38:	f001 fa0c 	bl	3f54 <__clzsi2>
    2b3c:	0003      	movs	r3, r0
    2b3e:	3b0b      	subs	r3, #11
    2b40:	2b1c      	cmp	r3, #28
    2b42:	dd00      	ble.n	2b46 <__aeabi_ddiv+0xe2>
    2b44:	e1ac      	b.n	2ea0 <__aeabi_ddiv+0x43c>
    2b46:	221d      	movs	r2, #29
    2b48:	1ad3      	subs	r3, r2, r3
    2b4a:	465a      	mov	r2, fp
    2b4c:	0001      	movs	r1, r0
    2b4e:	40da      	lsrs	r2, r3
    2b50:	3908      	subs	r1, #8
    2b52:	408e      	lsls	r6, r1
    2b54:	0013      	movs	r3, r2
    2b56:	4333      	orrs	r3, r6
    2b58:	4699      	mov	r9, r3
    2b5a:	465b      	mov	r3, fp
    2b5c:	408b      	lsls	r3, r1
    2b5e:	4698      	mov	r8, r3
    2b60:	2300      	movs	r3, #0
    2b62:	4c3c      	ldr	r4, [pc, #240]	; (2c54 <__aeabi_ddiv+0x1f0>)
    2b64:	2600      	movs	r6, #0
    2b66:	1a24      	subs	r4, r4, r0
    2b68:	9303      	str	r3, [sp, #12]
    2b6a:	e79f      	b.n	2aac <__aeabi_ddiv+0x48>
    2b6c:	4651      	mov	r1, sl
    2b6e:	465a      	mov	r2, fp
    2b70:	4311      	orrs	r1, r2
    2b72:	d129      	bne.n	2bc8 <__aeabi_ddiv+0x164>
    2b74:	2200      	movs	r2, #0
    2b76:	4693      	mov	fp, r2
    2b78:	3202      	adds	r2, #2
    2b7a:	e7b1      	b.n	2ae0 <__aeabi_ddiv+0x7c>
    2b7c:	4659      	mov	r1, fp
    2b7e:	4301      	orrs	r1, r0
    2b80:	d01e      	beq.n	2bc0 <__aeabi_ddiv+0x15c>
    2b82:	465b      	mov	r3, fp
    2b84:	2b00      	cmp	r3, #0
    2b86:	d100      	bne.n	2b8a <__aeabi_ddiv+0x126>
    2b88:	e19e      	b.n	2ec8 <__aeabi_ddiv+0x464>
    2b8a:	4658      	mov	r0, fp
    2b8c:	f001 f9e2 	bl	3f54 <__clzsi2>
    2b90:	0003      	movs	r3, r0
    2b92:	3b0b      	subs	r3, #11
    2b94:	2b1c      	cmp	r3, #28
    2b96:	dd00      	ble.n	2b9a <__aeabi_ddiv+0x136>
    2b98:	e18f      	b.n	2eba <__aeabi_ddiv+0x456>
    2b9a:	0002      	movs	r2, r0
    2b9c:	4659      	mov	r1, fp
    2b9e:	3a08      	subs	r2, #8
    2ba0:	4091      	lsls	r1, r2
    2ba2:	468b      	mov	fp, r1
    2ba4:	211d      	movs	r1, #29
    2ba6:	1acb      	subs	r3, r1, r3
    2ba8:	4651      	mov	r1, sl
    2baa:	40d9      	lsrs	r1, r3
    2bac:	000b      	movs	r3, r1
    2bae:	4659      	mov	r1, fp
    2bb0:	430b      	orrs	r3, r1
    2bb2:	4651      	mov	r1, sl
    2bb4:	469b      	mov	fp, r3
    2bb6:	4091      	lsls	r1, r2
    2bb8:	4b26      	ldr	r3, [pc, #152]	; (2c54 <__aeabi_ddiv+0x1f0>)
    2bba:	2200      	movs	r2, #0
    2bbc:	1a1b      	subs	r3, r3, r0
    2bbe:	e78f      	b.n	2ae0 <__aeabi_ddiv+0x7c>
    2bc0:	2300      	movs	r3, #0
    2bc2:	2201      	movs	r2, #1
    2bc4:	469b      	mov	fp, r3
    2bc6:	e78b      	b.n	2ae0 <__aeabi_ddiv+0x7c>
    2bc8:	4651      	mov	r1, sl
    2bca:	2203      	movs	r2, #3
    2bcc:	e788      	b.n	2ae0 <__aeabi_ddiv+0x7c>
    2bce:	2300      	movs	r3, #0
    2bd0:	4698      	mov	r8, r3
    2bd2:	3301      	adds	r3, #1
    2bd4:	2604      	movs	r6, #4
    2bd6:	2400      	movs	r4, #0
    2bd8:	9303      	str	r3, [sp, #12]
    2bda:	e767      	b.n	2aac <__aeabi_ddiv+0x48>
    2bdc:	2303      	movs	r3, #3
    2bde:	46b1      	mov	r9, r6
    2be0:	9303      	str	r3, [sp, #12]
    2be2:	260c      	movs	r6, #12
    2be4:	e762      	b.n	2aac <__aeabi_ddiv+0x48>
    2be6:	2a03      	cmp	r2, #3
    2be8:	d100      	bne.n	2bec <__aeabi_ddiv+0x188>
    2bea:	e25c      	b.n	30a6 <__aeabi_ddiv+0x642>
    2bec:	9b01      	ldr	r3, [sp, #4]
    2bee:	2a01      	cmp	r2, #1
    2bf0:	d000      	beq.n	2bf4 <__aeabi_ddiv+0x190>
    2bf2:	e1e4      	b.n	2fbe <__aeabi_ddiv+0x55a>
    2bf4:	4013      	ands	r3, r2
    2bf6:	469c      	mov	ip, r3
    2bf8:	2300      	movs	r3, #0
    2bfa:	2400      	movs	r4, #0
    2bfc:	2200      	movs	r2, #0
    2bfe:	4698      	mov	r8, r3
    2c00:	2100      	movs	r1, #0
    2c02:	0312      	lsls	r2, r2, #12
    2c04:	0b13      	lsrs	r3, r2, #12
    2c06:	0d0a      	lsrs	r2, r1, #20
    2c08:	0512      	lsls	r2, r2, #20
    2c0a:	431a      	orrs	r2, r3
    2c0c:	0523      	lsls	r3, r4, #20
    2c0e:	4c12      	ldr	r4, [pc, #72]	; (2c58 <__aeabi_ddiv+0x1f4>)
    2c10:	4640      	mov	r0, r8
    2c12:	4022      	ands	r2, r4
    2c14:	4313      	orrs	r3, r2
    2c16:	4662      	mov	r2, ip
    2c18:	005b      	lsls	r3, r3, #1
    2c1a:	07d2      	lsls	r2, r2, #31
    2c1c:	085b      	lsrs	r3, r3, #1
    2c1e:	4313      	orrs	r3, r2
    2c20:	0019      	movs	r1, r3
    2c22:	b007      	add	sp, #28
    2c24:	bc3c      	pop	{r2, r3, r4, r5}
    2c26:	4690      	mov	r8, r2
    2c28:	4699      	mov	r9, r3
    2c2a:	46a2      	mov	sl, r4
    2c2c:	46ab      	mov	fp, r5
    2c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c30:	2300      	movs	r3, #0
    2c32:	2280      	movs	r2, #128	; 0x80
    2c34:	469c      	mov	ip, r3
    2c36:	0312      	lsls	r2, r2, #12
    2c38:	4698      	mov	r8, r3
    2c3a:	4c03      	ldr	r4, [pc, #12]	; (2c48 <__aeabi_ddiv+0x1e4>)
    2c3c:	e7e0      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2c3e:	2300      	movs	r3, #0
    2c40:	4c01      	ldr	r4, [pc, #4]	; (2c48 <__aeabi_ddiv+0x1e4>)
    2c42:	2200      	movs	r2, #0
    2c44:	4698      	mov	r8, r3
    2c46:	e7db      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2c48:	000007ff 	.word	0x000007ff
    2c4c:	fffffc01 	.word	0xfffffc01
    2c50:	0000420c 	.word	0x0000420c
    2c54:	fffffc0d 	.word	0xfffffc0d
    2c58:	800fffff 	.word	0x800fffff
    2c5c:	45d9      	cmp	r9, fp
    2c5e:	d900      	bls.n	2c62 <__aeabi_ddiv+0x1fe>
    2c60:	e139      	b.n	2ed6 <__aeabi_ddiv+0x472>
    2c62:	d100      	bne.n	2c66 <__aeabi_ddiv+0x202>
    2c64:	e134      	b.n	2ed0 <__aeabi_ddiv+0x46c>
    2c66:	2300      	movs	r3, #0
    2c68:	4646      	mov	r6, r8
    2c6a:	464d      	mov	r5, r9
    2c6c:	469a      	mov	sl, r3
    2c6e:	3c01      	subs	r4, #1
    2c70:	465b      	mov	r3, fp
    2c72:	0e0a      	lsrs	r2, r1, #24
    2c74:	021b      	lsls	r3, r3, #8
    2c76:	431a      	orrs	r2, r3
    2c78:	020b      	lsls	r3, r1, #8
    2c7a:	0c17      	lsrs	r7, r2, #16
    2c7c:	9303      	str	r3, [sp, #12]
    2c7e:	0413      	lsls	r3, r2, #16
    2c80:	0c1b      	lsrs	r3, r3, #16
    2c82:	0039      	movs	r1, r7
    2c84:	0028      	movs	r0, r5
    2c86:	4690      	mov	r8, r2
    2c88:	9301      	str	r3, [sp, #4]
    2c8a:	f7ff faa7 	bl	21dc <__udivsi3>
    2c8e:	0002      	movs	r2, r0
    2c90:	9b01      	ldr	r3, [sp, #4]
    2c92:	4683      	mov	fp, r0
    2c94:	435a      	muls	r2, r3
    2c96:	0028      	movs	r0, r5
    2c98:	0039      	movs	r1, r7
    2c9a:	4691      	mov	r9, r2
    2c9c:	f7ff fb24 	bl	22e8 <__aeabi_uidivmod>
    2ca0:	0c35      	lsrs	r5, r6, #16
    2ca2:	0409      	lsls	r1, r1, #16
    2ca4:	430d      	orrs	r5, r1
    2ca6:	45a9      	cmp	r9, r5
    2ca8:	d90d      	bls.n	2cc6 <__aeabi_ddiv+0x262>
    2caa:	465b      	mov	r3, fp
    2cac:	4445      	add	r5, r8
    2cae:	3b01      	subs	r3, #1
    2cb0:	45a8      	cmp	r8, r5
    2cb2:	d900      	bls.n	2cb6 <__aeabi_ddiv+0x252>
    2cb4:	e13a      	b.n	2f2c <__aeabi_ddiv+0x4c8>
    2cb6:	45a9      	cmp	r9, r5
    2cb8:	d800      	bhi.n	2cbc <__aeabi_ddiv+0x258>
    2cba:	e137      	b.n	2f2c <__aeabi_ddiv+0x4c8>
    2cbc:	2302      	movs	r3, #2
    2cbe:	425b      	negs	r3, r3
    2cc0:	469c      	mov	ip, r3
    2cc2:	4445      	add	r5, r8
    2cc4:	44e3      	add	fp, ip
    2cc6:	464b      	mov	r3, r9
    2cc8:	1aeb      	subs	r3, r5, r3
    2cca:	0039      	movs	r1, r7
    2ccc:	0018      	movs	r0, r3
    2cce:	9304      	str	r3, [sp, #16]
    2cd0:	f7ff fa84 	bl	21dc <__udivsi3>
    2cd4:	9b01      	ldr	r3, [sp, #4]
    2cd6:	0005      	movs	r5, r0
    2cd8:	4343      	muls	r3, r0
    2cda:	0039      	movs	r1, r7
    2cdc:	9804      	ldr	r0, [sp, #16]
    2cde:	4699      	mov	r9, r3
    2ce0:	f7ff fb02 	bl	22e8 <__aeabi_uidivmod>
    2ce4:	0433      	lsls	r3, r6, #16
    2ce6:	0409      	lsls	r1, r1, #16
    2ce8:	0c1b      	lsrs	r3, r3, #16
    2cea:	430b      	orrs	r3, r1
    2cec:	4599      	cmp	r9, r3
    2cee:	d909      	bls.n	2d04 <__aeabi_ddiv+0x2a0>
    2cf0:	4443      	add	r3, r8
    2cf2:	1e6a      	subs	r2, r5, #1
    2cf4:	4598      	cmp	r8, r3
    2cf6:	d900      	bls.n	2cfa <__aeabi_ddiv+0x296>
    2cf8:	e11a      	b.n	2f30 <__aeabi_ddiv+0x4cc>
    2cfa:	4599      	cmp	r9, r3
    2cfc:	d800      	bhi.n	2d00 <__aeabi_ddiv+0x29c>
    2cfe:	e117      	b.n	2f30 <__aeabi_ddiv+0x4cc>
    2d00:	3d02      	subs	r5, #2
    2d02:	4443      	add	r3, r8
    2d04:	464a      	mov	r2, r9
    2d06:	1a9b      	subs	r3, r3, r2
    2d08:	465a      	mov	r2, fp
    2d0a:	0412      	lsls	r2, r2, #16
    2d0c:	432a      	orrs	r2, r5
    2d0e:	9903      	ldr	r1, [sp, #12]
    2d10:	4693      	mov	fp, r2
    2d12:	0c10      	lsrs	r0, r2, #16
    2d14:	0c0a      	lsrs	r2, r1, #16
    2d16:	4691      	mov	r9, r2
    2d18:	0409      	lsls	r1, r1, #16
    2d1a:	465a      	mov	r2, fp
    2d1c:	0c09      	lsrs	r1, r1, #16
    2d1e:	464e      	mov	r6, r9
    2d20:	000d      	movs	r5, r1
    2d22:	0412      	lsls	r2, r2, #16
    2d24:	0c12      	lsrs	r2, r2, #16
    2d26:	4345      	muls	r5, r0
    2d28:	9105      	str	r1, [sp, #20]
    2d2a:	4351      	muls	r1, r2
    2d2c:	4372      	muls	r2, r6
    2d2e:	4370      	muls	r0, r6
    2d30:	1952      	adds	r2, r2, r5
    2d32:	0c0e      	lsrs	r6, r1, #16
    2d34:	18b2      	adds	r2, r6, r2
    2d36:	4295      	cmp	r5, r2
    2d38:	d903      	bls.n	2d42 <__aeabi_ddiv+0x2de>
    2d3a:	2580      	movs	r5, #128	; 0x80
    2d3c:	026d      	lsls	r5, r5, #9
    2d3e:	46ac      	mov	ip, r5
    2d40:	4460      	add	r0, ip
    2d42:	0c15      	lsrs	r5, r2, #16
    2d44:	0409      	lsls	r1, r1, #16
    2d46:	0412      	lsls	r2, r2, #16
    2d48:	0c09      	lsrs	r1, r1, #16
    2d4a:	1828      	adds	r0, r5, r0
    2d4c:	1852      	adds	r2, r2, r1
    2d4e:	4283      	cmp	r3, r0
    2d50:	d200      	bcs.n	2d54 <__aeabi_ddiv+0x2f0>
    2d52:	e0ce      	b.n	2ef2 <__aeabi_ddiv+0x48e>
    2d54:	d100      	bne.n	2d58 <__aeabi_ddiv+0x2f4>
    2d56:	e0c8      	b.n	2eea <__aeabi_ddiv+0x486>
    2d58:	1a1d      	subs	r5, r3, r0
    2d5a:	4653      	mov	r3, sl
    2d5c:	1a9e      	subs	r6, r3, r2
    2d5e:	45b2      	cmp	sl, r6
    2d60:	4192      	sbcs	r2, r2
    2d62:	4252      	negs	r2, r2
    2d64:	1aab      	subs	r3, r5, r2
    2d66:	469a      	mov	sl, r3
    2d68:	4598      	cmp	r8, r3
    2d6a:	d100      	bne.n	2d6e <__aeabi_ddiv+0x30a>
    2d6c:	e117      	b.n	2f9e <__aeabi_ddiv+0x53a>
    2d6e:	0039      	movs	r1, r7
    2d70:	0018      	movs	r0, r3
    2d72:	f7ff fa33 	bl	21dc <__udivsi3>
    2d76:	9b01      	ldr	r3, [sp, #4]
    2d78:	0005      	movs	r5, r0
    2d7a:	4343      	muls	r3, r0
    2d7c:	0039      	movs	r1, r7
    2d7e:	4650      	mov	r0, sl
    2d80:	9304      	str	r3, [sp, #16]
    2d82:	f7ff fab1 	bl	22e8 <__aeabi_uidivmod>
    2d86:	9804      	ldr	r0, [sp, #16]
    2d88:	040b      	lsls	r3, r1, #16
    2d8a:	0c31      	lsrs	r1, r6, #16
    2d8c:	4319      	orrs	r1, r3
    2d8e:	4288      	cmp	r0, r1
    2d90:	d909      	bls.n	2da6 <__aeabi_ddiv+0x342>
    2d92:	4441      	add	r1, r8
    2d94:	1e6b      	subs	r3, r5, #1
    2d96:	4588      	cmp	r8, r1
    2d98:	d900      	bls.n	2d9c <__aeabi_ddiv+0x338>
    2d9a:	e107      	b.n	2fac <__aeabi_ddiv+0x548>
    2d9c:	4288      	cmp	r0, r1
    2d9e:	d800      	bhi.n	2da2 <__aeabi_ddiv+0x33e>
    2da0:	e104      	b.n	2fac <__aeabi_ddiv+0x548>
    2da2:	3d02      	subs	r5, #2
    2da4:	4441      	add	r1, r8
    2da6:	9b04      	ldr	r3, [sp, #16]
    2da8:	1acb      	subs	r3, r1, r3
    2daa:	0018      	movs	r0, r3
    2dac:	0039      	movs	r1, r7
    2dae:	9304      	str	r3, [sp, #16]
    2db0:	f7ff fa14 	bl	21dc <__udivsi3>
    2db4:	9b01      	ldr	r3, [sp, #4]
    2db6:	4682      	mov	sl, r0
    2db8:	4343      	muls	r3, r0
    2dba:	0039      	movs	r1, r7
    2dbc:	9804      	ldr	r0, [sp, #16]
    2dbe:	9301      	str	r3, [sp, #4]
    2dc0:	f7ff fa92 	bl	22e8 <__aeabi_uidivmod>
    2dc4:	9801      	ldr	r0, [sp, #4]
    2dc6:	040b      	lsls	r3, r1, #16
    2dc8:	0431      	lsls	r1, r6, #16
    2dca:	0c09      	lsrs	r1, r1, #16
    2dcc:	4319      	orrs	r1, r3
    2dce:	4288      	cmp	r0, r1
    2dd0:	d90d      	bls.n	2dee <__aeabi_ddiv+0x38a>
    2dd2:	4653      	mov	r3, sl
    2dd4:	4441      	add	r1, r8
    2dd6:	3b01      	subs	r3, #1
    2dd8:	4588      	cmp	r8, r1
    2dda:	d900      	bls.n	2dde <__aeabi_ddiv+0x37a>
    2ddc:	e0e8      	b.n	2fb0 <__aeabi_ddiv+0x54c>
    2dde:	4288      	cmp	r0, r1
    2de0:	d800      	bhi.n	2de4 <__aeabi_ddiv+0x380>
    2de2:	e0e5      	b.n	2fb0 <__aeabi_ddiv+0x54c>
    2de4:	2302      	movs	r3, #2
    2de6:	425b      	negs	r3, r3
    2de8:	469c      	mov	ip, r3
    2dea:	4441      	add	r1, r8
    2dec:	44e2      	add	sl, ip
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	042d      	lsls	r5, r5, #16
    2df2:	1ace      	subs	r6, r1, r3
    2df4:	4651      	mov	r1, sl
    2df6:	4329      	orrs	r1, r5
    2df8:	9d05      	ldr	r5, [sp, #20]
    2dfa:	464f      	mov	r7, r9
    2dfc:	002a      	movs	r2, r5
    2dfe:	040b      	lsls	r3, r1, #16
    2e00:	0c08      	lsrs	r0, r1, #16
    2e02:	0c1b      	lsrs	r3, r3, #16
    2e04:	435a      	muls	r2, r3
    2e06:	4345      	muls	r5, r0
    2e08:	437b      	muls	r3, r7
    2e0a:	4378      	muls	r0, r7
    2e0c:	195b      	adds	r3, r3, r5
    2e0e:	0c17      	lsrs	r7, r2, #16
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	429d      	cmp	r5, r3
    2e14:	d903      	bls.n	2e1e <__aeabi_ddiv+0x3ba>
    2e16:	2580      	movs	r5, #128	; 0x80
    2e18:	026d      	lsls	r5, r5, #9
    2e1a:	46ac      	mov	ip, r5
    2e1c:	4460      	add	r0, ip
    2e1e:	0c1d      	lsrs	r5, r3, #16
    2e20:	0412      	lsls	r2, r2, #16
    2e22:	041b      	lsls	r3, r3, #16
    2e24:	0c12      	lsrs	r2, r2, #16
    2e26:	1828      	adds	r0, r5, r0
    2e28:	189b      	adds	r3, r3, r2
    2e2a:	4286      	cmp	r6, r0
    2e2c:	d200      	bcs.n	2e30 <__aeabi_ddiv+0x3cc>
    2e2e:	e093      	b.n	2f58 <__aeabi_ddiv+0x4f4>
    2e30:	d100      	bne.n	2e34 <__aeabi_ddiv+0x3d0>
    2e32:	e08e      	b.n	2f52 <__aeabi_ddiv+0x4ee>
    2e34:	2301      	movs	r3, #1
    2e36:	4319      	orrs	r1, r3
    2e38:	4ba0      	ldr	r3, [pc, #640]	; (30bc <__aeabi_ddiv+0x658>)
    2e3a:	18e3      	adds	r3, r4, r3
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	dc00      	bgt.n	2e42 <__aeabi_ddiv+0x3de>
    2e40:	e099      	b.n	2f76 <__aeabi_ddiv+0x512>
    2e42:	074a      	lsls	r2, r1, #29
    2e44:	d000      	beq.n	2e48 <__aeabi_ddiv+0x3e4>
    2e46:	e09e      	b.n	2f86 <__aeabi_ddiv+0x522>
    2e48:	465a      	mov	r2, fp
    2e4a:	01d2      	lsls	r2, r2, #7
    2e4c:	d506      	bpl.n	2e5c <__aeabi_ddiv+0x3f8>
    2e4e:	465a      	mov	r2, fp
    2e50:	4b9b      	ldr	r3, [pc, #620]	; (30c0 <__aeabi_ddiv+0x65c>)
    2e52:	401a      	ands	r2, r3
    2e54:	2380      	movs	r3, #128	; 0x80
    2e56:	4693      	mov	fp, r2
    2e58:	00db      	lsls	r3, r3, #3
    2e5a:	18e3      	adds	r3, r4, r3
    2e5c:	4a99      	ldr	r2, [pc, #612]	; (30c4 <__aeabi_ddiv+0x660>)
    2e5e:	4293      	cmp	r3, r2
    2e60:	dd68      	ble.n	2f34 <__aeabi_ddiv+0x4d0>
    2e62:	2301      	movs	r3, #1
    2e64:	9a02      	ldr	r2, [sp, #8]
    2e66:	4c98      	ldr	r4, [pc, #608]	; (30c8 <__aeabi_ddiv+0x664>)
    2e68:	401a      	ands	r2, r3
    2e6a:	2300      	movs	r3, #0
    2e6c:	4694      	mov	ip, r2
    2e6e:	4698      	mov	r8, r3
    2e70:	2200      	movs	r2, #0
    2e72:	e6c5      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2e74:	2280      	movs	r2, #128	; 0x80
    2e76:	464b      	mov	r3, r9
    2e78:	0312      	lsls	r2, r2, #12
    2e7a:	4213      	tst	r3, r2
    2e7c:	d00a      	beq.n	2e94 <__aeabi_ddiv+0x430>
    2e7e:	465b      	mov	r3, fp
    2e80:	4213      	tst	r3, r2
    2e82:	d106      	bne.n	2e92 <__aeabi_ddiv+0x42e>
    2e84:	431a      	orrs	r2, r3
    2e86:	0312      	lsls	r2, r2, #12
    2e88:	0b12      	lsrs	r2, r2, #12
    2e8a:	46ac      	mov	ip, r5
    2e8c:	4688      	mov	r8, r1
    2e8e:	4c8e      	ldr	r4, [pc, #568]	; (30c8 <__aeabi_ddiv+0x664>)
    2e90:	e6b6      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2e92:	464b      	mov	r3, r9
    2e94:	431a      	orrs	r2, r3
    2e96:	0312      	lsls	r2, r2, #12
    2e98:	0b12      	lsrs	r2, r2, #12
    2e9a:	46bc      	mov	ip, r7
    2e9c:	4c8a      	ldr	r4, [pc, #552]	; (30c8 <__aeabi_ddiv+0x664>)
    2e9e:	e6af      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2ea0:	0003      	movs	r3, r0
    2ea2:	465a      	mov	r2, fp
    2ea4:	3b28      	subs	r3, #40	; 0x28
    2ea6:	409a      	lsls	r2, r3
    2ea8:	2300      	movs	r3, #0
    2eaa:	4691      	mov	r9, r2
    2eac:	4698      	mov	r8, r3
    2eae:	e657      	b.n	2b60 <__aeabi_ddiv+0xfc>
    2eb0:	4658      	mov	r0, fp
    2eb2:	f001 f84f 	bl	3f54 <__clzsi2>
    2eb6:	3020      	adds	r0, #32
    2eb8:	e640      	b.n	2b3c <__aeabi_ddiv+0xd8>
    2eba:	0003      	movs	r3, r0
    2ebc:	4652      	mov	r2, sl
    2ebe:	3b28      	subs	r3, #40	; 0x28
    2ec0:	409a      	lsls	r2, r3
    2ec2:	2100      	movs	r1, #0
    2ec4:	4693      	mov	fp, r2
    2ec6:	e677      	b.n	2bb8 <__aeabi_ddiv+0x154>
    2ec8:	f001 f844 	bl	3f54 <__clzsi2>
    2ecc:	3020      	adds	r0, #32
    2ece:	e65f      	b.n	2b90 <__aeabi_ddiv+0x12c>
    2ed0:	4588      	cmp	r8, r1
    2ed2:	d200      	bcs.n	2ed6 <__aeabi_ddiv+0x472>
    2ed4:	e6c7      	b.n	2c66 <__aeabi_ddiv+0x202>
    2ed6:	464b      	mov	r3, r9
    2ed8:	07de      	lsls	r6, r3, #31
    2eda:	085d      	lsrs	r5, r3, #1
    2edc:	4643      	mov	r3, r8
    2ede:	085b      	lsrs	r3, r3, #1
    2ee0:	431e      	orrs	r6, r3
    2ee2:	4643      	mov	r3, r8
    2ee4:	07db      	lsls	r3, r3, #31
    2ee6:	469a      	mov	sl, r3
    2ee8:	e6c2      	b.n	2c70 <__aeabi_ddiv+0x20c>
    2eea:	2500      	movs	r5, #0
    2eec:	4592      	cmp	sl, r2
    2eee:	d300      	bcc.n	2ef2 <__aeabi_ddiv+0x48e>
    2ef0:	e733      	b.n	2d5a <__aeabi_ddiv+0x2f6>
    2ef2:	9e03      	ldr	r6, [sp, #12]
    2ef4:	4659      	mov	r1, fp
    2ef6:	46b4      	mov	ip, r6
    2ef8:	44e2      	add	sl, ip
    2efa:	45b2      	cmp	sl, r6
    2efc:	41ad      	sbcs	r5, r5
    2efe:	426d      	negs	r5, r5
    2f00:	4445      	add	r5, r8
    2f02:	18eb      	adds	r3, r5, r3
    2f04:	3901      	subs	r1, #1
    2f06:	4598      	cmp	r8, r3
    2f08:	d207      	bcs.n	2f1a <__aeabi_ddiv+0x4b6>
    2f0a:	4298      	cmp	r0, r3
    2f0c:	d900      	bls.n	2f10 <__aeabi_ddiv+0x4ac>
    2f0e:	e07f      	b.n	3010 <__aeabi_ddiv+0x5ac>
    2f10:	d100      	bne.n	2f14 <__aeabi_ddiv+0x4b0>
    2f12:	e0bc      	b.n	308e <__aeabi_ddiv+0x62a>
    2f14:	1a1d      	subs	r5, r3, r0
    2f16:	468b      	mov	fp, r1
    2f18:	e71f      	b.n	2d5a <__aeabi_ddiv+0x2f6>
    2f1a:	4598      	cmp	r8, r3
    2f1c:	d1fa      	bne.n	2f14 <__aeabi_ddiv+0x4b0>
    2f1e:	9d03      	ldr	r5, [sp, #12]
    2f20:	4555      	cmp	r5, sl
    2f22:	d9f2      	bls.n	2f0a <__aeabi_ddiv+0x4a6>
    2f24:	4643      	mov	r3, r8
    2f26:	468b      	mov	fp, r1
    2f28:	1a1d      	subs	r5, r3, r0
    2f2a:	e716      	b.n	2d5a <__aeabi_ddiv+0x2f6>
    2f2c:	469b      	mov	fp, r3
    2f2e:	e6ca      	b.n	2cc6 <__aeabi_ddiv+0x262>
    2f30:	0015      	movs	r5, r2
    2f32:	e6e7      	b.n	2d04 <__aeabi_ddiv+0x2a0>
    2f34:	465a      	mov	r2, fp
    2f36:	08c9      	lsrs	r1, r1, #3
    2f38:	0752      	lsls	r2, r2, #29
    2f3a:	430a      	orrs	r2, r1
    2f3c:	055b      	lsls	r3, r3, #21
    2f3e:	4690      	mov	r8, r2
    2f40:	0d5c      	lsrs	r4, r3, #21
    2f42:	465a      	mov	r2, fp
    2f44:	2301      	movs	r3, #1
    2f46:	9902      	ldr	r1, [sp, #8]
    2f48:	0252      	lsls	r2, r2, #9
    2f4a:	4019      	ands	r1, r3
    2f4c:	0b12      	lsrs	r2, r2, #12
    2f4e:	468c      	mov	ip, r1
    2f50:	e656      	b.n	2c00 <__aeabi_ddiv+0x19c>
    2f52:	2b00      	cmp	r3, #0
    2f54:	d100      	bne.n	2f58 <__aeabi_ddiv+0x4f4>
    2f56:	e76f      	b.n	2e38 <__aeabi_ddiv+0x3d4>
    2f58:	4446      	add	r6, r8
    2f5a:	1e4a      	subs	r2, r1, #1
    2f5c:	45b0      	cmp	r8, r6
    2f5e:	d929      	bls.n	2fb4 <__aeabi_ddiv+0x550>
    2f60:	0011      	movs	r1, r2
    2f62:	4286      	cmp	r6, r0
    2f64:	d000      	beq.n	2f68 <__aeabi_ddiv+0x504>
    2f66:	e765      	b.n	2e34 <__aeabi_ddiv+0x3d0>
    2f68:	9a03      	ldr	r2, [sp, #12]
    2f6a:	4293      	cmp	r3, r2
    2f6c:	d000      	beq.n	2f70 <__aeabi_ddiv+0x50c>
    2f6e:	e761      	b.n	2e34 <__aeabi_ddiv+0x3d0>
    2f70:	e762      	b.n	2e38 <__aeabi_ddiv+0x3d4>
    2f72:	2101      	movs	r1, #1
    2f74:	4249      	negs	r1, r1
    2f76:	2001      	movs	r0, #1
    2f78:	1ac2      	subs	r2, r0, r3
    2f7a:	2a38      	cmp	r2, #56	; 0x38
    2f7c:	dd21      	ble.n	2fc2 <__aeabi_ddiv+0x55e>
    2f7e:	9b02      	ldr	r3, [sp, #8]
    2f80:	4003      	ands	r3, r0
    2f82:	469c      	mov	ip, r3
    2f84:	e638      	b.n	2bf8 <__aeabi_ddiv+0x194>
    2f86:	220f      	movs	r2, #15
    2f88:	400a      	ands	r2, r1
    2f8a:	2a04      	cmp	r2, #4
    2f8c:	d100      	bne.n	2f90 <__aeabi_ddiv+0x52c>
    2f8e:	e75b      	b.n	2e48 <__aeabi_ddiv+0x3e4>
    2f90:	000a      	movs	r2, r1
    2f92:	1d11      	adds	r1, r2, #4
    2f94:	4291      	cmp	r1, r2
    2f96:	4192      	sbcs	r2, r2
    2f98:	4252      	negs	r2, r2
    2f9a:	4493      	add	fp, r2
    2f9c:	e754      	b.n	2e48 <__aeabi_ddiv+0x3e4>
    2f9e:	4b47      	ldr	r3, [pc, #284]	; (30bc <__aeabi_ddiv+0x658>)
    2fa0:	18e3      	adds	r3, r4, r3
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	dde5      	ble.n	2f72 <__aeabi_ddiv+0x50e>
    2fa6:	2201      	movs	r2, #1
    2fa8:	4252      	negs	r2, r2
    2faa:	e7f2      	b.n	2f92 <__aeabi_ddiv+0x52e>
    2fac:	001d      	movs	r5, r3
    2fae:	e6fa      	b.n	2da6 <__aeabi_ddiv+0x342>
    2fb0:	469a      	mov	sl, r3
    2fb2:	e71c      	b.n	2dee <__aeabi_ddiv+0x38a>
    2fb4:	42b0      	cmp	r0, r6
    2fb6:	d839      	bhi.n	302c <__aeabi_ddiv+0x5c8>
    2fb8:	d06e      	beq.n	3098 <__aeabi_ddiv+0x634>
    2fba:	0011      	movs	r1, r2
    2fbc:	e73a      	b.n	2e34 <__aeabi_ddiv+0x3d0>
    2fbe:	9302      	str	r3, [sp, #8]
    2fc0:	e73a      	b.n	2e38 <__aeabi_ddiv+0x3d4>
    2fc2:	2a1f      	cmp	r2, #31
    2fc4:	dc3c      	bgt.n	3040 <__aeabi_ddiv+0x5dc>
    2fc6:	2320      	movs	r3, #32
    2fc8:	1a9b      	subs	r3, r3, r2
    2fca:	000c      	movs	r4, r1
    2fcc:	4658      	mov	r0, fp
    2fce:	4099      	lsls	r1, r3
    2fd0:	4098      	lsls	r0, r3
    2fd2:	1e4b      	subs	r3, r1, #1
    2fd4:	4199      	sbcs	r1, r3
    2fd6:	465b      	mov	r3, fp
    2fd8:	40d4      	lsrs	r4, r2
    2fda:	40d3      	lsrs	r3, r2
    2fdc:	4320      	orrs	r0, r4
    2fde:	4308      	orrs	r0, r1
    2fe0:	001a      	movs	r2, r3
    2fe2:	0743      	lsls	r3, r0, #29
    2fe4:	d009      	beq.n	2ffa <__aeabi_ddiv+0x596>
    2fe6:	230f      	movs	r3, #15
    2fe8:	4003      	ands	r3, r0
    2fea:	2b04      	cmp	r3, #4
    2fec:	d005      	beq.n	2ffa <__aeabi_ddiv+0x596>
    2fee:	0001      	movs	r1, r0
    2ff0:	1d08      	adds	r0, r1, #4
    2ff2:	4288      	cmp	r0, r1
    2ff4:	419b      	sbcs	r3, r3
    2ff6:	425b      	negs	r3, r3
    2ff8:	18d2      	adds	r2, r2, r3
    2ffa:	0213      	lsls	r3, r2, #8
    2ffc:	d53a      	bpl.n	3074 <__aeabi_ddiv+0x610>
    2ffe:	2301      	movs	r3, #1
    3000:	9a02      	ldr	r2, [sp, #8]
    3002:	2401      	movs	r4, #1
    3004:	401a      	ands	r2, r3
    3006:	2300      	movs	r3, #0
    3008:	4694      	mov	ip, r2
    300a:	4698      	mov	r8, r3
    300c:	2200      	movs	r2, #0
    300e:	e5f7      	b.n	2c00 <__aeabi_ddiv+0x19c>
    3010:	2102      	movs	r1, #2
    3012:	4249      	negs	r1, r1
    3014:	468c      	mov	ip, r1
    3016:	9d03      	ldr	r5, [sp, #12]
    3018:	44e3      	add	fp, ip
    301a:	46ac      	mov	ip, r5
    301c:	44e2      	add	sl, ip
    301e:	45aa      	cmp	sl, r5
    3020:	41ad      	sbcs	r5, r5
    3022:	426d      	negs	r5, r5
    3024:	4445      	add	r5, r8
    3026:	18ed      	adds	r5, r5, r3
    3028:	1a2d      	subs	r5, r5, r0
    302a:	e696      	b.n	2d5a <__aeabi_ddiv+0x2f6>
    302c:	1e8a      	subs	r2, r1, #2
    302e:	9903      	ldr	r1, [sp, #12]
    3030:	004d      	lsls	r5, r1, #1
    3032:	428d      	cmp	r5, r1
    3034:	4189      	sbcs	r1, r1
    3036:	4249      	negs	r1, r1
    3038:	4441      	add	r1, r8
    303a:	1876      	adds	r6, r6, r1
    303c:	9503      	str	r5, [sp, #12]
    303e:	e78f      	b.n	2f60 <__aeabi_ddiv+0x4fc>
    3040:	201f      	movs	r0, #31
    3042:	4240      	negs	r0, r0
    3044:	1ac3      	subs	r3, r0, r3
    3046:	4658      	mov	r0, fp
    3048:	40d8      	lsrs	r0, r3
    304a:	0003      	movs	r3, r0
    304c:	2a20      	cmp	r2, #32
    304e:	d028      	beq.n	30a2 <__aeabi_ddiv+0x63e>
    3050:	2040      	movs	r0, #64	; 0x40
    3052:	465d      	mov	r5, fp
    3054:	1a82      	subs	r2, r0, r2
    3056:	4095      	lsls	r5, r2
    3058:	4329      	orrs	r1, r5
    305a:	1e4a      	subs	r2, r1, #1
    305c:	4191      	sbcs	r1, r2
    305e:	4319      	orrs	r1, r3
    3060:	2307      	movs	r3, #7
    3062:	2200      	movs	r2, #0
    3064:	400b      	ands	r3, r1
    3066:	d009      	beq.n	307c <__aeabi_ddiv+0x618>
    3068:	230f      	movs	r3, #15
    306a:	2200      	movs	r2, #0
    306c:	400b      	ands	r3, r1
    306e:	0008      	movs	r0, r1
    3070:	2b04      	cmp	r3, #4
    3072:	d1bd      	bne.n	2ff0 <__aeabi_ddiv+0x58c>
    3074:	0001      	movs	r1, r0
    3076:	0753      	lsls	r3, r2, #29
    3078:	0252      	lsls	r2, r2, #9
    307a:	0b12      	lsrs	r2, r2, #12
    307c:	08c9      	lsrs	r1, r1, #3
    307e:	4319      	orrs	r1, r3
    3080:	2301      	movs	r3, #1
    3082:	4688      	mov	r8, r1
    3084:	9902      	ldr	r1, [sp, #8]
    3086:	2400      	movs	r4, #0
    3088:	4019      	ands	r1, r3
    308a:	468c      	mov	ip, r1
    308c:	e5b8      	b.n	2c00 <__aeabi_ddiv+0x19c>
    308e:	4552      	cmp	r2, sl
    3090:	d8be      	bhi.n	3010 <__aeabi_ddiv+0x5ac>
    3092:	468b      	mov	fp, r1
    3094:	2500      	movs	r5, #0
    3096:	e660      	b.n	2d5a <__aeabi_ddiv+0x2f6>
    3098:	9d03      	ldr	r5, [sp, #12]
    309a:	429d      	cmp	r5, r3
    309c:	d3c6      	bcc.n	302c <__aeabi_ddiv+0x5c8>
    309e:	0011      	movs	r1, r2
    30a0:	e762      	b.n	2f68 <__aeabi_ddiv+0x504>
    30a2:	2500      	movs	r5, #0
    30a4:	e7d8      	b.n	3058 <__aeabi_ddiv+0x5f4>
    30a6:	2280      	movs	r2, #128	; 0x80
    30a8:	465b      	mov	r3, fp
    30aa:	0312      	lsls	r2, r2, #12
    30ac:	431a      	orrs	r2, r3
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	0312      	lsls	r2, r2, #12
    30b2:	0b12      	lsrs	r2, r2, #12
    30b4:	469c      	mov	ip, r3
    30b6:	4688      	mov	r8, r1
    30b8:	4c03      	ldr	r4, [pc, #12]	; (30c8 <__aeabi_ddiv+0x664>)
    30ba:	e5a1      	b.n	2c00 <__aeabi_ddiv+0x19c>
    30bc:	000003ff 	.word	0x000003ff
    30c0:	feffffff 	.word	0xfeffffff
    30c4:	000007fe 	.word	0x000007fe
    30c8:	000007ff 	.word	0x000007ff

000030cc <__eqdf2>:
    30cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ce:	464f      	mov	r7, r9
    30d0:	4646      	mov	r6, r8
    30d2:	46d6      	mov	lr, sl
    30d4:	005c      	lsls	r4, r3, #1
    30d6:	b5c0      	push	{r6, r7, lr}
    30d8:	031f      	lsls	r7, r3, #12
    30da:	0fdb      	lsrs	r3, r3, #31
    30dc:	469a      	mov	sl, r3
    30de:	4b17      	ldr	r3, [pc, #92]	; (313c <__eqdf2+0x70>)
    30e0:	030e      	lsls	r6, r1, #12
    30e2:	004d      	lsls	r5, r1, #1
    30e4:	4684      	mov	ip, r0
    30e6:	4680      	mov	r8, r0
    30e8:	0b36      	lsrs	r6, r6, #12
    30ea:	0d6d      	lsrs	r5, r5, #21
    30ec:	0fc9      	lsrs	r1, r1, #31
    30ee:	4691      	mov	r9, r2
    30f0:	0b3f      	lsrs	r7, r7, #12
    30f2:	0d64      	lsrs	r4, r4, #21
    30f4:	2001      	movs	r0, #1
    30f6:	429d      	cmp	r5, r3
    30f8:	d008      	beq.n	310c <__eqdf2+0x40>
    30fa:	429c      	cmp	r4, r3
    30fc:	d001      	beq.n	3102 <__eqdf2+0x36>
    30fe:	42a5      	cmp	r5, r4
    3100:	d00b      	beq.n	311a <__eqdf2+0x4e>
    3102:	bc1c      	pop	{r2, r3, r4}
    3104:	4690      	mov	r8, r2
    3106:	4699      	mov	r9, r3
    3108:	46a2      	mov	sl, r4
    310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    310c:	4663      	mov	r3, ip
    310e:	4333      	orrs	r3, r6
    3110:	d1f7      	bne.n	3102 <__eqdf2+0x36>
    3112:	42ac      	cmp	r4, r5
    3114:	d1f5      	bne.n	3102 <__eqdf2+0x36>
    3116:	433a      	orrs	r2, r7
    3118:	d1f3      	bne.n	3102 <__eqdf2+0x36>
    311a:	2001      	movs	r0, #1
    311c:	42be      	cmp	r6, r7
    311e:	d1f0      	bne.n	3102 <__eqdf2+0x36>
    3120:	45c8      	cmp	r8, r9
    3122:	d1ee      	bne.n	3102 <__eqdf2+0x36>
    3124:	4551      	cmp	r1, sl
    3126:	d007      	beq.n	3138 <__eqdf2+0x6c>
    3128:	2d00      	cmp	r5, #0
    312a:	d1ea      	bne.n	3102 <__eqdf2+0x36>
    312c:	4663      	mov	r3, ip
    312e:	431e      	orrs	r6, r3
    3130:	0030      	movs	r0, r6
    3132:	1e46      	subs	r6, r0, #1
    3134:	41b0      	sbcs	r0, r6
    3136:	e7e4      	b.n	3102 <__eqdf2+0x36>
    3138:	2000      	movs	r0, #0
    313a:	e7e2      	b.n	3102 <__eqdf2+0x36>
    313c:	000007ff 	.word	0x000007ff

00003140 <__gedf2>:
    3140:	b5f0      	push	{r4, r5, r6, r7, lr}
    3142:	4645      	mov	r5, r8
    3144:	46de      	mov	lr, fp
    3146:	4657      	mov	r7, sl
    3148:	464e      	mov	r6, r9
    314a:	b5e0      	push	{r5, r6, r7, lr}
    314c:	031f      	lsls	r7, r3, #12
    314e:	0b3d      	lsrs	r5, r7, #12
    3150:	4f2c      	ldr	r7, [pc, #176]	; (3204 <__gedf2+0xc4>)
    3152:	030e      	lsls	r6, r1, #12
    3154:	004c      	lsls	r4, r1, #1
    3156:	46ab      	mov	fp, r5
    3158:	005d      	lsls	r5, r3, #1
    315a:	4684      	mov	ip, r0
    315c:	0b36      	lsrs	r6, r6, #12
    315e:	0d64      	lsrs	r4, r4, #21
    3160:	0fc9      	lsrs	r1, r1, #31
    3162:	4690      	mov	r8, r2
    3164:	0d6d      	lsrs	r5, r5, #21
    3166:	0fdb      	lsrs	r3, r3, #31
    3168:	42bc      	cmp	r4, r7
    316a:	d02a      	beq.n	31c2 <__gedf2+0x82>
    316c:	4f25      	ldr	r7, [pc, #148]	; (3204 <__gedf2+0xc4>)
    316e:	42bd      	cmp	r5, r7
    3170:	d02d      	beq.n	31ce <__gedf2+0x8e>
    3172:	2c00      	cmp	r4, #0
    3174:	d10f      	bne.n	3196 <__gedf2+0x56>
    3176:	4330      	orrs	r0, r6
    3178:	0007      	movs	r7, r0
    317a:	4681      	mov	r9, r0
    317c:	4278      	negs	r0, r7
    317e:	4178      	adcs	r0, r7
    3180:	b2c0      	uxtb	r0, r0
    3182:	2d00      	cmp	r5, #0
    3184:	d117      	bne.n	31b6 <__gedf2+0x76>
    3186:	465f      	mov	r7, fp
    3188:	433a      	orrs	r2, r7
    318a:	d114      	bne.n	31b6 <__gedf2+0x76>
    318c:	464b      	mov	r3, r9
    318e:	2000      	movs	r0, #0
    3190:	2b00      	cmp	r3, #0
    3192:	d00a      	beq.n	31aa <__gedf2+0x6a>
    3194:	e006      	b.n	31a4 <__gedf2+0x64>
    3196:	2d00      	cmp	r5, #0
    3198:	d102      	bne.n	31a0 <__gedf2+0x60>
    319a:	4658      	mov	r0, fp
    319c:	4302      	orrs	r2, r0
    319e:	d001      	beq.n	31a4 <__gedf2+0x64>
    31a0:	4299      	cmp	r1, r3
    31a2:	d018      	beq.n	31d6 <__gedf2+0x96>
    31a4:	4248      	negs	r0, r1
    31a6:	2101      	movs	r1, #1
    31a8:	4308      	orrs	r0, r1
    31aa:	bc3c      	pop	{r2, r3, r4, r5}
    31ac:	4690      	mov	r8, r2
    31ae:	4699      	mov	r9, r3
    31b0:	46a2      	mov	sl, r4
    31b2:	46ab      	mov	fp, r5
    31b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b6:	2800      	cmp	r0, #0
    31b8:	d0f2      	beq.n	31a0 <__gedf2+0x60>
    31ba:	2001      	movs	r0, #1
    31bc:	3b01      	subs	r3, #1
    31be:	4318      	orrs	r0, r3
    31c0:	e7f3      	b.n	31aa <__gedf2+0x6a>
    31c2:	0037      	movs	r7, r6
    31c4:	4307      	orrs	r7, r0
    31c6:	d0d1      	beq.n	316c <__gedf2+0x2c>
    31c8:	2002      	movs	r0, #2
    31ca:	4240      	negs	r0, r0
    31cc:	e7ed      	b.n	31aa <__gedf2+0x6a>
    31ce:	465f      	mov	r7, fp
    31d0:	4317      	orrs	r7, r2
    31d2:	d0ce      	beq.n	3172 <__gedf2+0x32>
    31d4:	e7f8      	b.n	31c8 <__gedf2+0x88>
    31d6:	42ac      	cmp	r4, r5
    31d8:	dce4      	bgt.n	31a4 <__gedf2+0x64>
    31da:	da03      	bge.n	31e4 <__gedf2+0xa4>
    31dc:	1e48      	subs	r0, r1, #1
    31de:	2101      	movs	r1, #1
    31e0:	4308      	orrs	r0, r1
    31e2:	e7e2      	b.n	31aa <__gedf2+0x6a>
    31e4:	455e      	cmp	r6, fp
    31e6:	d8dd      	bhi.n	31a4 <__gedf2+0x64>
    31e8:	d006      	beq.n	31f8 <__gedf2+0xb8>
    31ea:	2000      	movs	r0, #0
    31ec:	455e      	cmp	r6, fp
    31ee:	d2dc      	bcs.n	31aa <__gedf2+0x6a>
    31f0:	2301      	movs	r3, #1
    31f2:	1e48      	subs	r0, r1, #1
    31f4:	4318      	orrs	r0, r3
    31f6:	e7d8      	b.n	31aa <__gedf2+0x6a>
    31f8:	45c4      	cmp	ip, r8
    31fa:	d8d3      	bhi.n	31a4 <__gedf2+0x64>
    31fc:	2000      	movs	r0, #0
    31fe:	45c4      	cmp	ip, r8
    3200:	d3f6      	bcc.n	31f0 <__gedf2+0xb0>
    3202:	e7d2      	b.n	31aa <__gedf2+0x6a>
    3204:	000007ff 	.word	0x000007ff

00003208 <__ledf2>:
    3208:	b5f0      	push	{r4, r5, r6, r7, lr}
    320a:	464e      	mov	r6, r9
    320c:	4645      	mov	r5, r8
    320e:	46de      	mov	lr, fp
    3210:	4657      	mov	r7, sl
    3212:	005c      	lsls	r4, r3, #1
    3214:	b5e0      	push	{r5, r6, r7, lr}
    3216:	031f      	lsls	r7, r3, #12
    3218:	0fdb      	lsrs	r3, r3, #31
    321a:	4699      	mov	r9, r3
    321c:	4b2a      	ldr	r3, [pc, #168]	; (32c8 <__ledf2+0xc0>)
    321e:	030e      	lsls	r6, r1, #12
    3220:	004d      	lsls	r5, r1, #1
    3222:	0fc9      	lsrs	r1, r1, #31
    3224:	4684      	mov	ip, r0
    3226:	0b36      	lsrs	r6, r6, #12
    3228:	0d6d      	lsrs	r5, r5, #21
    322a:	468b      	mov	fp, r1
    322c:	4690      	mov	r8, r2
    322e:	0b3f      	lsrs	r7, r7, #12
    3230:	0d64      	lsrs	r4, r4, #21
    3232:	429d      	cmp	r5, r3
    3234:	d020      	beq.n	3278 <__ledf2+0x70>
    3236:	4b24      	ldr	r3, [pc, #144]	; (32c8 <__ledf2+0xc0>)
    3238:	429c      	cmp	r4, r3
    323a:	d022      	beq.n	3282 <__ledf2+0x7a>
    323c:	2d00      	cmp	r5, #0
    323e:	d112      	bne.n	3266 <__ledf2+0x5e>
    3240:	4330      	orrs	r0, r6
    3242:	4243      	negs	r3, r0
    3244:	4143      	adcs	r3, r0
    3246:	b2db      	uxtb	r3, r3
    3248:	2c00      	cmp	r4, #0
    324a:	d01f      	beq.n	328c <__ledf2+0x84>
    324c:	2b00      	cmp	r3, #0
    324e:	d00c      	beq.n	326a <__ledf2+0x62>
    3250:	464b      	mov	r3, r9
    3252:	2001      	movs	r0, #1
    3254:	3b01      	subs	r3, #1
    3256:	4303      	orrs	r3, r0
    3258:	0018      	movs	r0, r3
    325a:	bc3c      	pop	{r2, r3, r4, r5}
    325c:	4690      	mov	r8, r2
    325e:	4699      	mov	r9, r3
    3260:	46a2      	mov	sl, r4
    3262:	46ab      	mov	fp, r5
    3264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3266:	2c00      	cmp	r4, #0
    3268:	d016      	beq.n	3298 <__ledf2+0x90>
    326a:	45cb      	cmp	fp, r9
    326c:	d017      	beq.n	329e <__ledf2+0x96>
    326e:	465b      	mov	r3, fp
    3270:	4259      	negs	r1, r3
    3272:	2301      	movs	r3, #1
    3274:	430b      	orrs	r3, r1
    3276:	e7ef      	b.n	3258 <__ledf2+0x50>
    3278:	0031      	movs	r1, r6
    327a:	2302      	movs	r3, #2
    327c:	4301      	orrs	r1, r0
    327e:	d1eb      	bne.n	3258 <__ledf2+0x50>
    3280:	e7d9      	b.n	3236 <__ledf2+0x2e>
    3282:	0039      	movs	r1, r7
    3284:	2302      	movs	r3, #2
    3286:	4311      	orrs	r1, r2
    3288:	d1e6      	bne.n	3258 <__ledf2+0x50>
    328a:	e7d7      	b.n	323c <__ledf2+0x34>
    328c:	433a      	orrs	r2, r7
    328e:	d1dd      	bne.n	324c <__ledf2+0x44>
    3290:	2300      	movs	r3, #0
    3292:	2800      	cmp	r0, #0
    3294:	d0e0      	beq.n	3258 <__ledf2+0x50>
    3296:	e7ea      	b.n	326e <__ledf2+0x66>
    3298:	433a      	orrs	r2, r7
    329a:	d1e6      	bne.n	326a <__ledf2+0x62>
    329c:	e7e7      	b.n	326e <__ledf2+0x66>
    329e:	42a5      	cmp	r5, r4
    32a0:	dce5      	bgt.n	326e <__ledf2+0x66>
    32a2:	db05      	blt.n	32b0 <__ledf2+0xa8>
    32a4:	42be      	cmp	r6, r7
    32a6:	d8e2      	bhi.n	326e <__ledf2+0x66>
    32a8:	d007      	beq.n	32ba <__ledf2+0xb2>
    32aa:	2300      	movs	r3, #0
    32ac:	42be      	cmp	r6, r7
    32ae:	d2d3      	bcs.n	3258 <__ledf2+0x50>
    32b0:	4659      	mov	r1, fp
    32b2:	2301      	movs	r3, #1
    32b4:	3901      	subs	r1, #1
    32b6:	430b      	orrs	r3, r1
    32b8:	e7ce      	b.n	3258 <__ledf2+0x50>
    32ba:	45c4      	cmp	ip, r8
    32bc:	d8d7      	bhi.n	326e <__ledf2+0x66>
    32be:	2300      	movs	r3, #0
    32c0:	45c4      	cmp	ip, r8
    32c2:	d3f5      	bcc.n	32b0 <__ledf2+0xa8>
    32c4:	e7c8      	b.n	3258 <__ledf2+0x50>
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	000007ff 	.word	0x000007ff

000032cc <__aeabi_dmul>:
    32cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ce:	4657      	mov	r7, sl
    32d0:	4645      	mov	r5, r8
    32d2:	46de      	mov	lr, fp
    32d4:	464e      	mov	r6, r9
    32d6:	b5e0      	push	{r5, r6, r7, lr}
    32d8:	030c      	lsls	r4, r1, #12
    32da:	4698      	mov	r8, r3
    32dc:	004e      	lsls	r6, r1, #1
    32de:	0b23      	lsrs	r3, r4, #12
    32e0:	b087      	sub	sp, #28
    32e2:	0007      	movs	r7, r0
    32e4:	4692      	mov	sl, r2
    32e6:	469b      	mov	fp, r3
    32e8:	0d76      	lsrs	r6, r6, #21
    32ea:	0fcd      	lsrs	r5, r1, #31
    32ec:	2e00      	cmp	r6, #0
    32ee:	d06b      	beq.n	33c8 <__aeabi_dmul+0xfc>
    32f0:	4b6d      	ldr	r3, [pc, #436]	; (34a8 <__aeabi_dmul+0x1dc>)
    32f2:	429e      	cmp	r6, r3
    32f4:	d035      	beq.n	3362 <__aeabi_dmul+0x96>
    32f6:	2480      	movs	r4, #128	; 0x80
    32f8:	465b      	mov	r3, fp
    32fa:	0f42      	lsrs	r2, r0, #29
    32fc:	0424      	lsls	r4, r4, #16
    32fe:	00db      	lsls	r3, r3, #3
    3300:	4314      	orrs	r4, r2
    3302:	431c      	orrs	r4, r3
    3304:	00c3      	lsls	r3, r0, #3
    3306:	4699      	mov	r9, r3
    3308:	4b68      	ldr	r3, [pc, #416]	; (34ac <__aeabi_dmul+0x1e0>)
    330a:	46a3      	mov	fp, r4
    330c:	469c      	mov	ip, r3
    330e:	2300      	movs	r3, #0
    3310:	2700      	movs	r7, #0
    3312:	4466      	add	r6, ip
    3314:	9302      	str	r3, [sp, #8]
    3316:	4643      	mov	r3, r8
    3318:	031c      	lsls	r4, r3, #12
    331a:	005a      	lsls	r2, r3, #1
    331c:	0fdb      	lsrs	r3, r3, #31
    331e:	4650      	mov	r0, sl
    3320:	0b24      	lsrs	r4, r4, #12
    3322:	0d52      	lsrs	r2, r2, #21
    3324:	4698      	mov	r8, r3
    3326:	d100      	bne.n	332a <__aeabi_dmul+0x5e>
    3328:	e076      	b.n	3418 <__aeabi_dmul+0x14c>
    332a:	4b5f      	ldr	r3, [pc, #380]	; (34a8 <__aeabi_dmul+0x1dc>)
    332c:	429a      	cmp	r2, r3
    332e:	d06d      	beq.n	340c <__aeabi_dmul+0x140>
    3330:	2380      	movs	r3, #128	; 0x80
    3332:	0f41      	lsrs	r1, r0, #29
    3334:	041b      	lsls	r3, r3, #16
    3336:	430b      	orrs	r3, r1
    3338:	495c      	ldr	r1, [pc, #368]	; (34ac <__aeabi_dmul+0x1e0>)
    333a:	00e4      	lsls	r4, r4, #3
    333c:	468c      	mov	ip, r1
    333e:	431c      	orrs	r4, r3
    3340:	00c3      	lsls	r3, r0, #3
    3342:	2000      	movs	r0, #0
    3344:	4462      	add	r2, ip
    3346:	4641      	mov	r1, r8
    3348:	18b6      	adds	r6, r6, r2
    334a:	4069      	eors	r1, r5
    334c:	1c72      	adds	r2, r6, #1
    334e:	9101      	str	r1, [sp, #4]
    3350:	4694      	mov	ip, r2
    3352:	4307      	orrs	r7, r0
    3354:	2f0f      	cmp	r7, #15
    3356:	d900      	bls.n	335a <__aeabi_dmul+0x8e>
    3358:	e0b0      	b.n	34bc <__aeabi_dmul+0x1f0>
    335a:	4a55      	ldr	r2, [pc, #340]	; (34b0 <__aeabi_dmul+0x1e4>)
    335c:	00bf      	lsls	r7, r7, #2
    335e:	59d2      	ldr	r2, [r2, r7]
    3360:	4697      	mov	pc, r2
    3362:	465b      	mov	r3, fp
    3364:	4303      	orrs	r3, r0
    3366:	4699      	mov	r9, r3
    3368:	d000      	beq.n	336c <__aeabi_dmul+0xa0>
    336a:	e087      	b.n	347c <__aeabi_dmul+0x1b0>
    336c:	2300      	movs	r3, #0
    336e:	469b      	mov	fp, r3
    3370:	3302      	adds	r3, #2
    3372:	2708      	movs	r7, #8
    3374:	9302      	str	r3, [sp, #8]
    3376:	e7ce      	b.n	3316 <__aeabi_dmul+0x4a>
    3378:	4642      	mov	r2, r8
    337a:	9201      	str	r2, [sp, #4]
    337c:	2802      	cmp	r0, #2
    337e:	d067      	beq.n	3450 <__aeabi_dmul+0x184>
    3380:	2803      	cmp	r0, #3
    3382:	d100      	bne.n	3386 <__aeabi_dmul+0xba>
    3384:	e20e      	b.n	37a4 <__aeabi_dmul+0x4d8>
    3386:	2801      	cmp	r0, #1
    3388:	d000      	beq.n	338c <__aeabi_dmul+0xc0>
    338a:	e162      	b.n	3652 <__aeabi_dmul+0x386>
    338c:	2300      	movs	r3, #0
    338e:	2400      	movs	r4, #0
    3390:	2200      	movs	r2, #0
    3392:	4699      	mov	r9, r3
    3394:	9901      	ldr	r1, [sp, #4]
    3396:	4001      	ands	r1, r0
    3398:	b2cd      	uxtb	r5, r1
    339a:	2100      	movs	r1, #0
    339c:	0312      	lsls	r2, r2, #12
    339e:	0d0b      	lsrs	r3, r1, #20
    33a0:	0b12      	lsrs	r2, r2, #12
    33a2:	051b      	lsls	r3, r3, #20
    33a4:	4313      	orrs	r3, r2
    33a6:	4a43      	ldr	r2, [pc, #268]	; (34b4 <__aeabi_dmul+0x1e8>)
    33a8:	0524      	lsls	r4, r4, #20
    33aa:	4013      	ands	r3, r2
    33ac:	431c      	orrs	r4, r3
    33ae:	0064      	lsls	r4, r4, #1
    33b0:	07ed      	lsls	r5, r5, #31
    33b2:	0864      	lsrs	r4, r4, #1
    33b4:	432c      	orrs	r4, r5
    33b6:	4648      	mov	r0, r9
    33b8:	0021      	movs	r1, r4
    33ba:	b007      	add	sp, #28
    33bc:	bc3c      	pop	{r2, r3, r4, r5}
    33be:	4690      	mov	r8, r2
    33c0:	4699      	mov	r9, r3
    33c2:	46a2      	mov	sl, r4
    33c4:	46ab      	mov	fp, r5
    33c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33c8:	4303      	orrs	r3, r0
    33ca:	4699      	mov	r9, r3
    33cc:	d04f      	beq.n	346e <__aeabi_dmul+0x1a2>
    33ce:	465b      	mov	r3, fp
    33d0:	2b00      	cmp	r3, #0
    33d2:	d100      	bne.n	33d6 <__aeabi_dmul+0x10a>
    33d4:	e189      	b.n	36ea <__aeabi_dmul+0x41e>
    33d6:	4658      	mov	r0, fp
    33d8:	f000 fdbc 	bl	3f54 <__clzsi2>
    33dc:	0003      	movs	r3, r0
    33de:	3b0b      	subs	r3, #11
    33e0:	2b1c      	cmp	r3, #28
    33e2:	dd00      	ble.n	33e6 <__aeabi_dmul+0x11a>
    33e4:	e17a      	b.n	36dc <__aeabi_dmul+0x410>
    33e6:	221d      	movs	r2, #29
    33e8:	1ad3      	subs	r3, r2, r3
    33ea:	003a      	movs	r2, r7
    33ec:	0001      	movs	r1, r0
    33ee:	465c      	mov	r4, fp
    33f0:	40da      	lsrs	r2, r3
    33f2:	3908      	subs	r1, #8
    33f4:	408c      	lsls	r4, r1
    33f6:	0013      	movs	r3, r2
    33f8:	408f      	lsls	r7, r1
    33fa:	4323      	orrs	r3, r4
    33fc:	469b      	mov	fp, r3
    33fe:	46b9      	mov	r9, r7
    3400:	2300      	movs	r3, #0
    3402:	4e2d      	ldr	r6, [pc, #180]	; (34b8 <__aeabi_dmul+0x1ec>)
    3404:	2700      	movs	r7, #0
    3406:	1a36      	subs	r6, r6, r0
    3408:	9302      	str	r3, [sp, #8]
    340a:	e784      	b.n	3316 <__aeabi_dmul+0x4a>
    340c:	4653      	mov	r3, sl
    340e:	4323      	orrs	r3, r4
    3410:	d12a      	bne.n	3468 <__aeabi_dmul+0x19c>
    3412:	2400      	movs	r4, #0
    3414:	2002      	movs	r0, #2
    3416:	e796      	b.n	3346 <__aeabi_dmul+0x7a>
    3418:	4653      	mov	r3, sl
    341a:	4323      	orrs	r3, r4
    341c:	d020      	beq.n	3460 <__aeabi_dmul+0x194>
    341e:	2c00      	cmp	r4, #0
    3420:	d100      	bne.n	3424 <__aeabi_dmul+0x158>
    3422:	e157      	b.n	36d4 <__aeabi_dmul+0x408>
    3424:	0020      	movs	r0, r4
    3426:	f000 fd95 	bl	3f54 <__clzsi2>
    342a:	0003      	movs	r3, r0
    342c:	3b0b      	subs	r3, #11
    342e:	2b1c      	cmp	r3, #28
    3430:	dd00      	ble.n	3434 <__aeabi_dmul+0x168>
    3432:	e149      	b.n	36c8 <__aeabi_dmul+0x3fc>
    3434:	211d      	movs	r1, #29
    3436:	1acb      	subs	r3, r1, r3
    3438:	4651      	mov	r1, sl
    343a:	0002      	movs	r2, r0
    343c:	40d9      	lsrs	r1, r3
    343e:	4653      	mov	r3, sl
    3440:	3a08      	subs	r2, #8
    3442:	4094      	lsls	r4, r2
    3444:	4093      	lsls	r3, r2
    3446:	430c      	orrs	r4, r1
    3448:	4a1b      	ldr	r2, [pc, #108]	; (34b8 <__aeabi_dmul+0x1ec>)
    344a:	1a12      	subs	r2, r2, r0
    344c:	2000      	movs	r0, #0
    344e:	e77a      	b.n	3346 <__aeabi_dmul+0x7a>
    3450:	2501      	movs	r5, #1
    3452:	9b01      	ldr	r3, [sp, #4]
    3454:	4c14      	ldr	r4, [pc, #80]	; (34a8 <__aeabi_dmul+0x1dc>)
    3456:	401d      	ands	r5, r3
    3458:	2300      	movs	r3, #0
    345a:	2200      	movs	r2, #0
    345c:	4699      	mov	r9, r3
    345e:	e79c      	b.n	339a <__aeabi_dmul+0xce>
    3460:	2400      	movs	r4, #0
    3462:	2200      	movs	r2, #0
    3464:	2001      	movs	r0, #1
    3466:	e76e      	b.n	3346 <__aeabi_dmul+0x7a>
    3468:	4653      	mov	r3, sl
    346a:	2003      	movs	r0, #3
    346c:	e76b      	b.n	3346 <__aeabi_dmul+0x7a>
    346e:	2300      	movs	r3, #0
    3470:	469b      	mov	fp, r3
    3472:	3301      	adds	r3, #1
    3474:	2704      	movs	r7, #4
    3476:	2600      	movs	r6, #0
    3478:	9302      	str	r3, [sp, #8]
    347a:	e74c      	b.n	3316 <__aeabi_dmul+0x4a>
    347c:	2303      	movs	r3, #3
    347e:	4681      	mov	r9, r0
    3480:	270c      	movs	r7, #12
    3482:	9302      	str	r3, [sp, #8]
    3484:	e747      	b.n	3316 <__aeabi_dmul+0x4a>
    3486:	2280      	movs	r2, #128	; 0x80
    3488:	2300      	movs	r3, #0
    348a:	2500      	movs	r5, #0
    348c:	0312      	lsls	r2, r2, #12
    348e:	4699      	mov	r9, r3
    3490:	4c05      	ldr	r4, [pc, #20]	; (34a8 <__aeabi_dmul+0x1dc>)
    3492:	e782      	b.n	339a <__aeabi_dmul+0xce>
    3494:	465c      	mov	r4, fp
    3496:	464b      	mov	r3, r9
    3498:	9802      	ldr	r0, [sp, #8]
    349a:	e76f      	b.n	337c <__aeabi_dmul+0xb0>
    349c:	465c      	mov	r4, fp
    349e:	464b      	mov	r3, r9
    34a0:	9501      	str	r5, [sp, #4]
    34a2:	9802      	ldr	r0, [sp, #8]
    34a4:	e76a      	b.n	337c <__aeabi_dmul+0xb0>
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	000007ff 	.word	0x000007ff
    34ac:	fffffc01 	.word	0xfffffc01
    34b0:	0000424c 	.word	0x0000424c
    34b4:	800fffff 	.word	0x800fffff
    34b8:	fffffc0d 	.word	0xfffffc0d
    34bc:	464a      	mov	r2, r9
    34be:	4649      	mov	r1, r9
    34c0:	0c17      	lsrs	r7, r2, #16
    34c2:	0c1a      	lsrs	r2, r3, #16
    34c4:	041b      	lsls	r3, r3, #16
    34c6:	0c1b      	lsrs	r3, r3, #16
    34c8:	0408      	lsls	r0, r1, #16
    34ca:	0019      	movs	r1, r3
    34cc:	0c00      	lsrs	r0, r0, #16
    34ce:	4341      	muls	r1, r0
    34d0:	0015      	movs	r5, r2
    34d2:	4688      	mov	r8, r1
    34d4:	0019      	movs	r1, r3
    34d6:	437d      	muls	r5, r7
    34d8:	4379      	muls	r1, r7
    34da:	9503      	str	r5, [sp, #12]
    34dc:	4689      	mov	r9, r1
    34de:	0029      	movs	r1, r5
    34e0:	0015      	movs	r5, r2
    34e2:	4345      	muls	r5, r0
    34e4:	444d      	add	r5, r9
    34e6:	9502      	str	r5, [sp, #8]
    34e8:	4645      	mov	r5, r8
    34ea:	0c2d      	lsrs	r5, r5, #16
    34ec:	46aa      	mov	sl, r5
    34ee:	9d02      	ldr	r5, [sp, #8]
    34f0:	4455      	add	r5, sl
    34f2:	45a9      	cmp	r9, r5
    34f4:	d906      	bls.n	3504 <__aeabi_dmul+0x238>
    34f6:	468a      	mov	sl, r1
    34f8:	2180      	movs	r1, #128	; 0x80
    34fa:	0249      	lsls	r1, r1, #9
    34fc:	4689      	mov	r9, r1
    34fe:	44ca      	add	sl, r9
    3500:	4651      	mov	r1, sl
    3502:	9103      	str	r1, [sp, #12]
    3504:	0c29      	lsrs	r1, r5, #16
    3506:	9104      	str	r1, [sp, #16]
    3508:	4641      	mov	r1, r8
    350a:	0409      	lsls	r1, r1, #16
    350c:	042d      	lsls	r5, r5, #16
    350e:	0c09      	lsrs	r1, r1, #16
    3510:	4688      	mov	r8, r1
    3512:	0029      	movs	r1, r5
    3514:	0c25      	lsrs	r5, r4, #16
    3516:	0424      	lsls	r4, r4, #16
    3518:	4441      	add	r1, r8
    351a:	0c24      	lsrs	r4, r4, #16
    351c:	9105      	str	r1, [sp, #20]
    351e:	0021      	movs	r1, r4
    3520:	4341      	muls	r1, r0
    3522:	4688      	mov	r8, r1
    3524:	0021      	movs	r1, r4
    3526:	4379      	muls	r1, r7
    3528:	468a      	mov	sl, r1
    352a:	4368      	muls	r0, r5
    352c:	4641      	mov	r1, r8
    352e:	4450      	add	r0, sl
    3530:	4681      	mov	r9, r0
    3532:	0c08      	lsrs	r0, r1, #16
    3534:	4448      	add	r0, r9
    3536:	436f      	muls	r7, r5
    3538:	4582      	cmp	sl, r0
    353a:	d903      	bls.n	3544 <__aeabi_dmul+0x278>
    353c:	2180      	movs	r1, #128	; 0x80
    353e:	0249      	lsls	r1, r1, #9
    3540:	4689      	mov	r9, r1
    3542:	444f      	add	r7, r9
    3544:	0c01      	lsrs	r1, r0, #16
    3546:	4689      	mov	r9, r1
    3548:	0039      	movs	r1, r7
    354a:	4449      	add	r1, r9
    354c:	9102      	str	r1, [sp, #8]
    354e:	4641      	mov	r1, r8
    3550:	040f      	lsls	r7, r1, #16
    3552:	9904      	ldr	r1, [sp, #16]
    3554:	0c3f      	lsrs	r7, r7, #16
    3556:	4688      	mov	r8, r1
    3558:	0400      	lsls	r0, r0, #16
    355a:	19c0      	adds	r0, r0, r7
    355c:	4480      	add	r8, r0
    355e:	4641      	mov	r1, r8
    3560:	9104      	str	r1, [sp, #16]
    3562:	4659      	mov	r1, fp
    3564:	0c0f      	lsrs	r7, r1, #16
    3566:	0409      	lsls	r1, r1, #16
    3568:	0c09      	lsrs	r1, r1, #16
    356a:	4688      	mov	r8, r1
    356c:	4359      	muls	r1, r3
    356e:	468a      	mov	sl, r1
    3570:	0039      	movs	r1, r7
    3572:	4351      	muls	r1, r2
    3574:	4689      	mov	r9, r1
    3576:	4641      	mov	r1, r8
    3578:	434a      	muls	r2, r1
    357a:	4651      	mov	r1, sl
    357c:	0c09      	lsrs	r1, r1, #16
    357e:	468b      	mov	fp, r1
    3580:	437b      	muls	r3, r7
    3582:	18d2      	adds	r2, r2, r3
    3584:	445a      	add	r2, fp
    3586:	4293      	cmp	r3, r2
    3588:	d903      	bls.n	3592 <__aeabi_dmul+0x2c6>
    358a:	2380      	movs	r3, #128	; 0x80
    358c:	025b      	lsls	r3, r3, #9
    358e:	469b      	mov	fp, r3
    3590:	44d9      	add	r9, fp
    3592:	4651      	mov	r1, sl
    3594:	0409      	lsls	r1, r1, #16
    3596:	0c09      	lsrs	r1, r1, #16
    3598:	468a      	mov	sl, r1
    359a:	4641      	mov	r1, r8
    359c:	4361      	muls	r1, r4
    359e:	437c      	muls	r4, r7
    35a0:	0c13      	lsrs	r3, r2, #16
    35a2:	0412      	lsls	r2, r2, #16
    35a4:	444b      	add	r3, r9
    35a6:	4452      	add	r2, sl
    35a8:	46a1      	mov	r9, r4
    35aa:	468a      	mov	sl, r1
    35ac:	003c      	movs	r4, r7
    35ae:	4641      	mov	r1, r8
    35b0:	436c      	muls	r4, r5
    35b2:	434d      	muls	r5, r1
    35b4:	4651      	mov	r1, sl
    35b6:	444d      	add	r5, r9
    35b8:	0c0f      	lsrs	r7, r1, #16
    35ba:	197d      	adds	r5, r7, r5
    35bc:	45a9      	cmp	r9, r5
    35be:	d903      	bls.n	35c8 <__aeabi_dmul+0x2fc>
    35c0:	2180      	movs	r1, #128	; 0x80
    35c2:	0249      	lsls	r1, r1, #9
    35c4:	4688      	mov	r8, r1
    35c6:	4444      	add	r4, r8
    35c8:	9f04      	ldr	r7, [sp, #16]
    35ca:	9903      	ldr	r1, [sp, #12]
    35cc:	46b8      	mov	r8, r7
    35ce:	4441      	add	r1, r8
    35d0:	468b      	mov	fp, r1
    35d2:	4583      	cmp	fp, r0
    35d4:	4180      	sbcs	r0, r0
    35d6:	4241      	negs	r1, r0
    35d8:	4688      	mov	r8, r1
    35da:	4651      	mov	r1, sl
    35dc:	0408      	lsls	r0, r1, #16
    35de:	042f      	lsls	r7, r5, #16
    35e0:	0c00      	lsrs	r0, r0, #16
    35e2:	183f      	adds	r7, r7, r0
    35e4:	4658      	mov	r0, fp
    35e6:	9902      	ldr	r1, [sp, #8]
    35e8:	1810      	adds	r0, r2, r0
    35ea:	4689      	mov	r9, r1
    35ec:	4290      	cmp	r0, r2
    35ee:	4192      	sbcs	r2, r2
    35f0:	444f      	add	r7, r9
    35f2:	46ba      	mov	sl, r7
    35f4:	4252      	negs	r2, r2
    35f6:	4699      	mov	r9, r3
    35f8:	4693      	mov	fp, r2
    35fa:	44c2      	add	sl, r8
    35fc:	44d1      	add	r9, sl
    35fe:	44cb      	add	fp, r9
    3600:	428f      	cmp	r7, r1
    3602:	41bf      	sbcs	r7, r7
    3604:	45c2      	cmp	sl, r8
    3606:	4189      	sbcs	r1, r1
    3608:	4599      	cmp	r9, r3
    360a:	419b      	sbcs	r3, r3
    360c:	4593      	cmp	fp, r2
    360e:	4192      	sbcs	r2, r2
    3610:	427f      	negs	r7, r7
    3612:	4249      	negs	r1, r1
    3614:	0c2d      	lsrs	r5, r5, #16
    3616:	4252      	negs	r2, r2
    3618:	430f      	orrs	r7, r1
    361a:	425b      	negs	r3, r3
    361c:	4313      	orrs	r3, r2
    361e:	197f      	adds	r7, r7, r5
    3620:	18ff      	adds	r7, r7, r3
    3622:	465b      	mov	r3, fp
    3624:	193c      	adds	r4, r7, r4
    3626:	0ddb      	lsrs	r3, r3, #23
    3628:	9a05      	ldr	r2, [sp, #20]
    362a:	0264      	lsls	r4, r4, #9
    362c:	431c      	orrs	r4, r3
    362e:	0243      	lsls	r3, r0, #9
    3630:	4313      	orrs	r3, r2
    3632:	1e5d      	subs	r5, r3, #1
    3634:	41ab      	sbcs	r3, r5
    3636:	465a      	mov	r2, fp
    3638:	0dc0      	lsrs	r0, r0, #23
    363a:	4303      	orrs	r3, r0
    363c:	0252      	lsls	r2, r2, #9
    363e:	4313      	orrs	r3, r2
    3640:	01e2      	lsls	r2, r4, #7
    3642:	d556      	bpl.n	36f2 <__aeabi_dmul+0x426>
    3644:	2001      	movs	r0, #1
    3646:	085a      	lsrs	r2, r3, #1
    3648:	4003      	ands	r3, r0
    364a:	4313      	orrs	r3, r2
    364c:	07e2      	lsls	r2, r4, #31
    364e:	4313      	orrs	r3, r2
    3650:	0864      	lsrs	r4, r4, #1
    3652:	485a      	ldr	r0, [pc, #360]	; (37bc <__aeabi_dmul+0x4f0>)
    3654:	4460      	add	r0, ip
    3656:	2800      	cmp	r0, #0
    3658:	dd4d      	ble.n	36f6 <__aeabi_dmul+0x42a>
    365a:	075a      	lsls	r2, r3, #29
    365c:	d009      	beq.n	3672 <__aeabi_dmul+0x3a6>
    365e:	220f      	movs	r2, #15
    3660:	401a      	ands	r2, r3
    3662:	2a04      	cmp	r2, #4
    3664:	d005      	beq.n	3672 <__aeabi_dmul+0x3a6>
    3666:	1d1a      	adds	r2, r3, #4
    3668:	429a      	cmp	r2, r3
    366a:	419b      	sbcs	r3, r3
    366c:	425b      	negs	r3, r3
    366e:	18e4      	adds	r4, r4, r3
    3670:	0013      	movs	r3, r2
    3672:	01e2      	lsls	r2, r4, #7
    3674:	d504      	bpl.n	3680 <__aeabi_dmul+0x3b4>
    3676:	2080      	movs	r0, #128	; 0x80
    3678:	4a51      	ldr	r2, [pc, #324]	; (37c0 <__aeabi_dmul+0x4f4>)
    367a:	00c0      	lsls	r0, r0, #3
    367c:	4014      	ands	r4, r2
    367e:	4460      	add	r0, ip
    3680:	4a50      	ldr	r2, [pc, #320]	; (37c4 <__aeabi_dmul+0x4f8>)
    3682:	4290      	cmp	r0, r2
    3684:	dd00      	ble.n	3688 <__aeabi_dmul+0x3bc>
    3686:	e6e3      	b.n	3450 <__aeabi_dmul+0x184>
    3688:	2501      	movs	r5, #1
    368a:	08db      	lsrs	r3, r3, #3
    368c:	0762      	lsls	r2, r4, #29
    368e:	431a      	orrs	r2, r3
    3690:	0264      	lsls	r4, r4, #9
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	4691      	mov	r9, r2
    3696:	0b22      	lsrs	r2, r4, #12
    3698:	0544      	lsls	r4, r0, #21
    369a:	0d64      	lsrs	r4, r4, #21
    369c:	401d      	ands	r5, r3
    369e:	e67c      	b.n	339a <__aeabi_dmul+0xce>
    36a0:	2280      	movs	r2, #128	; 0x80
    36a2:	4659      	mov	r1, fp
    36a4:	0312      	lsls	r2, r2, #12
    36a6:	4211      	tst	r1, r2
    36a8:	d008      	beq.n	36bc <__aeabi_dmul+0x3f0>
    36aa:	4214      	tst	r4, r2
    36ac:	d106      	bne.n	36bc <__aeabi_dmul+0x3f0>
    36ae:	4322      	orrs	r2, r4
    36b0:	0312      	lsls	r2, r2, #12
    36b2:	0b12      	lsrs	r2, r2, #12
    36b4:	4645      	mov	r5, r8
    36b6:	4699      	mov	r9, r3
    36b8:	4c43      	ldr	r4, [pc, #268]	; (37c8 <__aeabi_dmul+0x4fc>)
    36ba:	e66e      	b.n	339a <__aeabi_dmul+0xce>
    36bc:	465b      	mov	r3, fp
    36be:	431a      	orrs	r2, r3
    36c0:	0312      	lsls	r2, r2, #12
    36c2:	0b12      	lsrs	r2, r2, #12
    36c4:	4c40      	ldr	r4, [pc, #256]	; (37c8 <__aeabi_dmul+0x4fc>)
    36c6:	e668      	b.n	339a <__aeabi_dmul+0xce>
    36c8:	0003      	movs	r3, r0
    36ca:	4654      	mov	r4, sl
    36cc:	3b28      	subs	r3, #40	; 0x28
    36ce:	409c      	lsls	r4, r3
    36d0:	2300      	movs	r3, #0
    36d2:	e6b9      	b.n	3448 <__aeabi_dmul+0x17c>
    36d4:	f000 fc3e 	bl	3f54 <__clzsi2>
    36d8:	3020      	adds	r0, #32
    36da:	e6a6      	b.n	342a <__aeabi_dmul+0x15e>
    36dc:	0003      	movs	r3, r0
    36de:	3b28      	subs	r3, #40	; 0x28
    36e0:	409f      	lsls	r7, r3
    36e2:	2300      	movs	r3, #0
    36e4:	46bb      	mov	fp, r7
    36e6:	4699      	mov	r9, r3
    36e8:	e68a      	b.n	3400 <__aeabi_dmul+0x134>
    36ea:	f000 fc33 	bl	3f54 <__clzsi2>
    36ee:	3020      	adds	r0, #32
    36f0:	e674      	b.n	33dc <__aeabi_dmul+0x110>
    36f2:	46b4      	mov	ip, r6
    36f4:	e7ad      	b.n	3652 <__aeabi_dmul+0x386>
    36f6:	2501      	movs	r5, #1
    36f8:	1a2a      	subs	r2, r5, r0
    36fa:	2a38      	cmp	r2, #56	; 0x38
    36fc:	dd06      	ble.n	370c <__aeabi_dmul+0x440>
    36fe:	9b01      	ldr	r3, [sp, #4]
    3700:	2400      	movs	r4, #0
    3702:	401d      	ands	r5, r3
    3704:	2300      	movs	r3, #0
    3706:	2200      	movs	r2, #0
    3708:	4699      	mov	r9, r3
    370a:	e646      	b.n	339a <__aeabi_dmul+0xce>
    370c:	2a1f      	cmp	r2, #31
    370e:	dc21      	bgt.n	3754 <__aeabi_dmul+0x488>
    3710:	2520      	movs	r5, #32
    3712:	0020      	movs	r0, r4
    3714:	1aad      	subs	r5, r5, r2
    3716:	001e      	movs	r6, r3
    3718:	40ab      	lsls	r3, r5
    371a:	40a8      	lsls	r0, r5
    371c:	40d6      	lsrs	r6, r2
    371e:	1e5d      	subs	r5, r3, #1
    3720:	41ab      	sbcs	r3, r5
    3722:	4330      	orrs	r0, r6
    3724:	4318      	orrs	r0, r3
    3726:	40d4      	lsrs	r4, r2
    3728:	0743      	lsls	r3, r0, #29
    372a:	d009      	beq.n	3740 <__aeabi_dmul+0x474>
    372c:	230f      	movs	r3, #15
    372e:	4003      	ands	r3, r0
    3730:	2b04      	cmp	r3, #4
    3732:	d005      	beq.n	3740 <__aeabi_dmul+0x474>
    3734:	0003      	movs	r3, r0
    3736:	1d18      	adds	r0, r3, #4
    3738:	4298      	cmp	r0, r3
    373a:	419b      	sbcs	r3, r3
    373c:	425b      	negs	r3, r3
    373e:	18e4      	adds	r4, r4, r3
    3740:	0223      	lsls	r3, r4, #8
    3742:	d521      	bpl.n	3788 <__aeabi_dmul+0x4bc>
    3744:	2501      	movs	r5, #1
    3746:	9b01      	ldr	r3, [sp, #4]
    3748:	2401      	movs	r4, #1
    374a:	401d      	ands	r5, r3
    374c:	2300      	movs	r3, #0
    374e:	2200      	movs	r2, #0
    3750:	4699      	mov	r9, r3
    3752:	e622      	b.n	339a <__aeabi_dmul+0xce>
    3754:	251f      	movs	r5, #31
    3756:	0021      	movs	r1, r4
    3758:	426d      	negs	r5, r5
    375a:	1a28      	subs	r0, r5, r0
    375c:	40c1      	lsrs	r1, r0
    375e:	0008      	movs	r0, r1
    3760:	2a20      	cmp	r2, #32
    3762:	d01d      	beq.n	37a0 <__aeabi_dmul+0x4d4>
    3764:	355f      	adds	r5, #95	; 0x5f
    3766:	1aaa      	subs	r2, r5, r2
    3768:	4094      	lsls	r4, r2
    376a:	4323      	orrs	r3, r4
    376c:	1e5c      	subs	r4, r3, #1
    376e:	41a3      	sbcs	r3, r4
    3770:	2507      	movs	r5, #7
    3772:	4303      	orrs	r3, r0
    3774:	401d      	ands	r5, r3
    3776:	2200      	movs	r2, #0
    3778:	2d00      	cmp	r5, #0
    377a:	d009      	beq.n	3790 <__aeabi_dmul+0x4c4>
    377c:	220f      	movs	r2, #15
    377e:	2400      	movs	r4, #0
    3780:	401a      	ands	r2, r3
    3782:	0018      	movs	r0, r3
    3784:	2a04      	cmp	r2, #4
    3786:	d1d6      	bne.n	3736 <__aeabi_dmul+0x46a>
    3788:	0003      	movs	r3, r0
    378a:	0765      	lsls	r5, r4, #29
    378c:	0264      	lsls	r4, r4, #9
    378e:	0b22      	lsrs	r2, r4, #12
    3790:	08db      	lsrs	r3, r3, #3
    3792:	432b      	orrs	r3, r5
    3794:	2501      	movs	r5, #1
    3796:	4699      	mov	r9, r3
    3798:	9b01      	ldr	r3, [sp, #4]
    379a:	2400      	movs	r4, #0
    379c:	401d      	ands	r5, r3
    379e:	e5fc      	b.n	339a <__aeabi_dmul+0xce>
    37a0:	2400      	movs	r4, #0
    37a2:	e7e2      	b.n	376a <__aeabi_dmul+0x49e>
    37a4:	2280      	movs	r2, #128	; 0x80
    37a6:	2501      	movs	r5, #1
    37a8:	0312      	lsls	r2, r2, #12
    37aa:	4322      	orrs	r2, r4
    37ac:	9901      	ldr	r1, [sp, #4]
    37ae:	0312      	lsls	r2, r2, #12
    37b0:	0b12      	lsrs	r2, r2, #12
    37b2:	400d      	ands	r5, r1
    37b4:	4699      	mov	r9, r3
    37b6:	4c04      	ldr	r4, [pc, #16]	; (37c8 <__aeabi_dmul+0x4fc>)
    37b8:	e5ef      	b.n	339a <__aeabi_dmul+0xce>
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	000003ff 	.word	0x000003ff
    37c0:	feffffff 	.word	0xfeffffff
    37c4:	000007fe 	.word	0x000007fe
    37c8:	000007ff 	.word	0x000007ff

000037cc <__aeabi_dsub>:
    37cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ce:	4646      	mov	r6, r8
    37d0:	46d6      	mov	lr, sl
    37d2:	464f      	mov	r7, r9
    37d4:	030c      	lsls	r4, r1, #12
    37d6:	b5c0      	push	{r6, r7, lr}
    37d8:	0fcd      	lsrs	r5, r1, #31
    37da:	004e      	lsls	r6, r1, #1
    37dc:	0a61      	lsrs	r1, r4, #9
    37de:	0f44      	lsrs	r4, r0, #29
    37e0:	430c      	orrs	r4, r1
    37e2:	00c1      	lsls	r1, r0, #3
    37e4:	0058      	lsls	r0, r3, #1
    37e6:	0d40      	lsrs	r0, r0, #21
    37e8:	4684      	mov	ip, r0
    37ea:	468a      	mov	sl, r1
    37ec:	000f      	movs	r7, r1
    37ee:	0319      	lsls	r1, r3, #12
    37f0:	0f50      	lsrs	r0, r2, #29
    37f2:	0a49      	lsrs	r1, r1, #9
    37f4:	4301      	orrs	r1, r0
    37f6:	48c6      	ldr	r0, [pc, #792]	; (3b10 <__aeabi_dsub+0x344>)
    37f8:	0d76      	lsrs	r6, r6, #21
    37fa:	46a8      	mov	r8, r5
    37fc:	0fdb      	lsrs	r3, r3, #31
    37fe:	00d2      	lsls	r2, r2, #3
    3800:	4584      	cmp	ip, r0
    3802:	d100      	bne.n	3806 <__aeabi_dsub+0x3a>
    3804:	e0d8      	b.n	39b8 <__aeabi_dsub+0x1ec>
    3806:	2001      	movs	r0, #1
    3808:	4043      	eors	r3, r0
    380a:	42ab      	cmp	r3, r5
    380c:	d100      	bne.n	3810 <__aeabi_dsub+0x44>
    380e:	e0a6      	b.n	395e <__aeabi_dsub+0x192>
    3810:	4660      	mov	r0, ip
    3812:	1a35      	subs	r5, r6, r0
    3814:	2d00      	cmp	r5, #0
    3816:	dc00      	bgt.n	381a <__aeabi_dsub+0x4e>
    3818:	e105      	b.n	3a26 <__aeabi_dsub+0x25a>
    381a:	2800      	cmp	r0, #0
    381c:	d110      	bne.n	3840 <__aeabi_dsub+0x74>
    381e:	000b      	movs	r3, r1
    3820:	4313      	orrs	r3, r2
    3822:	d100      	bne.n	3826 <__aeabi_dsub+0x5a>
    3824:	e0d7      	b.n	39d6 <__aeabi_dsub+0x20a>
    3826:	1e6b      	subs	r3, r5, #1
    3828:	2b00      	cmp	r3, #0
    382a:	d000      	beq.n	382e <__aeabi_dsub+0x62>
    382c:	e14b      	b.n	3ac6 <__aeabi_dsub+0x2fa>
    382e:	4653      	mov	r3, sl
    3830:	1a9f      	subs	r7, r3, r2
    3832:	45ba      	cmp	sl, r7
    3834:	4180      	sbcs	r0, r0
    3836:	1a64      	subs	r4, r4, r1
    3838:	4240      	negs	r0, r0
    383a:	1a24      	subs	r4, r4, r0
    383c:	2601      	movs	r6, #1
    383e:	e01e      	b.n	387e <__aeabi_dsub+0xb2>
    3840:	4bb3      	ldr	r3, [pc, #716]	; (3b10 <__aeabi_dsub+0x344>)
    3842:	429e      	cmp	r6, r3
    3844:	d048      	beq.n	38d8 <__aeabi_dsub+0x10c>
    3846:	2380      	movs	r3, #128	; 0x80
    3848:	041b      	lsls	r3, r3, #16
    384a:	4319      	orrs	r1, r3
    384c:	2d38      	cmp	r5, #56	; 0x38
    384e:	dd00      	ble.n	3852 <__aeabi_dsub+0x86>
    3850:	e119      	b.n	3a86 <__aeabi_dsub+0x2ba>
    3852:	2d1f      	cmp	r5, #31
    3854:	dd00      	ble.n	3858 <__aeabi_dsub+0x8c>
    3856:	e14c      	b.n	3af2 <__aeabi_dsub+0x326>
    3858:	2320      	movs	r3, #32
    385a:	000f      	movs	r7, r1
    385c:	1b5b      	subs	r3, r3, r5
    385e:	0010      	movs	r0, r2
    3860:	409a      	lsls	r2, r3
    3862:	409f      	lsls	r7, r3
    3864:	40e8      	lsrs	r0, r5
    3866:	1e53      	subs	r3, r2, #1
    3868:	419a      	sbcs	r2, r3
    386a:	40e9      	lsrs	r1, r5
    386c:	4307      	orrs	r7, r0
    386e:	4317      	orrs	r7, r2
    3870:	4653      	mov	r3, sl
    3872:	1bdf      	subs	r7, r3, r7
    3874:	1a61      	subs	r1, r4, r1
    3876:	45ba      	cmp	sl, r7
    3878:	41a4      	sbcs	r4, r4
    387a:	4264      	negs	r4, r4
    387c:	1b0c      	subs	r4, r1, r4
    387e:	0223      	lsls	r3, r4, #8
    3880:	d400      	bmi.n	3884 <__aeabi_dsub+0xb8>
    3882:	e0c5      	b.n	3a10 <__aeabi_dsub+0x244>
    3884:	0264      	lsls	r4, r4, #9
    3886:	0a65      	lsrs	r5, r4, #9
    3888:	2d00      	cmp	r5, #0
    388a:	d100      	bne.n	388e <__aeabi_dsub+0xc2>
    388c:	e0f6      	b.n	3a7c <__aeabi_dsub+0x2b0>
    388e:	0028      	movs	r0, r5
    3890:	f000 fb60 	bl	3f54 <__clzsi2>
    3894:	0003      	movs	r3, r0
    3896:	3b08      	subs	r3, #8
    3898:	2b1f      	cmp	r3, #31
    389a:	dd00      	ble.n	389e <__aeabi_dsub+0xd2>
    389c:	e0e9      	b.n	3a72 <__aeabi_dsub+0x2a6>
    389e:	2220      	movs	r2, #32
    38a0:	003c      	movs	r4, r7
    38a2:	1ad2      	subs	r2, r2, r3
    38a4:	409d      	lsls	r5, r3
    38a6:	40d4      	lsrs	r4, r2
    38a8:	409f      	lsls	r7, r3
    38aa:	4325      	orrs	r5, r4
    38ac:	429e      	cmp	r6, r3
    38ae:	dd00      	ble.n	38b2 <__aeabi_dsub+0xe6>
    38b0:	e0db      	b.n	3a6a <__aeabi_dsub+0x29e>
    38b2:	1b9e      	subs	r6, r3, r6
    38b4:	1c73      	adds	r3, r6, #1
    38b6:	2b1f      	cmp	r3, #31
    38b8:	dd00      	ble.n	38bc <__aeabi_dsub+0xf0>
    38ba:	e10a      	b.n	3ad2 <__aeabi_dsub+0x306>
    38bc:	2220      	movs	r2, #32
    38be:	0038      	movs	r0, r7
    38c0:	1ad2      	subs	r2, r2, r3
    38c2:	0029      	movs	r1, r5
    38c4:	4097      	lsls	r7, r2
    38c6:	002c      	movs	r4, r5
    38c8:	4091      	lsls	r1, r2
    38ca:	40d8      	lsrs	r0, r3
    38cc:	1e7a      	subs	r2, r7, #1
    38ce:	4197      	sbcs	r7, r2
    38d0:	40dc      	lsrs	r4, r3
    38d2:	2600      	movs	r6, #0
    38d4:	4301      	orrs	r1, r0
    38d6:	430f      	orrs	r7, r1
    38d8:	077b      	lsls	r3, r7, #29
    38da:	d009      	beq.n	38f0 <__aeabi_dsub+0x124>
    38dc:	230f      	movs	r3, #15
    38de:	403b      	ands	r3, r7
    38e0:	2b04      	cmp	r3, #4
    38e2:	d005      	beq.n	38f0 <__aeabi_dsub+0x124>
    38e4:	1d3b      	adds	r3, r7, #4
    38e6:	42bb      	cmp	r3, r7
    38e8:	41bf      	sbcs	r7, r7
    38ea:	427f      	negs	r7, r7
    38ec:	19e4      	adds	r4, r4, r7
    38ee:	001f      	movs	r7, r3
    38f0:	0223      	lsls	r3, r4, #8
    38f2:	d525      	bpl.n	3940 <__aeabi_dsub+0x174>
    38f4:	4b86      	ldr	r3, [pc, #536]	; (3b10 <__aeabi_dsub+0x344>)
    38f6:	3601      	adds	r6, #1
    38f8:	429e      	cmp	r6, r3
    38fa:	d100      	bne.n	38fe <__aeabi_dsub+0x132>
    38fc:	e0af      	b.n	3a5e <__aeabi_dsub+0x292>
    38fe:	4b85      	ldr	r3, [pc, #532]	; (3b14 <__aeabi_dsub+0x348>)
    3900:	2501      	movs	r5, #1
    3902:	401c      	ands	r4, r3
    3904:	4643      	mov	r3, r8
    3906:	0762      	lsls	r2, r4, #29
    3908:	08ff      	lsrs	r7, r7, #3
    390a:	0264      	lsls	r4, r4, #9
    390c:	0576      	lsls	r6, r6, #21
    390e:	4317      	orrs	r7, r2
    3910:	0b24      	lsrs	r4, r4, #12
    3912:	0d76      	lsrs	r6, r6, #21
    3914:	401d      	ands	r5, r3
    3916:	2100      	movs	r1, #0
    3918:	0324      	lsls	r4, r4, #12
    391a:	0b23      	lsrs	r3, r4, #12
    391c:	0d0c      	lsrs	r4, r1, #20
    391e:	4a7e      	ldr	r2, [pc, #504]	; (3b18 <__aeabi_dsub+0x34c>)
    3920:	0524      	lsls	r4, r4, #20
    3922:	431c      	orrs	r4, r3
    3924:	4014      	ands	r4, r2
    3926:	0533      	lsls	r3, r6, #20
    3928:	4323      	orrs	r3, r4
    392a:	005b      	lsls	r3, r3, #1
    392c:	07ed      	lsls	r5, r5, #31
    392e:	085b      	lsrs	r3, r3, #1
    3930:	432b      	orrs	r3, r5
    3932:	0038      	movs	r0, r7
    3934:	0019      	movs	r1, r3
    3936:	bc1c      	pop	{r2, r3, r4}
    3938:	4690      	mov	r8, r2
    393a:	4699      	mov	r9, r3
    393c:	46a2      	mov	sl, r4
    393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3940:	2501      	movs	r5, #1
    3942:	4643      	mov	r3, r8
    3944:	0762      	lsls	r2, r4, #29
    3946:	08ff      	lsrs	r7, r7, #3
    3948:	4317      	orrs	r7, r2
    394a:	08e4      	lsrs	r4, r4, #3
    394c:	401d      	ands	r5, r3
    394e:	4b70      	ldr	r3, [pc, #448]	; (3b10 <__aeabi_dsub+0x344>)
    3950:	429e      	cmp	r6, r3
    3952:	d036      	beq.n	39c2 <__aeabi_dsub+0x1f6>
    3954:	0324      	lsls	r4, r4, #12
    3956:	0576      	lsls	r6, r6, #21
    3958:	0b24      	lsrs	r4, r4, #12
    395a:	0d76      	lsrs	r6, r6, #21
    395c:	e7db      	b.n	3916 <__aeabi_dsub+0x14a>
    395e:	4663      	mov	r3, ip
    3960:	1af3      	subs	r3, r6, r3
    3962:	2b00      	cmp	r3, #0
    3964:	dc00      	bgt.n	3968 <__aeabi_dsub+0x19c>
    3966:	e094      	b.n	3a92 <__aeabi_dsub+0x2c6>
    3968:	4660      	mov	r0, ip
    396a:	2800      	cmp	r0, #0
    396c:	d035      	beq.n	39da <__aeabi_dsub+0x20e>
    396e:	4868      	ldr	r0, [pc, #416]	; (3b10 <__aeabi_dsub+0x344>)
    3970:	4286      	cmp	r6, r0
    3972:	d0b1      	beq.n	38d8 <__aeabi_dsub+0x10c>
    3974:	2780      	movs	r7, #128	; 0x80
    3976:	043f      	lsls	r7, r7, #16
    3978:	4339      	orrs	r1, r7
    397a:	2b38      	cmp	r3, #56	; 0x38
    397c:	dc00      	bgt.n	3980 <__aeabi_dsub+0x1b4>
    397e:	e0fd      	b.n	3b7c <__aeabi_dsub+0x3b0>
    3980:	430a      	orrs	r2, r1
    3982:	0017      	movs	r7, r2
    3984:	2100      	movs	r1, #0
    3986:	1e7a      	subs	r2, r7, #1
    3988:	4197      	sbcs	r7, r2
    398a:	4457      	add	r7, sl
    398c:	4557      	cmp	r7, sl
    398e:	4180      	sbcs	r0, r0
    3990:	1909      	adds	r1, r1, r4
    3992:	4244      	negs	r4, r0
    3994:	190c      	adds	r4, r1, r4
    3996:	0223      	lsls	r3, r4, #8
    3998:	d53a      	bpl.n	3a10 <__aeabi_dsub+0x244>
    399a:	4b5d      	ldr	r3, [pc, #372]	; (3b10 <__aeabi_dsub+0x344>)
    399c:	3601      	adds	r6, #1
    399e:	429e      	cmp	r6, r3
    39a0:	d100      	bne.n	39a4 <__aeabi_dsub+0x1d8>
    39a2:	e14b      	b.n	3c3c <__aeabi_dsub+0x470>
    39a4:	2201      	movs	r2, #1
    39a6:	4b5b      	ldr	r3, [pc, #364]	; (3b14 <__aeabi_dsub+0x348>)
    39a8:	401c      	ands	r4, r3
    39aa:	087b      	lsrs	r3, r7, #1
    39ac:	4017      	ands	r7, r2
    39ae:	431f      	orrs	r7, r3
    39b0:	07e2      	lsls	r2, r4, #31
    39b2:	4317      	orrs	r7, r2
    39b4:	0864      	lsrs	r4, r4, #1
    39b6:	e78f      	b.n	38d8 <__aeabi_dsub+0x10c>
    39b8:	0008      	movs	r0, r1
    39ba:	4310      	orrs	r0, r2
    39bc:	d000      	beq.n	39c0 <__aeabi_dsub+0x1f4>
    39be:	e724      	b.n	380a <__aeabi_dsub+0x3e>
    39c0:	e721      	b.n	3806 <__aeabi_dsub+0x3a>
    39c2:	0023      	movs	r3, r4
    39c4:	433b      	orrs	r3, r7
    39c6:	d100      	bne.n	39ca <__aeabi_dsub+0x1fe>
    39c8:	e1b9      	b.n	3d3e <__aeabi_dsub+0x572>
    39ca:	2280      	movs	r2, #128	; 0x80
    39cc:	0312      	lsls	r2, r2, #12
    39ce:	4314      	orrs	r4, r2
    39d0:	0324      	lsls	r4, r4, #12
    39d2:	0b24      	lsrs	r4, r4, #12
    39d4:	e79f      	b.n	3916 <__aeabi_dsub+0x14a>
    39d6:	002e      	movs	r6, r5
    39d8:	e77e      	b.n	38d8 <__aeabi_dsub+0x10c>
    39da:	0008      	movs	r0, r1
    39dc:	4310      	orrs	r0, r2
    39de:	d100      	bne.n	39e2 <__aeabi_dsub+0x216>
    39e0:	e0ca      	b.n	3b78 <__aeabi_dsub+0x3ac>
    39e2:	1e58      	subs	r0, r3, #1
    39e4:	4684      	mov	ip, r0
    39e6:	2800      	cmp	r0, #0
    39e8:	d000      	beq.n	39ec <__aeabi_dsub+0x220>
    39ea:	e0e7      	b.n	3bbc <__aeabi_dsub+0x3f0>
    39ec:	4452      	add	r2, sl
    39ee:	4552      	cmp	r2, sl
    39f0:	4180      	sbcs	r0, r0
    39f2:	1864      	adds	r4, r4, r1
    39f4:	4240      	negs	r0, r0
    39f6:	1824      	adds	r4, r4, r0
    39f8:	0017      	movs	r7, r2
    39fa:	2601      	movs	r6, #1
    39fc:	0223      	lsls	r3, r4, #8
    39fe:	d507      	bpl.n	3a10 <__aeabi_dsub+0x244>
    3a00:	2602      	movs	r6, #2
    3a02:	e7cf      	b.n	39a4 <__aeabi_dsub+0x1d8>
    3a04:	4664      	mov	r4, ip
    3a06:	432c      	orrs	r4, r5
    3a08:	d100      	bne.n	3a0c <__aeabi_dsub+0x240>
    3a0a:	e1b3      	b.n	3d74 <__aeabi_dsub+0x5a8>
    3a0c:	002c      	movs	r4, r5
    3a0e:	4667      	mov	r7, ip
    3a10:	077b      	lsls	r3, r7, #29
    3a12:	d000      	beq.n	3a16 <__aeabi_dsub+0x24a>
    3a14:	e762      	b.n	38dc <__aeabi_dsub+0x110>
    3a16:	0763      	lsls	r3, r4, #29
    3a18:	08ff      	lsrs	r7, r7, #3
    3a1a:	431f      	orrs	r7, r3
    3a1c:	2501      	movs	r5, #1
    3a1e:	4643      	mov	r3, r8
    3a20:	08e4      	lsrs	r4, r4, #3
    3a22:	401d      	ands	r5, r3
    3a24:	e793      	b.n	394e <__aeabi_dsub+0x182>
    3a26:	2d00      	cmp	r5, #0
    3a28:	d178      	bne.n	3b1c <__aeabi_dsub+0x350>
    3a2a:	1c75      	adds	r5, r6, #1
    3a2c:	056d      	lsls	r5, r5, #21
    3a2e:	0d6d      	lsrs	r5, r5, #21
    3a30:	2d01      	cmp	r5, #1
    3a32:	dc00      	bgt.n	3a36 <__aeabi_dsub+0x26a>
    3a34:	e0f2      	b.n	3c1c <__aeabi_dsub+0x450>
    3a36:	4650      	mov	r0, sl
    3a38:	1a80      	subs	r0, r0, r2
    3a3a:	4582      	cmp	sl, r0
    3a3c:	41bf      	sbcs	r7, r7
    3a3e:	1a65      	subs	r5, r4, r1
    3a40:	427f      	negs	r7, r7
    3a42:	1bed      	subs	r5, r5, r7
    3a44:	4684      	mov	ip, r0
    3a46:	0228      	lsls	r0, r5, #8
    3a48:	d400      	bmi.n	3a4c <__aeabi_dsub+0x280>
    3a4a:	e08c      	b.n	3b66 <__aeabi_dsub+0x39a>
    3a4c:	4650      	mov	r0, sl
    3a4e:	1a17      	subs	r7, r2, r0
    3a50:	42ba      	cmp	r2, r7
    3a52:	4192      	sbcs	r2, r2
    3a54:	1b0c      	subs	r4, r1, r4
    3a56:	4255      	negs	r5, r2
    3a58:	1b65      	subs	r5, r4, r5
    3a5a:	4698      	mov	r8, r3
    3a5c:	e714      	b.n	3888 <__aeabi_dsub+0xbc>
    3a5e:	2501      	movs	r5, #1
    3a60:	4643      	mov	r3, r8
    3a62:	2400      	movs	r4, #0
    3a64:	401d      	ands	r5, r3
    3a66:	2700      	movs	r7, #0
    3a68:	e755      	b.n	3916 <__aeabi_dsub+0x14a>
    3a6a:	4c2a      	ldr	r4, [pc, #168]	; (3b14 <__aeabi_dsub+0x348>)
    3a6c:	1af6      	subs	r6, r6, r3
    3a6e:	402c      	ands	r4, r5
    3a70:	e732      	b.n	38d8 <__aeabi_dsub+0x10c>
    3a72:	003d      	movs	r5, r7
    3a74:	3828      	subs	r0, #40	; 0x28
    3a76:	4085      	lsls	r5, r0
    3a78:	2700      	movs	r7, #0
    3a7a:	e717      	b.n	38ac <__aeabi_dsub+0xe0>
    3a7c:	0038      	movs	r0, r7
    3a7e:	f000 fa69 	bl	3f54 <__clzsi2>
    3a82:	3020      	adds	r0, #32
    3a84:	e706      	b.n	3894 <__aeabi_dsub+0xc8>
    3a86:	430a      	orrs	r2, r1
    3a88:	0017      	movs	r7, r2
    3a8a:	2100      	movs	r1, #0
    3a8c:	1e7a      	subs	r2, r7, #1
    3a8e:	4197      	sbcs	r7, r2
    3a90:	e6ee      	b.n	3870 <__aeabi_dsub+0xa4>
    3a92:	2b00      	cmp	r3, #0
    3a94:	d000      	beq.n	3a98 <__aeabi_dsub+0x2cc>
    3a96:	e0e5      	b.n	3c64 <__aeabi_dsub+0x498>
    3a98:	1c73      	adds	r3, r6, #1
    3a9a:	469c      	mov	ip, r3
    3a9c:	055b      	lsls	r3, r3, #21
    3a9e:	0d5b      	lsrs	r3, r3, #21
    3aa0:	2b01      	cmp	r3, #1
    3aa2:	dc00      	bgt.n	3aa6 <__aeabi_dsub+0x2da>
    3aa4:	e09f      	b.n	3be6 <__aeabi_dsub+0x41a>
    3aa6:	4b1a      	ldr	r3, [pc, #104]	; (3b10 <__aeabi_dsub+0x344>)
    3aa8:	459c      	cmp	ip, r3
    3aaa:	d100      	bne.n	3aae <__aeabi_dsub+0x2e2>
    3aac:	e0c5      	b.n	3c3a <__aeabi_dsub+0x46e>
    3aae:	4452      	add	r2, sl
    3ab0:	4552      	cmp	r2, sl
    3ab2:	4180      	sbcs	r0, r0
    3ab4:	1864      	adds	r4, r4, r1
    3ab6:	4240      	negs	r0, r0
    3ab8:	1824      	adds	r4, r4, r0
    3aba:	07e7      	lsls	r7, r4, #31
    3abc:	0852      	lsrs	r2, r2, #1
    3abe:	4317      	orrs	r7, r2
    3ac0:	0864      	lsrs	r4, r4, #1
    3ac2:	4666      	mov	r6, ip
    3ac4:	e708      	b.n	38d8 <__aeabi_dsub+0x10c>
    3ac6:	4812      	ldr	r0, [pc, #72]	; (3b10 <__aeabi_dsub+0x344>)
    3ac8:	4285      	cmp	r5, r0
    3aca:	d100      	bne.n	3ace <__aeabi_dsub+0x302>
    3acc:	e085      	b.n	3bda <__aeabi_dsub+0x40e>
    3ace:	001d      	movs	r5, r3
    3ad0:	e6bc      	b.n	384c <__aeabi_dsub+0x80>
    3ad2:	0029      	movs	r1, r5
    3ad4:	3e1f      	subs	r6, #31
    3ad6:	40f1      	lsrs	r1, r6
    3ad8:	2b20      	cmp	r3, #32
    3ada:	d100      	bne.n	3ade <__aeabi_dsub+0x312>
    3adc:	e07f      	b.n	3bde <__aeabi_dsub+0x412>
    3ade:	2240      	movs	r2, #64	; 0x40
    3ae0:	1ad3      	subs	r3, r2, r3
    3ae2:	409d      	lsls	r5, r3
    3ae4:	432f      	orrs	r7, r5
    3ae6:	1e7d      	subs	r5, r7, #1
    3ae8:	41af      	sbcs	r7, r5
    3aea:	2400      	movs	r4, #0
    3aec:	430f      	orrs	r7, r1
    3aee:	2600      	movs	r6, #0
    3af0:	e78e      	b.n	3a10 <__aeabi_dsub+0x244>
    3af2:	002b      	movs	r3, r5
    3af4:	000f      	movs	r7, r1
    3af6:	3b20      	subs	r3, #32
    3af8:	40df      	lsrs	r7, r3
    3afa:	2d20      	cmp	r5, #32
    3afc:	d071      	beq.n	3be2 <__aeabi_dsub+0x416>
    3afe:	2340      	movs	r3, #64	; 0x40
    3b00:	1b5d      	subs	r5, r3, r5
    3b02:	40a9      	lsls	r1, r5
    3b04:	430a      	orrs	r2, r1
    3b06:	1e51      	subs	r1, r2, #1
    3b08:	418a      	sbcs	r2, r1
    3b0a:	2100      	movs	r1, #0
    3b0c:	4317      	orrs	r7, r2
    3b0e:	e6af      	b.n	3870 <__aeabi_dsub+0xa4>
    3b10:	000007ff 	.word	0x000007ff
    3b14:	ff7fffff 	.word	0xff7fffff
    3b18:	800fffff 	.word	0x800fffff
    3b1c:	2e00      	cmp	r6, #0
    3b1e:	d03e      	beq.n	3b9e <__aeabi_dsub+0x3d2>
    3b20:	4eb3      	ldr	r6, [pc, #716]	; (3df0 <__aeabi_dsub+0x624>)
    3b22:	45b4      	cmp	ip, r6
    3b24:	d045      	beq.n	3bb2 <__aeabi_dsub+0x3e6>
    3b26:	2680      	movs	r6, #128	; 0x80
    3b28:	0436      	lsls	r6, r6, #16
    3b2a:	426d      	negs	r5, r5
    3b2c:	4334      	orrs	r4, r6
    3b2e:	2d38      	cmp	r5, #56	; 0x38
    3b30:	dd00      	ble.n	3b34 <__aeabi_dsub+0x368>
    3b32:	e0a8      	b.n	3c86 <__aeabi_dsub+0x4ba>
    3b34:	2d1f      	cmp	r5, #31
    3b36:	dd00      	ble.n	3b3a <__aeabi_dsub+0x36e>
    3b38:	e11f      	b.n	3d7a <__aeabi_dsub+0x5ae>
    3b3a:	2620      	movs	r6, #32
    3b3c:	0027      	movs	r7, r4
    3b3e:	4650      	mov	r0, sl
    3b40:	1b76      	subs	r6, r6, r5
    3b42:	40b7      	lsls	r7, r6
    3b44:	40e8      	lsrs	r0, r5
    3b46:	4307      	orrs	r7, r0
    3b48:	4650      	mov	r0, sl
    3b4a:	40b0      	lsls	r0, r6
    3b4c:	1e46      	subs	r6, r0, #1
    3b4e:	41b0      	sbcs	r0, r6
    3b50:	40ec      	lsrs	r4, r5
    3b52:	4338      	orrs	r0, r7
    3b54:	1a17      	subs	r7, r2, r0
    3b56:	42ba      	cmp	r2, r7
    3b58:	4192      	sbcs	r2, r2
    3b5a:	1b0c      	subs	r4, r1, r4
    3b5c:	4252      	negs	r2, r2
    3b5e:	1aa4      	subs	r4, r4, r2
    3b60:	4666      	mov	r6, ip
    3b62:	4698      	mov	r8, r3
    3b64:	e68b      	b.n	387e <__aeabi_dsub+0xb2>
    3b66:	4664      	mov	r4, ip
    3b68:	4667      	mov	r7, ip
    3b6a:	432c      	orrs	r4, r5
    3b6c:	d000      	beq.n	3b70 <__aeabi_dsub+0x3a4>
    3b6e:	e68b      	b.n	3888 <__aeabi_dsub+0xbc>
    3b70:	2500      	movs	r5, #0
    3b72:	2600      	movs	r6, #0
    3b74:	2700      	movs	r7, #0
    3b76:	e6ea      	b.n	394e <__aeabi_dsub+0x182>
    3b78:	001e      	movs	r6, r3
    3b7a:	e6ad      	b.n	38d8 <__aeabi_dsub+0x10c>
    3b7c:	2b1f      	cmp	r3, #31
    3b7e:	dc60      	bgt.n	3c42 <__aeabi_dsub+0x476>
    3b80:	2720      	movs	r7, #32
    3b82:	1af8      	subs	r0, r7, r3
    3b84:	000f      	movs	r7, r1
    3b86:	4684      	mov	ip, r0
    3b88:	4087      	lsls	r7, r0
    3b8a:	0010      	movs	r0, r2
    3b8c:	40d8      	lsrs	r0, r3
    3b8e:	4307      	orrs	r7, r0
    3b90:	4660      	mov	r0, ip
    3b92:	4082      	lsls	r2, r0
    3b94:	1e50      	subs	r0, r2, #1
    3b96:	4182      	sbcs	r2, r0
    3b98:	40d9      	lsrs	r1, r3
    3b9a:	4317      	orrs	r7, r2
    3b9c:	e6f5      	b.n	398a <__aeabi_dsub+0x1be>
    3b9e:	0026      	movs	r6, r4
    3ba0:	4650      	mov	r0, sl
    3ba2:	4306      	orrs	r6, r0
    3ba4:	d005      	beq.n	3bb2 <__aeabi_dsub+0x3e6>
    3ba6:	43ed      	mvns	r5, r5
    3ba8:	2d00      	cmp	r5, #0
    3baa:	d0d3      	beq.n	3b54 <__aeabi_dsub+0x388>
    3bac:	4e90      	ldr	r6, [pc, #576]	; (3df0 <__aeabi_dsub+0x624>)
    3bae:	45b4      	cmp	ip, r6
    3bb0:	d1bd      	bne.n	3b2e <__aeabi_dsub+0x362>
    3bb2:	000c      	movs	r4, r1
    3bb4:	0017      	movs	r7, r2
    3bb6:	4666      	mov	r6, ip
    3bb8:	4698      	mov	r8, r3
    3bba:	e68d      	b.n	38d8 <__aeabi_dsub+0x10c>
    3bbc:	488c      	ldr	r0, [pc, #560]	; (3df0 <__aeabi_dsub+0x624>)
    3bbe:	4283      	cmp	r3, r0
    3bc0:	d00b      	beq.n	3bda <__aeabi_dsub+0x40e>
    3bc2:	4663      	mov	r3, ip
    3bc4:	e6d9      	b.n	397a <__aeabi_dsub+0x1ae>
    3bc6:	2d00      	cmp	r5, #0
    3bc8:	d000      	beq.n	3bcc <__aeabi_dsub+0x400>
    3bca:	e096      	b.n	3cfa <__aeabi_dsub+0x52e>
    3bcc:	0008      	movs	r0, r1
    3bce:	4310      	orrs	r0, r2
    3bd0:	d100      	bne.n	3bd4 <__aeabi_dsub+0x408>
    3bd2:	e0e2      	b.n	3d9a <__aeabi_dsub+0x5ce>
    3bd4:	000c      	movs	r4, r1
    3bd6:	0017      	movs	r7, r2
    3bd8:	4698      	mov	r8, r3
    3bda:	4e85      	ldr	r6, [pc, #532]	; (3df0 <__aeabi_dsub+0x624>)
    3bdc:	e67c      	b.n	38d8 <__aeabi_dsub+0x10c>
    3bde:	2500      	movs	r5, #0
    3be0:	e780      	b.n	3ae4 <__aeabi_dsub+0x318>
    3be2:	2100      	movs	r1, #0
    3be4:	e78e      	b.n	3b04 <__aeabi_dsub+0x338>
    3be6:	0023      	movs	r3, r4
    3be8:	4650      	mov	r0, sl
    3bea:	4303      	orrs	r3, r0
    3bec:	2e00      	cmp	r6, #0
    3bee:	d000      	beq.n	3bf2 <__aeabi_dsub+0x426>
    3bf0:	e0a8      	b.n	3d44 <__aeabi_dsub+0x578>
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d100      	bne.n	3bf8 <__aeabi_dsub+0x42c>
    3bf6:	e0de      	b.n	3db6 <__aeabi_dsub+0x5ea>
    3bf8:	000b      	movs	r3, r1
    3bfa:	4313      	orrs	r3, r2
    3bfc:	d100      	bne.n	3c00 <__aeabi_dsub+0x434>
    3bfe:	e66b      	b.n	38d8 <__aeabi_dsub+0x10c>
    3c00:	4452      	add	r2, sl
    3c02:	4552      	cmp	r2, sl
    3c04:	4180      	sbcs	r0, r0
    3c06:	1864      	adds	r4, r4, r1
    3c08:	4240      	negs	r0, r0
    3c0a:	1824      	adds	r4, r4, r0
    3c0c:	0017      	movs	r7, r2
    3c0e:	0223      	lsls	r3, r4, #8
    3c10:	d400      	bmi.n	3c14 <__aeabi_dsub+0x448>
    3c12:	e6fd      	b.n	3a10 <__aeabi_dsub+0x244>
    3c14:	4b77      	ldr	r3, [pc, #476]	; (3df4 <__aeabi_dsub+0x628>)
    3c16:	4666      	mov	r6, ip
    3c18:	401c      	ands	r4, r3
    3c1a:	e65d      	b.n	38d8 <__aeabi_dsub+0x10c>
    3c1c:	0025      	movs	r5, r4
    3c1e:	4650      	mov	r0, sl
    3c20:	4305      	orrs	r5, r0
    3c22:	2e00      	cmp	r6, #0
    3c24:	d1cf      	bne.n	3bc6 <__aeabi_dsub+0x3fa>
    3c26:	2d00      	cmp	r5, #0
    3c28:	d14f      	bne.n	3cca <__aeabi_dsub+0x4fe>
    3c2a:	000c      	movs	r4, r1
    3c2c:	4314      	orrs	r4, r2
    3c2e:	d100      	bne.n	3c32 <__aeabi_dsub+0x466>
    3c30:	e0a0      	b.n	3d74 <__aeabi_dsub+0x5a8>
    3c32:	000c      	movs	r4, r1
    3c34:	0017      	movs	r7, r2
    3c36:	4698      	mov	r8, r3
    3c38:	e64e      	b.n	38d8 <__aeabi_dsub+0x10c>
    3c3a:	4666      	mov	r6, ip
    3c3c:	2400      	movs	r4, #0
    3c3e:	2700      	movs	r7, #0
    3c40:	e685      	b.n	394e <__aeabi_dsub+0x182>
    3c42:	001f      	movs	r7, r3
    3c44:	0008      	movs	r0, r1
    3c46:	3f20      	subs	r7, #32
    3c48:	40f8      	lsrs	r0, r7
    3c4a:	0007      	movs	r7, r0
    3c4c:	2b20      	cmp	r3, #32
    3c4e:	d100      	bne.n	3c52 <__aeabi_dsub+0x486>
    3c50:	e08e      	b.n	3d70 <__aeabi_dsub+0x5a4>
    3c52:	2040      	movs	r0, #64	; 0x40
    3c54:	1ac3      	subs	r3, r0, r3
    3c56:	4099      	lsls	r1, r3
    3c58:	430a      	orrs	r2, r1
    3c5a:	1e51      	subs	r1, r2, #1
    3c5c:	418a      	sbcs	r2, r1
    3c5e:	2100      	movs	r1, #0
    3c60:	4317      	orrs	r7, r2
    3c62:	e692      	b.n	398a <__aeabi_dsub+0x1be>
    3c64:	2e00      	cmp	r6, #0
    3c66:	d114      	bne.n	3c92 <__aeabi_dsub+0x4c6>
    3c68:	0026      	movs	r6, r4
    3c6a:	4650      	mov	r0, sl
    3c6c:	4306      	orrs	r6, r0
    3c6e:	d062      	beq.n	3d36 <__aeabi_dsub+0x56a>
    3c70:	43db      	mvns	r3, r3
    3c72:	2b00      	cmp	r3, #0
    3c74:	d15c      	bne.n	3d30 <__aeabi_dsub+0x564>
    3c76:	1887      	adds	r7, r0, r2
    3c78:	4297      	cmp	r7, r2
    3c7a:	4192      	sbcs	r2, r2
    3c7c:	1864      	adds	r4, r4, r1
    3c7e:	4252      	negs	r2, r2
    3c80:	18a4      	adds	r4, r4, r2
    3c82:	4666      	mov	r6, ip
    3c84:	e687      	b.n	3996 <__aeabi_dsub+0x1ca>
    3c86:	4650      	mov	r0, sl
    3c88:	4320      	orrs	r0, r4
    3c8a:	1e44      	subs	r4, r0, #1
    3c8c:	41a0      	sbcs	r0, r4
    3c8e:	2400      	movs	r4, #0
    3c90:	e760      	b.n	3b54 <__aeabi_dsub+0x388>
    3c92:	4e57      	ldr	r6, [pc, #348]	; (3df0 <__aeabi_dsub+0x624>)
    3c94:	45b4      	cmp	ip, r6
    3c96:	d04e      	beq.n	3d36 <__aeabi_dsub+0x56a>
    3c98:	2680      	movs	r6, #128	; 0x80
    3c9a:	0436      	lsls	r6, r6, #16
    3c9c:	425b      	negs	r3, r3
    3c9e:	4334      	orrs	r4, r6
    3ca0:	2b38      	cmp	r3, #56	; 0x38
    3ca2:	dd00      	ble.n	3ca6 <__aeabi_dsub+0x4da>
    3ca4:	e07f      	b.n	3da6 <__aeabi_dsub+0x5da>
    3ca6:	2b1f      	cmp	r3, #31
    3ca8:	dd00      	ble.n	3cac <__aeabi_dsub+0x4e0>
    3caa:	e08b      	b.n	3dc4 <__aeabi_dsub+0x5f8>
    3cac:	2620      	movs	r6, #32
    3cae:	0027      	movs	r7, r4
    3cb0:	4650      	mov	r0, sl
    3cb2:	1af6      	subs	r6, r6, r3
    3cb4:	40b7      	lsls	r7, r6
    3cb6:	40d8      	lsrs	r0, r3
    3cb8:	4307      	orrs	r7, r0
    3cba:	4650      	mov	r0, sl
    3cbc:	40b0      	lsls	r0, r6
    3cbe:	1e46      	subs	r6, r0, #1
    3cc0:	41b0      	sbcs	r0, r6
    3cc2:	4307      	orrs	r7, r0
    3cc4:	40dc      	lsrs	r4, r3
    3cc6:	18bf      	adds	r7, r7, r2
    3cc8:	e7d6      	b.n	3c78 <__aeabi_dsub+0x4ac>
    3cca:	000d      	movs	r5, r1
    3ccc:	4315      	orrs	r5, r2
    3cce:	d100      	bne.n	3cd2 <__aeabi_dsub+0x506>
    3cd0:	e602      	b.n	38d8 <__aeabi_dsub+0x10c>
    3cd2:	4650      	mov	r0, sl
    3cd4:	1a80      	subs	r0, r0, r2
    3cd6:	4582      	cmp	sl, r0
    3cd8:	41bf      	sbcs	r7, r7
    3cda:	1a65      	subs	r5, r4, r1
    3cdc:	427f      	negs	r7, r7
    3cde:	1bed      	subs	r5, r5, r7
    3ce0:	4684      	mov	ip, r0
    3ce2:	0228      	lsls	r0, r5, #8
    3ce4:	d400      	bmi.n	3ce8 <__aeabi_dsub+0x51c>
    3ce6:	e68d      	b.n	3a04 <__aeabi_dsub+0x238>
    3ce8:	4650      	mov	r0, sl
    3cea:	1a17      	subs	r7, r2, r0
    3cec:	42ba      	cmp	r2, r7
    3cee:	4192      	sbcs	r2, r2
    3cf0:	1b0c      	subs	r4, r1, r4
    3cf2:	4252      	negs	r2, r2
    3cf4:	1aa4      	subs	r4, r4, r2
    3cf6:	4698      	mov	r8, r3
    3cf8:	e5ee      	b.n	38d8 <__aeabi_dsub+0x10c>
    3cfa:	000d      	movs	r5, r1
    3cfc:	4315      	orrs	r5, r2
    3cfe:	d100      	bne.n	3d02 <__aeabi_dsub+0x536>
    3d00:	e76b      	b.n	3bda <__aeabi_dsub+0x40e>
    3d02:	4650      	mov	r0, sl
    3d04:	0767      	lsls	r7, r4, #29
    3d06:	08c0      	lsrs	r0, r0, #3
    3d08:	4307      	orrs	r7, r0
    3d0a:	2080      	movs	r0, #128	; 0x80
    3d0c:	08e4      	lsrs	r4, r4, #3
    3d0e:	0300      	lsls	r0, r0, #12
    3d10:	4204      	tst	r4, r0
    3d12:	d007      	beq.n	3d24 <__aeabi_dsub+0x558>
    3d14:	08cd      	lsrs	r5, r1, #3
    3d16:	4205      	tst	r5, r0
    3d18:	d104      	bne.n	3d24 <__aeabi_dsub+0x558>
    3d1a:	002c      	movs	r4, r5
    3d1c:	4698      	mov	r8, r3
    3d1e:	08d7      	lsrs	r7, r2, #3
    3d20:	0749      	lsls	r1, r1, #29
    3d22:	430f      	orrs	r7, r1
    3d24:	0f7b      	lsrs	r3, r7, #29
    3d26:	00e4      	lsls	r4, r4, #3
    3d28:	431c      	orrs	r4, r3
    3d2a:	00ff      	lsls	r7, r7, #3
    3d2c:	4e30      	ldr	r6, [pc, #192]	; (3df0 <__aeabi_dsub+0x624>)
    3d2e:	e5d3      	b.n	38d8 <__aeabi_dsub+0x10c>
    3d30:	4e2f      	ldr	r6, [pc, #188]	; (3df0 <__aeabi_dsub+0x624>)
    3d32:	45b4      	cmp	ip, r6
    3d34:	d1b4      	bne.n	3ca0 <__aeabi_dsub+0x4d4>
    3d36:	000c      	movs	r4, r1
    3d38:	0017      	movs	r7, r2
    3d3a:	4666      	mov	r6, ip
    3d3c:	e5cc      	b.n	38d8 <__aeabi_dsub+0x10c>
    3d3e:	2700      	movs	r7, #0
    3d40:	2400      	movs	r4, #0
    3d42:	e5e8      	b.n	3916 <__aeabi_dsub+0x14a>
    3d44:	2b00      	cmp	r3, #0
    3d46:	d039      	beq.n	3dbc <__aeabi_dsub+0x5f0>
    3d48:	000b      	movs	r3, r1
    3d4a:	4313      	orrs	r3, r2
    3d4c:	d100      	bne.n	3d50 <__aeabi_dsub+0x584>
    3d4e:	e744      	b.n	3bda <__aeabi_dsub+0x40e>
    3d50:	08c0      	lsrs	r0, r0, #3
    3d52:	0767      	lsls	r7, r4, #29
    3d54:	4307      	orrs	r7, r0
    3d56:	2080      	movs	r0, #128	; 0x80
    3d58:	08e4      	lsrs	r4, r4, #3
    3d5a:	0300      	lsls	r0, r0, #12
    3d5c:	4204      	tst	r4, r0
    3d5e:	d0e1      	beq.n	3d24 <__aeabi_dsub+0x558>
    3d60:	08cb      	lsrs	r3, r1, #3
    3d62:	4203      	tst	r3, r0
    3d64:	d1de      	bne.n	3d24 <__aeabi_dsub+0x558>
    3d66:	08d7      	lsrs	r7, r2, #3
    3d68:	0749      	lsls	r1, r1, #29
    3d6a:	430f      	orrs	r7, r1
    3d6c:	001c      	movs	r4, r3
    3d6e:	e7d9      	b.n	3d24 <__aeabi_dsub+0x558>
    3d70:	2100      	movs	r1, #0
    3d72:	e771      	b.n	3c58 <__aeabi_dsub+0x48c>
    3d74:	2500      	movs	r5, #0
    3d76:	2700      	movs	r7, #0
    3d78:	e5e9      	b.n	394e <__aeabi_dsub+0x182>
    3d7a:	002e      	movs	r6, r5
    3d7c:	0027      	movs	r7, r4
    3d7e:	3e20      	subs	r6, #32
    3d80:	40f7      	lsrs	r7, r6
    3d82:	2d20      	cmp	r5, #32
    3d84:	d02f      	beq.n	3de6 <__aeabi_dsub+0x61a>
    3d86:	2640      	movs	r6, #64	; 0x40
    3d88:	1b75      	subs	r5, r6, r5
    3d8a:	40ac      	lsls	r4, r5
    3d8c:	4650      	mov	r0, sl
    3d8e:	4320      	orrs	r0, r4
    3d90:	1e44      	subs	r4, r0, #1
    3d92:	41a0      	sbcs	r0, r4
    3d94:	2400      	movs	r4, #0
    3d96:	4338      	orrs	r0, r7
    3d98:	e6dc      	b.n	3b54 <__aeabi_dsub+0x388>
    3d9a:	2480      	movs	r4, #128	; 0x80
    3d9c:	2500      	movs	r5, #0
    3d9e:	0324      	lsls	r4, r4, #12
    3da0:	4e13      	ldr	r6, [pc, #76]	; (3df0 <__aeabi_dsub+0x624>)
    3da2:	2700      	movs	r7, #0
    3da4:	e5d3      	b.n	394e <__aeabi_dsub+0x182>
    3da6:	4650      	mov	r0, sl
    3da8:	4320      	orrs	r0, r4
    3daa:	0007      	movs	r7, r0
    3dac:	1e78      	subs	r0, r7, #1
    3dae:	4187      	sbcs	r7, r0
    3db0:	2400      	movs	r4, #0
    3db2:	18bf      	adds	r7, r7, r2
    3db4:	e760      	b.n	3c78 <__aeabi_dsub+0x4ac>
    3db6:	000c      	movs	r4, r1
    3db8:	0017      	movs	r7, r2
    3dba:	e58d      	b.n	38d8 <__aeabi_dsub+0x10c>
    3dbc:	000c      	movs	r4, r1
    3dbe:	0017      	movs	r7, r2
    3dc0:	4e0b      	ldr	r6, [pc, #44]	; (3df0 <__aeabi_dsub+0x624>)
    3dc2:	e589      	b.n	38d8 <__aeabi_dsub+0x10c>
    3dc4:	001e      	movs	r6, r3
    3dc6:	0027      	movs	r7, r4
    3dc8:	3e20      	subs	r6, #32
    3dca:	40f7      	lsrs	r7, r6
    3dcc:	2b20      	cmp	r3, #32
    3dce:	d00c      	beq.n	3dea <__aeabi_dsub+0x61e>
    3dd0:	2640      	movs	r6, #64	; 0x40
    3dd2:	1af3      	subs	r3, r6, r3
    3dd4:	409c      	lsls	r4, r3
    3dd6:	4650      	mov	r0, sl
    3dd8:	4320      	orrs	r0, r4
    3dda:	1e44      	subs	r4, r0, #1
    3ddc:	41a0      	sbcs	r0, r4
    3dde:	4307      	orrs	r7, r0
    3de0:	2400      	movs	r4, #0
    3de2:	18bf      	adds	r7, r7, r2
    3de4:	e748      	b.n	3c78 <__aeabi_dsub+0x4ac>
    3de6:	2400      	movs	r4, #0
    3de8:	e7d0      	b.n	3d8c <__aeabi_dsub+0x5c0>
    3dea:	2400      	movs	r4, #0
    3dec:	e7f3      	b.n	3dd6 <__aeabi_dsub+0x60a>
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	000007ff 	.word	0x000007ff
    3df4:	ff7fffff 	.word	0xff7fffff

00003df8 <__aeabi_d2iz>:
    3df8:	b530      	push	{r4, r5, lr}
    3dfa:	4d13      	ldr	r5, [pc, #76]	; (3e48 <__aeabi_d2iz+0x50>)
    3dfc:	030a      	lsls	r2, r1, #12
    3dfe:	004b      	lsls	r3, r1, #1
    3e00:	0b12      	lsrs	r2, r2, #12
    3e02:	0d5b      	lsrs	r3, r3, #21
    3e04:	0fc9      	lsrs	r1, r1, #31
    3e06:	2400      	movs	r4, #0
    3e08:	42ab      	cmp	r3, r5
    3e0a:	dd10      	ble.n	3e2e <__aeabi_d2iz+0x36>
    3e0c:	4c0f      	ldr	r4, [pc, #60]	; (3e4c <__aeabi_d2iz+0x54>)
    3e0e:	42a3      	cmp	r3, r4
    3e10:	dc0f      	bgt.n	3e32 <__aeabi_d2iz+0x3a>
    3e12:	2480      	movs	r4, #128	; 0x80
    3e14:	4d0e      	ldr	r5, [pc, #56]	; (3e50 <__aeabi_d2iz+0x58>)
    3e16:	0364      	lsls	r4, r4, #13
    3e18:	4322      	orrs	r2, r4
    3e1a:	1aed      	subs	r5, r5, r3
    3e1c:	2d1f      	cmp	r5, #31
    3e1e:	dd0b      	ble.n	3e38 <__aeabi_d2iz+0x40>
    3e20:	480c      	ldr	r0, [pc, #48]	; (3e54 <__aeabi_d2iz+0x5c>)
    3e22:	1ac3      	subs	r3, r0, r3
    3e24:	40da      	lsrs	r2, r3
    3e26:	4254      	negs	r4, r2
    3e28:	2900      	cmp	r1, #0
    3e2a:	d100      	bne.n	3e2e <__aeabi_d2iz+0x36>
    3e2c:	0014      	movs	r4, r2
    3e2e:	0020      	movs	r0, r4
    3e30:	bd30      	pop	{r4, r5, pc}
    3e32:	4b09      	ldr	r3, [pc, #36]	; (3e58 <__aeabi_d2iz+0x60>)
    3e34:	18cc      	adds	r4, r1, r3
    3e36:	e7fa      	b.n	3e2e <__aeabi_d2iz+0x36>
    3e38:	4c08      	ldr	r4, [pc, #32]	; (3e5c <__aeabi_d2iz+0x64>)
    3e3a:	40e8      	lsrs	r0, r5
    3e3c:	46a4      	mov	ip, r4
    3e3e:	4463      	add	r3, ip
    3e40:	409a      	lsls	r2, r3
    3e42:	4302      	orrs	r2, r0
    3e44:	e7ef      	b.n	3e26 <__aeabi_d2iz+0x2e>
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	000003fe 	.word	0x000003fe
    3e4c:	0000041d 	.word	0x0000041d
    3e50:	00000433 	.word	0x00000433
    3e54:	00000413 	.word	0x00000413
    3e58:	7fffffff 	.word	0x7fffffff
    3e5c:	fffffbed 	.word	0xfffffbed

00003e60 <__aeabi_i2d>:
    3e60:	b570      	push	{r4, r5, r6, lr}
    3e62:	2800      	cmp	r0, #0
    3e64:	d030      	beq.n	3ec8 <__aeabi_i2d+0x68>
    3e66:	17c3      	asrs	r3, r0, #31
    3e68:	18c4      	adds	r4, r0, r3
    3e6a:	405c      	eors	r4, r3
    3e6c:	0fc5      	lsrs	r5, r0, #31
    3e6e:	0020      	movs	r0, r4
    3e70:	f000 f870 	bl	3f54 <__clzsi2>
    3e74:	4b17      	ldr	r3, [pc, #92]	; (3ed4 <__aeabi_i2d+0x74>)
    3e76:	4a18      	ldr	r2, [pc, #96]	; (3ed8 <__aeabi_i2d+0x78>)
    3e78:	1a1b      	subs	r3, r3, r0
    3e7a:	1ad2      	subs	r2, r2, r3
    3e7c:	2a1f      	cmp	r2, #31
    3e7e:	dd18      	ble.n	3eb2 <__aeabi_i2d+0x52>
    3e80:	4a16      	ldr	r2, [pc, #88]	; (3edc <__aeabi_i2d+0x7c>)
    3e82:	1ad2      	subs	r2, r2, r3
    3e84:	4094      	lsls	r4, r2
    3e86:	2200      	movs	r2, #0
    3e88:	0324      	lsls	r4, r4, #12
    3e8a:	055b      	lsls	r3, r3, #21
    3e8c:	0b24      	lsrs	r4, r4, #12
    3e8e:	0d5b      	lsrs	r3, r3, #21
    3e90:	2100      	movs	r1, #0
    3e92:	0010      	movs	r0, r2
    3e94:	0324      	lsls	r4, r4, #12
    3e96:	0d0a      	lsrs	r2, r1, #20
    3e98:	0b24      	lsrs	r4, r4, #12
    3e9a:	0512      	lsls	r2, r2, #20
    3e9c:	4322      	orrs	r2, r4
    3e9e:	4c10      	ldr	r4, [pc, #64]	; (3ee0 <__aeabi_i2d+0x80>)
    3ea0:	051b      	lsls	r3, r3, #20
    3ea2:	4022      	ands	r2, r4
    3ea4:	4313      	orrs	r3, r2
    3ea6:	005b      	lsls	r3, r3, #1
    3ea8:	07ed      	lsls	r5, r5, #31
    3eaa:	085b      	lsrs	r3, r3, #1
    3eac:	432b      	orrs	r3, r5
    3eae:	0019      	movs	r1, r3
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
    3eb2:	0021      	movs	r1, r4
    3eb4:	4091      	lsls	r1, r2
    3eb6:	000a      	movs	r2, r1
    3eb8:	210b      	movs	r1, #11
    3eba:	1a08      	subs	r0, r1, r0
    3ebc:	40c4      	lsrs	r4, r0
    3ebe:	055b      	lsls	r3, r3, #21
    3ec0:	0324      	lsls	r4, r4, #12
    3ec2:	0b24      	lsrs	r4, r4, #12
    3ec4:	0d5b      	lsrs	r3, r3, #21
    3ec6:	e7e3      	b.n	3e90 <__aeabi_i2d+0x30>
    3ec8:	2500      	movs	r5, #0
    3eca:	2300      	movs	r3, #0
    3ecc:	2400      	movs	r4, #0
    3ece:	2200      	movs	r2, #0
    3ed0:	e7de      	b.n	3e90 <__aeabi_i2d+0x30>
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	0000041e 	.word	0x0000041e
    3ed8:	00000433 	.word	0x00000433
    3edc:	00000413 	.word	0x00000413
    3ee0:	800fffff 	.word	0x800fffff

00003ee4 <__aeabi_ui2d>:
    3ee4:	b510      	push	{r4, lr}
    3ee6:	1e04      	subs	r4, r0, #0
    3ee8:	d028      	beq.n	3f3c <__aeabi_ui2d+0x58>
    3eea:	f000 f833 	bl	3f54 <__clzsi2>
    3eee:	4b15      	ldr	r3, [pc, #84]	; (3f44 <__aeabi_ui2d+0x60>)
    3ef0:	4a15      	ldr	r2, [pc, #84]	; (3f48 <__aeabi_ui2d+0x64>)
    3ef2:	1a1b      	subs	r3, r3, r0
    3ef4:	1ad2      	subs	r2, r2, r3
    3ef6:	2a1f      	cmp	r2, #31
    3ef8:	dd15      	ble.n	3f26 <__aeabi_ui2d+0x42>
    3efa:	4a14      	ldr	r2, [pc, #80]	; (3f4c <__aeabi_ui2d+0x68>)
    3efc:	1ad2      	subs	r2, r2, r3
    3efe:	4094      	lsls	r4, r2
    3f00:	2200      	movs	r2, #0
    3f02:	0324      	lsls	r4, r4, #12
    3f04:	055b      	lsls	r3, r3, #21
    3f06:	0b24      	lsrs	r4, r4, #12
    3f08:	0d5b      	lsrs	r3, r3, #21
    3f0a:	2100      	movs	r1, #0
    3f0c:	0010      	movs	r0, r2
    3f0e:	0324      	lsls	r4, r4, #12
    3f10:	0d0a      	lsrs	r2, r1, #20
    3f12:	0b24      	lsrs	r4, r4, #12
    3f14:	0512      	lsls	r2, r2, #20
    3f16:	4322      	orrs	r2, r4
    3f18:	4c0d      	ldr	r4, [pc, #52]	; (3f50 <__aeabi_ui2d+0x6c>)
    3f1a:	051b      	lsls	r3, r3, #20
    3f1c:	4022      	ands	r2, r4
    3f1e:	4313      	orrs	r3, r2
    3f20:	005b      	lsls	r3, r3, #1
    3f22:	0859      	lsrs	r1, r3, #1
    3f24:	bd10      	pop	{r4, pc}
    3f26:	0021      	movs	r1, r4
    3f28:	4091      	lsls	r1, r2
    3f2a:	000a      	movs	r2, r1
    3f2c:	210b      	movs	r1, #11
    3f2e:	1a08      	subs	r0, r1, r0
    3f30:	40c4      	lsrs	r4, r0
    3f32:	055b      	lsls	r3, r3, #21
    3f34:	0324      	lsls	r4, r4, #12
    3f36:	0b24      	lsrs	r4, r4, #12
    3f38:	0d5b      	lsrs	r3, r3, #21
    3f3a:	e7e6      	b.n	3f0a <__aeabi_ui2d+0x26>
    3f3c:	2300      	movs	r3, #0
    3f3e:	2400      	movs	r4, #0
    3f40:	2200      	movs	r2, #0
    3f42:	e7e2      	b.n	3f0a <__aeabi_ui2d+0x26>
    3f44:	0000041e 	.word	0x0000041e
    3f48:	00000433 	.word	0x00000433
    3f4c:	00000413 	.word	0x00000413
    3f50:	800fffff 	.word	0x800fffff

00003f54 <__clzsi2>:
    3f54:	211c      	movs	r1, #28
    3f56:	2301      	movs	r3, #1
    3f58:	041b      	lsls	r3, r3, #16
    3f5a:	4298      	cmp	r0, r3
    3f5c:	d301      	bcc.n	3f62 <__clzsi2+0xe>
    3f5e:	0c00      	lsrs	r0, r0, #16
    3f60:	3910      	subs	r1, #16
    3f62:	0a1b      	lsrs	r3, r3, #8
    3f64:	4298      	cmp	r0, r3
    3f66:	d301      	bcc.n	3f6c <__clzsi2+0x18>
    3f68:	0a00      	lsrs	r0, r0, #8
    3f6a:	3908      	subs	r1, #8
    3f6c:	091b      	lsrs	r3, r3, #4
    3f6e:	4298      	cmp	r0, r3
    3f70:	d301      	bcc.n	3f76 <__clzsi2+0x22>
    3f72:	0900      	lsrs	r0, r0, #4
    3f74:	3904      	subs	r1, #4
    3f76:	a202      	add	r2, pc, #8	; (adr r2, 3f80 <__clzsi2+0x2c>)
    3f78:	5c10      	ldrb	r0, [r2, r0]
    3f7a:	1840      	adds	r0, r0, r1
    3f7c:	4770      	bx	lr
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	02020304 	.word	0x02020304
    3f84:	01010101 	.word	0x01010101
	...

00003f90 <__divdi3>:
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	464e      	mov	r6, r9
    3f94:	4657      	mov	r7, sl
    3f96:	46de      	mov	lr, fp
    3f98:	4645      	mov	r5, r8
    3f9a:	b5e0      	push	{r5, r6, r7, lr}
    3f9c:	0006      	movs	r6, r0
    3f9e:	2000      	movs	r0, #0
    3fa0:	000f      	movs	r7, r1
    3fa2:	b083      	sub	sp, #12
    3fa4:	0019      	movs	r1, r3
    3fa6:	4681      	mov	r9, r0
    3fa8:	2f00      	cmp	r7, #0
    3faa:	da00      	bge.n	3fae <__divdi3+0x1e>
    3fac:	e08c      	b.n	40c8 <__divdi3+0x138>
    3fae:	2900      	cmp	r1, #0
    3fb0:	da00      	bge.n	3fb4 <__divdi3+0x24>
    3fb2:	e080      	b.n	40b6 <__divdi3+0x126>
    3fb4:	0034      	movs	r4, r6
    3fb6:	003d      	movs	r5, r7
    3fb8:	4692      	mov	sl, r2
    3fba:	4698      	mov	r8, r3
    3fbc:	42bb      	cmp	r3, r7
    3fbe:	d869      	bhi.n	4094 <__divdi3+0x104>
    3fc0:	d066      	beq.n	4090 <__divdi3+0x100>
    3fc2:	4641      	mov	r1, r8
    3fc4:	4650      	mov	r0, sl
    3fc6:	f000 f8bf 	bl	4148 <__clzdi2>
    3fca:	4683      	mov	fp, r0
    3fcc:	0039      	movs	r1, r7
    3fce:	0030      	movs	r0, r6
    3fd0:	f000 f8ba 	bl	4148 <__clzdi2>
    3fd4:	465b      	mov	r3, fp
    3fd6:	1a1b      	subs	r3, r3, r0
    3fd8:	469c      	mov	ip, r3
    3fda:	3b20      	subs	r3, #32
    3fdc:	469b      	mov	fp, r3
    3fde:	d500      	bpl.n	3fe2 <__divdi3+0x52>
    3fe0:	e087      	b.n	40f2 <__divdi3+0x162>
    3fe2:	4651      	mov	r1, sl
    3fe4:	4658      	mov	r0, fp
    3fe6:	4081      	lsls	r1, r0
    3fe8:	000b      	movs	r3, r1
    3fea:	4651      	mov	r1, sl
    3fec:	4660      	mov	r0, ip
    3fee:	4081      	lsls	r1, r0
    3ff0:	000a      	movs	r2, r1
    3ff2:	42bb      	cmp	r3, r7
    3ff4:	d900      	bls.n	3ff8 <__divdi3+0x68>
    3ff6:	e072      	b.n	40de <__divdi3+0x14e>
    3ff8:	d06e      	beq.n	40d8 <__divdi3+0x148>
    3ffa:	0034      	movs	r4, r6
    3ffc:	003d      	movs	r5, r7
    3ffe:	4659      	mov	r1, fp
    4000:	1aa4      	subs	r4, r4, r2
    4002:	419d      	sbcs	r5, r3
    4004:	2900      	cmp	r1, #0
    4006:	da00      	bge.n	400a <__divdi3+0x7a>
    4008:	e08a      	b.n	4120 <__divdi3+0x190>
    400a:	2100      	movs	r1, #0
    400c:	2000      	movs	r0, #0
    400e:	2601      	movs	r6, #1
    4010:	9000      	str	r0, [sp, #0]
    4012:	9101      	str	r1, [sp, #4]
    4014:	4659      	mov	r1, fp
    4016:	408e      	lsls	r6, r1
    4018:	9601      	str	r6, [sp, #4]
    401a:	4661      	mov	r1, ip
    401c:	2601      	movs	r6, #1
    401e:	408e      	lsls	r6, r1
    4020:	4661      	mov	r1, ip
    4022:	9600      	str	r6, [sp, #0]
    4024:	2900      	cmp	r1, #0
    4026:	d061      	beq.n	40ec <__divdi3+0x15c>
    4028:	07d9      	lsls	r1, r3, #31
    402a:	0856      	lsrs	r6, r2, #1
    402c:	430e      	orrs	r6, r1
    402e:	085f      	lsrs	r7, r3, #1
    4030:	4661      	mov	r1, ip
    4032:	2201      	movs	r2, #1
    4034:	2300      	movs	r3, #0
    4036:	e00c      	b.n	4052 <__divdi3+0xc2>
    4038:	42af      	cmp	r7, r5
    403a:	d101      	bne.n	4040 <__divdi3+0xb0>
    403c:	42a6      	cmp	r6, r4
    403e:	d80a      	bhi.n	4056 <__divdi3+0xc6>
    4040:	1ba4      	subs	r4, r4, r6
    4042:	41bd      	sbcs	r5, r7
    4044:	1924      	adds	r4, r4, r4
    4046:	416d      	adcs	r5, r5
    4048:	3901      	subs	r1, #1
    404a:	18a4      	adds	r4, r4, r2
    404c:	415d      	adcs	r5, r3
    404e:	2900      	cmp	r1, #0
    4050:	d006      	beq.n	4060 <__divdi3+0xd0>
    4052:	42af      	cmp	r7, r5
    4054:	d9f0      	bls.n	4038 <__divdi3+0xa8>
    4056:	3901      	subs	r1, #1
    4058:	1924      	adds	r4, r4, r4
    405a:	416d      	adcs	r5, r5
    405c:	2900      	cmp	r1, #0
    405e:	d1f8      	bne.n	4052 <__divdi3+0xc2>
    4060:	465b      	mov	r3, fp
    4062:	9800      	ldr	r0, [sp, #0]
    4064:	9901      	ldr	r1, [sp, #4]
    4066:	1900      	adds	r0, r0, r4
    4068:	4169      	adcs	r1, r5
    406a:	2b00      	cmp	r3, #0
    406c:	db4d      	blt.n	410a <__divdi3+0x17a>
    406e:	002e      	movs	r6, r5
    4070:	40de      	lsrs	r6, r3
    4072:	4663      	mov	r3, ip
    4074:	002c      	movs	r4, r5
    4076:	40dc      	lsrs	r4, r3
    4078:	465b      	mov	r3, fp
    407a:	2b00      	cmp	r3, #0
    407c:	db5b      	blt.n	4136 <__divdi3+0x1a6>
    407e:	0034      	movs	r4, r6
    4080:	409c      	lsls	r4, r3
    4082:	0023      	movs	r3, r4
    4084:	4664      	mov	r4, ip
    4086:	40a6      	lsls	r6, r4
    4088:	0032      	movs	r2, r6
    408a:	1a80      	subs	r0, r0, r2
    408c:	4199      	sbcs	r1, r3
    408e:	e003      	b.n	4098 <__divdi3+0x108>
    4090:	42b2      	cmp	r2, r6
    4092:	d996      	bls.n	3fc2 <__divdi3+0x32>
    4094:	2000      	movs	r0, #0
    4096:	2100      	movs	r1, #0
    4098:	464b      	mov	r3, r9
    409a:	2b00      	cmp	r3, #0
    409c:	d004      	beq.n	40a8 <__divdi3+0x118>
    409e:	0003      	movs	r3, r0
    40a0:	000c      	movs	r4, r1
    40a2:	2100      	movs	r1, #0
    40a4:	4258      	negs	r0, r3
    40a6:	41a1      	sbcs	r1, r4
    40a8:	b003      	add	sp, #12
    40aa:	bc3c      	pop	{r2, r3, r4, r5}
    40ac:	4690      	mov	r8, r2
    40ae:	4699      	mov	r9, r3
    40b0:	46a2      	mov	sl, r4
    40b2:	46ab      	mov	fp, r5
    40b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40b6:	4649      	mov	r1, r9
    40b8:	43c9      	mvns	r1, r1
    40ba:	0010      	movs	r0, r2
    40bc:	4689      	mov	r9, r1
    40be:	0019      	movs	r1, r3
    40c0:	2300      	movs	r3, #0
    40c2:	4242      	negs	r2, r0
    40c4:	418b      	sbcs	r3, r1
    40c6:	e775      	b.n	3fb4 <__divdi3+0x24>
    40c8:	0034      	movs	r4, r6
    40ca:	003d      	movs	r5, r7
    40cc:	3801      	subs	r0, #1
    40ce:	2700      	movs	r7, #0
    40d0:	4266      	negs	r6, r4
    40d2:	41af      	sbcs	r7, r5
    40d4:	4681      	mov	r9, r0
    40d6:	e76a      	b.n	3fae <__divdi3+0x1e>
    40d8:	42b1      	cmp	r1, r6
    40da:	d800      	bhi.n	40de <__divdi3+0x14e>
    40dc:	e78d      	b.n	3ffa <__divdi3+0x6a>
    40de:	2100      	movs	r1, #0
    40e0:	2000      	movs	r0, #0
    40e2:	9000      	str	r0, [sp, #0]
    40e4:	9101      	str	r1, [sp, #4]
    40e6:	4661      	mov	r1, ip
    40e8:	2900      	cmp	r1, #0
    40ea:	d19d      	bne.n	4028 <__divdi3+0x98>
    40ec:	9800      	ldr	r0, [sp, #0]
    40ee:	9901      	ldr	r1, [sp, #4]
    40f0:	e7d2      	b.n	4098 <__divdi3+0x108>
    40f2:	4662      	mov	r2, ip
    40f4:	4640      	mov	r0, r8
    40f6:	2320      	movs	r3, #32
    40f8:	4651      	mov	r1, sl
    40fa:	4090      	lsls	r0, r2
    40fc:	1a9b      	subs	r3, r3, r2
    40fe:	40d9      	lsrs	r1, r3
    4100:	0003      	movs	r3, r0
    4102:	9100      	str	r1, [sp, #0]
    4104:	9900      	ldr	r1, [sp, #0]
    4106:	430b      	orrs	r3, r1
    4108:	e76f      	b.n	3fea <__divdi3+0x5a>
    410a:	4662      	mov	r2, ip
    410c:	2320      	movs	r3, #32
    410e:	1a9b      	subs	r3, r3, r2
    4110:	002a      	movs	r2, r5
    4112:	409a      	lsls	r2, r3
    4114:	0026      	movs	r6, r4
    4116:	0013      	movs	r3, r2
    4118:	4662      	mov	r2, ip
    411a:	40d6      	lsrs	r6, r2
    411c:	431e      	orrs	r6, r3
    411e:	e7a8      	b.n	4072 <__divdi3+0xe2>
    4120:	4661      	mov	r1, ip
    4122:	2620      	movs	r6, #32
    4124:	2701      	movs	r7, #1
    4126:	1a76      	subs	r6, r6, r1
    4128:	2000      	movs	r0, #0
    412a:	2100      	movs	r1, #0
    412c:	40f7      	lsrs	r7, r6
    412e:	9000      	str	r0, [sp, #0]
    4130:	9101      	str	r1, [sp, #4]
    4132:	9701      	str	r7, [sp, #4]
    4134:	e771      	b.n	401a <__divdi3+0x8a>
    4136:	4662      	mov	r2, ip
    4138:	2320      	movs	r3, #32
    413a:	0035      	movs	r5, r6
    413c:	4094      	lsls	r4, r2
    413e:	1a9b      	subs	r3, r3, r2
    4140:	40dd      	lsrs	r5, r3
    4142:	0023      	movs	r3, r4
    4144:	432b      	orrs	r3, r5
    4146:	e79d      	b.n	4084 <__divdi3+0xf4>

00004148 <__clzdi2>:
    4148:	b510      	push	{r4, lr}
    414a:	2900      	cmp	r1, #0
    414c:	d103      	bne.n	4156 <__clzdi2+0xe>
    414e:	f7ff ff01 	bl	3f54 <__clzsi2>
    4152:	3020      	adds	r0, #32
    4154:	e002      	b.n	415c <__clzdi2+0x14>
    4156:	1c08      	adds	r0, r1, #0
    4158:	f7ff fefc 	bl	3f54 <__clzsi2>
    415c:	bd10      	pop	{r4, pc}
    415e:	46c0      	nop			; (mov r8, r8)

00004160 <__libc_init_array>:
    4160:	b570      	push	{r4, r5, r6, lr}
    4162:	2600      	movs	r6, #0
    4164:	4d0c      	ldr	r5, [pc, #48]	; (4198 <__libc_init_array+0x38>)
    4166:	4c0d      	ldr	r4, [pc, #52]	; (419c <__libc_init_array+0x3c>)
    4168:	1b64      	subs	r4, r4, r5
    416a:	10a4      	asrs	r4, r4, #2
    416c:	42a6      	cmp	r6, r4
    416e:	d109      	bne.n	4184 <__libc_init_array+0x24>
    4170:	2600      	movs	r6, #0
    4172:	f000 f88b 	bl	428c <_init>
    4176:	4d0a      	ldr	r5, [pc, #40]	; (41a0 <__libc_init_array+0x40>)
    4178:	4c0a      	ldr	r4, [pc, #40]	; (41a4 <__libc_init_array+0x44>)
    417a:	1b64      	subs	r4, r4, r5
    417c:	10a4      	asrs	r4, r4, #2
    417e:	42a6      	cmp	r6, r4
    4180:	d105      	bne.n	418e <__libc_init_array+0x2e>
    4182:	bd70      	pop	{r4, r5, r6, pc}
    4184:	00b3      	lsls	r3, r6, #2
    4186:	58eb      	ldr	r3, [r5, r3]
    4188:	4798      	blx	r3
    418a:	3601      	adds	r6, #1
    418c:	e7ee      	b.n	416c <__libc_init_array+0xc>
    418e:	00b3      	lsls	r3, r6, #2
    4190:	58eb      	ldr	r3, [r5, r3]
    4192:	4798      	blx	r3
    4194:	3601      	adds	r6, #1
    4196:	e7f2      	b.n	417e <__libc_init_array+0x1e>
    4198:	00004298 	.word	0x00004298
    419c:	00004298 	.word	0x00004298
    41a0:	00004298 	.word	0x00004298
    41a4:	0000429c 	.word	0x0000429c

000041a8 <memcpy>:
    41a8:	2300      	movs	r3, #0
    41aa:	b510      	push	{r4, lr}
    41ac:	429a      	cmp	r2, r3
    41ae:	d100      	bne.n	41b2 <memcpy+0xa>
    41b0:	bd10      	pop	{r4, pc}
    41b2:	5ccc      	ldrb	r4, [r1, r3]
    41b4:	54c4      	strb	r4, [r0, r3]
    41b6:	3301      	adds	r3, #1
    41b8:	e7f8      	b.n	41ac <memcpy+0x4>

000041ba <memset>:
    41ba:	0003      	movs	r3, r0
    41bc:	1882      	adds	r2, r0, r2
    41be:	4293      	cmp	r3, r2
    41c0:	d100      	bne.n	41c4 <memset+0xa>
    41c2:	4770      	bx	lr
    41c4:	7019      	strb	r1, [r3, #0]
    41c6:	3301      	adds	r3, #1
    41c8:	e7f9      	b.n	41be <memset+0x4>
    41ca:	0000      	movs	r0, r0
    41cc:	0000f5f4 	.word	0x0000f5f4
    41d0:	42000800 	.word	0x42000800
    41d4:	42000c00 	.word	0x42000c00
    41d8:	42001000 	.word	0x42001000
    41dc:	42001400 	.word	0x42001400
    41e0:	42001800 	.word	0x42001800
    41e4:	42001c00 	.word	0x42001c00
    41e8:	00001cce 	.word	0x00001cce
    41ec:	00001cca 	.word	0x00001cca
    41f0:	00001cca 	.word	0x00001cca
    41f4:	00001d2c 	.word	0x00001d2c
    41f8:	00001d2c 	.word	0x00001d2c
    41fc:	00001ce2 	.word	0x00001ce2
    4200:	00001cd4 	.word	0x00001cd4
    4204:	00001ce8 	.word	0x00001ce8
    4208:	00001d1a 	.word	0x00001d1a
    420c:	00002c5c 	.word	0x00002c5c
    4210:	00002c3e 	.word	0x00002c3e
    4214:	00002bf8 	.word	0x00002bf8
    4218:	00002b16 	.word	0x00002b16
    421c:	00002bf8 	.word	0x00002bf8
    4220:	00002c30 	.word	0x00002c30
    4224:	00002bf8 	.word	0x00002bf8
    4228:	00002b16 	.word	0x00002b16
    422c:	00002c3e 	.word	0x00002c3e
    4230:	00002c3e 	.word	0x00002c3e
    4234:	00002c30 	.word	0x00002c30
    4238:	00002b16 	.word	0x00002b16
    423c:	00002b0e 	.word	0x00002b0e
    4240:	00002b0e 	.word	0x00002b0e
    4244:	00002b0e 	.word	0x00002b0e
    4248:	00002e74 	.word	0x00002e74
    424c:	000034bc 	.word	0x000034bc
    4250:	0000337c 	.word	0x0000337c
    4254:	0000337c 	.word	0x0000337c
    4258:	00003378 	.word	0x00003378
    425c:	00003494 	.word	0x00003494
    4260:	00003494 	.word	0x00003494
    4264:	00003486 	.word	0x00003486
    4268:	00003378 	.word	0x00003378
    426c:	00003494 	.word	0x00003494
    4270:	00003486 	.word	0x00003486
    4274:	00003494 	.word	0x00003494
    4278:	00003378 	.word	0x00003378
    427c:	0000349c 	.word	0x0000349c
    4280:	0000349c 	.word	0x0000349c
    4284:	0000349c 	.word	0x0000349c
    4288:	000036a0 	.word	0x000036a0

0000428c <_init>:
    428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4292:	bc08      	pop	{r3}
    4294:	469e      	mov	lr, r3
    4296:	4770      	bx	lr

00004298 <__init_array_start>:
    4298:	000000dd 	.word	0x000000dd

0000429c <_fini>:
    429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42a2:	bc08      	pop	{r3}
    42a4:	469e      	mov	lr, r3
    42a6:	4770      	bx	lr

000042a8 <__fini_array_start>:
    42a8:	000000b5 	.word	0x000000b5
