
cicada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000608c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000628  20000074  00006100  00020074  2**2
                  ALLOC
  3 .stack        00002004  2000069c  00006728  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a7a4  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e2d  00000000  00000000  0004a899  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000980c  00000000  00000000  0004e6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000840  00000000  00000000  00057ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008f8  00000000  00000000  00058712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019e16  00000000  00000000  0005900a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c11f  00000000  00000000  00072e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008dabe  00000000  00000000  0007ef3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e6c  00000000  00000000  0010ca00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 26 00 20 85 23 00 00 81 23 00 00 81 23 00 00     .&. .#...#...#..
	...
      2c:	75 11 00 00 00 00 00 00 00 00 00 00 9d 11 00 00     u...............
      3c:	e1 11 00 00 81 23 00 00 81 23 00 00 81 23 00 00     .....#...#...#..
      4c:	81 23 00 00 81 23 00 00 81 23 00 00 81 23 00 00     .#...#...#...#..
      5c:	81 23 00 00 81 23 00 00 e1 1f 00 00 f1 1f 00 00     .#...#..........
      6c:	01 20 00 00 11 20 00 00 21 20 00 00 31 20 00 00     . ... ..! ..1 ..
      7c:	81 23 00 00 81 23 00 00 81 23 00 00 81 23 00 00     .#...#...#...#..
      8c:	81 23 00 00 81 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	81 23 00 00 81 23 00 00 81 23 00 00 81 23 00 00     .#...#...#...#..
      ac:	81 23 00 00 00 00 00 00                             .#......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	0000608c 	.word	0x0000608c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	0000608c 	.word	0x0000608c
     10c:	0000608c 	.word	0x0000608c
     110:	00000000 	.word	0x00000000

00000114 <_GetAvailWriteSpace>:
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // Check if we will overwrite data and need to adjust the RdOff.
  //
  if (pRing->WrOff == pRing->RdOff) {
    Avail = pRing->SizeOfBuffer - 1u;
     114:	6903      	ldr	r3, [r0, #16]
     116:	68c2      	ldr	r2, [r0, #12]
     118:	4293      	cmp	r3, r2
     11a:	d902      	bls.n	122 <_GetAvailWriteSpace+0xe>
     11c:	3b01      	subs	r3, #1
     11e:	1a98      	subs	r0, r3, r2
     120:	4770      	bx	lr
  } else if ( pRing->WrOff < pRing->RdOff) {
    Avail = pRing->RdOff - pRing->WrOff - 1u;
  } else {
    Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
     122:	6880      	ldr	r0, [r0, #8]
     124:	181b      	adds	r3, r3, r0
     126:	3b01      	subs	r3, #1
     128:	1a98      	subs	r0, r3, r2
     12a:	e7f9      	b.n	120 <_GetAvailWriteSpace+0xc>

0000012c <_WriteNoCheck>:
     12c:	b5f0      	push	{r4, r5, r6, r7, lr}
     12e:	b083      	sub	sp, #12
     130:	0005      	movs	r5, r0
     132:	9101      	str	r1, [sp, #4]
     134:	0016      	movs	r6, r2
     136:	68c7      	ldr	r7, [r0, #12]
  pData = (const char *)pBuffer;
     138:	6883      	ldr	r3, [r0, #8]
     13a:	1bdc      	subs	r4, r3, r7
     13c:	4294      	cmp	r4, r2
     13e:	d80e      	bhi.n	15e <_WriteNoCheck+0x32>
     140:	6843      	ldr	r3, [r0, #4]
     142:	19d8      	adds	r0, r3, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
     144:	0022      	movs	r2, r4
     146:	9901      	ldr	r1, [sp, #4]
     148:	4f08      	ldr	r7, [pc, #32]	; (16c <_WriteNoCheck+0x40>)
     14a:	47b8      	blx	r7
    NumBytesAtOnce = NumBytes - Rem;
     14c:	1b36      	subs	r6, r6, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
     14e:	9b01      	ldr	r3, [sp, #4]
     150:	1919      	adds	r1, r3, r4
     152:	0032      	movs	r2, r6
     154:	6868      	ldr	r0, [r5, #4]
     156:	47b8      	blx	r7
    pRing->WrOff = NumBytesAtOnce;
     158:	60ee      	str	r6, [r5, #12]
}
     15a:	b003      	add	sp, #12
     15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
     15e:	6843      	ldr	r3, [r0, #4]
     160:	19d8      	adds	r0, r3, r7
     162:	4b02      	ldr	r3, [pc, #8]	; (16c <_WriteNoCheck+0x40>)
     164:	4798      	blx	r3
    pRing->WrOff = WrOff + NumBytes;
     166:	19be      	adds	r6, r7, r6
     168:	60ee      	str	r6, [r5, #12]
     16a:	e7f6      	b.n	15a <_WriteNoCheck+0x2e>
     16c:	00004779 	.word	0x00004779

00000170 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     170:	b5f0      	push	{r4, r5, r6, r7, lr}
     172:	46d6      	mov	lr, sl
     174:	464f      	mov	r7, r9
     176:	4646      	mov	r6, r8
     178:	b5c0      	push	{r6, r7, lr}
     17a:	0006      	movs	r6, r0
     17c:	4688      	mov	r8, r1
     17e:	0017      	movs	r7, r2
  WrOff = pRing->WrOff;
     180:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
     182:	2300      	movs	r3, #0
     184:	4699      	mov	r9, r3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     186:	4b17      	ldr	r3, [pc, #92]	; (1e4 <_WriteBlocking+0x74>)
     188:	469a      	mov	sl, r3
     18a:	e014      	b.n	1b6 <_WriteBlocking+0x46>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     18c:	68b2      	ldr	r2, [r6, #8]
     18e:	4694      	mov	ip, r2
     190:	4463      	add	r3, ip
     192:	3b01      	subs	r3, #1
     194:	1b5b      	subs	r3, r3, r5
     196:	e013      	b.n	1c0 <_WriteBlocking+0x50>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
     198:	6873      	ldr	r3, [r6, #4]
     19a:	1958      	adds	r0, r3, r5
     19c:	0022      	movs	r2, r4
     19e:	4641      	mov	r1, r8
     1a0:	47d0      	blx	sl
    NumBytesWritten += NumBytesToWrite;
     1a2:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
     1a4:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
     1a6:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
     1a8:	192d      	adds	r5, r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
     1aa:	68b3      	ldr	r3, [r6, #8]
     1ac:	429d      	cmp	r5, r3
     1ae:	d010      	beq.n	1d2 <_WriteBlocking+0x62>
    pRing->WrOff = WrOff;
     1b0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
     1b2:	2f00      	cmp	r7, #0
     1b4:	d00f      	beq.n	1d6 <_WriteBlocking+0x66>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     1b6:	6933      	ldr	r3, [r6, #16]
    if (RdOff > WrOff) {
     1b8:	429d      	cmp	r5, r3
     1ba:	d2e7      	bcs.n	18c <_WriteBlocking+0x1c>
      NumBytesToWrite = RdOff - WrOff - 1u;
     1bc:	3b01      	subs	r3, #1
     1be:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     1c0:	68b2      	ldr	r2, [r6, #8]
     1c2:	1b54      	subs	r4, r2, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     1c4:	42bc      	cmp	r4, r7
     1c6:	d900      	bls.n	1ca <_WriteBlocking+0x5a>
     1c8:	003c      	movs	r4, r7
     1ca:	429c      	cmp	r4, r3
     1cc:	d9e4      	bls.n	198 <_WriteBlocking+0x28>
     1ce:	001c      	movs	r4, r3
     1d0:	e7e2      	b.n	198 <_WriteBlocking+0x28>
      WrOff = 0u;
     1d2:	2500      	movs	r5, #0
     1d4:	e7ec      	b.n	1b0 <_WriteBlocking+0x40>
}
     1d6:	4648      	mov	r0, r9
     1d8:	bc1c      	pop	{r2, r3, r4}
     1da:	4690      	mov	r8, r2
     1dc:	4699      	mov	r9, r3
     1de:	46a2      	mov	sl, r4
     1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	00004779 	.word	0x00004779

000001e8 <_DoInit>:
static void _DoInit(void) {
     1e8:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     1ea:	4c12      	ldr	r4, [pc, #72]	; (234 <_DoInit+0x4c>)
     1ec:	2303      	movs	r3, #3
     1ee:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     1f0:	6163      	str	r3, [r4, #20]
  p->aUp[0].sName         = "Terminal";
     1f2:	4a11      	ldr	r2, [pc, #68]	; (238 <_DoInit+0x50>)
     1f4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     1f6:	4b11      	ldr	r3, [pc, #68]	; (23c <_DoInit+0x54>)
     1f8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
     1fa:	2380      	movs	r3, #128	; 0x80
     1fc:	00db      	lsls	r3, r3, #3
     1fe:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
     200:	2300      	movs	r3, #0
     202:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     204:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     206:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
     208:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     20a:	4a0d      	ldr	r2, [pc, #52]	; (240 <_DoInit+0x58>)
     20c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
     20e:	2210      	movs	r2, #16
     210:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     212:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     214:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     216:	6763      	str	r3, [r4, #116]	; 0x74
  strcpy(&p->acID[7], "RTT");
     218:	1de0      	adds	r0, r4, #7
     21a:	3a0c      	subs	r2, #12
     21c:	4909      	ldr	r1, [pc, #36]	; (244 <_DoInit+0x5c>)
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <_DoInit+0x60>)
     220:	4798      	blx	r3
  strcpy(&p->acID[0], "SEGGER");
     222:	4b0a      	ldr	r3, [pc, #40]	; (24c <_DoInit+0x64>)
     224:	681a      	ldr	r2, [r3, #0]
     226:	6022      	str	r2, [r4, #0]
     228:	889b      	ldrh	r3, [r3, #4]
     22a:	80a3      	strh	r3, [r4, #4]
  p->acID[6] = ' ';
     22c:	2320      	movs	r3, #32
     22e:	71a3      	strb	r3, [r4, #6]
}
     230:	bd10      	pop	{r4, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000570 	.word	0x20000570
     238:	00005e34 	.word	0x00005e34
     23c:	200000a0 	.word	0x200000a0
     240:	20000090 	.word	0x20000090
     244:	00005e40 	.word	0x00005e40
     248:	00004779 	.word	0x00004779
     24c:	00005e44 	.word	0x00005e44

00000250 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     252:	000e      	movs	r6, r1
     254:	0015      	movs	r5, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
     256:	1c43      	adds	r3, r0, #1
     258:	005c      	lsls	r4, r3, #1
     25a:	18e4      	adds	r4, r4, r3
     25c:	00e4      	lsls	r4, r4, #3
     25e:	4a17      	ldr	r2, [pc, #92]	; (2bc <SEGGER_RTT_WriteNoLock+0x6c>)
     260:	18a4      	adds	r4, r4, r2
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     262:	0043      	lsls	r3, r0, #1
     264:	1818      	adds	r0, r3, r0
     266:	00c0      	lsls	r0, r0, #3
     268:	1810      	adds	r0, r2, r0
     26a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
     26c:	2f01      	cmp	r7, #1
     26e:	d011      	beq.n	294 <SEGGER_RTT_WriteNoLock+0x44>
     270:	2f00      	cmp	r7, #0
     272:	d003      	beq.n	27c <SEGGER_RTT_WriteNoLock+0x2c>
     274:	2f02      	cmp	r7, #2
     276:	d01b      	beq.n	2b0 <SEGGER_RTT_WriteNoLock+0x60>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
     278:	2700      	movs	r7, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
     27a:	e017      	b.n	2ac <SEGGER_RTT_WriteNoLock+0x5c>
    Avail = _GetAvailWriteSpace(pRing);
     27c:	0020      	movs	r0, r4
     27e:	4b10      	ldr	r3, [pc, #64]	; (2c0 <SEGGER_RTT_WriteNoLock+0x70>)
     280:	4798      	blx	r3
    if (Avail < NumBytes) {
     282:	42a8      	cmp	r0, r5
     284:	d312      	bcc.n	2ac <SEGGER_RTT_WriteNoLock+0x5c>
      _WriteNoCheck(pRing, pData, NumBytes);
     286:	002a      	movs	r2, r5
     288:	0031      	movs	r1, r6
     28a:	0020      	movs	r0, r4
     28c:	4b0d      	ldr	r3, [pc, #52]	; (2c4 <SEGGER_RTT_WriteNoLock+0x74>)
     28e:	4798      	blx	r3
      Status = NumBytes;
     290:	002f      	movs	r7, r5
     292:	e00b      	b.n	2ac <SEGGER_RTT_WriteNoLock+0x5c>
    Avail = _GetAvailWriteSpace(pRing);
     294:	0020      	movs	r0, r4
     296:	4b0a      	ldr	r3, [pc, #40]	; (2c0 <SEGGER_RTT_WriteNoLock+0x70>)
     298:	4798      	blx	r3
    Status = Avail < NumBytes ? Avail : NumBytes;
     29a:	002f      	movs	r7, r5
     29c:	4285      	cmp	r5, r0
     29e:	d900      	bls.n	2a2 <SEGGER_RTT_WriteNoLock+0x52>
     2a0:	0007      	movs	r7, r0
    _WriteNoCheck(pRing, pData, Status);
     2a2:	003a      	movs	r2, r7
     2a4:	0031      	movs	r1, r6
     2a6:	0020      	movs	r0, r4
     2a8:	4b06      	ldr	r3, [pc, #24]	; (2c4 <SEGGER_RTT_WriteNoLock+0x74>)
     2aa:	4798      	blx	r3
}
     2ac:	0038      	movs	r0, r7
     2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Status = _WriteBlocking(pRing, pData, NumBytes);
     2b0:	002a      	movs	r2, r5
     2b2:	0020      	movs	r0, r4
     2b4:	4b04      	ldr	r3, [pc, #16]	; (2c8 <SEGGER_RTT_WriteNoLock+0x78>)
     2b6:	4798      	blx	r3
     2b8:	0007      	movs	r7, r0
    break;
     2ba:	e7f7      	b.n	2ac <SEGGER_RTT_WriteNoLock+0x5c>
     2bc:	20000570 	.word	0x20000570
     2c0:	00000115 	.word	0x00000115
     2c4:	0000012d 	.word	0x0000012d
     2c8:	00000171 	.word	0x00000171

000002cc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2ce:	0005      	movs	r5, r0
     2d0:	000e      	movs	r6, r1
     2d2:	0017      	movs	r7, r2
  unsigned Status;
  //
  INIT();
     2d4:	4b09      	ldr	r3, [pc, #36]	; (2fc <SEGGER_RTT_Write+0x30>)
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d00c      	beq.n	2f6 <SEGGER_RTT_Write+0x2a>
  SEGGER_RTT_LOCK();
     2dc:	f3ef 8410 	mrs	r4, PRIMASK
     2e0:	2101      	movs	r1, #1
     2e2:	f381 8810 	msr	PRIMASK, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
     2e6:	003a      	movs	r2, r7
     2e8:	0031      	movs	r1, r6
     2ea:	0028      	movs	r0, r5
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <SEGGER_RTT_Write+0x34>)
     2ee:	4798      	blx	r3
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
     2f0:	f384 8810 	msr	PRIMASK, r4
  //
  return Status;
}
     2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  INIT();
     2f6:	4b03      	ldr	r3, [pc, #12]	; (304 <SEGGER_RTT_Write+0x38>)
     2f8:	4798      	blx	r3
     2fa:	e7ef      	b.n	2dc <SEGGER_RTT_Write+0x10>
     2fc:	20000570 	.word	0x20000570
     300:	00000251 	.word	0x00000251
     304:	000001e9 	.word	0x000001e9

00000308 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     308:	b510      	push	{r4, lr}
     30a:	0004      	movs	r4, r0
  unsigned Cnt;

  Cnt = p->Cnt;
     30c:	6882      	ldr	r2, [r0, #8]
  if ((Cnt + 1u) <= p->BufferSize) {
     30e:	1c53      	adds	r3, r2, #1
     310:	6840      	ldr	r0, [r0, #4]
     312:	4283      	cmp	r3, r0
     314:	d805      	bhi.n	322 <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
     316:	6820      	ldr	r0, [r4, #0]
     318:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
     31a:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
     31c:	68e3      	ldr	r3, [r4, #12]
     31e:	3301      	adds	r3, #1
     320:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     322:	68a2      	ldr	r2, [r4, #8]
     324:	6863      	ldr	r3, [r4, #4]
     326:	429a      	cmp	r2, r3
     328:	d000      	beq.n	32c <_StoreChar+0x24>
      p->ReturnValue = -1;
    } else {
      p->Cnt = 0u;
    }
  }
}
     32a:	bd10      	pop	{r4, pc}
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     32c:	6821      	ldr	r1, [r4, #0]
     32e:	6920      	ldr	r0, [r4, #16]
     330:	4b05      	ldr	r3, [pc, #20]	; (348 <_StoreChar+0x40>)
     332:	4798      	blx	r3
     334:	68a3      	ldr	r3, [r4, #8]
     336:	4298      	cmp	r0, r3
     338:	d003      	beq.n	342 <_StoreChar+0x3a>
      p->ReturnValue = -1;
     33a:	2301      	movs	r3, #1
     33c:	425b      	negs	r3, r3
     33e:	60e3      	str	r3, [r4, #12]
     340:	e7f3      	b.n	32a <_StoreChar+0x22>
      p->Cnt = 0u;
     342:	2300      	movs	r3, #0
     344:	60a3      	str	r3, [r4, #8]
}
     346:	e7f0      	b.n	32a <_StoreChar+0x22>
     348:	000002cd 	.word	0x000002cd

0000034c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     34c:	b5f0      	push	{r4, r5, r6, r7, lr}
     34e:	46de      	mov	lr, fp
     350:	4657      	mov	r7, sl
     352:	464e      	mov	r6, r9
     354:	4645      	mov	r5, r8
     356:	b5e0      	push	{r5, r6, r7, lr}
     358:	b085      	sub	sp, #20
     35a:	0006      	movs	r6, r0
     35c:	9100      	str	r1, [sp, #0]
     35e:	0015      	movs	r5, r2
     360:	001f      	movs	r7, r3
     362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     364:	4698      	mov	r8, r3
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
  while (Number >= Base) {
     366:	4291      	cmp	r1, r2
     368:	d339      	bcc.n	3de <_PrintUnsigned+0x92>
     36a:	0008      	movs	r0, r1
     36c:	2401      	movs	r4, #1
    Number = (Number / Base);
     36e:	4b45      	ldr	r3, [pc, #276]	; (484 <_PrintUnsigned+0x138>)
     370:	4699      	mov	r9, r3
     372:	0029      	movs	r1, r5
     374:	47c8      	blx	r9
    Width++;
     376:	3401      	adds	r4, #1
  while (Number >= Base) {
     378:	4285      	cmp	r5, r0
     37a:	d9fa      	bls.n	372 <_PrintUnsigned+0x26>
     37c:	9702      	str	r7, [sp, #8]
     37e:	42a7      	cmp	r7, r4
     380:	d200      	bcs.n	384 <_PrintUnsigned+0x38>
     382:	9402      	str	r4, [sp, #8]
    Width = NumDigits;
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     384:	2301      	movs	r3, #1
     386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     388:	401a      	ands	r2, r3
     38a:	9203      	str	r2, [sp, #12]
     38c:	d129      	bne.n	3e2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
     38e:	4643      	mov	r3, r8
     390:	2b00      	cmp	r3, #0
     392:	d026      	beq.n	3e2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
     394:	2320      	movs	r3, #32
     396:	9301      	str	r3, [sp, #4]
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     39a:	079b      	lsls	r3, r3, #30
     39c:	d504      	bpl.n	3a8 <_PrintUnsigned+0x5c>
        c = ' ';
     39e:	2320      	movs	r3, #32
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     3a0:	2f00      	cmp	r7, #0
     3a2:	d101      	bne.n	3a8 <_PrintUnsigned+0x5c>
        c = '0';
     3a4:	3310      	adds	r3, #16
     3a6:	9301      	str	r3, [sp, #4]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     3a8:	9b02      	ldr	r3, [sp, #8]
     3aa:	4598      	cmp	r8, r3
     3ac:	d919      	bls.n	3e2 <_PrintUnsigned+0x96>
        FieldWidth--;
        _StoreChar(pBufferDesc, c);
     3ae:	4c36      	ldr	r4, [pc, #216]	; (488 <_PrintUnsigned+0x13c>)
     3b0:	46b9      	mov	r9, r7
     3b2:	9f02      	ldr	r7, [sp, #8]
     3b4:	4643      	mov	r3, r8
     3b6:	930e      	str	r3, [sp, #56]	; 0x38
     3b8:	46a8      	mov	r8, r5
     3ba:	001d      	movs	r5, r3
        FieldWidth--;
     3bc:	3d01      	subs	r5, #1
        _StoreChar(pBufferDesc, c);
     3be:	9901      	ldr	r1, [sp, #4]
     3c0:	0030      	movs	r0, r6
     3c2:	47a0      	blx	r4
        if (pBufferDesc->ReturnValue < 0) {
     3c4:	68f3      	ldr	r3, [r6, #12]
     3c6:	2b00      	cmp	r3, #0
     3c8:	db55      	blt.n	476 <_PrintUnsigned+0x12a>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     3ca:	2d00      	cmp	r5, #0
     3cc:	d010      	beq.n	3f0 <_PrintUnsigned+0xa4>
     3ce:	42af      	cmp	r7, r5
     3d0:	d1f4      	bne.n	3bc <_PrintUnsigned+0x70>
     3d2:	464f      	mov	r7, r9
     3d4:	950e      	str	r5, [sp, #56]	; 0x38
     3d6:	4645      	mov	r5, r8
     3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     3da:	4698      	mov	r8, r3
     3dc:	e004      	b.n	3e8 <_PrintUnsigned+0x9c>
  Width = 1u;
     3de:	2401      	movs	r4, #1
     3e0:	e7cc      	b.n	37c <_PrintUnsigned+0x30>
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     3e2:	68f3      	ldr	r3, [r6, #12]
     3e4:	2b00      	cmp	r3, #0
     3e6:	db46      	blt.n	476 <_PrintUnsigned+0x12a>
        c = ' ';
     3e8:	2401      	movs	r4, #1
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
        NumDigits--;
      } else {
        Div = v / Digit;
     3ea:	4b26      	ldr	r3, [pc, #152]	; (484 <_PrintUnsigned+0x138>)
     3ec:	4699      	mov	r9, r3
     3ee:	e00b      	b.n	408 <_PrintUnsigned+0xbc>
     3f0:	464f      	mov	r7, r9
     3f2:	950e      	str	r5, [sp, #56]	; 0x38
     3f4:	4645      	mov	r5, r8
     3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     3f8:	4698      	mov	r8, r3
     3fa:	e7f5      	b.n	3e8 <_PrintUnsigned+0x9c>
     3fc:	0021      	movs	r1, r4
     3fe:	9800      	ldr	r0, [sp, #0]
     400:	47c8      	blx	r9
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     402:	4285      	cmp	r5, r0
     404:	d804      	bhi.n	410 <_PrintUnsigned+0xc4>
          break;
        }
      }
      Digit *= Base;
     406:	436c      	muls	r4, r5
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     408:	2f01      	cmp	r7, #1
     40a:	d9f7      	bls.n	3fc <_PrintUnsigned+0xb0>
        NumDigits--;
     40c:	3f01      	subs	r7, #1
     40e:	e7fa      	b.n	406 <_PrintUnsigned+0xba>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
     410:	4b1c      	ldr	r3, [pc, #112]	; (484 <_PrintUnsigned+0x138>)
     412:	469b      	mov	fp, r3
     414:	4b1d      	ldr	r3, [pc, #116]	; (48c <_PrintUnsigned+0x140>)
     416:	469a      	mov	sl, r3
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
     418:	4b1d      	ldr	r3, [pc, #116]	; (490 <_PrintUnsigned+0x144>)
     41a:	4699      	mov	r9, r3
      Div = v / Digit;
     41c:	0021      	movs	r1, r4
     41e:	9800      	ldr	r0, [sp, #0]
     420:	47d8      	blx	fp
     422:	0007      	movs	r7, r0
     424:	0021      	movs	r1, r4
     426:	9800      	ldr	r0, [sp, #0]
     428:	47d0      	blx	sl
     42a:	9100      	str	r1, [sp, #0]
      _StoreChar(pBufferDesc, _aV2C[Div]);
     42c:	464b      	mov	r3, r9
     42e:	5dd9      	ldrb	r1, [r3, r7]
     430:	0030      	movs	r0, r6
     432:	4b15      	ldr	r3, [pc, #84]	; (488 <_PrintUnsigned+0x13c>)
     434:	4798      	blx	r3
      if (pBufferDesc->ReturnValue < 0) {
     436:	68f3      	ldr	r3, [r6, #12]
     438:	2b00      	cmp	r3, #0
     43a:	db05      	blt.n	448 <_PrintUnsigned+0xfc>
        break;
      }
      Digit /= Base;
     43c:	0029      	movs	r1, r5
     43e:	0020      	movs	r0, r4
     440:	4b10      	ldr	r3, [pc, #64]	; (484 <_PrintUnsigned+0x138>)
     442:	4798      	blx	r3
     444:	1e04      	subs	r4, r0, #0
    } while (Digit);
     446:	d1e9      	bne.n	41c <_PrintUnsigned+0xd0>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
     448:	9b03      	ldr	r3, [sp, #12]
     44a:	2b00      	cmp	r3, #0
     44c:	d013      	beq.n	476 <_PrintUnsigned+0x12a>
      if (FieldWidth != 0u) {
     44e:	4643      	mov	r3, r8
     450:	2b00      	cmp	r3, #0
     452:	d010      	beq.n	476 <_PrintUnsigned+0x12a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     454:	9b02      	ldr	r3, [sp, #8]
     456:	4543      	cmp	r3, r8
     458:	d20d      	bcs.n	476 <_PrintUnsigned+0x12a>
          FieldWidth--;
          _StoreChar(pBufferDesc, ' ');
     45a:	4c0b      	ldr	r4, [pc, #44]	; (488 <_PrintUnsigned+0x13c>)
     45c:	9f02      	ldr	r7, [sp, #8]
     45e:	4645      	mov	r5, r8
          FieldWidth--;
     460:	3d01      	subs	r5, #1
          _StoreChar(pBufferDesc, ' ');
     462:	2120      	movs	r1, #32
     464:	0030      	movs	r0, r6
     466:	47a0      	blx	r4
          if (pBufferDesc->ReturnValue < 0) {
     468:	68f3      	ldr	r3, [r6, #12]
     46a:	2b00      	cmp	r3, #0
     46c:	db03      	blt.n	476 <_PrintUnsigned+0x12a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     46e:	2d00      	cmp	r5, #0
     470:	d001      	beq.n	476 <_PrintUnsigned+0x12a>
     472:	42af      	cmp	r7, r5
     474:	d1f4      	bne.n	460 <_PrintUnsigned+0x114>
          }
        }
      }
    }
  }
}
     476:	b005      	add	sp, #20
     478:	bc3c      	pop	{r2, r3, r4, r5}
     47a:	4690      	mov	r8, r2
     47c:	4699      	mov	r9, r3
     47e:	46a2      	mov	sl, r4
     480:	46ab      	mov	fp, r5
     482:	bdf0      	pop	{r4, r5, r6, r7, pc}
     484:	00002679 	.word	0x00002679
     488:	00000309 	.word	0x00000309
     48c:	00002785 	.word	0x00002785
     490:	00005e4c 	.word	0x00005e4c

00000494 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46de      	mov	lr, fp
     498:	4657      	mov	r7, sl
     49a:	464e      	mov	r6, r9
     49c:	4645      	mov	r5, r8
     49e:	b5e0      	push	{r5, r6, r7, lr}
     4a0:	b09d      	sub	sp, #116	; 0x74
     4a2:	9005      	str	r0, [sp, #20]
     4a4:	000d      	movs	r5, r1
     4a6:	4691      	mov	r9, r2
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
     4a8:	ab07      	add	r3, sp, #28
     4aa:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
     4ac:	2340      	movs	r3, #64	; 0x40
     4ae:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.Cnt            = 0u;
     4b0:	2300      	movs	r3, #0
     4b2:	9319      	str	r3, [sp, #100]	; 0x64
  BufferDesc.RTTBufferIndex = BufferIndex;
     4b4:	901b      	str	r0, [sp, #108]	; 0x6c
  BufferDesc.ReturnValue    = 0;
     4b6:	931a      	str	r3, [sp, #104]	; 0x68
            c = *s;
            s++;
            if (c == '\0') {
              break;
            }
           _StoreChar(&BufferDesc, c);
     4b8:	4bb6      	ldr	r3, [pc, #728]	; (794 <SEGGER_RTT_vprintf+0x300>)
     4ba:	469b      	mov	fp, r3
     4bc:	e0a7      	b.n	60e <SEGGER_RTT_vprintf+0x17a>
     4be:	2600      	movs	r6, #0
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
     4c0:	2704      	movs	r7, #4
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
     4c2:	2401      	movs	r4, #1
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
     4c4:	2002      	movs	r0, #2
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
     4c6:	391d      	subs	r1, #29
     4c8:	e006      	b.n	4d8 <SEGGER_RTT_vprintf+0x44>
        switch (c) {
     4ca:	2b23      	cmp	r3, #35	; 0x23
     4cc:	d114      	bne.n	4f8 <SEGGER_RTT_vprintf+0x64>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
     4ce:	430e      	orrs	r6, r1
     4d0:	3501      	adds	r5, #1
     4d2:	e001      	b.n	4d8 <SEGGER_RTT_vprintf+0x44>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
     4d4:	4326      	orrs	r6, r4
     4d6:	3501      	adds	r5, #1
        switch (c) {
     4d8:	782b      	ldrb	r3, [r5, #0]
     4da:	2b2b      	cmp	r3, #43	; 0x2b
     4dc:	d009      	beq.n	4f2 <SEGGER_RTT_vprintf+0x5e>
     4de:	b2da      	uxtb	r2, r3
     4e0:	2a2b      	cmp	r2, #43	; 0x2b
     4e2:	d9f2      	bls.n	4ca <SEGGER_RTT_vprintf+0x36>
     4e4:	2b2d      	cmp	r3, #45	; 0x2d
     4e6:	d0f5      	beq.n	4d4 <SEGGER_RTT_vprintf+0x40>
     4e8:	2b30      	cmp	r3, #48	; 0x30
     4ea:	d105      	bne.n	4f8 <SEGGER_RTT_vprintf+0x64>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
     4ec:	4306      	orrs	r6, r0
     4ee:	3501      	adds	r5, #1
     4f0:	e7f2      	b.n	4d8 <SEGGER_RTT_vprintf+0x44>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
     4f2:	433e      	orrs	r6, r7
     4f4:	3501      	adds	r5, #1
     4f6:	e7ef      	b.n	4d8 <SEGGER_RTT_vprintf+0x44>
        c = *sFormat;
     4f8:	782b      	ldrb	r3, [r5, #0]
        if ((c < '0') || (c > '9')) {
     4fa:	001a      	movs	r2, r3
     4fc:	3a30      	subs	r2, #48	; 0x30
     4fe:	2a09      	cmp	r2, #9
     500:	d814      	bhi.n	52c <SEGGER_RTT_vprintf+0x98>
     502:	2400      	movs	r4, #0
     504:	001a      	movs	r2, r3
        sFormat++;
     506:	3501      	adds	r5, #1
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
     508:	00a3      	lsls	r3, r4, #2
     50a:	191b      	adds	r3, r3, r4
     50c:	005b      	lsls	r3, r3, #1
     50e:	189b      	adds	r3, r3, r2
     510:	3b30      	subs	r3, #48	; 0x30
     512:	001c      	movs	r4, r3
        c = *sFormat;
     514:	782a      	ldrb	r2, [r5, #0]
        if ((c < '0') || (c > '9')) {
     516:	0013      	movs	r3, r2
     518:	3b30      	subs	r3, #48	; 0x30
     51a:	2b09      	cmp	r3, #9
     51c:	d9f3      	bls.n	506 <SEGGER_RTT_vprintf+0x72>
     51e:	0013      	movs	r3, r2
      NumDigits = 0u;
     520:	2700      	movs	r7, #0
      if (c == '.') {
     522:	2b2e      	cmp	r3, #46	; 0x2e
     524:	d004      	beq.n	530 <SEGGER_RTT_vprintf+0x9c>
      c = *sFormat;
     526:	782b      	ldrb	r3, [r5, #0]
        if ((c == 'l') || (c == 'h')) {
     528:	2104      	movs	r1, #4
     52a:	e01b      	b.n	564 <SEGGER_RTT_vprintf+0xd0>
        if ((c < '0') || (c > '9')) {
     52c:	2400      	movs	r4, #0
     52e:	e7f7      	b.n	520 <SEGGER_RTT_vprintf+0x8c>
        sFormat++;
     530:	1c69      	adds	r1, r5, #1
          c = *sFormat;
     532:	786b      	ldrb	r3, [r5, #1]
          if ((c < '0') || (c > '9')) {
     534:	001a      	movs	r2, r3
     536:	3a30      	subs	r2, #48	; 0x30
     538:	2a09      	cmp	r2, #9
     53a:	d80e      	bhi.n	55a <SEGGER_RTT_vprintf+0xc6>
     53c:	001a      	movs	r2, r3
          sFormat++;
     53e:	3101      	adds	r1, #1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
     540:	00bb      	lsls	r3, r7, #2
     542:	19db      	adds	r3, r3, r7
     544:	005b      	lsls	r3, r3, #1
     546:	189b      	adds	r3, r3, r2
     548:	3b30      	subs	r3, #48	; 0x30
     54a:	001f      	movs	r7, r3
          c = *sFormat;
     54c:	780a      	ldrb	r2, [r1, #0]
          if ((c < '0') || (c > '9')) {
     54e:	0013      	movs	r3, r2
     550:	3b30      	subs	r3, #48	; 0x30
     552:	2b09      	cmp	r3, #9
     554:	d9f3      	bls.n	53e <SEGGER_RTT_vprintf+0xaa>
          sFormat++;
     556:	000d      	movs	r5, r1
     558:	e7e5      	b.n	526 <SEGGER_RTT_vprintf+0x92>
        sFormat++;
     55a:	000d      	movs	r5, r1
      NumDigits = 0u;
     55c:	2700      	movs	r7, #0
     55e:	e7e2      	b.n	526 <SEGGER_RTT_vprintf+0x92>
          sFormat++;
     560:	3501      	adds	r5, #1
          c = *sFormat;
     562:	782b      	ldrb	r3, [r5, #0]
        if ((c == 'l') || (c == 'h')) {
     564:	001a      	movs	r2, r3
     566:	438a      	bics	r2, r1
     568:	2a68      	cmp	r2, #104	; 0x68
     56a:	d0f9      	beq.n	560 <SEGGER_RTT_vprintf+0xcc>
      switch (c) {
     56c:	2b64      	cmp	r3, #100	; 0x64
     56e:	d05a      	beq.n	626 <SEGGER_RTT_vprintf+0x192>
     570:	d913      	bls.n	59a <SEGGER_RTT_vprintf+0x106>
     572:	2b73      	cmp	r3, #115	; 0x73
     574:	d100      	bne.n	578 <SEGGER_RTT_vprintf+0xe4>
     576:	e0df      	b.n	738 <SEGGER_RTT_vprintf+0x2a4>
     578:	d91a      	bls.n	5b0 <SEGGER_RTT_vprintf+0x11c>
     57a:	2b75      	cmp	r3, #117	; 0x75
     57c:	d129      	bne.n	5d2 <SEGGER_RTT_vprintf+0x13e>
        v = va_arg(*pParamList, int);
     57e:	464b      	mov	r3, r9
     580:	681b      	ldr	r3, [r3, #0]
     582:	1d1a      	adds	r2, r3, #4
     584:	4649      	mov	r1, r9
     586:	600a      	str	r2, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
     588:	6819      	ldr	r1, [r3, #0]
     58a:	9601      	str	r6, [sp, #4]
     58c:	9400      	str	r4, [sp, #0]
     58e:	003b      	movs	r3, r7
     590:	220a      	movs	r2, #10
     592:	a817      	add	r0, sp, #92	; 0x5c
     594:	4c80      	ldr	r4, [pc, #512]	; (798 <SEGGER_RTT_vprintf+0x304>)
     596:	47a0      	blx	r4
        break;
     598:	e034      	b.n	604 <SEGGER_RTT_vprintf+0x170>
      switch (c) {
     59a:	2b58      	cmp	r3, #88	; 0x58
     59c:	d01b      	beq.n	5d6 <SEGGER_RTT_vprintf+0x142>
     59e:	2b63      	cmp	r3, #99	; 0x63
     5a0:	d027      	beq.n	5f2 <SEGGER_RTT_vprintf+0x15e>
     5a2:	2b25      	cmp	r3, #37	; 0x25
     5a4:	d12e      	bne.n	604 <SEGGER_RTT_vprintf+0x170>
      case 'p':
        v = va_arg(*pParamList, int);
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
     5a6:	2125      	movs	r1, #37	; 0x25
     5a8:	a817      	add	r0, sp, #92	; 0x5c
     5aa:	4b7a      	ldr	r3, [pc, #488]	; (794 <SEGGER_RTT_vprintf+0x300>)
     5ac:	4798      	blx	r3
        break;
     5ae:	e029      	b.n	604 <SEGGER_RTT_vprintf+0x170>
      switch (c) {
     5b0:	2b70      	cmp	r3, #112	; 0x70
     5b2:	d127      	bne.n	604 <SEGGER_RTT_vprintf+0x170>
        v = va_arg(*pParamList, int);
     5b4:	464b      	mov	r3, r9
     5b6:	681b      	ldr	r3, [r3, #0]
     5b8:	1d1a      	adds	r2, r3, #4
     5ba:	4649      	mov	r1, r9
     5bc:	600a      	str	r2, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
     5be:	6819      	ldr	r1, [r3, #0]
     5c0:	2300      	movs	r3, #0
     5c2:	9301      	str	r3, [sp, #4]
     5c4:	3308      	adds	r3, #8
     5c6:	9300      	str	r3, [sp, #0]
     5c8:	2210      	movs	r2, #16
     5ca:	a817      	add	r0, sp, #92	; 0x5c
     5cc:	4c72      	ldr	r4, [pc, #456]	; (798 <SEGGER_RTT_vprintf+0x304>)
     5ce:	47a0      	blx	r4
        break;
     5d0:	e018      	b.n	604 <SEGGER_RTT_vprintf+0x170>
      switch (c) {
     5d2:	2b78      	cmp	r3, #120	; 0x78
     5d4:	d116      	bne.n	604 <SEGGER_RTT_vprintf+0x170>
        v = va_arg(*pParamList, int);
     5d6:	464b      	mov	r3, r9
     5d8:	681b      	ldr	r3, [r3, #0]
     5da:	1d1a      	adds	r2, r3, #4
     5dc:	4649      	mov	r1, r9
     5de:	600a      	str	r2, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
     5e0:	6819      	ldr	r1, [r3, #0]
     5e2:	9601      	str	r6, [sp, #4]
     5e4:	9400      	str	r4, [sp, #0]
     5e6:	003b      	movs	r3, r7
     5e8:	2210      	movs	r2, #16
     5ea:	a817      	add	r0, sp, #92	; 0x5c
     5ec:	4c6a      	ldr	r4, [pc, #424]	; (798 <SEGGER_RTT_vprintf+0x304>)
     5ee:	47a0      	blx	r4
        break;
     5f0:	e008      	b.n	604 <SEGGER_RTT_vprintf+0x170>
        v = va_arg(*pParamList, int);
     5f2:	464b      	mov	r3, r9
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	1d1a      	adds	r2, r3, #4
     5f8:	4649      	mov	r1, r9
     5fa:	600a      	str	r2, [r1, #0]
        _StoreChar(&BufferDesc, c0);
     5fc:	7819      	ldrb	r1, [r3, #0]
     5fe:	a817      	add	r0, sp, #92	; 0x5c
     600:	4b64      	ldr	r3, [pc, #400]	; (794 <SEGGER_RTT_vprintf+0x300>)
     602:	4798      	blx	r3
      default:
        break;
      }
      sFormat++;
     604:	3501      	adds	r5, #1
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);
     606:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     608:	2b00      	cmp	r3, #0
     60a:	da00      	bge.n	60e <SEGGER_RTT_vprintf+0x17a>
     60c:	e0a6      	b.n	75c <SEGGER_RTT_vprintf+0x2c8>
    c = *sFormat;
     60e:	7829      	ldrb	r1, [r5, #0]
    sFormat++;
     610:	3501      	adds	r5, #1
    if (c == 0u) {
     612:	2900      	cmp	r1, #0
     614:	d100      	bne.n	618 <SEGGER_RTT_vprintf+0x184>
     616:	e0a1      	b.n	75c <SEGGER_RTT_vprintf+0x2c8>
    if (c == '%') {
     618:	2925      	cmp	r1, #37	; 0x25
     61a:	d100      	bne.n	61e <SEGGER_RTT_vprintf+0x18a>
     61c:	e74f      	b.n	4be <SEGGER_RTT_vprintf+0x2a>
      _StoreChar(&BufferDesc, c);
     61e:	a817      	add	r0, sp, #92	; 0x5c
     620:	4b5c      	ldr	r3, [pc, #368]	; (794 <SEGGER_RTT_vprintf+0x300>)
     622:	4798      	blx	r3
     624:	e7ef      	b.n	606 <SEGGER_RTT_vprintf+0x172>
        v = va_arg(*pParamList, int);
     626:	464b      	mov	r3, r9
     628:	681b      	ldr	r3, [r3, #0]
     62a:	1d1a      	adds	r2, r3, #4
     62c:	4649      	mov	r1, r9
     62e:	600a      	str	r2, [r1, #0]
     630:	681b      	ldr	r3, [r3, #0]
     632:	9304      	str	r3, [sp, #16]
  Number = (v < 0) ? -v : v;
     634:	17da      	asrs	r2, r3, #31
     636:	1898      	adds	r0, r3, r2
     638:	4050      	eors	r0, r2
  while (Number >= (int)Base) {
     63a:	2809      	cmp	r0, #9
     63c:	dd37      	ble.n	6ae <SEGGER_RTT_vprintf+0x21a>
     63e:	2301      	movs	r3, #1
     640:	4698      	mov	r8, r3
    Number = (Number / (int)Base);
     642:	4b56      	ldr	r3, [pc, #344]	; (79c <SEGGER_RTT_vprintf+0x308>)
     644:	469a      	mov	sl, r3
     646:	4643      	mov	r3, r8
     648:	46a0      	mov	r8, r4
     64a:	001c      	movs	r4, r3
     64c:	210a      	movs	r1, #10
     64e:	47d0      	blx	sl
    Width++;
     650:	3401      	adds	r4, #1
  while (Number >= (int)Base) {
     652:	2809      	cmp	r0, #9
     654:	dcfa      	bgt.n	64c <SEGGER_RTT_vprintf+0x1b8>
     656:	0023      	movs	r3, r4
     658:	4644      	mov	r4, r8
     65a:	4698      	mov	r8, r3
     65c:	46ba      	mov	sl, r7
     65e:	4547      	cmp	r7, r8
     660:	d200      	bcs.n	664 <SEGGER_RTT_vprintf+0x1d0>
     662:	46c2      	mov	sl, r8
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
     664:	2c00      	cmp	r4, #0
     666:	d005      	beq.n	674 <SEGGER_RTT_vprintf+0x1e0>
     668:	9b04      	ldr	r3, [sp, #16]
     66a:	2b00      	cmp	r3, #0
     66c:	db01      	blt.n	672 <SEGGER_RTT_vprintf+0x1de>
     66e:	0773      	lsls	r3, r6, #29
     670:	d500      	bpl.n	674 <SEGGER_RTT_vprintf+0x1e0>
    FieldWidth--;
     672:	3c01      	subs	r4, #1
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
     674:	07b3      	lsls	r3, r6, #30
     676:	d501      	bpl.n	67c <SEGGER_RTT_vprintf+0x1e8>
     678:	2f00      	cmp	r7, #0
     67a:	d003      	beq.n	684 <SEGGER_RTT_vprintf+0x1f0>
     67c:	07f3      	lsls	r3, r6, #31
     67e:	d401      	bmi.n	684 <SEGGER_RTT_vprintf+0x1f0>
    if (FieldWidth != 0u) {
     680:	2c00      	cmp	r4, #0
     682:	d119      	bne.n	6b8 <SEGGER_RTT_vprintf+0x224>
  if (pBufferDesc->ReturnValue >= 0) {
     684:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     686:	2b00      	cmp	r3, #0
     688:	dbbc      	blt.n	604 <SEGGER_RTT_vprintf+0x170>
    if (v < 0) {
     68a:	9b04      	ldr	r3, [sp, #16]
     68c:	2b00      	cmp	r3, #0
     68e:	db2e      	blt.n	6ee <SEGGER_RTT_vprintf+0x25a>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
     690:	0773      	lsls	r3, r6, #29
     692:	d433      	bmi.n	6fc <SEGGER_RTT_vprintf+0x268>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
     694:	2303      	movs	r3, #3
     696:	4033      	ands	r3, r6
     698:	2b02      	cmp	r3, #2
     69a:	d037      	beq.n	70c <SEGGER_RTT_vprintf+0x278>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
     69c:	9601      	str	r6, [sp, #4]
     69e:	9400      	str	r4, [sp, #0]
     6a0:	003b      	movs	r3, r7
     6a2:	220a      	movs	r2, #10
     6a4:	9904      	ldr	r1, [sp, #16]
     6a6:	a817      	add	r0, sp, #92	; 0x5c
     6a8:	4c3b      	ldr	r4, [pc, #236]	; (798 <SEGGER_RTT_vprintf+0x304>)
     6aa:	47a0      	blx	r4
     6ac:	e7aa      	b.n	604 <SEGGER_RTT_vprintf+0x170>
  Width = 1u;
     6ae:	2301      	movs	r3, #1
     6b0:	4698      	mov	r8, r3
     6b2:	e7d3      	b.n	65c <SEGGER_RTT_vprintf+0x1c8>
     6b4:	4655      	mov	r5, sl
     6b6:	e7a5      	b.n	604 <SEGGER_RTT_vprintf+0x170>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     6b8:	45a2      	cmp	sl, r4
     6ba:	d2e3      	bcs.n	684 <SEGGER_RTT_vprintf+0x1f0>
        _StoreChar(pBufferDesc, ' ');
     6bc:	4b35      	ldr	r3, [pc, #212]	; (794 <SEGGER_RTT_vprintf+0x300>)
     6be:	4698      	mov	r8, r3
     6c0:	002b      	movs	r3, r5
     6c2:	4655      	mov	r5, sl
     6c4:	469a      	mov	sl, r3
        FieldWidth--;
     6c6:	3c01      	subs	r4, #1
        _StoreChar(pBufferDesc, ' ');
     6c8:	2120      	movs	r1, #32
     6ca:	a817      	add	r0, sp, #92	; 0x5c
     6cc:	47c0      	blx	r8
        if (pBufferDesc->ReturnValue < 0) {
     6ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     6d0:	9303      	str	r3, [sp, #12]
     6d2:	2b00      	cmp	r3, #0
     6d4:	dbee      	blt.n	6b4 <SEGGER_RTT_vprintf+0x220>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     6d6:	2c00      	cmp	r4, #0
     6d8:	d005      	beq.n	6e6 <SEGGER_RTT_vprintf+0x252>
     6da:	42a5      	cmp	r5, r4
     6dc:	d1f3      	bne.n	6c6 <SEGGER_RTT_vprintf+0x232>
     6de:	4653      	mov	r3, sl
     6e0:	46aa      	mov	sl, r5
     6e2:	001d      	movs	r5, r3
     6e4:	e7d1      	b.n	68a <SEGGER_RTT_vprintf+0x1f6>
     6e6:	4653      	mov	r3, sl
     6e8:	46aa      	mov	sl, r5
     6ea:	001d      	movs	r5, r3
     6ec:	e7cd      	b.n	68a <SEGGER_RTT_vprintf+0x1f6>
      v = -v;
     6ee:	425b      	negs	r3, r3
     6f0:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
     6f2:	212d      	movs	r1, #45	; 0x2d
     6f4:	a817      	add	r0, sp, #92	; 0x5c
     6f6:	4b27      	ldr	r3, [pc, #156]	; (794 <SEGGER_RTT_vprintf+0x300>)
     6f8:	4798      	blx	r3
     6fa:	e003      	b.n	704 <SEGGER_RTT_vprintf+0x270>
      _StoreChar(pBufferDesc, '+');
     6fc:	212b      	movs	r1, #43	; 0x2b
     6fe:	a817      	add	r0, sp, #92	; 0x5c
     700:	4b24      	ldr	r3, [pc, #144]	; (794 <SEGGER_RTT_vprintf+0x300>)
     702:	4798      	blx	r3
    if (pBufferDesc->ReturnValue >= 0) {
     704:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     706:	2b00      	cmp	r3, #0
     708:	dac4      	bge.n	694 <SEGGER_RTT_vprintf+0x200>
     70a:	e77b      	b.n	604 <SEGGER_RTT_vprintf+0x170>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
     70c:	2f00      	cmp	r7, #0
     70e:	d1c5      	bne.n	69c <SEGGER_RTT_vprintf+0x208>
        if (FieldWidth != 0u) {
     710:	2c00      	cmp	r4, #0
     712:	d0c3      	beq.n	69c <SEGGER_RTT_vprintf+0x208>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     714:	45a2      	cmp	sl, r4
     716:	d2c1      	bcs.n	69c <SEGGER_RTT_vprintf+0x208>
            _StoreChar(pBufferDesc, '0');
     718:	4b1e      	ldr	r3, [pc, #120]	; (794 <SEGGER_RTT_vprintf+0x300>)
     71a:	4698      	mov	r8, r3
            FieldWidth--;
     71c:	3c01      	subs	r4, #1
            _StoreChar(pBufferDesc, '0');
     71e:	2130      	movs	r1, #48	; 0x30
     720:	a817      	add	r0, sp, #92	; 0x5c
     722:	47c0      	blx	r8
            if (pBufferDesc->ReturnValue < 0) {
     724:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     726:	9303      	str	r3, [sp, #12]
     728:	2b00      	cmp	r3, #0
     72a:	da00      	bge.n	72e <SEGGER_RTT_vprintf+0x29a>
     72c:	e76a      	b.n	604 <SEGGER_RTT_vprintf+0x170>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     72e:	2c00      	cmp	r4, #0
     730:	d0b4      	beq.n	69c <SEGGER_RTT_vprintf+0x208>
     732:	45a2      	cmp	sl, r4
     734:	d1f2      	bne.n	71c <SEGGER_RTT_vprintf+0x288>
     736:	e7b1      	b.n	69c <SEGGER_RTT_vprintf+0x208>
          const char * s = va_arg(*pParamList, const char *);
     738:	464b      	mov	r3, r9
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	1d1a      	adds	r2, r3, #4
     73e:	4649      	mov	r1, r9
     740:	600a      	str	r2, [r1, #0]
     742:	681c      	ldr	r4, [r3, #0]
            c = *s;
     744:	7821      	ldrb	r1, [r4, #0]
            s++;
     746:	3401      	adds	r4, #1
            if (c == '\0') {
     748:	2900      	cmp	r1, #0
     74a:	d100      	bne.n	74e <SEGGER_RTT_vprintf+0x2ba>
     74c:	e75a      	b.n	604 <SEGGER_RTT_vprintf+0x170>
           _StoreChar(&BufferDesc, c);
     74e:	a817      	add	r0, sp, #92	; 0x5c
     750:	47d8      	blx	fp
          } while (BufferDesc.ReturnValue >= 0);
     752:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     754:	9303      	str	r3, [sp, #12]
     756:	2b00      	cmp	r3, #0
     758:	daf4      	bge.n	744 <SEGGER_RTT_vprintf+0x2b0>
     75a:	e753      	b.n	604 <SEGGER_RTT_vprintf+0x170>

  if (BufferDesc.ReturnValue > 0) {
     75c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     75e:	2b00      	cmp	r3, #0
     760:	dd0b      	ble.n	77a <SEGGER_RTT_vprintf+0x2e6>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
     762:	9a19      	ldr	r2, [sp, #100]	; 0x64
     764:	2a00      	cmp	r2, #0
     766:	d110      	bne.n	78a <SEGGER_RTT_vprintf+0x2f6>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
     768:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     76a:	9303      	str	r3, [sp, #12]
     76c:	9b19      	ldr	r3, [sp, #100]	; 0x64
     76e:	9304      	str	r3, [sp, #16]
     770:	9b03      	ldr	r3, [sp, #12]
     772:	9a04      	ldr	r2, [sp, #16]
     774:	4694      	mov	ip, r2
     776:	4463      	add	r3, ip
     778:	931a      	str	r3, [sp, #104]	; 0x68
  }
  return BufferDesc.ReturnValue;
     77a:	981a      	ldr	r0, [sp, #104]	; 0x68
}
     77c:	b01d      	add	sp, #116	; 0x74
     77e:	bc3c      	pop	{r2, r3, r4, r5}
     780:	4690      	mov	r8, r2
     782:	4699      	mov	r9, r3
     784:	46a2      	mov	sl, r4
     786:	46ab      	mov	fp, r5
     788:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
     78a:	a907      	add	r1, sp, #28
     78c:	9805      	ldr	r0, [sp, #20]
     78e:	4b04      	ldr	r3, [pc, #16]	; (7a0 <SEGGER_RTT_vprintf+0x30c>)
     790:	4798      	blx	r3
     792:	e7e9      	b.n	768 <SEGGER_RTT_vprintf+0x2d4>
     794:	00000309 	.word	0x00000309
     798:	0000034d 	.word	0x0000034d
     79c:	0000278d 	.word	0x0000278d
     7a0:	000002cd 	.word	0x000002cd

000007a4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
     7a4:	b40e      	push	{r1, r2, r3}
     7a6:	b500      	push	{lr}
     7a8:	b082      	sub	sp, #8
     7aa:	ab03      	add	r3, sp, #12
     7ac:	cb02      	ldmia	r3!, {r1}
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
     7ae:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
     7b0:	aa01      	add	r2, sp, #4
     7b2:	4b03      	ldr	r3, [pc, #12]	; (7c0 <SEGGER_RTT_printf+0x1c>)
     7b4:	4798      	blx	r3
  va_end(ParamList);
  return r;
}
     7b6:	b002      	add	sp, #8
     7b8:	bc08      	pop	{r3}
     7ba:	b003      	add	sp, #12
     7bc:	4718      	bx	r3
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000495 	.word	0x00000495

000007c4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7c4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7c6:	2000      	movs	r0, #0
     7c8:	4b08      	ldr	r3, [pc, #32]	; (7ec <delay_init+0x28>)
     7ca:	4798      	blx	r3
     7cc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7ce:	4c08      	ldr	r4, [pc, #32]	; (7f0 <delay_init+0x2c>)
     7d0:	21fa      	movs	r1, #250	; 0xfa
     7d2:	0089      	lsls	r1, r1, #2
     7d4:	47a0      	blx	r4
     7d6:	4b07      	ldr	r3, [pc, #28]	; (7f4 <delay_init+0x30>)
     7d8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7da:	4907      	ldr	r1, [pc, #28]	; (7f8 <delay_init+0x34>)
     7dc:	0028      	movs	r0, r5
     7de:	47a0      	blx	r4
     7e0:	4b06      	ldr	r3, [pc, #24]	; (7fc <delay_init+0x38>)
     7e2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7e4:	2205      	movs	r2, #5
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <delay_init+0x3c>)
     7e8:	601a      	str	r2, [r3, #0]
}
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	00002141 	.word	0x00002141
     7f0:	00002679 	.word	0x00002679
     7f4:	20000000 	.word	0x20000000
     7f8:	000f4240 	.word	0x000f4240
     7fc:	20000004 	.word	0x20000004
     800:	e000e010 	.word	0xe000e010

00000804 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     804:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     806:	4b08      	ldr	r3, [pc, #32]	; (828 <delay_cycles_us+0x24>)
     808:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     80a:	4a08      	ldr	r2, [pc, #32]	; (82c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     80c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     80e:	2180      	movs	r1, #128	; 0x80
     810:	0249      	lsls	r1, r1, #9
	while (n--) {
     812:	3801      	subs	r0, #1
     814:	d307      	bcc.n	826 <delay_cycles_us+0x22>
	if (n > 0) {
     816:	2c00      	cmp	r4, #0
     818:	d0fb      	beq.n	812 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     81a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     81c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     81e:	6813      	ldr	r3, [r2, #0]
     820:	420b      	tst	r3, r1
     822:	d0fc      	beq.n	81e <delay_cycles_us+0x1a>
     824:	e7f5      	b.n	812 <delay_cycles_us+0xe>
	}
}
     826:	bd30      	pop	{r4, r5, pc}
     828:	20000004 	.word	0x20000004
     82c:	e000e010 	.word	0xe000e010

00000830 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     830:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     832:	4b08      	ldr	r3, [pc, #32]	; (854 <delay_cycles_ms+0x24>)
     834:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     836:	4a08      	ldr	r2, [pc, #32]	; (858 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     838:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     83a:	2180      	movs	r1, #128	; 0x80
     83c:	0249      	lsls	r1, r1, #9
	while (n--) {
     83e:	3801      	subs	r0, #1
     840:	d307      	bcc.n	852 <delay_cycles_ms+0x22>
	if (n > 0) {
     842:	2c00      	cmp	r4, #0
     844:	d0fb      	beq.n	83e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     846:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     848:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     84a:	6813      	ldr	r3, [r2, #0]
     84c:	420b      	tst	r3, r1
     84e:	d0fc      	beq.n	84a <delay_cycles_ms+0x1a>
     850:	e7f5      	b.n	83e <delay_cycles_ms+0xe>
	}
}
     852:	bd30      	pop	{r4, r5, pc}
     854:	20000000 	.word	0x20000000
     858:	e000e010 	.word	0xe000e010

0000085c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     85c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     85e:	2207      	movs	r2, #7
     860:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     862:	421a      	tst	r2, r3
     864:	d1fc      	bne.n	860 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     866:	4770      	bx	lr

00000868 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     868:	b5f0      	push	{r4, r5, r6, r7, lr}
     86a:	46d6      	mov	lr, sl
     86c:	464f      	mov	r7, r9
     86e:	4646      	mov	r6, r8
     870:	b5c0      	push	{r6, r7, lr}
     872:	b08a      	sub	sp, #40	; 0x28
     874:	0006      	movs	r6, r0
     876:	000f      	movs	r7, r1
     878:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     87a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     87c:	0008      	movs	r0, r1
     87e:	4ba0      	ldr	r3, [pc, #640]	; (b00 <i2c_master_init+0x298>)
     880:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     882:	4aa0      	ldr	r2, [pc, #640]	; (b04 <i2c_master_init+0x29c>)
     884:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     886:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     888:	2301      	movs	r3, #1
     88a:	40ab      	lsls	r3, r5
     88c:	430b      	orrs	r3, r1
     88e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     890:	a909      	add	r1, sp, #36	; 0x24
     892:	7b23      	ldrb	r3, [r4, #12]
     894:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     896:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     898:	b2c5      	uxtb	r5, r0
     89a:	0028      	movs	r0, r5
     89c:	4b9a      	ldr	r3, [pc, #616]	; (b08 <i2c_master_init+0x2a0>)
     89e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8a0:	0028      	movs	r0, r5
     8a2:	4b9a      	ldr	r3, [pc, #616]	; (b0c <i2c_master_init+0x2a4>)
     8a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8a6:	7b20      	ldrb	r0, [r4, #12]
     8a8:	2100      	movs	r1, #0
     8aa:	4b99      	ldr	r3, [pc, #612]	; (b10 <i2c_master_init+0x2a8>)
     8ac:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     8ae:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     8b0:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     8b2:	079b      	lsls	r3, r3, #30
     8b4:	d505      	bpl.n	8c2 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     8b6:	b00a      	add	sp, #40	; 0x28
     8b8:	bc1c      	pop	{r2, r3, r4}
     8ba:	4690      	mov	r8, r2
     8bc:	4699      	mov	r9, r3
     8be:	46a2      	mov	sl, r4
     8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     8c2:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     8c4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     8c6:	07db      	lsls	r3, r3, #31
     8c8:	d4f5      	bmi.n	8b6 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8ca:	6830      	ldr	r0, [r6, #0]
     8cc:	4b8c      	ldr	r3, [pc, #560]	; (b00 <i2c_master_init+0x298>)
     8ce:	4699      	mov	r9, r3
     8d0:	4798      	blx	r3
     8d2:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     8d4:	498f      	ldr	r1, [pc, #572]	; (b14 <i2c_master_init+0x2ac>)
     8d6:	4b90      	ldr	r3, [pc, #576]	; (b18 <i2c_master_init+0x2b0>)
     8d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8da:	00ad      	lsls	r5, r5, #2
     8dc:	4b8f      	ldr	r3, [pc, #572]	; (b1c <i2c_master_init+0x2b4>)
     8de:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     8e0:	2300      	movs	r3, #0
     8e2:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     8e4:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     8e6:	2500      	movs	r5, #0
     8e8:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     8ea:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     8ec:	2225      	movs	r2, #37	; 0x25
     8ee:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     8f0:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     8f2:	3314      	adds	r3, #20
     8f4:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8f6:	6833      	ldr	r3, [r6, #0]
     8f8:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     8fa:	0018      	movs	r0, r3
     8fc:	47c8      	blx	r9
     8fe:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     900:	2380      	movs	r3, #128	; 0x80
     902:	aa08      	add	r2, sp, #32
     904:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     906:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     908:	2301      	movs	r3, #1
     90a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     90c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     90e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     910:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     912:	2800      	cmp	r0, #0
     914:	d100      	bne.n	918 <i2c_master_init+0xb0>
     916:	e0af      	b.n	a78 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     918:	ab08      	add	r3, sp, #32
     91a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     91c:	2302      	movs	r3, #2
     91e:	aa08      	add	r2, sp, #32
     920:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     922:	0c00      	lsrs	r0, r0, #16
     924:	b2c0      	uxtb	r0, r0
     926:	0011      	movs	r1, r2
     928:	4b7d      	ldr	r3, [pc, #500]	; (b20 <i2c_master_init+0x2b8>)
     92a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     92c:	2f00      	cmp	r7, #0
     92e:	d100      	bne.n	932 <i2c_master_init+0xca>
     930:	e0a7      	b.n	a82 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     932:	ab08      	add	r3, sp, #32
     934:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     936:	2302      	movs	r3, #2
     938:	aa08      	add	r2, sp, #32
     93a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     93c:	0c3f      	lsrs	r7, r7, #16
     93e:	b2f8      	uxtb	r0, r7
     940:	0011      	movs	r1, r2
     942:	4b77      	ldr	r3, [pc, #476]	; (b20 <i2c_master_init+0x2b8>)
     944:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     946:	8aa3      	ldrh	r3, [r4, #20]
     948:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     94a:	8ae3      	ldrh	r3, [r4, #22]
     94c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     94e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     950:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     952:	2b00      	cmp	r3, #0
     954:	d104      	bne.n	960 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     956:	4b73      	ldr	r3, [pc, #460]	; (b24 <i2c_master_init+0x2bc>)
     958:	789b      	ldrb	r3, [r3, #2]
     95a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     95c:	0fdb      	lsrs	r3, r3, #31
     95e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     960:	68a1      	ldr	r1, [r4, #8]
     962:	6923      	ldr	r3, [r4, #16]
     964:	430b      	orrs	r3, r1
     966:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     968:	2224      	movs	r2, #36	; 0x24
     96a:	5ca2      	ldrb	r2, [r4, r2]
     96c:	2a00      	cmp	r2, #0
     96e:	d002      	beq.n	976 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     970:	2280      	movs	r2, #128	; 0x80
     972:	05d2      	lsls	r2, r2, #23
     974:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     978:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     97a:	222c      	movs	r2, #44	; 0x2c
     97c:	5ca2      	ldrb	r2, [r4, r2]
     97e:	2a00      	cmp	r2, #0
     980:	d103      	bne.n	98a <i2c_master_init+0x122>
     982:	2280      	movs	r2, #128	; 0x80
     984:	0492      	lsls	r2, r2, #18
     986:	4291      	cmp	r1, r2
     988:	d102      	bne.n	990 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     98a:	2280      	movs	r2, #128	; 0x80
     98c:	0512      	lsls	r2, r2, #20
     98e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     990:	222d      	movs	r2, #45	; 0x2d
     992:	5ca2      	ldrb	r2, [r4, r2]
     994:	2a00      	cmp	r2, #0
     996:	d002      	beq.n	99e <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     998:	2280      	movs	r2, #128	; 0x80
     99a:	0412      	lsls	r2, r2, #16
     99c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     99e:	222e      	movs	r2, #46	; 0x2e
     9a0:	5ca2      	ldrb	r2, [r4, r2]
     9a2:	2a00      	cmp	r2, #0
     9a4:	d002      	beq.n	9ac <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     9a6:	2280      	movs	r2, #128	; 0x80
     9a8:	03d2      	lsls	r2, r2, #15
     9aa:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     9ac:	4642      	mov	r2, r8
     9ae:	6812      	ldr	r2, [r2, #0]
     9b0:	4313      	orrs	r3, r2
     9b2:	4642      	mov	r2, r8
     9b4:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     9b6:	2380      	movs	r3, #128	; 0x80
     9b8:	005b      	lsls	r3, r3, #1
     9ba:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     9bc:	4648      	mov	r0, r9
     9be:	3014      	adds	r0, #20
     9c0:	b2c0      	uxtb	r0, r0
     9c2:	4b59      	ldr	r3, [pc, #356]	; (b28 <i2c_master_init+0x2c0>)
     9c4:	4798      	blx	r3
     9c6:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     9c8:	23fa      	movs	r3, #250	; 0xfa
     9ca:	009b      	lsls	r3, r3, #2
     9cc:	6822      	ldr	r2, [r4, #0]
     9ce:	435a      	muls	r2, r3
     9d0:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     9d2:	6863      	ldr	r3, [r4, #4]
     9d4:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     9d6:	4d55      	ldr	r5, [pc, #340]	; (b2c <i2c_master_init+0x2c4>)
     9d8:	47a8      	blx	r5
     9da:	9000      	str	r0, [sp, #0]
     9dc:	9101      	str	r1, [sp, #4]
     9de:	464b      	mov	r3, r9
     9e0:	0058      	lsls	r0, r3, #1
     9e2:	47a8      	blx	r5
     9e4:	9002      	str	r0, [sp, #8]
     9e6:	9103      	str	r1, [sp, #12]
     9e8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     9ea:	47a8      	blx	r5
     9ec:	9004      	str	r0, [sp, #16]
     9ee:	9105      	str	r1, [sp, #20]
     9f0:	4f4f      	ldr	r7, [pc, #316]	; (b30 <i2c_master_init+0x2c8>)
     9f2:	4a50      	ldr	r2, [pc, #320]	; (b34 <i2c_master_init+0x2cc>)
     9f4:	4b50      	ldr	r3, [pc, #320]	; (b38 <i2c_master_init+0x2d0>)
     9f6:	9800      	ldr	r0, [sp, #0]
     9f8:	9901      	ldr	r1, [sp, #4]
     9fa:	47b8      	blx	r7
     9fc:	0002      	movs	r2, r0
     9fe:	000b      	movs	r3, r1
     a00:	9804      	ldr	r0, [sp, #16]
     a02:	9905      	ldr	r1, [sp, #20]
     a04:	47b8      	blx	r7
     a06:	4e4d      	ldr	r6, [pc, #308]	; (b3c <i2c_master_init+0x2d4>)
     a08:	2200      	movs	r2, #0
     a0a:	4b4d      	ldr	r3, [pc, #308]	; (b40 <i2c_master_init+0x2d8>)
     a0c:	47b0      	blx	r6
     a0e:	9004      	str	r0, [sp, #16]
     a10:	9105      	str	r1, [sp, #20]
     a12:	4648      	mov	r0, r9
     a14:	47a8      	blx	r5
     a16:	0002      	movs	r2, r0
     a18:	000b      	movs	r3, r1
     a1a:	9804      	ldr	r0, [sp, #16]
     a1c:	9905      	ldr	r1, [sp, #20]
     a1e:	47b8      	blx	r7
     a20:	0002      	movs	r2, r0
     a22:	000b      	movs	r3, r1
     a24:	4d47      	ldr	r5, [pc, #284]	; (b44 <i2c_master_init+0x2dc>)
     a26:	9800      	ldr	r0, [sp, #0]
     a28:	9901      	ldr	r1, [sp, #4]
     a2a:	47a8      	blx	r5
     a2c:	9a02      	ldr	r2, [sp, #8]
     a2e:	9b03      	ldr	r3, [sp, #12]
     a30:	47b0      	blx	r6
     a32:	2200      	movs	r2, #0
     a34:	4b44      	ldr	r3, [pc, #272]	; (b48 <i2c_master_init+0x2e0>)
     a36:	47a8      	blx	r5
     a38:	9a02      	ldr	r2, [sp, #8]
     a3a:	9b03      	ldr	r3, [sp, #12]
     a3c:	4d43      	ldr	r5, [pc, #268]	; (b4c <i2c_master_init+0x2e4>)
     a3e:	47a8      	blx	r5
     a40:	4b43      	ldr	r3, [pc, #268]	; (b50 <i2c_master_init+0x2e8>)
     a42:	4798      	blx	r3
     a44:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     a46:	2380      	movs	r3, #128	; 0x80
     a48:	049b      	lsls	r3, r3, #18
     a4a:	68a2      	ldr	r2, [r4, #8]
     a4c:	429a      	cmp	r2, r3
     a4e:	d01e      	beq.n	a8e <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     a50:	0003      	movs	r3, r0
     a52:	2040      	movs	r0, #64	; 0x40
     a54:	2dff      	cmp	r5, #255	; 0xff
     a56:	d900      	bls.n	a5a <i2c_master_init+0x1f2>
     a58:	e72d      	b.n	8b6 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     a5a:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     a5c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     a5e:	25ff      	movs	r5, #255	; 0xff
     a60:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     a62:	0624      	lsls	r4, r4, #24
     a64:	4325      	orrs	r5, r4
     a66:	0400      	lsls	r0, r0, #16
     a68:	23ff      	movs	r3, #255	; 0xff
     a6a:	041b      	lsls	r3, r3, #16
     a6c:	4018      	ands	r0, r3
     a6e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     a70:	4643      	mov	r3, r8
     a72:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     a74:	2000      	movs	r0, #0
     a76:	e71e      	b.n	8b6 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a78:	2100      	movs	r1, #0
     a7a:	4640      	mov	r0, r8
     a7c:	4b35      	ldr	r3, [pc, #212]	; (b54 <i2c_master_init+0x2ec>)
     a7e:	4798      	blx	r3
     a80:	e74a      	b.n	918 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a82:	2101      	movs	r1, #1
     a84:	4640      	mov	r0, r8
     a86:	4b33      	ldr	r3, [pc, #204]	; (b54 <i2c_master_init+0x2ec>)
     a88:	4798      	blx	r3
     a8a:	0007      	movs	r7, r0
     a8c:	e751      	b.n	932 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     a8e:	26fa      	movs	r6, #250	; 0xfa
     a90:	00b6      	lsls	r6, r6, #2
     a92:	4653      	mov	r3, sl
     a94:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     a96:	9800      	ldr	r0, [sp, #0]
     a98:	9901      	ldr	r1, [sp, #4]
     a9a:	0002      	movs	r2, r0
     a9c:	000b      	movs	r3, r1
     a9e:	4c27      	ldr	r4, [pc, #156]	; (b3c <i2c_master_init+0x2d4>)
     aa0:	47a0      	blx	r4
     aa2:	9000      	str	r0, [sp, #0]
     aa4:	9101      	str	r1, [sp, #4]
     aa6:	0030      	movs	r0, r6
     aa8:	4b20      	ldr	r3, [pc, #128]	; (b2c <i2c_master_init+0x2c4>)
     aaa:	4798      	blx	r3
     aac:	2200      	movs	r2, #0
     aae:	4b2a      	ldr	r3, [pc, #168]	; (b58 <i2c_master_init+0x2f0>)
     ab0:	47b8      	blx	r7
     ab2:	0002      	movs	r2, r0
     ab4:	000b      	movs	r3, r1
     ab6:	9800      	ldr	r0, [sp, #0]
     ab8:	9901      	ldr	r1, [sp, #4]
     aba:	4c24      	ldr	r4, [pc, #144]	; (b4c <i2c_master_init+0x2e4>)
     abc:	47a0      	blx	r4
     abe:	2200      	movs	r2, #0
     ac0:	4b21      	ldr	r3, [pc, #132]	; (b48 <i2c_master_init+0x2e0>)
     ac2:	4c20      	ldr	r4, [pc, #128]	; (b44 <i2c_master_init+0x2dc>)
     ac4:	47a0      	blx	r4
     ac6:	4b22      	ldr	r3, [pc, #136]	; (b50 <i2c_master_init+0x2e8>)
     ac8:	4798      	blx	r3
     aca:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     acc:	d00c      	beq.n	ae8 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     ace:	0031      	movs	r1, r6
     ad0:	9807      	ldr	r0, [sp, #28]
     ad2:	4b22      	ldr	r3, [pc, #136]	; (b5c <i2c_master_init+0x2f4>)
     ad4:	4798      	blx	r3
     ad6:	3802      	subs	r0, #2
     ad8:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     ada:	002b      	movs	r3, r5
     adc:	2dff      	cmp	r5, #255	; 0xff
     ade:	d80c      	bhi.n	afa <i2c_master_init+0x292>
     ae0:	28ff      	cmp	r0, #255	; 0xff
     ae2:	d9bc      	bls.n	a5e <i2c_master_init+0x1f6>
     ae4:	2040      	movs	r0, #64	; 0x40
     ae6:	e6e6      	b.n	8b6 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     ae8:	0071      	lsls	r1, r6, #1
     aea:	1e48      	subs	r0, r1, #1
     aec:	9b07      	ldr	r3, [sp, #28]
     aee:	469c      	mov	ip, r3
     af0:	4460      	add	r0, ip
     af2:	4b1a      	ldr	r3, [pc, #104]	; (b5c <i2c_master_init+0x2f4>)
     af4:	4798      	blx	r3
     af6:	3801      	subs	r0, #1
     af8:	e7ef      	b.n	ada <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     afa:	2040      	movs	r0, #64	; 0x40
     afc:	e6db      	b.n	8b6 <i2c_master_init+0x4e>
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00001f39 	.word	0x00001f39
     b04:	40000400 	.word	0x40000400
     b08:	00002259 	.word	0x00002259
     b0c:	000021cd 	.word	0x000021cd
     b10:	00001d75 	.word	0x00001d75
     b14:	00000f89 	.word	0x00000f89
     b18:	00001f75 	.word	0x00001f75
     b1c:	20000680 	.word	0x20000680
     b20:	00002351 	.word	0x00002351
     b24:	41002000 	.word	0x41002000
     b28:	00002275 	.word	0x00002275
     b2c:	00004481 	.word	0x00004481
     b30:	00003869 	.word	0x00003869
     b34:	e826d695 	.word	0xe826d695
     b38:	3e112e0b 	.word	0x3e112e0b
     b3c:	000029e1 	.word	0x000029e1
     b40:	40240000 	.word	0x40240000
     b44:	00003d69 	.word	0x00003d69
     b48:	3ff00000 	.word	0x3ff00000
     b4c:	00003001 	.word	0x00003001
     b50:	00004395 	.word	0x00004395
     b54:	00001dc1 	.word	0x00001dc1
     b58:	40080000 	.word	0x40080000
     b5c:	00002679 	.word	0x00002679

00000b60 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b60:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b62:	7e1a      	ldrb	r2, [r3, #24]
     b64:	0792      	lsls	r2, r2, #30
     b66:	d507      	bpl.n	b78 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b68:	2202      	movs	r2, #2
     b6a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b6c:	8b5b      	ldrh	r3, [r3, #26]
     b6e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     b70:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     b72:	17db      	asrs	r3, r3, #31
     b74:	4018      	ands	r0, r3
}
     b76:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b78:	8b5a      	ldrh	r2, [r3, #26]
     b7a:	0752      	lsls	r2, r2, #29
     b7c:	d506      	bpl.n	b8c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b7e:	6859      	ldr	r1, [r3, #4]
     b80:	22c0      	movs	r2, #192	; 0xc0
     b82:	0292      	lsls	r2, r2, #10
     b84:	430a      	orrs	r2, r1
     b86:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     b88:	2018      	movs	r0, #24
     b8a:	e7f4      	b.n	b76 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     b8c:	2000      	movs	r0, #0
     b8e:	e7f2      	b.n	b76 <_i2c_master_address_response+0x16>

00000b90 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     b90:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b92:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     b94:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b96:	2401      	movs	r4, #1
     b98:	2502      	movs	r5, #2
     b9a:	7e11      	ldrb	r1, [r2, #24]
     b9c:	4221      	tst	r1, r4
     b9e:	d10b      	bne.n	bb8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     ba0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     ba2:	4229      	tst	r1, r5
     ba4:	d106      	bne.n	bb4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     ba6:	3301      	adds	r3, #1
     ba8:	b29b      	uxth	r3, r3
     baa:	8901      	ldrh	r1, [r0, #8]
     bac:	4299      	cmp	r1, r3
     bae:	d8f4      	bhi.n	b9a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     bb0:	2012      	movs	r0, #18
     bb2:	e002      	b.n	bba <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     bb4:	2000      	movs	r0, #0
     bb6:	e000      	b.n	bba <_i2c_master_wait_for_bus+0x2a>
     bb8:	2000      	movs	r0, #0
}
     bba:	bd30      	pop	{r4, r5, pc}

00000bbc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     bbc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bbe:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bc0:	6862      	ldr	r2, [r4, #4]
     bc2:	2380      	movs	r3, #128	; 0x80
     bc4:	02db      	lsls	r3, r3, #11
     bc6:	4313      	orrs	r3, r2
     bc8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     bca:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     bcc:	4b02      	ldr	r3, [pc, #8]	; (bd8 <_i2c_master_send_hs_master_code+0x1c>)
     bce:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     bd0:	2301      	movs	r3, #1
     bd2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     bd4:	bd10      	pop	{r4, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000b91 	.word	0x00000b91

00000bdc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bde:	46de      	mov	lr, fp
     be0:	4657      	mov	r7, sl
     be2:	464e      	mov	r6, r9
     be4:	4645      	mov	r5, r8
     be6:	b5e0      	push	{r5, r6, r7, lr}
     be8:	b083      	sub	sp, #12
     bea:	0006      	movs	r6, r0
     bec:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bee:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     bf0:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bf2:	682b      	ldr	r3, [r5, #0]
     bf4:	011b      	lsls	r3, r3, #4
     bf6:	0fdb      	lsrs	r3, r3, #31
     bf8:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     bfa:	7a4b      	ldrb	r3, [r1, #9]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d12b      	bne.n	c58 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c00:	686b      	ldr	r3, [r5, #4]
     c02:	4a58      	ldr	r2, [pc, #352]	; (d64 <_i2c_master_read_packet+0x188>)
     c04:	4013      	ands	r3, r2
     c06:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     c08:	464b      	mov	r3, r9
     c0a:	7a1b      	ldrb	r3, [r3, #8]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d127      	bne.n	c60 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c10:	464b      	mov	r3, r9
     c12:	881b      	ldrh	r3, [r3, #0]
     c14:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c16:	464a      	mov	r2, r9
     c18:	7a52      	ldrb	r2, [r2, #9]
     c1a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c1c:	4313      	orrs	r3, r2
     c1e:	2201      	movs	r2, #1
     c20:	4313      	orrs	r3, r2
     c22:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c24:	0030      	movs	r0, r6
     c26:	4b50      	ldr	r3, [pc, #320]	; (d68 <_i2c_master_read_packet+0x18c>)
     c28:	4798      	blx	r3
     c2a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     c2c:	4653      	mov	r3, sl
     c2e:	2b00      	cmp	r3, #0
     c30:	d003      	beq.n	c3a <_i2c_master_read_packet+0x5e>
     c32:	464b      	mov	r3, r9
     c34:	885b      	ldrh	r3, [r3, #2]
     c36:	2b01      	cmp	r3, #1
     c38:	d03b      	beq.n	cb2 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     c3a:	686b      	ldr	r3, [r5, #4]
     c3c:	4a49      	ldr	r2, [pc, #292]	; (d64 <_i2c_master_read_packet+0x188>)
     c3e:	4013      	ands	r3, r2
     c40:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     c42:	9b01      	ldr	r3, [sp, #4]
     c44:	2b00      	cmp	r3, #0
     c46:	d03a      	beq.n	cbe <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     c48:	9801      	ldr	r0, [sp, #4]
     c4a:	b003      	add	sp, #12
     c4c:	bc3c      	pop	{r2, r3, r4, r5}
     c4e:	4690      	mov	r8, r2
     c50:	4699      	mov	r9, r3
     c52:	46a2      	mov	sl, r4
     c54:	46ab      	mov	fp, r5
     c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c58:	7a89      	ldrb	r1, [r1, #10]
     c5a:	4b44      	ldr	r3, [pc, #272]	; (d6c <_i2c_master_read_packet+0x190>)
     c5c:	4798      	blx	r3
     c5e:	e7cf      	b.n	c00 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     c60:	464b      	mov	r3, r9
     c62:	881b      	ldrh	r3, [r3, #0]
     c64:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c66:	464a      	mov	r2, r9
     c68:	7a52      	ldrb	r2, [r2, #9]
     c6a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     c6c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c6e:	2280      	movs	r2, #128	; 0x80
     c70:	0212      	lsls	r2, r2, #8
     c72:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     c74:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     c76:	0030      	movs	r0, r6
     c78:	4b3b      	ldr	r3, [pc, #236]	; (d68 <_i2c_master_read_packet+0x18c>)
     c7a:	4798      	blx	r3
     c7c:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c7e:	686b      	ldr	r3, [r5, #4]
     c80:	4a38      	ldr	r2, [pc, #224]	; (d64 <_i2c_master_read_packet+0x188>)
     c82:	4013      	ands	r3, r2
     c84:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     c86:	2800      	cmp	r0, #0
     c88:	d1de      	bne.n	c48 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     c8a:	0030      	movs	r0, r6
     c8c:	4b38      	ldr	r3, [pc, #224]	; (d70 <_i2c_master_read_packet+0x194>)
     c8e:	4798      	blx	r3
     c90:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     c92:	2800      	cmp	r0, #0
     c94:	d1d8      	bne.n	c48 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c96:	464b      	mov	r3, r9
     c98:	881b      	ldrh	r3, [r3, #0]
     c9a:	0a1b      	lsrs	r3, r3, #8
     c9c:	2278      	movs	r2, #120	; 0x78
     c9e:	4313      	orrs	r3, r2
     ca0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ca2:	464a      	mov	r2, r9
     ca4:	7a52      	ldrb	r2, [r2, #9]
     ca6:	0392      	lsls	r2, r2, #14
     ca8:	2101      	movs	r1, #1
     caa:	430a      	orrs	r2, r1
     cac:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     cae:	626b      	str	r3, [r5, #36]	; 0x24
     cb0:	e7b8      	b.n	c24 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cb2:	686a      	ldr	r2, [r5, #4]
     cb4:	2380      	movs	r3, #128	; 0x80
     cb6:	02db      	lsls	r3, r3, #11
     cb8:	4313      	orrs	r3, r2
     cba:	606b      	str	r3, [r5, #4]
     cbc:	e7c1      	b.n	c42 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     cbe:	0030      	movs	r0, r6
     cc0:	4b2b      	ldr	r3, [pc, #172]	; (d70 <_i2c_master_read_packet+0x194>)
     cc2:	4798      	blx	r3
     cc4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     cc6:	2800      	cmp	r0, #0
     cc8:	d1be      	bne.n	c48 <_i2c_master_read_packet+0x6c>
     cca:	3c01      	subs	r4, #1
     ccc:	b2a4      	uxth	r4, r4
     cce:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     cd0:	4b28      	ldr	r3, [pc, #160]	; (d74 <_i2c_master_read_packet+0x198>)
     cd2:	469b      	mov	fp, r3
     cd4:	e015      	b.n	d02 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     cd6:	2c01      	cmp	r4, #1
     cd8:	d020      	beq.n	d1c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     cda:	0030      	movs	r0, r6
     cdc:	4b26      	ldr	r3, [pc, #152]	; (d78 <_i2c_master_read_packet+0x19c>)
     cde:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     ce0:	4643      	mov	r3, r8
     ce2:	1c5f      	adds	r7, r3, #1
     ce4:	b2bf      	uxth	r7, r7
     ce6:	2328      	movs	r3, #40	; 0x28
     ce8:	5ceb      	ldrb	r3, [r5, r3]
     cea:	464a      	mov	r2, r9
     cec:	6852      	ldr	r2, [r2, #4]
     cee:	4641      	mov	r1, r8
     cf0:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     cf2:	0030      	movs	r0, r6
     cf4:	4b1c      	ldr	r3, [pc, #112]	; (d68 <_i2c_master_read_packet+0x18c>)
     cf6:	4798      	blx	r3
     cf8:	3c01      	subs	r4, #1
     cfa:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     cfc:	2800      	cmp	r0, #0
     cfe:	d115      	bne.n	d2c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     d00:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     d02:	455c      	cmp	r4, fp
     d04:	d014      	beq.n	d30 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d06:	8b6b      	ldrh	r3, [r5, #26]
     d08:	069b      	lsls	r3, r3, #26
     d0a:	d527      	bpl.n	d5c <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     d0c:	7af3      	ldrb	r3, [r6, #11]
     d0e:	2b00      	cmp	r3, #0
     d10:	d0e3      	beq.n	cda <_i2c_master_read_packet+0xfe>
     d12:	4653      	mov	r3, sl
     d14:	2b00      	cmp	r3, #0
     d16:	d1de      	bne.n	cd6 <_i2c_master_read_packet+0xfa>
     d18:	2c00      	cmp	r4, #0
     d1a:	d1de      	bne.n	cda <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d1c:	686a      	ldr	r2, [r5, #4]
     d1e:	2380      	movs	r3, #128	; 0x80
     d20:	02db      	lsls	r3, r3, #11
     d22:	4313      	orrs	r3, r2
     d24:	606b      	str	r3, [r5, #4]
     d26:	3c01      	subs	r4, #1
     d28:	b2a4      	uxth	r4, r4
     d2a:	e7ea      	b.n	d02 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     d2c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     d2e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     d30:	7ab3      	ldrb	r3, [r6, #10]
     d32:	2b00      	cmp	r3, #0
     d34:	d109      	bne.n	d4a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     d36:	0030      	movs	r0, r6
     d38:	4b0f      	ldr	r3, [pc, #60]	; (d78 <_i2c_master_read_packet+0x19c>)
     d3a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     d3c:	2328      	movs	r3, #40	; 0x28
     d3e:	5cea      	ldrb	r2, [r5, r3]
     d40:	464b      	mov	r3, r9
     d42:	685b      	ldr	r3, [r3, #4]
     d44:	4641      	mov	r1, r8
     d46:	545a      	strb	r2, [r3, r1]
     d48:	e77e      	b.n	c48 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     d4a:	0030      	movs	r0, r6
     d4c:	4b0a      	ldr	r3, [pc, #40]	; (d78 <_i2c_master_read_packet+0x19c>)
     d4e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d50:	686a      	ldr	r2, [r5, #4]
     d52:	23c0      	movs	r3, #192	; 0xc0
     d54:	029b      	lsls	r3, r3, #10
     d56:	4313      	orrs	r3, r2
     d58:	606b      	str	r3, [r5, #4]
     d5a:	e7ec      	b.n	d36 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     d5c:	2341      	movs	r3, #65	; 0x41
     d5e:	9301      	str	r3, [sp, #4]
     d60:	e772      	b.n	c48 <_i2c_master_read_packet+0x6c>
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	fffbffff 	.word	0xfffbffff
     d68:	00000b91 	.word	0x00000b91
     d6c:	00000bbd 	.word	0x00000bbd
     d70:	00000b61 	.word	0x00000b61
     d74:	0000ffff 	.word	0x0000ffff
     d78:	0000085d 	.word	0x0000085d

00000d7c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	46de      	mov	lr, fp
     d80:	4657      	mov	r7, sl
     d82:	464e      	mov	r6, r9
     d84:	4645      	mov	r5, r8
     d86:	b5e0      	push	{r5, r6, r7, lr}
     d88:	b083      	sub	sp, #12
     d8a:	0006      	movs	r6, r0
     d8c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d8e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     d90:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     d92:	4b32      	ldr	r3, [pc, #200]	; (e5c <_i2c_master_write_packet+0xe0>)
     d94:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     d96:	7a7b      	ldrb	r3, [r7, #9]
     d98:	2b00      	cmp	r3, #0
     d9a:	d11d      	bne.n	dd8 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d9c:	686b      	ldr	r3, [r5, #4]
     d9e:	4a30      	ldr	r2, [pc, #192]	; (e60 <_i2c_master_write_packet+0xe4>)
     da0:	4013      	ands	r3, r2
     da2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     da4:	7a3b      	ldrb	r3, [r7, #8]
     da6:	2b00      	cmp	r3, #0
     da8:	d01b      	beq.n	de2 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     daa:	883b      	ldrh	r3, [r7, #0]
     dac:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     dae:	7a7a      	ldrb	r2, [r7, #9]
     db0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     db2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     db4:	2280      	movs	r2, #128	; 0x80
     db6:	0212      	lsls	r2, r2, #8
     db8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     dba:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     dbc:	0030      	movs	r0, r6
     dbe:	4b29      	ldr	r3, [pc, #164]	; (e64 <_i2c_master_write_packet+0xe8>)
     dc0:	4798      	blx	r3
     dc2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     dc4:	2800      	cmp	r0, #0
     dc6:	d013      	beq.n	df0 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     dc8:	9801      	ldr	r0, [sp, #4]
     dca:	b003      	add	sp, #12
     dcc:	bc3c      	pop	{r2, r3, r4, r5}
     dce:	4690      	mov	r8, r2
     dd0:	4699      	mov	r9, r3
     dd2:	46a2      	mov	sl, r4
     dd4:	46ab      	mov	fp, r5
     dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     dd8:	7ab9      	ldrb	r1, [r7, #10]
     dda:	0030      	movs	r0, r6
     ddc:	4b22      	ldr	r3, [pc, #136]	; (e68 <_i2c_master_write_packet+0xec>)
     dde:	4798      	blx	r3
     de0:	e7dc      	b.n	d9c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     de2:	883b      	ldrh	r3, [r7, #0]
     de4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     de6:	7a7a      	ldrb	r2, [r7, #9]
     de8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     dea:	4313      	orrs	r3, r2
     dec:	626b      	str	r3, [r5, #36]	; 0x24
     dee:	e7e5      	b.n	dbc <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     df0:	0030      	movs	r0, r6
     df2:	4b1e      	ldr	r3, [pc, #120]	; (e6c <_i2c_master_write_packet+0xf0>)
     df4:	4798      	blx	r3
     df6:	1e03      	subs	r3, r0, #0
     df8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     dfa:	d1e5      	bne.n	dc8 <_i2c_master_write_packet+0x4c>
     dfc:	46a0      	mov	r8, r4
     dfe:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e00:	3320      	adds	r3, #32
     e02:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     e04:	4b15      	ldr	r3, [pc, #84]	; (e5c <_i2c_master_write_packet+0xe0>)
     e06:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     e08:	4b16      	ldr	r3, [pc, #88]	; (e64 <_i2c_master_write_packet+0xe8>)
     e0a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     e0c:	4544      	cmp	r4, r8
     e0e:	d015      	beq.n	e3c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     e10:	8b6b      	ldrh	r3, [r5, #26]
     e12:	464a      	mov	r2, r9
     e14:	4213      	tst	r3, r2
     e16:	d01d      	beq.n	e54 <_i2c_master_write_packet+0xd8>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	5d1a      	ldrb	r2, [r3, r4]
     e1c:	2328      	movs	r3, #40	; 0x28
     e1e:	54ea      	strb	r2, [r5, r3]
			_i2c_master_wait_for_sync(module);
     e20:	0030      	movs	r0, r6
     e22:	47d8      	blx	fp
			tmp_status = _i2c_master_wait_for_bus(module);
     e24:	0030      	movs	r0, r6
     e26:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     e28:	2800      	cmp	r0, #0
     e2a:	d106      	bne.n	e3a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e2c:	8b6b      	ldrh	r3, [r5, #26]
     e2e:	3401      	adds	r4, #1
     e30:	075b      	lsls	r3, r3, #29
     e32:	d5eb      	bpl.n	e0c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     e34:	231e      	movs	r3, #30
     e36:	9301      	str	r3, [sp, #4]
     e38:	e000      	b.n	e3c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     e3a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     e3c:	7ab3      	ldrb	r3, [r6, #10]
     e3e:	2b00      	cmp	r3, #0
     e40:	d0c2      	beq.n	dc8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     e42:	0030      	movs	r0, r6
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <_i2c_master_write_packet+0xe0>)
     e46:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e48:	686a      	ldr	r2, [r5, #4]
     e4a:	23c0      	movs	r3, #192	; 0xc0
     e4c:	029b      	lsls	r3, r3, #10
     e4e:	4313      	orrs	r3, r2
     e50:	606b      	str	r3, [r5, #4]
     e52:	e7b9      	b.n	dc8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     e54:	2341      	movs	r3, #65	; 0x41
     e56:	9301      	str	r3, [sp, #4]
     e58:	e7b6      	b.n	dc8 <_i2c_master_write_packet+0x4c>
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	0000085d 	.word	0x0000085d
     e60:	fffbffff 	.word	0xfffbffff
     e64:	00000b91 	.word	0x00000b91
     e68:	00000bbd 	.word	0x00000bbd
     e6c:	00000b61 	.word	0x00000b61

00000e70 <i2c_master_read_packet_wait>:
{
     e70:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     e72:	8b83      	ldrh	r3, [r0, #28]
     e74:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     e76:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     e78:	2b00      	cmp	r3, #0
     e7a:	d001      	beq.n	e80 <i2c_master_read_packet_wait+0x10>
}
     e7c:	0010      	movs	r0, r2
     e7e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     e80:	3301      	adds	r3, #1
     e82:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     e84:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     e86:	4b02      	ldr	r3, [pc, #8]	; (e90 <i2c_master_read_packet_wait+0x20>)
     e88:	4798      	blx	r3
     e8a:	0002      	movs	r2, r0
     e8c:	e7f6      	b.n	e7c <i2c_master_read_packet_wait+0xc>
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00000bdd 	.word	0x00000bdd

00000e94 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e94:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     e96:	8b83      	ldrh	r3, [r0, #28]
     e98:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     e9a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     e9c:	2b00      	cmp	r3, #0
     e9e:	d001      	beq.n	ea4 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     ea0:	0010      	movs	r0, r2
     ea2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     ea4:	3301      	adds	r3, #1
     ea6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     ea8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     eaa:	4b02      	ldr	r3, [pc, #8]	; (eb4 <i2c_master_write_packet_wait+0x20>)
     eac:	4798      	blx	r3
     eae:	0002      	movs	r2, r0
     eb0:	e7f6      	b.n	ea0 <i2c_master_write_packet_wait+0xc>
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00000d7d 	.word	0x00000d7d

00000eb8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     eb8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     eba:	2207      	movs	r2, #7
     ebc:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     ebe:	421a      	tst	r2, r3
     ec0:	d1fc      	bne.n	ebc <_i2c_master_wait_for_sync+0x4>
}
     ec2:	4770      	bx	lr

00000ec4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ec8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     eca:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     ecc:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     ece:	8b83      	ldrh	r3, [r0, #28]
     ed0:	1aed      	subs	r5, r5, r3
     ed2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     ed4:	8b83      	ldrh	r3, [r0, #28]
     ed6:	3b01      	subs	r3, #1
     ed8:	b29b      	uxth	r3, r3
     eda:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     edc:	0113      	lsls	r3, r2, #4
     ede:	d51d      	bpl.n	f1c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     ee0:	7ac3      	ldrb	r3, [r0, #11]
     ee2:	2b00      	cmp	r3, #0
     ee4:	d003      	beq.n	eee <_i2c_master_read+0x2a>
     ee6:	8b83      	ldrh	r3, [r0, #28]
     ee8:	b29b      	uxth	r3, r3
     eea:	2b01      	cmp	r3, #1
     eec:	d010      	beq.n	f10 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     eee:	8ba3      	ldrh	r3, [r4, #28]
     ef0:	b29b      	uxth	r3, r3
     ef2:	2b00      	cmp	r3, #0
     ef4:	d102      	bne.n	efc <_i2c_master_read+0x38>
		if (module->send_stop) {
     ef6:	7aa3      	ldrb	r3, [r4, #10]
     ef8:	2b00      	cmp	r3, #0
     efa:	d11c      	bne.n	f36 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     efc:	0020      	movs	r0, r4
     efe:	4b12      	ldr	r3, [pc, #72]	; (f48 <_i2c_master_read+0x84>)
     f00:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     f02:	6a23      	ldr	r3, [r4, #32]
     f04:	195d      	adds	r5, r3, r5
     f06:	2328      	movs	r3, #40	; 0x28
     f08:	5cf3      	ldrb	r3, [r6, r3]
     f0a:	b2db      	uxtb	r3, r3
     f0c:	702b      	strb	r3, [r5, #0]
}
     f0e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f10:	6872      	ldr	r2, [r6, #4]
     f12:	2380      	movs	r3, #128	; 0x80
     f14:	02db      	lsls	r3, r3, #11
     f16:	4313      	orrs	r3, r2
     f18:	6073      	str	r3, [r6, #4]
     f1a:	e7e8      	b.n	eee <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     f1c:	7ac3      	ldrb	r3, [r0, #11]
     f1e:	2b00      	cmp	r3, #0
     f20:	d0e5      	beq.n	eee <_i2c_master_read+0x2a>
     f22:	8b83      	ldrh	r3, [r0, #28]
     f24:	b29b      	uxth	r3, r3
     f26:	2b00      	cmp	r3, #0
     f28:	d1e1      	bne.n	eee <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f2a:	6872      	ldr	r2, [r6, #4]
     f2c:	2380      	movs	r3, #128	; 0x80
     f2e:	02db      	lsls	r3, r3, #11
     f30:	4313      	orrs	r3, r2
     f32:	6073      	str	r3, [r6, #4]
     f34:	e7db      	b.n	eee <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     f36:	0020      	movs	r0, r4
     f38:	4b03      	ldr	r3, [pc, #12]	; (f48 <_i2c_master_read+0x84>)
     f3a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f3c:	6872      	ldr	r2, [r6, #4]
     f3e:	23c0      	movs	r3, #192	; 0xc0
     f40:	029b      	lsls	r3, r3, #10
     f42:	4313      	orrs	r3, r2
     f44:	6073      	str	r3, [r6, #4]
     f46:	e7d9      	b.n	efc <_i2c_master_read+0x38>
     f48:	00000eb9 	.word	0x00000eb9

00000f4c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     f4c:	b570      	push	{r4, r5, r6, lr}
     f4e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f50:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f52:	8b6b      	ldrh	r3, [r5, #26]
     f54:	075b      	lsls	r3, r3, #29
     f56:	d503      	bpl.n	f60 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     f58:	221e      	movs	r2, #30
     f5a:	2325      	movs	r3, #37	; 0x25
     f5c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     f5e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     f60:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     f62:	8b83      	ldrh	r3, [r0, #28]
     f64:	1af6      	subs	r6, r6, r3
     f66:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     f68:	8b83      	ldrh	r3, [r0, #28]
     f6a:	3b01      	subs	r3, #1
     f6c:	b29b      	uxth	r3, r3
     f6e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     f70:	4b04      	ldr	r3, [pc, #16]	; (f84 <_i2c_master_write+0x38>)
     f72:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     f74:	6a23      	ldr	r3, [r4, #32]
     f76:	199e      	adds	r6, r3, r6
     f78:	7833      	ldrb	r3, [r6, #0]
     f7a:	b2db      	uxtb	r3, r3
     f7c:	2228      	movs	r2, #40	; 0x28
     f7e:	54ab      	strb	r3, [r5, r2]
     f80:	e7ed      	b.n	f5e <_i2c_master_write+0x12>
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00000eb9 	.word	0x00000eb9

00000f88 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     f88:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     f8a:	0080      	lsls	r0, r0, #2
     f8c:	4b75      	ldr	r3, [pc, #468]	; (1164 <_i2c_master_interrupt_handler+0x1dc>)
     f8e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f90:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     f92:	682b      	ldr	r3, [r5, #0]
     f94:	011b      	lsls	r3, r3, #4
     f96:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     f98:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     f9a:	7e26      	ldrb	r6, [r4, #24]
     f9c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     f9e:	8b63      	ldrh	r3, [r4, #26]
     fa0:	b29b      	uxth	r3, r3
     fa2:	2b00      	cmp	r3, #0
     fa4:	d103      	bne.n	fae <_i2c_master_interrupt_handler+0x26>
     fa6:	8ba3      	ldrh	r3, [r4, #28]
     fa8:	b29b      	uxth	r3, r3
     faa:	2b00      	cmp	r3, #0
     fac:	d123      	bne.n	ff6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     fae:	8b63      	ldrh	r3, [r4, #26]
     fb0:	b29b      	uxth	r3, r3
     fb2:	2b00      	cmp	r3, #0
     fb4:	d008      	beq.n	fc8 <_i2c_master_interrupt_handler+0x40>
     fb6:	8ba3      	ldrh	r3, [r4, #28]
     fb8:	b29b      	uxth	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	d104      	bne.n	fc8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     fbe:	3325      	adds	r3, #37	; 0x25
     fc0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     fc2:	2b05      	cmp	r3, #5
     fc4:	d100      	bne.n	fc8 <_i2c_master_interrupt_handler+0x40>
     fc6:	e06d      	b.n	10a4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     fc8:	8b63      	ldrh	r3, [r4, #26]
     fca:	b29b      	uxth	r3, r3
     fcc:	2b00      	cmp	r3, #0
     fce:	d024      	beq.n	101a <_i2c_master_interrupt_handler+0x92>
     fd0:	8ba3      	ldrh	r3, [r4, #28]
     fd2:	b29b      	uxth	r3, r3
     fd4:	2b00      	cmp	r3, #0
     fd6:	d020      	beq.n	101a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     fd8:	8b6b      	ldrh	r3, [r5, #26]
     fda:	069b      	lsls	r3, r3, #26
     fdc:	d500      	bpl.n	fe0 <_i2c_master_interrupt_handler+0x58>
     fde:	e081      	b.n	10e4 <_i2c_master_interrupt_handler+0x15c>
     fe0:	2a00      	cmp	r2, #0
     fe2:	d004      	beq.n	fee <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     fe4:	8ba3      	ldrh	r3, [r4, #28]
     fe6:	b29b      	uxth	r3, r3
     fe8:	2b01      	cmp	r3, #1
     fea:	d100      	bne.n	fee <_i2c_master_interrupt_handler+0x66>
     fec:	e07a      	b.n	10e4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     fee:	2241      	movs	r2, #65	; 0x41
     ff0:	2325      	movs	r3, #37	; 0x25
     ff2:	54e2      	strb	r2, [r4, r3]
     ff4:	e011      	b.n	101a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     ff6:	7e2b      	ldrb	r3, [r5, #24]
     ff8:	07db      	lsls	r3, r3, #31
     ffa:	d507      	bpl.n	100c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     ffc:	2301      	movs	r3, #1
     ffe:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1000:	8b6b      	ldrh	r3, [r5, #26]
    1002:	079b      	lsls	r3, r3, #30
    1004:	d52e      	bpl.n	1064 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1006:	2241      	movs	r2, #65	; 0x41
    1008:	2325      	movs	r3, #37	; 0x25
    100a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    100c:	8ba3      	ldrh	r3, [r4, #28]
    100e:	b29b      	uxth	r3, r3
    1010:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1012:	2325      	movs	r3, #37	; 0x25
    1014:	5ce3      	ldrb	r3, [r4, r3]
    1016:	2b05      	cmp	r3, #5
    1018:	d038      	beq.n	108c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    101a:	8b63      	ldrh	r3, [r4, #26]
    101c:	b29b      	uxth	r3, r3
    101e:	2b00      	cmp	r3, #0
    1020:	d007      	beq.n	1032 <_i2c_master_interrupt_handler+0xaa>
    1022:	8ba3      	ldrh	r3, [r4, #28]
    1024:	b29b      	uxth	r3, r3
    1026:	2b00      	cmp	r3, #0
    1028:	d103      	bne.n	1032 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    102a:	3325      	adds	r3, #37	; 0x25
    102c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    102e:	2b05      	cmp	r3, #5
    1030:	d064      	beq.n	10fc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1032:	2325      	movs	r3, #37	; 0x25
    1034:	5ce3      	ldrb	r3, [r4, r3]
    1036:	2b05      	cmp	r3, #5
    1038:	d013      	beq.n	1062 <_i2c_master_interrupt_handler+0xda>
    103a:	2325      	movs	r3, #37	; 0x25
    103c:	5ce3      	ldrb	r3, [r4, r3]
    103e:	2b00      	cmp	r3, #0
    1040:	d00f      	beq.n	1062 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1042:	2303      	movs	r3, #3
    1044:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1046:	2300      	movs	r3, #0
    1048:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    104a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    104c:	3325      	adds	r3, #37	; 0x25
    104e:	5ce3      	ldrb	r3, [r4, r3]
    1050:	2b41      	cmp	r3, #65	; 0x41
    1052:	d003      	beq.n	105c <_i2c_master_interrupt_handler+0xd4>
    1054:	7aa3      	ldrb	r3, [r4, #10]
    1056:	2b00      	cmp	r3, #0
    1058:	d000      	beq.n	105c <_i2c_master_interrupt_handler+0xd4>
    105a:	e075      	b.n	1148 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    105c:	0773      	lsls	r3, r6, #29
    105e:	d500      	bpl.n	1062 <_i2c_master_interrupt_handler+0xda>
    1060:	e07b      	b.n	115a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1062:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1064:	8b6b      	ldrh	r3, [r5, #26]
    1066:	075b      	lsls	r3, r3, #29
    1068:	d5d0      	bpl.n	100c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    106a:	2218      	movs	r2, #24
    106c:	2325      	movs	r3, #37	; 0x25
    106e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1070:	2300      	movs	r3, #0
    1072:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1074:	7aa3      	ldrb	r3, [r4, #10]
    1076:	2b00      	cmp	r3, #0
    1078:	d0c8      	beq.n	100c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    107a:	0020      	movs	r0, r4
    107c:	4b3a      	ldr	r3, [pc, #232]	; (1168 <_i2c_master_interrupt_handler+0x1e0>)
    107e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1080:	686a      	ldr	r2, [r5, #4]
    1082:	23c0      	movs	r3, #192	; 0xc0
    1084:	029b      	lsls	r3, r3, #10
    1086:	4313      	orrs	r3, r2
    1088:	606b      	str	r3, [r5, #4]
    108a:	e7bf      	b.n	100c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    108c:	331f      	adds	r3, #31
    108e:	5ce3      	ldrb	r3, [r4, r3]
    1090:	2b00      	cmp	r3, #0
    1092:	d003      	beq.n	109c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1094:	0020      	movs	r0, r4
    1096:	4b35      	ldr	r3, [pc, #212]	; (116c <_i2c_master_interrupt_handler+0x1e4>)
    1098:	4798      	blx	r3
    109a:	e7be      	b.n	101a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    109c:	0020      	movs	r0, r4
    109e:	4b34      	ldr	r3, [pc, #208]	; (1170 <_i2c_master_interrupt_handler+0x1e8>)
    10a0:	4798      	blx	r3
    10a2:	e7ba      	b.n	101a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    10a4:	331f      	adds	r3, #31
    10a6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    10a8:	2b00      	cmp	r3, #0
    10aa:	d000      	beq.n	10ae <_i2c_master_interrupt_handler+0x126>
    10ac:	e78c      	b.n	fc8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    10ae:	3303      	adds	r3, #3
    10b0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    10b2:	2300      	movs	r3, #0
    10b4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    10b6:	3325      	adds	r3, #37	; 0x25
    10b8:	2200      	movs	r2, #0
    10ba:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    10bc:	7aa3      	ldrb	r3, [r4, #10]
    10be:	2b00      	cmp	r3, #0
    10c0:	d107      	bne.n	10d2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    10c2:	2301      	movs	r3, #1
    10c4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    10c6:	07f3      	lsls	r3, r6, #31
    10c8:	d5a7      	bpl.n	101a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    10ca:	68e3      	ldr	r3, [r4, #12]
    10cc:	0020      	movs	r0, r4
    10ce:	4798      	blx	r3
    10d0:	e7a3      	b.n	101a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    10d2:	0020      	movs	r0, r4
    10d4:	4b24      	ldr	r3, [pc, #144]	; (1168 <_i2c_master_interrupt_handler+0x1e0>)
    10d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10d8:	686a      	ldr	r2, [r5, #4]
    10da:	23c0      	movs	r3, #192	; 0xc0
    10dc:	029b      	lsls	r3, r3, #10
    10de:	4313      	orrs	r3, r2
    10e0:	606b      	str	r3, [r5, #4]
    10e2:	e7f0      	b.n	10c6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    10e4:	2324      	movs	r3, #36	; 0x24
    10e6:	5ce3      	ldrb	r3, [r4, r3]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d103      	bne.n	10f4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    10ec:	0020      	movs	r0, r4
    10ee:	4b20      	ldr	r3, [pc, #128]	; (1170 <_i2c_master_interrupt_handler+0x1e8>)
    10f0:	4798      	blx	r3
    10f2:	e792      	b.n	101a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    10f4:	0020      	movs	r0, r4
    10f6:	4b1d      	ldr	r3, [pc, #116]	; (116c <_i2c_master_interrupt_handler+0x1e4>)
    10f8:	4798      	blx	r3
    10fa:	e78e      	b.n	101a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    10fc:	331f      	adds	r3, #31
    10fe:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1100:	2b01      	cmp	r3, #1
    1102:	d196      	bne.n	1032 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1104:	7e2b      	ldrb	r3, [r5, #24]
    1106:	079b      	lsls	r3, r3, #30
    1108:	d501      	bpl.n	110e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    110a:	2302      	movs	r3, #2
    110c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    110e:	2303      	movs	r3, #3
    1110:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1112:	2300      	movs	r3, #0
    1114:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1116:	3325      	adds	r3, #37	; 0x25
    1118:	2200      	movs	r2, #0
    111a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    111c:	07b3      	lsls	r3, r6, #30
    111e:	d503      	bpl.n	1128 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1120:	2324      	movs	r3, #36	; 0x24
    1122:	5ce3      	ldrb	r3, [r4, r3]
    1124:	2b01      	cmp	r3, #1
    1126:	d00b      	beq.n	1140 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1128:	07f3      	lsls	r3, r6, #31
    112a:	d400      	bmi.n	112e <_i2c_master_interrupt_handler+0x1a6>
    112c:	e781      	b.n	1032 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    112e:	2324      	movs	r3, #36	; 0x24
    1130:	5ce3      	ldrb	r3, [r4, r3]
    1132:	2b00      	cmp	r3, #0
    1134:	d000      	beq.n	1138 <_i2c_master_interrupt_handler+0x1b0>
    1136:	e77c      	b.n	1032 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1138:	68e3      	ldr	r3, [r4, #12]
    113a:	0020      	movs	r0, r4
    113c:	4798      	blx	r3
    113e:	e778      	b.n	1032 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1140:	6923      	ldr	r3, [r4, #16]
    1142:	0020      	movs	r0, r4
    1144:	4798      	blx	r3
    1146:	e774      	b.n	1032 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1148:	0020      	movs	r0, r4
    114a:	4b07      	ldr	r3, [pc, #28]	; (1168 <_i2c_master_interrupt_handler+0x1e0>)
    114c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    114e:	686a      	ldr	r2, [r5, #4]
    1150:	23e0      	movs	r3, #224	; 0xe0
    1152:	02db      	lsls	r3, r3, #11
    1154:	4313      	orrs	r3, r2
    1156:	606b      	str	r3, [r5, #4]
    1158:	e780      	b.n	105c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    115a:	6963      	ldr	r3, [r4, #20]
    115c:	0020      	movs	r0, r4
    115e:	4798      	blx	r3
}
    1160:	e77f      	b.n	1062 <_i2c_master_interrupt_handler+0xda>
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	20000680 	.word	0x20000680
    1168:	00000eb9 	.word	0x00000eb9
    116c:	00000ec5 	.word	0x00000ec5
    1170:	00000f4d 	.word	0x00000f4d

00001174 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    1174:	4b08      	ldr	r3, [pc, #32]	; (1198 <pxCurrentTCBConst2>)
    1176:	6819      	ldr	r1, [r3, #0]
    1178:	6808      	ldr	r0, [r1, #0]
    117a:	3010      	adds	r0, #16
    117c:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    117e:	46a0      	mov	r8, r4
    1180:	46a9      	mov	r9, r5
    1182:	46b2      	mov	sl, r6
    1184:	46bb      	mov	fp, r7
    1186:	f380 8809 	msr	PSP, r0
    118a:	3820      	subs	r0, #32
    118c:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    118e:	4671      	mov	r1, lr
    1190:	200d      	movs	r0, #13
    1192:	4301      	orrs	r1, r0
    1194:	4708      	bx	r1
    1196:	46c0      	nop			; (mov r8, r8)

00001198 <pxCurrentTCBConst2>:
    1198:	200004a0 	.word	0x200004a0

0000119c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    119c:	f3ef 8009 	mrs	r0, PSP
    11a0:	4b0e      	ldr	r3, [pc, #56]	; (11dc <pxCurrentTCBConst>)
    11a2:	681a      	ldr	r2, [r3, #0]
    11a4:	3820      	subs	r0, #32
    11a6:	6010      	str	r0, [r2, #0]
    11a8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11aa:	4644      	mov	r4, r8
    11ac:	464d      	mov	r5, r9
    11ae:	4656      	mov	r6, sl
    11b0:	465f      	mov	r7, fp
    11b2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    11b4:	b508      	push	{r3, lr}
    11b6:	b672      	cpsid	i
    11b8:	f000 fd88 	bl	1ccc <vTaskSwitchContext>
    11bc:	b662      	cpsie	i
    11be:	bc0c      	pop	{r2, r3}
    11c0:	6811      	ldr	r1, [r2, #0]
    11c2:	6808      	ldr	r0, [r1, #0]
    11c4:	3010      	adds	r0, #16
    11c6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11c8:	46a0      	mov	r8, r4
    11ca:	46a9      	mov	r9, r5
    11cc:	46b2      	mov	sl, r6
    11ce:	46bb      	mov	fp, r7
    11d0:	f380 8809 	msr	PSP, r0
    11d4:	3820      	subs	r0, #32
    11d6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11d8:	4718      	bx	r3
    11da:	46c0      	nop			; (mov r8, r8)

000011dc <pxCurrentTCBConst>:
    11dc:	200004a0 	.word	0x200004a0

000011e0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    11e0:	b510      	push	{r4, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    11e2:	2280      	movs	r2, #128	; 0x80
    11e4:	0552      	lsls	r2, r2, #21
    11e6:	4b03      	ldr	r3, [pc, #12]	; (11f4 <SysTick_Handler+0x14>)
    11e8:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    11ea:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    11ec:	4b02      	ldr	r3, [pc, #8]	; (11f8 <SysTick_Handler+0x18>)
    11ee:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    11f0:	b662      	cpsie	i
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	e000ed04 	.word	0xe000ed04
    11f8:	00001bb1 	.word	0x00001bb1

000011fc <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
    11fc:	2800      	cmp	r0, #0
    11fe:	d00a      	beq.n	1216 <null_ptr_check+0x1a>
    1200:	6843      	ldr	r3, [r0, #4]
    1202:	2b00      	cmp	r3, #0
    1204:	d00a      	beq.n	121c <null_ptr_check+0x20>
    1206:	6883      	ldr	r3, [r0, #8]
    1208:	2b00      	cmp	r3, #0
    120a:	d00a      	beq.n	1222 <null_ptr_check+0x26>
    120c:	68c3      	ldr	r3, [r0, #12]
    120e:	4258      	negs	r0, r3
    1210:	4158      	adcs	r0, r3
    1212:	4240      	negs	r0, r0
	} else {
		rslt = BMP280_OK;
	}

	return rslt;
}
    1214:	4770      	bx	lr
		rslt = BMP280_E_NULL_PTR;
    1216:	2001      	movs	r0, #1
    1218:	4240      	negs	r0, r0
    121a:	e7fb      	b.n	1214 <null_ptr_check+0x18>
    121c:	2001      	movs	r0, #1
    121e:	4240      	negs	r0, r0
    1220:	e7f8      	b.n	1214 <null_ptr_check+0x18>
    1222:	2001      	movs	r0, #1
    1224:	4240      	negs	r0, r0
    1226:	e7f5      	b.n	1214 <null_ptr_check+0x18>

00001228 <bmp280_get_regs>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	0007      	movs	r7, r0
    122c:	000e      	movs	r6, r1
    122e:	0015      	movs	r5, r2
    1230:	001c      	movs	r4, r3
	rslt = null_ptr_check(dev);
    1232:	0018      	movs	r0, r3
    1234:	4b0e      	ldr	r3, [pc, #56]	; (1270 <bmp280_get_regs+0x48>)
    1236:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (reg_data != NULL)) {
    1238:	2800      	cmp	r0, #0
    123a:	d112      	bne.n	1262 <bmp280_get_regs+0x3a>
    123c:	2e00      	cmp	r6, #0
    123e:	d013      	beq.n	1268 <bmp280_get_regs+0x40>
		if (dev->intf == BMP280_SPI_INTF)
    1240:	78a3      	ldrb	r3, [r4, #2]
    1242:	2b00      	cmp	r3, #0
    1244:	d101      	bne.n	124a <bmp280_get_regs+0x22>
			reg_addr = reg_addr | 0x80;
    1246:	3380      	adds	r3, #128	; 0x80
    1248:	431f      	orrs	r7, r3
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
    124a:	b2ab      	uxth	r3, r5
    124c:	7860      	ldrb	r0, [r4, #1]
    124e:	6864      	ldr	r4, [r4, #4]
    1250:	0032      	movs	r2, r6
    1252:	0039      	movs	r1, r7
    1254:	47a0      	blx	r4
		if (rslt != BMP280_OK)
    1256:	2800      	cmp	r0, #0
    1258:	d100      	bne.n	125c <bmp280_get_regs+0x34>
}
    125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rslt = BMP280_E_COMM_FAIL;
    125c:	2004      	movs	r0, #4
    125e:	4240      	negs	r0, r0
    1260:	e7fb      	b.n	125a <bmp280_get_regs+0x32>
		rslt = BMP280_E_NULL_PTR;
    1262:	2001      	movs	r0, #1
    1264:	4240      	negs	r0, r0
    1266:	e7f8      	b.n	125a <bmp280_get_regs+0x32>
    1268:	2001      	movs	r0, #1
    126a:	4240      	negs	r0, r0
    126c:	e7f5      	b.n	125a <bmp280_get_regs+0x32>
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	000011fd 	.word	0x000011fd

00001274 <bmp280_set_regs>:
{
    1274:	b5f0      	push	{r4, r5, r6, r7, lr}
    1276:	b083      	sub	sp, #12
    1278:	0005      	movs	r5, r0
    127a:	000e      	movs	r6, r1
    127c:	001f      	movs	r7, r3
    127e:	1c14      	adds	r4, r2, #0
    1280:	2a04      	cmp	r2, #4
    1282:	d900      	bls.n	1286 <bmp280_set_regs+0x12>
    1284:	2404      	movs	r4, #4
    1286:	b2e4      	uxtb	r4, r4
	rslt = null_ptr_check(dev);
    1288:	0038      	movs	r0, r7
    128a:	4b23      	ldr	r3, [pc, #140]	; (1318 <bmp280_set_regs+0xa4>)
    128c:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
    128e:	2800      	cmp	r0, #0
    1290:	d135      	bne.n	12fe <bmp280_set_regs+0x8a>
    1292:	2d00      	cmp	r5, #0
    1294:	d036      	beq.n	1304 <bmp280_set_regs+0x90>
    1296:	2e00      	cmp	r6, #0
    1298:	d037      	beq.n	130a <bmp280_set_regs+0x96>
		if (len != 0) {
    129a:	2c00      	cmp	r4, #0
    129c:	d038      	beq.n	1310 <bmp280_set_regs+0x9c>
			temp_buff[0] = reg_data[0];
    129e:	7833      	ldrb	r3, [r6, #0]
    12a0:	466a      	mov	r2, sp
    12a2:	7013      	strb	r3, [r2, #0]
			if (dev->intf == BMP280_SPI_INTF) {
    12a4:	78bb      	ldrb	r3, [r7, #2]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d10b      	bne.n	12c2 <bmp280_set_regs+0x4e>
    12aa:	002a      	movs	r2, r5
    12ac:	1e63      	subs	r3, r4, #1
    12ae:	b2db      	uxtb	r3, r3
    12b0:	3301      	adds	r3, #1
    12b2:	18eb      	adds	r3, r5, r3
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
    12b4:	307f      	adds	r0, #127	; 0x7f
    12b6:	7811      	ldrb	r1, [r2, #0]
    12b8:	4001      	ands	r1, r0
    12ba:	7011      	strb	r1, [r2, #0]
    12bc:	3201      	adds	r2, #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
    12be:	429a      	cmp	r2, r3
    12c0:	d1f9      	bne.n	12b6 <bmp280_set_regs+0x42>
			if (len > 1) {
    12c2:	2c01      	cmp	r4, #1
    12c4:	d916      	bls.n	12f4 <bmp280_set_regs+0x80>
    12c6:	4669      	mov	r1, sp
    12c8:	2201      	movs	r2, #1
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
	uint8_t index;

	for (index = 1; index < len; index++) {
		temp_buff[(index * 2) - 1] = reg_addr[index];
    12ca:	5cab      	ldrb	r3, [r5, r2]
    12cc:	704b      	strb	r3, [r1, #1]
		temp_buff[index * 2] = reg_data[index];
    12ce:	5cb3      	ldrb	r3, [r6, r2]
    12d0:	708b      	strb	r3, [r1, #2]
    12d2:	3102      	adds	r1, #2
    12d4:	3201      	adds	r2, #1
	for (index = 1; index < len; index++) {
    12d6:	b2d3      	uxtb	r3, r2
    12d8:	429c      	cmp	r4, r3
    12da:	d8f6      	bhi.n	12ca <bmp280_set_regs+0x56>
				temp_len = ((len * 2) - 1);
    12dc:	0064      	lsls	r4, r4, #1
    12de:	3c01      	subs	r4, #1
    12e0:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
    12e2:	7829      	ldrb	r1, [r5, #0]
    12e4:	7878      	ldrb	r0, [r7, #1]
    12e6:	68bc      	ldr	r4, [r7, #8]
    12e8:	466a      	mov	r2, sp
    12ea:	47a0      	blx	r4
			if (rslt != BMP280_OK)
    12ec:	2800      	cmp	r0, #0
    12ee:	d103      	bne.n	12f8 <bmp280_set_regs+0x84>
}
    12f0:	b003      	add	sp, #12
    12f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp_len = len;
    12f4:	b2a3      	uxth	r3, r4
    12f6:	e7f4      	b.n	12e2 <bmp280_set_regs+0x6e>
				rslt = BMP280_E_COMM_FAIL;
    12f8:	2004      	movs	r0, #4
    12fa:	4240      	negs	r0, r0
    12fc:	e7f8      	b.n	12f0 <bmp280_set_regs+0x7c>
		rslt = BMP280_E_NULL_PTR;
    12fe:	2001      	movs	r0, #1
    1300:	4240      	negs	r0, r0
    1302:	e7f5      	b.n	12f0 <bmp280_set_regs+0x7c>
    1304:	2001      	movs	r0, #1
    1306:	4240      	negs	r0, r0
    1308:	e7f2      	b.n	12f0 <bmp280_set_regs+0x7c>
    130a:	2001      	movs	r0, #1
    130c:	4240      	negs	r0, r0
    130e:	e7ef      	b.n	12f0 <bmp280_set_regs+0x7c>
			rslt = BMP280_E_INVALID_LEN;
    1310:	2003      	movs	r0, #3
    1312:	4240      	negs	r0, r0
    1314:	e7ec      	b.n	12f0 <bmp280_set_regs+0x7c>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	000011fd 	.word	0x000011fd

0000131c <bmp280_soft_reset>:
{
    131c:	b530      	push	{r4, r5, lr}
    131e:	b083      	sub	sp, #12
    1320:	0005      	movs	r5, r0
	uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
    1322:	22e0      	movs	r2, #224	; 0xe0
    1324:	466b      	mov	r3, sp
    1326:	71da      	strb	r2, [r3, #7]
	uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
    1328:	3a2a      	subs	r2, #42	; 0x2a
    132a:	466b      	mov	r3, sp
    132c:	719a      	strb	r2, [r3, #6]
	rslt = null_ptr_check(dev);
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <bmp280_soft_reset+0x3c>)
    1330:	4798      	blx	r3
    1332:	1e04      	subs	r4, r0, #0
	if (rslt == BMP280_OK) {
    1334:	d002      	beq.n	133c <bmp280_soft_reset+0x20>
}
    1336:	0020      	movs	r0, r4
    1338:	b003      	add	sp, #12
    133a:	bd30      	pop	{r4, r5, pc}
		rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
    133c:	002b      	movs	r3, r5
    133e:	2201      	movs	r2, #1
    1340:	4669      	mov	r1, sp
    1342:	3106      	adds	r1, #6
    1344:	4668      	mov	r0, sp
    1346:	3007      	adds	r0, #7
    1348:	4c04      	ldr	r4, [pc, #16]	; (135c <bmp280_soft_reset+0x40>)
    134a:	47a0      	blx	r4
    134c:	0004      	movs	r4, r0
		dev->delay_ms(2);
    134e:	68eb      	ldr	r3, [r5, #12]
    1350:	2002      	movs	r0, #2
    1352:	4798      	blx	r3
    1354:	e7ef      	b.n	1336 <bmp280_soft_reset+0x1a>
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	000011fd 	.word	0x000011fd
    135c:	00001275 	.word	0x00001275

00001360 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	b083      	sub	sp, #12
    1364:	0006      	movs	r6, r0
    1366:	000f      	movs	r7, r1
    1368:	0015      	movs	r5, r2
	int8_t rslt;
	uint8_t temp[2] = { 0, 0 };
    136a:	ab01      	add	r3, sp, #4
    136c:	2200      	movs	r2, #0
    136e:	701a      	strb	r2, [r3, #0]
    1370:	705a      	strb	r2, [r3, #1]
	uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
    1372:	4b2f      	ldr	r3, [pc, #188]	; (1430 <conf_sensor+0xd0>)
    1374:	881b      	ldrh	r3, [r3, #0]
    1376:	466a      	mov	r2, sp
    1378:	8013      	strh	r3, [r2, #0]

	rslt = null_ptr_check(dev);
    137a:	0028      	movs	r0, r5
    137c:	4b2d      	ldr	r3, [pc, #180]	; (1434 <conf_sensor+0xd4>)
    137e:	4798      	blx	r3

	if ((rslt == BMP280_OK) && (conf != NULL)) {
    1380:	2800      	cmp	r0, #0
    1382:	d14f      	bne.n	1424 <conf_sensor+0xc4>
    1384:	2f00      	cmp	r7, #0
    1386:	d050      	beq.n	142a <conf_sensor+0xca>

		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
    1388:	002b      	movs	r3, r5
    138a:	2202      	movs	r2, #2
    138c:	a901      	add	r1, sp, #4
    138e:	30f4      	adds	r0, #244	; 0xf4
    1390:	4c29      	ldr	r4, [pc, #164]	; (1438 <conf_sensor+0xd8>)
    1392:	47a0      	blx	r4
    1394:	1e04      	subs	r4, r0, #0

		if (rslt == BMP280_OK) {
    1396:	d002      	beq.n	139e <conf_sensor+0x3e>
	} else {
		rslt = BMP280_E_NULL_PTR;
	}

	return rslt;
}
    1398:	0020      	movs	r0, r4
    139a:	b003      	add	sp, #12
    139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rslt = bmp280_soft_reset(dev);
    139e:	0028      	movs	r0, r5
    13a0:	4b26      	ldr	r3, [pc, #152]	; (143c <conf_sensor+0xdc>)
    13a2:	4798      	blx	r3
    13a4:	1e04      	subs	r4, r0, #0
			if (rslt == BMP280_OK) {
    13a6:	d1f7      	bne.n	1398 <conf_sensor+0x38>
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
    13a8:	a901      	add	r1, sp, #4
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
    13aa:	780a      	ldrb	r2, [r1, #0]
    13ac:	231f      	movs	r3, #31
    13ae:	401a      	ands	r2, r3
    13b0:	7838      	ldrb	r0, [r7, #0]
    13b2:	0140      	lsls	r0, r0, #5
    13b4:	4302      	orrs	r2, r0
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
    13b6:	201c      	movs	r0, #28
    13b8:	4684      	mov	ip, r0
    13ba:	4382      	bics	r2, r0
    13bc:	7878      	ldrb	r0, [r7, #1]
    13be:	0080      	lsls	r0, r0, #2
    13c0:	341c      	adds	r4, #28
    13c2:	4020      	ands	r0, r4
    13c4:	4302      	orrs	r2, r0
    13c6:	700a      	strb	r2, [r1, #0]
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
    13c8:	784a      	ldrb	r2, [r1, #1]
    13ca:	4013      	ands	r3, r2
    13cc:	78ba      	ldrb	r2, [r7, #2]
    13ce:	0152      	lsls	r2, r2, #5
    13d0:	4313      	orrs	r3, r2
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
    13d2:	4662      	mov	r2, ip
    13d4:	4393      	bics	r3, r2
    13d6:	78fa      	ldrb	r2, [r7, #3]
    13d8:	0092      	lsls	r2, r2, #2
    13da:	4014      	ands	r4, r2
    13dc:	4323      	orrs	r3, r4
				temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
    13de:	2201      	movs	r2, #1
    13e0:	4393      	bics	r3, r2
    13e2:	7938      	ldrb	r0, [r7, #4]
    13e4:	4002      	ands	r2, r0
    13e6:	4313      	orrs	r3, r2
    13e8:	704b      	strb	r3, [r1, #1]
				rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
    13ea:	002b      	movs	r3, r5
    13ec:	2202      	movs	r2, #2
    13ee:	4668      	mov	r0, sp
    13f0:	4c13      	ldr	r4, [pc, #76]	; (1440 <conf_sensor+0xe0>)
    13f2:	47a0      	blx	r4
    13f4:	1e04      	subs	r4, r0, #0
				if (rslt == BMP280_OK) {
    13f6:	d1cf      	bne.n	1398 <conf_sensor+0x38>
					dev->conf = *conf;
    13f8:	0028      	movs	r0, r5
    13fa:	302c      	adds	r0, #44	; 0x2c
    13fc:	2205      	movs	r2, #5
    13fe:	0039      	movs	r1, r7
    1400:	4b10      	ldr	r3, [pc, #64]	; (1444 <conf_sensor+0xe4>)
    1402:	4798      	blx	r3
					if (mode != BMP280_SLEEP_MODE) {
    1404:	2e00      	cmp	r6, #0
    1406:	d0c7      	beq.n	1398 <conf_sensor+0x38>
						temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
    1408:	a901      	add	r1, sp, #4
    140a:	780b      	ldrb	r3, [r1, #0]
    140c:	2203      	movs	r2, #3
    140e:	4393      	bics	r3, r2
    1410:	4016      	ands	r6, r2
    1412:	431e      	orrs	r6, r3
    1414:	700e      	strb	r6, [r1, #0]
						rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
    1416:	002b      	movs	r3, r5
    1418:	3a02      	subs	r2, #2
    141a:	4668      	mov	r0, sp
    141c:	4c08      	ldr	r4, [pc, #32]	; (1440 <conf_sensor+0xe0>)
    141e:	47a0      	blx	r4
    1420:	0004      	movs	r4, r0
    1422:	e7b9      	b.n	1398 <conf_sensor+0x38>
		rslt = BMP280_E_NULL_PTR;
    1424:	2401      	movs	r4, #1
    1426:	4264      	negs	r4, r4
    1428:	e7b6      	b.n	1398 <conf_sensor+0x38>
    142a:	2401      	movs	r4, #1
    142c:	4264      	negs	r4, r4
    142e:	e7b3      	b.n	1398 <conf_sensor+0x38>
    1430:	00005e5c 	.word	0x00005e5c
    1434:	000011fd 	.word	0x000011fd
    1438:	00001229 	.word	0x00001229
    143c:	0000131d 	.word	0x0000131d
    1440:	00001275 	.word	0x00001275
    1444:	00004779 	.word	0x00004779

00001448 <bmp280_init>:
{
    1448:	b570      	push	{r4, r5, r6, lr}
    144a:	b086      	sub	sp, #24
    144c:	0004      	movs	r4, r0
	rslt = null_ptr_check(dev);
    144e:	4b48      	ldr	r3, [pc, #288]	; (1570 <bmp280_init+0x128>)
    1450:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    1452:	2800      	cmp	r0, #0
    1454:	d000      	beq.n	1458 <bmp280_init+0x10>
    1456:	e086      	b.n	1566 <bmp280_init+0x11e>
    1458:	2505      	movs	r5, #5
			rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    145a:	4e46      	ldr	r6, [pc, #280]	; (1574 <bmp280_init+0x12c>)
    145c:	e061      	b.n	1522 <bmp280_init+0xda>
	uint8_t temp[BMP280_CALIB_DATA_SIZE] = {0};
    145e:	2218      	movs	r2, #24
    1460:	2100      	movs	r1, #0
    1462:	4668      	mov	r0, sp
    1464:	4b44      	ldr	r3, [pc, #272]	; (1578 <bmp280_init+0x130>)
    1466:	4798      	blx	r3
	rslt = null_ptr_check(dev);
    1468:	0020      	movs	r0, r4
    146a:	4b41      	ldr	r3, [pc, #260]	; (1570 <bmp280_init+0x128>)
    146c:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    146e:	2800      	cmp	r0, #0
    1470:	d167      	bne.n	1542 <bmp280_init+0xfa>
		rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
    1472:	0023      	movs	r3, r4
    1474:	2218      	movs	r2, #24
    1476:	4669      	mov	r1, sp
    1478:	3088      	adds	r0, #136	; 0x88
    147a:	4e3e      	ldr	r6, [pc, #248]	; (1574 <bmp280_init+0x12c>)
    147c:	47b0      	blx	r6
		if (rslt == BMP280_OK) {
    147e:	2800      	cmp	r0, #0
    1480:	d15f      	bne.n	1542 <bmp280_init+0xfa>
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
    1482:	466b      	mov	r3, sp
    1484:	785a      	ldrb	r2, [r3, #1]
    1486:	0212      	lsls	r2, r2, #8
			| ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
    1488:	781b      	ldrb	r3, [r3, #0]
    148a:	4313      	orrs	r3, r2
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
    148c:	8223      	strh	r3, [r4, #16]
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
    148e:	466b      	mov	r3, sp
    1490:	78da      	ldrb	r2, [r3, #3]
    1492:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
    1494:	789b      	ldrb	r3, [r3, #2]
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
    1496:	4313      	orrs	r3, r2
    1498:	8263      	strh	r3, [r4, #18]
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
    149a:	466b      	mov	r3, sp
    149c:	795a      	ldrb	r2, [r3, #5]
    149e:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
    14a0:	791b      	ldrb	r3, [r3, #4]
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
    14a2:	4313      	orrs	r3, r2
    14a4:	82a3      	strh	r3, [r4, #20]
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
    14a6:	466b      	mov	r3, sp
    14a8:	79da      	ldrb	r2, [r3, #7]
    14aa:	0212      	lsls	r2, r2, #8
			| ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
    14ac:	799b      	ldrb	r3, [r3, #6]
    14ae:	4313      	orrs	r3, r2
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
    14b0:	82e3      	strh	r3, [r4, #22]
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
    14b2:	466b      	mov	r3, sp
    14b4:	7a5a      	ldrb	r2, [r3, #9]
    14b6:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
    14b8:	7a1b      	ldrb	r3, [r3, #8]
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
    14ba:	4313      	orrs	r3, r2
    14bc:	8323      	strh	r3, [r4, #24]
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
    14be:	466b      	mov	r3, sp
    14c0:	7ada      	ldrb	r2, [r3, #11]
    14c2:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
    14c4:	7a9b      	ldrb	r3, [r3, #10]
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
    14c6:	4313      	orrs	r3, r2
    14c8:	8363      	strh	r3, [r4, #26]
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
    14ca:	466b      	mov	r3, sp
    14cc:	7b5a      	ldrb	r2, [r3, #13]
    14ce:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
    14d0:	7b1b      	ldrb	r3, [r3, #12]
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
    14d2:	4313      	orrs	r3, r2
    14d4:	83a3      	strh	r3, [r4, #28]
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
    14d6:	466b      	mov	r3, sp
    14d8:	7bda      	ldrb	r2, [r3, #15]
    14da:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
    14dc:	7b9b      	ldrb	r3, [r3, #14]
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
    14de:	4313      	orrs	r3, r2
    14e0:	83e3      	strh	r3, [r4, #30]
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
    14e2:	466b      	mov	r3, sp
    14e4:	7c5a      	ldrb	r2, [r3, #17]
    14e6:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
    14e8:	7c1b      	ldrb	r3, [r3, #16]
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
    14ea:	4313      	orrs	r3, r2
    14ec:	8423      	strh	r3, [r4, #32]
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
    14ee:	466b      	mov	r3, sp
    14f0:	7cda      	ldrb	r2, [r3, #19]
    14f2:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
    14f4:	7c9b      	ldrb	r3, [r3, #18]
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
    14f6:	4313      	orrs	r3, r2
    14f8:	8463      	strh	r3, [r4, #34]	; 0x22
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
    14fa:	466b      	mov	r3, sp
    14fc:	7d5a      	ldrb	r2, [r3, #21]
    14fe:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
    1500:	7d1b      	ldrb	r3, [r3, #20]
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
    1502:	4313      	orrs	r3, r2
    1504:	84a3      	strh	r3, [r4, #36]	; 0x24
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
    1506:	466b      	mov	r3, sp
    1508:	7dda      	ldrb	r2, [r3, #23]
    150a:	0212      	lsls	r2, r2, #8
			| ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
    150c:	7d9b      	ldrb	r3, [r3, #22]
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
    150e:	4313      	orrs	r3, r2
    1510:	84e3      	strh	r3, [r4, #38]	; 0x26
    1512:	e016      	b.n	1542 <bmp280_init+0xfa>
			dev->delay_ms(10);
    1514:	200a      	movs	r0, #10
    1516:	68e3      	ldr	r3, [r4, #12]
    1518:	4798      	blx	r3
    151a:	3d01      	subs	r5, #1
    151c:	b2ed      	uxtb	r5, r5
		while (try_count) {
    151e:	2d00      	cmp	r5, #0
    1520:	d01f      	beq.n	1562 <bmp280_init+0x11a>
			rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    1522:	0023      	movs	r3, r4
    1524:	2201      	movs	r2, #1
    1526:	0021      	movs	r1, r4
    1528:	20d0      	movs	r0, #208	; 0xd0
    152a:	47b0      	blx	r6
			if ((rslt == BMP280_OK) && (dev->chip_id == BMP280_CHIP_ID1
    152c:	2800      	cmp	r0, #0
    152e:	d1f1      	bne.n	1514 <bmp280_init+0xcc>
			|| dev->chip_id == BMP280_CHIP_ID3)) {
    1530:	7823      	ldrb	r3, [r4, #0]
			if ((rslt == BMP280_OK) && (dev->chip_id == BMP280_CHIP_ID1
    1532:	3b56      	subs	r3, #86	; 0x56
    1534:	2b02      	cmp	r3, #2
    1536:	d8ed      	bhi.n	1514 <bmp280_init+0xcc>
				rslt = bmp280_soft_reset(dev);
    1538:	0020      	movs	r0, r4
    153a:	4b10      	ldr	r3, [pc, #64]	; (157c <bmp280_init+0x134>)
    153c:	4798      	blx	r3
				if (rslt == BMP280_OK)
    153e:	2800      	cmp	r0, #0
    1540:	d08d      	beq.n	145e <bmp280_init+0x16>
		if (!try_count)
    1542:	2d00      	cmp	r5, #0
    1544:	d011      	beq.n	156a <bmp280_init+0x122>
		if (rslt == BMP280_OK) {
    1546:	2800      	cmp	r0, #0
    1548:	d10d      	bne.n	1566 <bmp280_init+0x11e>
			dev->conf.filter = BMP280_FILTER_OFF;
    154a:	2300      	movs	r3, #0
    154c:	222f      	movs	r2, #47	; 0x2f
    154e:	54a3      	strb	r3, [r4, r2]
			dev->conf.os_pres = BMP280_OS_NONE;
    1550:	3a02      	subs	r2, #2
    1552:	54a3      	strb	r3, [r4, r2]
			dev->conf.os_temp = BMP280_OS_NONE;
    1554:	3a01      	subs	r2, #1
    1556:	54a3      	strb	r3, [r4, r2]
			dev->conf.odr = BMP280_ODR_0_5_MS;
    1558:	3202      	adds	r2, #2
    155a:	54a3      	strb	r3, [r4, r2]
			dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
    155c:	3202      	adds	r2, #2
    155e:	54a3      	strb	r3, [r4, r2]
    1560:	e001      	b.n	1566 <bmp280_init+0x11e>
			rslt = BMP280_E_DEV_NOT_FOUND;
    1562:	2002      	movs	r0, #2
    1564:	4240      	negs	r0, r0
}
    1566:	b006      	add	sp, #24
    1568:	bd70      	pop	{r4, r5, r6, pc}
			rslt = BMP280_E_DEV_NOT_FOUND;
    156a:	2002      	movs	r0, #2
    156c:	4240      	negs	r0, r0
    156e:	e7fa      	b.n	1566 <bmp280_init+0x11e>
    1570:	000011fd 	.word	0x000011fd
    1574:	00001229 	.word	0x00001229
    1578:	0000478b 	.word	0x0000478b
    157c:	0000131d 	.word	0x0000131d

00001580 <bmp280_get_config>:
{
    1580:	b570      	push	{r4, r5, r6, lr}
    1582:	b082      	sub	sp, #8
    1584:	0004      	movs	r4, r0
    1586:	000e      	movs	r6, r1
	uint8_t temp[2] = {0, 0};
    1588:	ab01      	add	r3, sp, #4
    158a:	2200      	movs	r2, #0
    158c:	701a      	strb	r2, [r3, #0]
    158e:	705a      	strb	r2, [r3, #1]
	rslt = null_ptr_check(dev);
    1590:	0008      	movs	r0, r1
    1592:	4b17      	ldr	r3, [pc, #92]	; (15f0 <bmp280_get_config+0x70>)
    1594:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (conf != NULL)) {
    1596:	2800      	cmp	r0, #0
    1598:	d123      	bne.n	15e2 <bmp280_get_config+0x62>
    159a:	2c00      	cmp	r4, #0
    159c:	d024      	beq.n	15e8 <bmp280_get_config+0x68>
		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
    159e:	0033      	movs	r3, r6
    15a0:	2202      	movs	r2, #2
    15a2:	a901      	add	r1, sp, #4
    15a4:	30f4      	adds	r0, #244	; 0xf4
    15a6:	4d13      	ldr	r5, [pc, #76]	; (15f4 <bmp280_get_config+0x74>)
    15a8:	47a8      	blx	r5
    15aa:	1e05      	subs	r5, r0, #0
		if (rslt == BMP280_OK) {
    15ac:	d116      	bne.n	15dc <bmp280_get_config+0x5c>
			conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
    15ae:	a901      	add	r1, sp, #4
    15b0:	780b      	ldrb	r3, [r1, #0]
    15b2:	095a      	lsrs	r2, r3, #5
    15b4:	7022      	strb	r2, [r4, #0]
			conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
    15b6:	109b      	asrs	r3, r3, #2
    15b8:	2207      	movs	r2, #7
    15ba:	4013      	ands	r3, r2
    15bc:	7063      	strb	r3, [r4, #1]
			conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
    15be:	7849      	ldrb	r1, [r1, #1]
    15c0:	094b      	lsrs	r3, r1, #5
    15c2:	70a3      	strb	r3, [r4, #2]
			conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
    15c4:	108b      	asrs	r3, r1, #2
    15c6:	401a      	ands	r2, r3
    15c8:	70e2      	strb	r2, [r4, #3]
			conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
    15ca:	2301      	movs	r3, #1
    15cc:	400b      	ands	r3, r1
    15ce:	7123      	strb	r3, [r4, #4]
			dev->conf = *conf;
    15d0:	0030      	movs	r0, r6
    15d2:	302c      	adds	r0, #44	; 0x2c
    15d4:	2205      	movs	r2, #5
    15d6:	0021      	movs	r1, r4
    15d8:	4b07      	ldr	r3, [pc, #28]	; (15f8 <bmp280_get_config+0x78>)
    15da:	4798      	blx	r3
}
    15dc:	0028      	movs	r0, r5
    15de:	b002      	add	sp, #8
    15e0:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BMP280_E_NULL_PTR;
    15e2:	2501      	movs	r5, #1
    15e4:	426d      	negs	r5, r5
    15e6:	e7f9      	b.n	15dc <bmp280_get_config+0x5c>
    15e8:	2501      	movs	r5, #1
    15ea:	426d      	negs	r5, r5
    15ec:	e7f6      	b.n	15dc <bmp280_get_config+0x5c>
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	000011fd 	.word	0x000011fd
    15f4:	00001229 	.word	0x00001229
    15f8:	00004779 	.word	0x00004779

000015fc <bmp280_set_config>:
{
    15fc:	b510      	push	{r4, lr}
    15fe:	000a      	movs	r2, r1
	return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
    1600:	0001      	movs	r1, r0
    1602:	2000      	movs	r0, #0
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <bmp280_set_config+0x10>)
    1606:	4798      	blx	r3
}
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	00001361 	.word	0x00001361

00001610 <bmp280_set_power_mode>:
{
    1610:	b570      	push	{r4, r5, r6, lr}
    1612:	0005      	movs	r5, r0
    1614:	000c      	movs	r4, r1
	rslt = null_ptr_check(dev);
    1616:	0008      	movs	r0, r1
    1618:	4b05      	ldr	r3, [pc, #20]	; (1630 <bmp280_set_power_mode+0x20>)
    161a:	4798      	blx	r3
	if (rslt == BMP280_OK)
    161c:	2800      	cmp	r0, #0
    161e:	d000      	beq.n	1622 <bmp280_set_power_mode+0x12>
}
    1620:	bd70      	pop	{r4, r5, r6, pc}
		rslt = conf_sensor(mode, &dev->conf, dev);
    1622:	0021      	movs	r1, r4
    1624:	312c      	adds	r1, #44	; 0x2c
    1626:	0022      	movs	r2, r4
    1628:	0028      	movs	r0, r5
    162a:	4b02      	ldr	r3, [pc, #8]	; (1634 <bmp280_set_power_mode+0x24>)
    162c:	4798      	blx	r3
    162e:	e7f7      	b.n	1620 <bmp280_set_power_mode+0x10>
    1630:	000011fd 	.word	0x000011fd
    1634:	00001361 	.word	0x00001361

00001638 <bmp280_get_uncomp_data>:
{
    1638:	b530      	push	{r4, r5, lr}
    163a:	b083      	sub	sp, #12
    163c:	0004      	movs	r4, r0
    163e:	000d      	movs	r5, r1
	uint8_t temp[6] = {0};
    1640:	2206      	movs	r2, #6
    1642:	2100      	movs	r1, #0
    1644:	4668      	mov	r0, sp
    1646:	4b17      	ldr	r3, [pc, #92]	; (16a4 <bmp280_get_uncomp_data+0x6c>)
    1648:	4798      	blx	r3
	rslt = null_ptr_check(dev);
    164a:	0028      	movs	r0, r5
    164c:	4b16      	ldr	r3, [pc, #88]	; (16a8 <bmp280_get_uncomp_data+0x70>)
    164e:	4798      	blx	r3
	if ((rslt == BMP280_OK) && (uncomp_data != NULL)) {
    1650:	2800      	cmp	r0, #0
    1652:	d121      	bne.n	1698 <bmp280_get_uncomp_data+0x60>
    1654:	2c00      	cmp	r4, #0
    1656:	d022      	beq.n	169e <bmp280_get_uncomp_data+0x66>
		rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
    1658:	002b      	movs	r3, r5
    165a:	2206      	movs	r2, #6
    165c:	4669      	mov	r1, sp
    165e:	30f7      	adds	r0, #247	; 0xf7
    1660:	4d12      	ldr	r5, [pc, #72]	; (16ac <bmp280_get_uncomp_data+0x74>)
    1662:	47a8      	blx	r5
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
    1664:	466b      	mov	r3, sp
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	031b      	lsls	r3, r3, #12
    166a:	466a      	mov	r2, sp
    166c:	7852      	ldrb	r2, [r2, #1]
    166e:	0112      	lsls	r2, r2, #4
    1670:	4313      	orrs	r3, r2
		| ((uint32_t) temp[2] >> 4));
    1672:	466a      	mov	r2, sp
    1674:	7892      	ldrb	r2, [r2, #2]
    1676:	0912      	lsrs	r2, r2, #4
    1678:	4313      	orrs	r3, r2
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
    167a:	6063      	str	r3, [r4, #4]
		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
    167c:	466b      	mov	r3, sp
    167e:	78db      	ldrb	r3, [r3, #3]
    1680:	031b      	lsls	r3, r3, #12
    1682:	466a      	mov	r2, sp
    1684:	7912      	ldrb	r2, [r2, #4]
    1686:	0112      	lsls	r2, r2, #4
    1688:	4313      	orrs	r3, r2
		| (((int32_t) (temp[5])) >> 4));
    168a:	466a      	mov	r2, sp
    168c:	7952      	ldrb	r2, [r2, #5]
    168e:	0912      	lsrs	r2, r2, #4
		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
    1690:	4313      	orrs	r3, r2
    1692:	6023      	str	r3, [r4, #0]
}
    1694:	b003      	add	sp, #12
    1696:	bd30      	pop	{r4, r5, pc}
		rslt = BMP280_E_NULL_PTR;
    1698:	2001      	movs	r0, #1
    169a:	4240      	negs	r0, r0
    169c:	e7fa      	b.n	1694 <bmp280_get_uncomp_data+0x5c>
    169e:	2001      	movs	r0, #1
    16a0:	4240      	negs	r0, r0
    16a2:	e7f7      	b.n	1694 <bmp280_get_uncomp_data+0x5c>
    16a4:	0000478b 	.word	0x0000478b
    16a8:	000011fd 	.word	0x000011fd
    16ac:	00001229 	.word	0x00001229

000016b0 <bmp280_comp_temp_double>:
{
    16b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b2:	b087      	sub	sp, #28
    16b4:	0004      	movs	r4, r0
    16b6:	000f      	movs	r7, r1
	rslt = null_ptr_check(dev);
    16b8:	0008      	movs	r0, r1
    16ba:	4b33      	ldr	r3, [pc, #204]	; (1788 <bmp280_comp_temp_double+0xd8>)
    16bc:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    16be:	2800      	cmp	r0, #0
    16c0:	d15f      	bne.n	1782 <bmp280_comp_temp_double+0xd2>
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    16c2:	4e32      	ldr	r6, [pc, #200]	; (178c <bmp280_comp_temp_double+0xdc>)
    16c4:	0020      	movs	r0, r4
    16c6:	47b0      	blx	r6
    16c8:	9000      	str	r0, [sp, #0]
    16ca:	9101      	str	r1, [sp, #4]
    16cc:	8a38      	ldrh	r0, [r7, #16]
    16ce:	47b0      	blx	r6
    16d0:	0004      	movs	r4, r0
    16d2:	000d      	movs	r5, r1
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
    16d4:	4e2e      	ldr	r6, [pc, #184]	; (1790 <bmp280_comp_temp_double+0xe0>)
    16d6:	2200      	movs	r2, #0
    16d8:	4b2e      	ldr	r3, [pc, #184]	; (1794 <bmp280_comp_temp_double+0xe4>)
    16da:	9800      	ldr	r0, [sp, #0]
    16dc:	9901      	ldr	r1, [sp, #4]
    16de:	47b0      	blx	r6
    16e0:	9004      	str	r0, [sp, #16]
    16e2:	9105      	str	r1, [sp, #20]
    16e4:	2200      	movs	r2, #0
    16e6:	4b2c      	ldr	r3, [pc, #176]	; (1798 <bmp280_comp_temp_double+0xe8>)
    16e8:	9402      	str	r4, [sp, #8]
    16ea:	9503      	str	r5, [sp, #12]
    16ec:	0020      	movs	r0, r4
    16ee:	0029      	movs	r1, r5
    16f0:	47b0      	blx	r6
    16f2:	0002      	movs	r2, r0
    16f4:	000b      	movs	r3, r1
    16f6:	4c29      	ldr	r4, [pc, #164]	; (179c <bmp280_comp_temp_double+0xec>)
    16f8:	9804      	ldr	r0, [sp, #16]
    16fa:	9905      	ldr	r1, [sp, #20]
    16fc:	47a0      	blx	r4
    16fe:	9004      	str	r0, [sp, #16]
    1700:	9105      	str	r1, [sp, #20]
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    1702:	2200      	movs	r2, #0
    1704:	4b26      	ldr	r3, [pc, #152]	; (17a0 <bmp280_comp_temp_double+0xf0>)
    1706:	9800      	ldr	r0, [sp, #0]
    1708:	9901      	ldr	r1, [sp, #4]
    170a:	47b0      	blx	r6
    170c:	9000      	str	r0, [sp, #0]
    170e:	9101      	str	r1, [sp, #4]
    1710:	2200      	movs	r2, #0
    1712:	4b24      	ldr	r3, [pc, #144]	; (17a4 <bmp280_comp_temp_double+0xf4>)
    1714:	9802      	ldr	r0, [sp, #8]
    1716:	9903      	ldr	r1, [sp, #12]
    1718:	47b0      	blx	r6
    171a:	0002      	movs	r2, r0
    171c:	000b      	movs	r3, r1
    171e:	9800      	ldr	r0, [sp, #0]
    1720:	9901      	ldr	r1, [sp, #4]
    1722:	47a0      	blx	r4
    1724:	9000      	str	r0, [sp, #0]
    1726:	9101      	str	r1, [sp, #4]
		* ((double) dev->calib_param.dig_t2);
    1728:	2312      	movs	r3, #18
    172a:	5ef8      	ldrsh	r0, [r7, r3]
    172c:	4c1e      	ldr	r4, [pc, #120]	; (17a8 <bmp280_comp_temp_double+0xf8>)
    172e:	47a0      	blx	r4
    1730:	0002      	movs	r2, r0
    1732:	000b      	movs	r3, r1
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
    1734:	9800      	ldr	r0, [sp, #0]
    1736:	9901      	ldr	r1, [sp, #4]
    1738:	47b0      	blx	r6
    173a:	9000      	str	r0, [sp, #0]
    173c:	9101      	str	r1, [sp, #4]
		* ((double) dev->calib_param.dig_t3);
    173e:	2314      	movs	r3, #20
    1740:	5ef8      	ldrsh	r0, [r7, r3]
    1742:	47a0      	blx	r4
    1744:	0004      	movs	r4, r0
    1746:	000d      	movs	r5, r1
		* (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0))
    1748:	9804      	ldr	r0, [sp, #16]
    174a:	9905      	ldr	r1, [sp, #20]
    174c:	0002      	movs	r2, r0
    174e:	000b      	movs	r3, r1
    1750:	47b0      	blx	r6
    1752:	0002      	movs	r2, r0
    1754:	000b      	movs	r3, r1
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
    1756:	0020      	movs	r0, r4
    1758:	0029      	movs	r1, r5
    175a:	47b0      	blx	r6
    175c:	0002      	movs	r2, r0
    175e:	000b      	movs	r3, r1
		dev->calib_param.t_fine = (int32_t) (var1 + var2);
    1760:	9800      	ldr	r0, [sp, #0]
    1762:	9901      	ldr	r1, [sp, #4]
    1764:	4c11      	ldr	r4, [pc, #68]	; (17ac <bmp280_comp_temp_double+0xfc>)
    1766:	47a0      	blx	r4
    1768:	0004      	movs	r4, r0
    176a:	000d      	movs	r5, r1
    176c:	4b10      	ldr	r3, [pc, #64]	; (17b0 <bmp280_comp_temp_double+0x100>)
    176e:	4798      	blx	r3
    1770:	62b8      	str	r0, [r7, #40]	; 0x28
		temperature = (var1 + var2) / 5120.0;
    1772:	2200      	movs	r2, #0
    1774:	4b0f      	ldr	r3, [pc, #60]	; (17b4 <bmp280_comp_temp_double+0x104>)
    1776:	0020      	movs	r0, r4
    1778:	0029      	movs	r1, r5
    177a:	4c0f      	ldr	r4, [pc, #60]	; (17b8 <bmp280_comp_temp_double+0x108>)
    177c:	47a0      	blx	r4
}
    177e:	b007      	add	sp, #28
    1780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	double temperature = 0;
    1782:	2000      	movs	r0, #0
    1784:	2100      	movs	r1, #0
	return temperature;
    1786:	e7fa      	b.n	177e <bmp280_comp_temp_double+0xce>
    1788:	000011fd 	.word	0x000011fd
    178c:	00004481 	.word	0x00004481
    1790:	00003869 	.word	0x00003869
    1794:	3ee00000 	.word	0x3ee00000
    1798:	3f200000 	.word	0x3f200000
    179c:	00003d69 	.word	0x00003d69
    17a0:	3f100000 	.word	0x3f100000
    17a4:	3f500000 	.word	0x3f500000
    17a8:	000043fd 	.word	0x000043fd
    17ac:	000029e1 	.word	0x000029e1
    17b0:	00004395 	.word	0x00004395
    17b4:	40b40000 	.word	0x40b40000
    17b8:	00003001 	.word	0x00003001

000017bc <bmp280_comp_pres_double>:
{
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	46c6      	mov	lr, r8
    17c0:	b500      	push	{lr}
    17c2:	b088      	sub	sp, #32
    17c4:	9002      	str	r0, [sp, #8]
    17c6:	000c      	movs	r4, r1
	rslt = null_ptr_check(dev);
    17c8:	0008      	movs	r0, r1
    17ca:	4b6a      	ldr	r3, [pc, #424]	; (1974 <bmp280_comp_pres_double+0x1b8>)
    17cc:	4798      	blx	r3
	if (rslt == BMP280_OK) {
    17ce:	2800      	cmp	r0, #0
    17d0:	d000      	beq.n	17d4 <bmp280_comp_pres_double+0x18>
    17d2:	e0c5      	b.n	1960 <bmp280_comp_pres_double+0x1a4>
		var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
    17d4:	4f68      	ldr	r7, [pc, #416]	; (1978 <bmp280_comp_pres_double+0x1bc>)
    17d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    17d8:	47b8      	blx	r7
    17da:	4d68      	ldr	r5, [pc, #416]	; (197c <bmp280_comp_pres_double+0x1c0>)
    17dc:	2200      	movs	r2, #0
    17de:	4b68      	ldr	r3, [pc, #416]	; (1980 <bmp280_comp_pres_double+0x1c4>)
    17e0:	47a8      	blx	r5
    17e2:	2200      	movs	r2, #0
    17e4:	4b67      	ldr	r3, [pc, #412]	; (1984 <bmp280_comp_pres_double+0x1c8>)
    17e6:	4e68      	ldr	r6, [pc, #416]	; (1988 <bmp280_comp_pres_double+0x1cc>)
    17e8:	47b0      	blx	r6
    17ea:	9000      	str	r0, [sp, #0]
    17ec:	9101      	str	r1, [sp, #4]
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
    17ee:	231a      	movs	r3, #26
    17f0:	5ee0      	ldrsh	r0, [r4, r3]
    17f2:	47b8      	blx	r7
    17f4:	9a00      	ldr	r2, [sp, #0]
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	47a8      	blx	r5
    17fa:	9a00      	ldr	r2, [sp, #0]
    17fc:	9b01      	ldr	r3, [sp, #4]
    17fe:	47a8      	blx	r5
    1800:	2200      	movs	r2, #0
    1802:	23fb      	movs	r3, #251	; 0xfb
    1804:	059b      	lsls	r3, r3, #22
    1806:	47a8      	blx	r5
    1808:	9004      	str	r0, [sp, #16]
    180a:	9105      	str	r1, [sp, #20]
		+ ((double) dev->calib_param.dig_p2) * var1) / 524288.0;
    180c:	2318      	movs	r3, #24
    180e:	5ee0      	ldrsh	r0, [r4, r3]
    1810:	47b8      	blx	r7
    1812:	9a00      	ldr	r2, [sp, #0]
    1814:	9b01      	ldr	r3, [sp, #4]
    1816:	47a8      	blx	r5
    1818:	0002      	movs	r2, r0
    181a:	000b      	movs	r3, r1
    181c:	4e5b      	ldr	r6, [pc, #364]	; (198c <bmp280_comp_pres_double+0x1d0>)
    181e:	9804      	ldr	r0, [sp, #16]
    1820:	9905      	ldr	r1, [sp, #20]
    1822:	47b0      	blx	r6
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
    1824:	2200      	movs	r2, #0
    1826:	23fb      	movs	r3, #251	; 0xfb
    1828:	059b      	lsls	r3, r3, #22
    182a:	47a8      	blx	r5
		var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
    182c:	2200      	movs	r2, #0
    182e:	23fc      	movs	r3, #252	; 0xfc
    1830:	059b      	lsls	r3, r3, #22
    1832:	47a8      	blx	r5
    1834:	2200      	movs	r2, #0
    1836:	4b56      	ldr	r3, [pc, #344]	; (1990 <bmp280_comp_pres_double+0x1d4>)
    1838:	47b0      	blx	r6
    183a:	0006      	movs	r6, r0
    183c:	000f      	movs	r7, r1
    183e:	8ae0      	ldrh	r0, [r4, #22]
    1840:	4b54      	ldr	r3, [pc, #336]	; (1994 <bmp280_comp_pres_double+0x1d8>)
    1842:	4798      	blx	r3
    1844:	0032      	movs	r2, r6
    1846:	003b      	movs	r3, r7
    1848:	47a8      	blx	r5
    184a:	0005      	movs	r5, r0
    184c:	000e      	movs	r6, r1
		if (var1 != 0) {
    184e:	2200      	movs	r2, #0
    1850:	2300      	movs	r3, #0
    1852:	9504      	str	r5, [sp, #16]
    1854:	9605      	str	r6, [sp, #20]
    1856:	4d50      	ldr	r5, [pc, #320]	; (1998 <bmp280_comp_pres_double+0x1dc>)
    1858:	47a8      	blx	r5
    185a:	2800      	cmp	r0, #0
    185c:	d000      	beq.n	1860 <bmp280_comp_pres_double+0xa4>
    185e:	e085      	b.n	196c <bmp280_comp_pres_double+0x1b0>
		var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
    1860:	2320      	movs	r3, #32
    1862:	5ee0      	ldrsh	r0, [r4, r3]
    1864:	4b44      	ldr	r3, [pc, #272]	; (1978 <bmp280_comp_pres_double+0x1bc>)
    1866:	4698      	mov	r8, r3
    1868:	4798      	blx	r3
    186a:	0006      	movs	r6, r0
    186c:	000f      	movs	r7, r1
    186e:	4d43      	ldr	r5, [pc, #268]	; (197c <bmp280_comp_pres_double+0x1c0>)
    1870:	9800      	ldr	r0, [sp, #0]
    1872:	9901      	ldr	r1, [sp, #4]
    1874:	0002      	movs	r2, r0
    1876:	000b      	movs	r3, r1
    1878:	47a8      	blx	r5
    187a:	0002      	movs	r2, r0
    187c:	000b      	movs	r3, r1
    187e:	0030      	movs	r0, r6
    1880:	0039      	movs	r1, r7
    1882:	47a8      	blx	r5
    1884:	2200      	movs	r2, #0
    1886:	23fc      	movs	r3, #252	; 0xfc
    1888:	059b      	lsls	r3, r3, #22
    188a:	47a8      	blx	r5
    188c:	9006      	str	r0, [sp, #24]
    188e:	9107      	str	r1, [sp, #28]
		var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
    1890:	231e      	movs	r3, #30
    1892:	5ee0      	ldrsh	r0, [r4, r3]
    1894:	47c0      	blx	r8
    1896:	9a00      	ldr	r2, [sp, #0]
    1898:	9b01      	ldr	r3, [sp, #4]
    189a:	47a8      	blx	r5
    189c:	4f3b      	ldr	r7, [pc, #236]	; (198c <bmp280_comp_pres_double+0x1d0>)
    189e:	0002      	movs	r2, r0
    18a0:	000b      	movs	r3, r1
    18a2:	47b8      	blx	r7
    18a4:	9a06      	ldr	r2, [sp, #24]
    18a6:	9b07      	ldr	r3, [sp, #28]
    18a8:	47b8      	blx	r7
		var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
    18aa:	2200      	movs	r2, #0
    18ac:	4b3b      	ldr	r3, [pc, #236]	; (199c <bmp280_comp_pres_double+0x1e0>)
    18ae:	47a8      	blx	r5
    18b0:	9000      	str	r0, [sp, #0]
    18b2:	9101      	str	r1, [sp, #4]
		pressure = 1048576.0 - (double) uncomp_pres;
    18b4:	9802      	ldr	r0, [sp, #8]
    18b6:	4b37      	ldr	r3, [pc, #220]	; (1994 <bmp280_comp_pres_double+0x1d8>)
    18b8:	4798      	blx	r3
    18ba:	0002      	movs	r2, r0
    18bc:	000b      	movs	r3, r1
    18be:	4e32      	ldr	r6, [pc, #200]	; (1988 <bmp280_comp_pres_double+0x1cc>)
    18c0:	2000      	movs	r0, #0
    18c2:	4937      	ldr	r1, [pc, #220]	; (19a0 <bmp280_comp_pres_double+0x1e4>)
    18c4:	47b0      	blx	r6
    18c6:	9002      	str	r0, [sp, #8]
    18c8:	9103      	str	r1, [sp, #12]
		var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
    18ca:	231c      	movs	r3, #28
    18cc:	5ee0      	ldrsh	r0, [r4, r3]
    18ce:	47c0      	blx	r8
    18d0:	2200      	movs	r2, #0
    18d2:	4b34      	ldr	r3, [pc, #208]	; (19a4 <bmp280_comp_pres_double+0x1e8>)
    18d4:	47a8      	blx	r5
    18d6:	9a00      	ldr	r2, [sp, #0]
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	47b8      	blx	r7
			pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
    18dc:	2200      	movs	r2, #0
    18de:	4b32      	ldr	r3, [pc, #200]	; (19a8 <bmp280_comp_pres_double+0x1ec>)
    18e0:	47a8      	blx	r5
    18e2:	0002      	movs	r2, r0
    18e4:	000b      	movs	r3, r1
    18e6:	9802      	ldr	r0, [sp, #8]
    18e8:	9903      	ldr	r1, [sp, #12]
    18ea:	47b0      	blx	r6
    18ec:	2200      	movs	r2, #0
    18ee:	4b2f      	ldr	r3, [pc, #188]	; (19ac <bmp280_comp_pres_double+0x1f0>)
    18f0:	47a8      	blx	r5
    18f2:	9a04      	ldr	r2, [sp, #16]
    18f4:	9b05      	ldr	r3, [sp, #20]
    18f6:	4e2e      	ldr	r6, [pc, #184]	; (19b0 <bmp280_comp_pres_double+0x1f4>)
    18f8:	47b0      	blx	r6
    18fa:	9000      	str	r0, [sp, #0]
    18fc:	9101      	str	r1, [sp, #4]
			var1 = ((double) dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
    18fe:	2326      	movs	r3, #38	; 0x26
    1900:	5ee0      	ldrsh	r0, [r4, r3]
    1902:	47c0      	blx	r8
    1904:	9a00      	ldr	r2, [sp, #0]
    1906:	9b01      	ldr	r3, [sp, #4]
    1908:	47a8      	blx	r5
    190a:	9a00      	ldr	r2, [sp, #0]
    190c:	9b01      	ldr	r3, [sp, #4]
    190e:	47a8      	blx	r5
    1910:	2200      	movs	r2, #0
    1912:	23f8      	movs	r3, #248	; 0xf8
    1914:	059b      	lsls	r3, r3, #22
    1916:	47a8      	blx	r5
    1918:	9002      	str	r0, [sp, #8]
    191a:	9103      	str	r1, [sp, #12]
			var2 = pressure * ((double) dev->calib_param.dig_p8) / 32768.0;
    191c:	2324      	movs	r3, #36	; 0x24
    191e:	5ee0      	ldrsh	r0, [r4, r3]
    1920:	47c0      	blx	r8
    1922:	9a00      	ldr	r2, [sp, #0]
    1924:	9b01      	ldr	r3, [sp, #4]
    1926:	47a8      	blx	r5
    1928:	2200      	movs	r2, #0
    192a:	23fc      	movs	r3, #252	; 0xfc
    192c:	059b      	lsls	r3, r3, #22
    192e:	47a8      	blx	r5
    1930:	0002      	movs	r2, r0
    1932:	000b      	movs	r3, r1
			pressure = pressure + (var1 + var2 + ((double) dev->calib_param.dig_p7)) / 16.0;
    1934:	9802      	ldr	r0, [sp, #8]
    1936:	9903      	ldr	r1, [sp, #12]
    1938:	47b8      	blx	r7
    193a:	9002      	str	r0, [sp, #8]
    193c:	9103      	str	r1, [sp, #12]
    193e:	2322      	movs	r3, #34	; 0x22
    1940:	5ee0      	ldrsh	r0, [r4, r3]
    1942:	47c0      	blx	r8
    1944:	0002      	movs	r2, r0
    1946:	000b      	movs	r3, r1
    1948:	9802      	ldr	r0, [sp, #8]
    194a:	9903      	ldr	r1, [sp, #12]
    194c:	47b8      	blx	r7
    194e:	2200      	movs	r2, #0
    1950:	4b18      	ldr	r3, [pc, #96]	; (19b4 <bmp280_comp_pres_double+0x1f8>)
    1952:	47a8      	blx	r5
    1954:	0002      	movs	r2, r0
    1956:	000b      	movs	r3, r1
    1958:	9800      	ldr	r0, [sp, #0]
    195a:	9901      	ldr	r1, [sp, #4]
    195c:	47b8      	blx	r7
    195e:	e001      	b.n	1964 <bmp280_comp_pres_double+0x1a8>
	double pressure = 0;
    1960:	2000      	movs	r0, #0
    1962:	2100      	movs	r1, #0
}
    1964:	b008      	add	sp, #32
    1966:	bc04      	pop	{r2}
    1968:	4690      	mov	r8, r2
    196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pressure = 0;
    196c:	2000      	movs	r0, #0
    196e:	2100      	movs	r1, #0
	return pressure;
    1970:	e7f8      	b.n	1964 <bmp280_comp_pres_double+0x1a8>
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	000011fd 	.word	0x000011fd
    1978:	000043fd 	.word	0x000043fd
    197c:	00003869 	.word	0x00003869
    1980:	3fe00000 	.word	0x3fe00000
    1984:	40ef4000 	.word	0x40ef4000
    1988:	00003d69 	.word	0x00003d69
    198c:	000029e1 	.word	0x000029e1
    1990:	3ff00000 	.word	0x3ff00000
    1994:	00004481 	.word	0x00004481
    1998:	00002985 	.word	0x00002985
    199c:	3fd00000 	.word	0x3fd00000
    19a0:	41300000 	.word	0x41300000
    19a4:	40f00000 	.word	0x40f00000
    19a8:	3f300000 	.word	0x3f300000
    19ac:	40b86a00 	.word	0x40b86a00
    19b0:	00003001 	.word	0x00003001
    19b4:	3fb00000 	.word	0x3fb00000

000019b8 <bmp280_compute_meas_time>:
{
    19b8:	b510      	push	{r4, lr}
    19ba:	0004      	movs	r4, r0
	rslt = null_ptr_check(dev);
    19bc:	4b11      	ldr	r3, [pc, #68]	; (1a04 <bmp280_compute_meas_time+0x4c>)
    19be:	4798      	blx	r3
	uint32_t period = 0;
    19c0:	2300      	movs	r3, #0
	if (rslt == BMP280_OK) {
    19c2:	2800      	cmp	r0, #0
    19c4:	d11b      	bne.n	19fe <bmp280_compute_meas_time+0x46>
		p_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_pres) >> 1);
    19c6:	332d      	adds	r3, #45	; 0x2d
    19c8:	5ce2      	ldrb	r2, [r4, r3]
		t_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_temp) >> 1);
    19ca:	3b01      	subs	r3, #1
    19cc:	5ce1      	ldrb	r1, [r4, r3]
    19ce:	3b2b      	subs	r3, #43	; 0x2b
    19d0:	0018      	movs	r0, r3
    19d2:	4088      	lsls	r0, r1
    19d4:	0840      	lsrs	r0, r0, #1
		p_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_pres) >> 1);
    19d6:	4093      	lsls	r3, r2
    19d8:	085b      	lsrs	r3, r3, #1
    19da:	18c3      	adds	r3, r0, r3
    19dc:	20fa      	movs	r0, #250	; 0xfa
    19de:	00c0      	lsls	r0, r0, #3
    19e0:	4358      	muls	r0, r3
		p_startup = (dev->conf.os_pres) ? 500 : 0;
    19e2:	2300      	movs	r3, #0
    19e4:	2a00      	cmp	r2, #0
    19e6:	d001      	beq.n	19ec <bmp280_compute_meas_time+0x34>
    19e8:	23fa      	movs	r3, #250	; 0xfa
    19ea:	005b      	lsls	r3, r3, #1
		period = startup + t_dur + p_startup + p_dur + 500;
    19ec:	4a06      	ldr	r2, [pc, #24]	; (1a08 <bmp280_compute_meas_time+0x50>)
    19ee:	4694      	mov	ip, r2
    19f0:	4460      	add	r0, ip
    19f2:	18c0      	adds	r0, r0, r3
		period /= 1000; /* Convert to milliseconds */
    19f4:	21fa      	movs	r1, #250	; 0xfa
    19f6:	0089      	lsls	r1, r1, #2
    19f8:	4b04      	ldr	r3, [pc, #16]	; (1a0c <bmp280_compute_meas_time+0x54>)
    19fa:	4798      	blx	r3
    19fc:	0003      	movs	r3, r0
	return (uint8_t)period;
    19fe:	b2d8      	uxtb	r0, r3
}
    1a00:	bd10      	pop	{r4, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	000011fd 	.word	0x000011fd
    1a08:	000005dc 	.word	0x000005dc
    1a0c:	00002679 	.word	0x00002679

00001a10 <BMP_Delay_MS>:

	return rslt;	
}

void BMP_Delay_MS(uint32_t delay)
{
    1a10:	b510      	push	{r4, lr}
	delay_ms(delay);
    1a12:	2800      	cmp	r0, #0
    1a14:	d103      	bne.n	1a1e <BMP_Delay_MS+0xe>
    1a16:	2001      	movs	r0, #1
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <BMP_Delay_MS+0x14>)
    1a1a:	4798      	blx	r3
}
    1a1c:	bd10      	pop	{r4, pc}
	delay_ms(delay);
    1a1e:	4b02      	ldr	r3, [pc, #8]	; (1a28 <BMP_Delay_MS+0x18>)
    1a20:	4798      	blx	r3
    1a22:	e7fb      	b.n	1a1c <BMP_Delay_MS+0xc>
    1a24:	00000805 	.word	0x00000805
    1a28:	00000831 	.word	0x00000831

00001a2c <BMP_280_Write>:

	return rslt;
}

uint8_t BMP_280_Write(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    1a2c:	b510      	push	{r4, lr}
	uint8_t rslt;
	rslt = I2C_Write(addr, startRegister, data, cnt);
    1a2e:	4c01      	ldr	r4, [pc, #4]	; (1a34 <BMP_280_Write+0x8>)
    1a30:	47a0      	blx	r4
	
	return rslt;
}
    1a32:	bd10      	pop	{r4, pc}
    1a34:	00002571 	.word	0x00002571

00001a38 <BMP_280_Read>:
{
    1a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3a:	b083      	sub	sp, #12
    1a3c:	0005      	movs	r5, r0
    1a3e:	9200      	str	r2, [sp, #0]
    1a40:	001f      	movs	r7, r3
    1a42:	466b      	mov	r3, sp
    1a44:	1ddc      	adds	r4, r3, #7
    1a46:	71d9      	strb	r1, [r3, #7]
	rslt = I2C_Write(addr, startRegister, &startRegister, 1);
    1a48:	2301      	movs	r3, #1
    1a4a:	0022      	movs	r2, r4
    1a4c:	4e04      	ldr	r6, [pc, #16]	; (1a60 <BMP_280_Read+0x28>)
    1a4e:	47b0      	blx	r6
	rslt = I2C_Read(addr,startRegister,data,cnt);
    1a50:	7821      	ldrb	r1, [r4, #0]
    1a52:	003b      	movs	r3, r7
    1a54:	9a00      	ldr	r2, [sp, #0]
    1a56:	0028      	movs	r0, r5
    1a58:	4c02      	ldr	r4, [pc, #8]	; (1a64 <BMP_280_Read+0x2c>)
    1a5a:	47a0      	blx	r4
}
    1a5c:	b003      	add	sp, #12
    1a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a60:	00002571 	.word	0x00002571
    1a64:	00002541 	.word	0x00002541

00001a68 <InitBMP280>:
{	
    1a68:	b510      	push	{r4, lr}
	bmp.dev_id = BMP280_I2C_ADDR_PRIM;
    1a6a:	4807      	ldr	r0, [pc, #28]	; (1a88 <InitBMP280+0x20>)
    1a6c:	2376      	movs	r3, #118	; 0x76
    1a6e:	7043      	strb	r3, [r0, #1]
	bmp.intf = BMP280_I2C_INTF;
    1a70:	3b75      	subs	r3, #117	; 0x75
    1a72:	7083      	strb	r3, [r0, #2]
	bmp.read = BMP_280_Read;
    1a74:	4b05      	ldr	r3, [pc, #20]	; (1a8c <InitBMP280+0x24>)
    1a76:	6043      	str	r3, [r0, #4]
	bmp.write = BMP_280_Write;
    1a78:	4b05      	ldr	r3, [pc, #20]	; (1a90 <InitBMP280+0x28>)
    1a7a:	6083      	str	r3, [r0, #8]
	bmp.delay_ms = BMP_Delay_MS;
    1a7c:	4b05      	ldr	r3, [pc, #20]	; (1a94 <InitBMP280+0x2c>)
    1a7e:	60c3      	str	r3, [r0, #12]
	rslt = bmp280_init(&bmp);
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <InitBMP280+0x30>)
    1a82:	4798      	blx	r3
}
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	20000618 	.word	0x20000618
    1a8c:	00001a39 	.word	0x00001a39
    1a90:	00001a2d 	.word	0x00001a2d
    1a94:	00001a11 	.word	0x00001a11
    1a98:	00001449 	.word	0x00001449

00001a9c <ConfigureBMP280>:


int8_t ConfigureBMP280(void)
{
    1a9c:	b530      	push	{r4, r5, lr}
    1a9e:	b083      	sub	sp, #12
	int8_t rslt;

	/* Always read the current settings before writing, especially when
	 * all the configuration is not modified 
	 */
	rslt = bmp280_get_config(&conf, &bmp);
    1aa0:	4c0e      	ldr	r4, [pc, #56]	; (1adc <ConfigureBMP280+0x40>)
    1aa2:	0021      	movs	r1, r4
    1aa4:	4668      	mov	r0, sp
    1aa6:	4d0e      	ldr	r5, [pc, #56]	; (1ae0 <ConfigureBMP280+0x44>)
    1aa8:	47a8      	blx	r5
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	/* Overwrite the desired settings */
	conf.filter = BMP280_FILTER_COEFF_2;
    1aaa:	2301      	movs	r3, #1
    1aac:	466a      	mov	r2, sp
    1aae:	70d3      	strb	r3, [r2, #3]
	conf.os_pres = BMP280_OS_16X;
    1ab0:	3304      	adds	r3, #4
    1ab2:	7053      	strb	r3, [r2, #1]
	conf.os_temp = BMP280_OS_4X;
    1ab4:	2203      	movs	r2, #3
    1ab6:	4669      	mov	r1, sp
    1ab8:	700a      	strb	r2, [r1, #0]
	conf.odr = BMP280_ODR_1000_MS;
    1aba:	708b      	strb	r3, [r1, #2]
	

	rslt = bmp280_set_config(&conf, &bmp);
    1abc:	0021      	movs	r1, r4
    1abe:	4668      	mov	r0, sp
    1ac0:	4b08      	ldr	r3, [pc, #32]	; (1ae4 <ConfigureBMP280+0x48>)
    1ac2:	4798      	blx	r3
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	rslt = bmp280_get_config(&conf, &bmp);
    1ac4:	0021      	movs	r1, r4
    1ac6:	4668      	mov	r0, sp
    1ac8:	47a8      	blx	r5

	/* Always set the power mode after setting the configuration */

	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
    1aca:	0021      	movs	r1, r4
    1acc:	2003      	movs	r0, #3
    1ace:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <ConfigureBMP280+0x4c>)
    1ad0:	4798      	blx	r3
	/* Check if rslt == BMP280_OK, if not, then handle accordingly */

	rslt = bmp280_get_config(&conf, &bmp);
    1ad2:	0021      	movs	r1, r4
    1ad4:	4668      	mov	r0, sp
    1ad6:	47a8      	blx	r5
}
    1ad8:	b003      	add	sp, #12
    1ada:	bd30      	pop	{r4, r5, pc}
    1adc:	20000618 	.word	0x20000618
    1ae0:	00001581 	.word	0x00001581
    1ae4:	000015fd 	.word	0x000015fd
    1ae8:	00001611 	.word	0x00001611

00001aec <BMP280_ReadCompPresTemp>:

int8_t BMP280_ReadCompPresTemp(double *compTemperature, double *compPressure)
{
    1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aee:	46d6      	mov	lr, sl
    1af0:	464f      	mov	r7, r9
    1af2:	b580      	push	{r7, lr}
    1af4:	b085      	sub	sp, #20
    1af6:	4681      	mov	r9, r0
    1af8:	468a      	mov	sl, r1
	struct bmp280_uncomp_data ucomp_data;
	int8_t rslt;

	uint8_t meas_dur = bmp280_compute_meas_time(&bmp);
    1afa:	4c15      	ldr	r4, [pc, #84]	; (1b50 <BMP280_ReadCompPresTemp+0x64>)
    1afc:	0020      	movs	r0, r4
    1afe:	4b15      	ldr	r3, [pc, #84]	; (1b54 <BMP280_ReadCompPresTemp+0x68>)
    1b00:	4798      	blx	r3
    1b02:	9001      	str	r0, [sp, #4]
    1b04:	0005      	movs	r5, r0

	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
    1b06:	0021      	movs	r1, r4
    1b08:	a802      	add	r0, sp, #8
    1b0a:	4b13      	ldr	r3, [pc, #76]	; (1b58 <BMP280_ReadCompPresTemp+0x6c>)
    1b0c:	4798      	blx	r3
    1b0e:	9000      	str	r0, [sp, #0]

	//int32_t temp32 = bmp280_comp_temp_32bit(ucomp_data.uncomp_temp, &bmp);
	//uint32_t pres32 = bmp280_comp_pres_32bit(ucomp_data.uncomp_press, &bmp);
	//uint32_t pres64 = bmp280_comp_pres_64bit(ucomp_data.uncomp_press, &bmp);
	double temp = bmp280_comp_temp_double(ucomp_data.uncomp_temp, &bmp);
    1b10:	0021      	movs	r1, r4
    1b12:	9802      	ldr	r0, [sp, #8]
    1b14:	4b11      	ldr	r3, [pc, #68]	; (1b5c <BMP280_ReadCompPresTemp+0x70>)
    1b16:	4798      	blx	r3
    1b18:	0006      	movs	r6, r0
    1b1a:	000f      	movs	r7, r1
	double pres = bmp280_comp_pres_double(ucomp_data.uncomp_press, &bmp);
    1b1c:	9803      	ldr	r0, [sp, #12]
    1b1e:	0021      	movs	r1, r4
    1b20:	4b0f      	ldr	r3, [pc, #60]	; (1b60 <BMP280_ReadCompPresTemp+0x74>)
    1b22:	4798      	blx	r3

	*compPressure = pres;
    1b24:	4653      	mov	r3, sl
    1b26:	6018      	str	r0, [r3, #0]
    1b28:	6059      	str	r1, [r3, #4]
	*compTemperature = temp;
    1b2a:	464b      	mov	r3, r9
    1b2c:	601e      	str	r6, [r3, #0]
    1b2e:	605f      	str	r7, [r3, #4]
	delay_ms(meas_dur);
    1b30:	2d00      	cmp	r5, #0
    1b32:	d108      	bne.n	1b46 <BMP280_ReadCompPresTemp+0x5a>
    1b34:	2001      	movs	r0, #1
    1b36:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <BMP280_ReadCompPresTemp+0x78>)
    1b38:	4798      	blx	r3

	return rslt;
    1b3a:	9800      	ldr	r0, [sp, #0]
    1b3c:	b005      	add	sp, #20
    1b3e:	bc0c      	pop	{r2, r3}
    1b40:	4691      	mov	r9, r2
    1b42:	469a      	mov	sl, r3
    1b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(meas_dur);
    1b46:	9801      	ldr	r0, [sp, #4]
    1b48:	4b07      	ldr	r3, [pc, #28]	; (1b68 <BMP280_ReadCompPresTemp+0x7c>)
    1b4a:	4798      	blx	r3
    1b4c:	e7f5      	b.n	1b3a <BMP280_ReadCompPresTemp+0x4e>
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	20000618 	.word	0x20000618
    1b54:	000019b9 	.word	0x000019b9
    1b58:	00001639 	.word	0x00001639
    1b5c:	000016b1 	.word	0x000016b1
    1b60:	000017bd 	.word	0x000017bd
    1b64:	00000805 	.word	0x00000805
    1b68:	00000831 	.word	0x00000831

00001b6c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1b6c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    1b6e:	685a      	ldr	r2, [r3, #4]
    1b70:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1b72:	6842      	ldr	r2, [r0, #4]
    1b74:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1b76:	685a      	ldr	r2, [r3, #4]
    1b78:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1b7a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1b7c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1b7e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1b80:	6803      	ldr	r3, [r0, #0]
    1b82:	3301      	adds	r3, #1
    1b84:	6003      	str	r3, [r0, #0]
}
    1b86:	4770      	bx	lr

00001b88 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1b88:	6843      	ldr	r3, [r0, #4]
    1b8a:	6882      	ldr	r2, [r0, #8]
    1b8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1b8e:	6883      	ldr	r3, [r0, #8]
    1b90:	6842      	ldr	r2, [r0, #4]
    1b92:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1b94:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1b96:	685a      	ldr	r2, [r3, #4]
    1b98:	4290      	cmp	r0, r2
    1b9a:	d006      	beq.n	1baa <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    1b9c:	2200      	movs	r2, #0
    1b9e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1ba0:	681a      	ldr	r2, [r3, #0]
    1ba2:	3a01      	subs	r2, #1
    1ba4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1ba6:	6818      	ldr	r0, [r3, #0]
}
    1ba8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1baa:	6882      	ldr	r2, [r0, #8]
    1bac:	605a      	str	r2, [r3, #4]
    1bae:	e7f5      	b.n	1b9c <uxListRemove+0x14>

00001bb0 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1bb2:	4b3b      	ldr	r3, [pc, #236]	; (1ca0 <vTaskIncrementTick+0xf0>)
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d16d      	bne.n	1c96 <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
    1bba:	4b3a      	ldr	r3, [pc, #232]	; (1ca4 <vTaskIncrementTick+0xf4>)
    1bbc:	681a      	ldr	r2, [r3, #0]
    1bbe:	3201      	adds	r2, #1
    1bc0:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    1bc2:	681b      	ldr	r3, [r3, #0]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d118      	bne.n	1bfa <vTaskIncrementTick+0x4a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    1bc8:	4b37      	ldr	r3, [pc, #220]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d001      	beq.n	1bd6 <vTaskIncrementTick+0x26>
    1bd2:	b672      	cpsid	i
    1bd4:	e7fe      	b.n	1bd4 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
    1bd6:	4b34      	ldr	r3, [pc, #208]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1bd8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    1bda:	4a34      	ldr	r2, [pc, #208]	; (1cac <vTaskIncrementTick+0xfc>)
    1bdc:	6810      	ldr	r0, [r2, #0]
    1bde:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    1be0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
    1be2:	4933      	ldr	r1, [pc, #204]	; (1cb0 <vTaskIncrementTick+0x100>)
    1be4:	680a      	ldr	r2, [r1, #0]
    1be6:	3201      	adds	r2, #1
    1be8:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	681b      	ldr	r3, [r3, #0]
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d11a      	bne.n	1c28 <vTaskIncrementTick+0x78>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    1bf2:	2201      	movs	r2, #1
    1bf4:	4252      	negs	r2, r2
    1bf6:	4b2f      	ldr	r3, [pc, #188]	; (1cb4 <vTaskIncrementTick+0x104>)
    1bf8:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1bfa:	4b2a      	ldr	r3, [pc, #168]	; (1ca4 <vTaskIncrementTick+0xf4>)
    1bfc:	681a      	ldr	r2, [r3, #0]
    1bfe:	4b2d      	ldr	r3, [pc, #180]	; (1cb4 <vTaskIncrementTick+0x104>)
    1c00:	681b      	ldr	r3, [r3, #0]
    1c02:	429a      	cmp	r2, r3
    1c04:	d34b      	bcc.n	1c9e <vTaskIncrementTick+0xee>
    1c06:	4b28      	ldr	r3, [pc, #160]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d013      	beq.n	1c38 <vTaskIncrementTick+0x88>
    1c10:	4b25      	ldr	r3, [pc, #148]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	68db      	ldr	r3, [r3, #12]
    1c16:	68dc      	ldr	r4, [r3, #12]
    1c18:	6863      	ldr	r3, [r4, #4]
    1c1a:	4a22      	ldr	r2, [pc, #136]	; (1ca4 <vTaskIncrementTick+0xf4>)
    1c1c:	6812      	ldr	r2, [r2, #0]
    1c1e:	4293      	cmp	r3, r2
    1c20:	d80f      	bhi.n	1c42 <vTaskIncrementTick+0x92>
    1c22:	4f25      	ldr	r7, [pc, #148]	; (1cb8 <vTaskIncrementTick+0x108>)
    1c24:	4e25      	ldr	r6, [pc, #148]	; (1cbc <vTaskIncrementTick+0x10c>)
    1c26:	e025      	b.n	1c74 <vTaskIncrementTick+0xc4>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1c28:	4b1f      	ldr	r3, [pc, #124]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	68db      	ldr	r3, [r3, #12]
    1c2e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1c30:	685a      	ldr	r2, [r3, #4]
    1c32:	4b20      	ldr	r3, [pc, #128]	; (1cb4 <vTaskIncrementTick+0x104>)
    1c34:	601a      	str	r2, [r3, #0]
    1c36:	e7e0      	b.n	1bfa <vTaskIncrementTick+0x4a>
		prvCheckDelayedTasks();
    1c38:	2201      	movs	r2, #1
    1c3a:	4252      	negs	r2, r2
    1c3c:	4b1d      	ldr	r3, [pc, #116]	; (1cb4 <vTaskIncrementTick+0x104>)
    1c3e:	601a      	str	r2, [r3, #0]
    1c40:	e02d      	b.n	1c9e <vTaskIncrementTick+0xee>
    1c42:	4a1c      	ldr	r2, [pc, #112]	; (1cb4 <vTaskIncrementTick+0x104>)
    1c44:	6013      	str	r3, [r2, #0]
    1c46:	e02a      	b.n	1c9e <vTaskIncrementTick+0xee>
    1c48:	0098      	lsls	r0, r3, #2
    1c4a:	18c0      	adds	r0, r0, r3
    1c4c:	0080      	lsls	r0, r0, #2
    1c4e:	4b1c      	ldr	r3, [pc, #112]	; (1cc0 <vTaskIncrementTick+0x110>)
    1c50:	1818      	adds	r0, r3, r0
    1c52:	0029      	movs	r1, r5
    1c54:	4b1b      	ldr	r3, [pc, #108]	; (1cc4 <vTaskIncrementTick+0x114>)
    1c56:	4798      	blx	r3
    1c58:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	681b      	ldr	r3, [r3, #0]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d0ea      	beq.n	1c38 <vTaskIncrementTick+0x88>
    1c62:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <vTaskIncrementTick+0xf8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	68db      	ldr	r3, [r3, #12]
    1c68:	68dc      	ldr	r4, [r3, #12]
    1c6a:	6863      	ldr	r3, [r4, #4]
    1c6c:	4a0d      	ldr	r2, [pc, #52]	; (1ca4 <vTaskIncrementTick+0xf4>)
    1c6e:	6812      	ldr	r2, [r2, #0]
    1c70:	4293      	cmp	r3, r2
    1c72:	d8e6      	bhi.n	1c42 <vTaskIncrementTick+0x92>
    1c74:	1d25      	adds	r5, r4, #4
    1c76:	0028      	movs	r0, r5
    1c78:	47b8      	blx	r7
    1c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d003      	beq.n	1c88 <vTaskIncrementTick+0xd8>
    1c80:	0020      	movs	r0, r4
    1c82:	3018      	adds	r0, #24
    1c84:	4b0c      	ldr	r3, [pc, #48]	; (1cb8 <vTaskIncrementTick+0x108>)
    1c86:	4798      	blx	r3
    1c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1c8a:	6832      	ldr	r2, [r6, #0]
    1c8c:	4293      	cmp	r3, r2
    1c8e:	d9db      	bls.n	1c48 <vTaskIncrementTick+0x98>
    1c90:	4a0a      	ldr	r2, [pc, #40]	; (1cbc <vTaskIncrementTick+0x10c>)
    1c92:	6013      	str	r3, [r2, #0]
    1c94:	e7d8      	b.n	1c48 <vTaskIncrementTick+0x98>
	}
	else
	{
		++uxMissedTicks;
    1c96:	4a0c      	ldr	r2, [pc, #48]	; (1cc8 <vTaskIncrementTick+0x118>)
    1c98:	6813      	ldr	r3, [r2, #0]
    1c9a:	3301      	adds	r3, #1
    1c9c:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
    1c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca0:	20000514 	.word	0x20000514
    1ca4:	20000524 	.word	0x20000524
    1ca8:	200004a4 	.word	0x200004a4
    1cac:	200004a8 	.word	0x200004a8
    1cb0:	20000520 	.word	0x20000520
    1cb4:	20000008 	.word	0x20000008
    1cb8:	00001b89 	.word	0x00001b89
    1cbc:	20000518 	.word	0x20000518
    1cc0:	200004ac 	.word	0x200004ac
    1cc4:	00001b6d 	.word	0x00001b6d
    1cc8:	20000510 	.word	0x20000510

00001ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1ccc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1cce:	4b24      	ldr	r3, [pc, #144]	; (1d60 <vTaskSwitchContext+0x94>)
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d11e      	bne.n	1d14 <vTaskSwitchContext+0x48>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1cd6:	4b23      	ldr	r3, [pc, #140]	; (1d64 <vTaskSwitchContext+0x98>)
    1cd8:	681a      	ldr	r2, [r3, #0]
    1cda:	0093      	lsls	r3, r2, #2
    1cdc:	189b      	adds	r3, r3, r2
    1cde:	009b      	lsls	r3, r3, #2
    1ce0:	4a21      	ldr	r2, [pc, #132]	; (1d68 <vTaskSwitchContext+0x9c>)
    1ce2:	589b      	ldr	r3, [r3, r2]
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d119      	bne.n	1d1c <vTaskSwitchContext+0x50>
    1ce8:	4b1e      	ldr	r3, [pc, #120]	; (1d64 <vTaskSwitchContext+0x98>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d00f      	beq.n	1d10 <vTaskSwitchContext+0x44>
    1cf0:	4a1c      	ldr	r2, [pc, #112]	; (1d64 <vTaskSwitchContext+0x98>)
    1cf2:	4c1d      	ldr	r4, [pc, #116]	; (1d68 <vTaskSwitchContext+0x9c>)
    1cf4:	0010      	movs	r0, r2
    1cf6:	6813      	ldr	r3, [r2, #0]
    1cf8:	3b01      	subs	r3, #1
    1cfa:	6013      	str	r3, [r2, #0]
    1cfc:	6811      	ldr	r1, [r2, #0]
    1cfe:	008b      	lsls	r3, r1, #2
    1d00:	185b      	adds	r3, r3, r1
    1d02:	009b      	lsls	r3, r3, #2
    1d04:	591b      	ldr	r3, [r3, r4]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d108      	bne.n	1d1c <vTaskSwitchContext+0x50>
    1d0a:	6803      	ldr	r3, [r0, #0]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d1f2      	bne.n	1cf6 <vTaskSwitchContext+0x2a>
    1d10:	b672      	cpsid	i
    1d12:	e7fe      	b.n	1d12 <vTaskSwitchContext+0x46>
		xMissedYield = pdTRUE;
    1d14:	2201      	movs	r2, #1
    1d16:	4b15      	ldr	r3, [pc, #84]	; (1d6c <vTaskSwitchContext+0xa0>)
    1d18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
    1d1a:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1d1c:	4b11      	ldr	r3, [pc, #68]	; (1d64 <vTaskSwitchContext+0x98>)
    1d1e:	681a      	ldr	r2, [r3, #0]
    1d20:	4811      	ldr	r0, [pc, #68]	; (1d68 <vTaskSwitchContext+0x9c>)
    1d22:	0093      	lsls	r3, r2, #2
    1d24:	1899      	adds	r1, r3, r2
    1d26:	0089      	lsls	r1, r1, #2
    1d28:	1841      	adds	r1, r0, r1
    1d2a:	684c      	ldr	r4, [r1, #4]
    1d2c:	6864      	ldr	r4, [r4, #4]
    1d2e:	604c      	str	r4, [r1, #4]
    1d30:	189b      	adds	r3, r3, r2
    1d32:	009b      	lsls	r3, r3, #2
    1d34:	3308      	adds	r3, #8
    1d36:	18c3      	adds	r3, r0, r3
    1d38:	429c      	cmp	r4, r3
    1d3a:	d009      	beq.n	1d50 <vTaskSwitchContext+0x84>
    1d3c:	0093      	lsls	r3, r2, #2
    1d3e:	189a      	adds	r2, r3, r2
    1d40:	0092      	lsls	r2, r2, #2
    1d42:	4b09      	ldr	r3, [pc, #36]	; (1d68 <vTaskSwitchContext+0x9c>)
    1d44:	189a      	adds	r2, r3, r2
    1d46:	6853      	ldr	r3, [r2, #4]
    1d48:	68da      	ldr	r2, [r3, #12]
    1d4a:	4b09      	ldr	r3, [pc, #36]	; (1d70 <vTaskSwitchContext+0xa4>)
    1d4c:	601a      	str	r2, [r3, #0]
}
    1d4e:	e7e4      	b.n	1d1a <vTaskSwitchContext+0x4e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1d50:	6860      	ldr	r0, [r4, #4]
    1d52:	0093      	lsls	r3, r2, #2
    1d54:	189b      	adds	r3, r3, r2
    1d56:	009b      	lsls	r3, r3, #2
    1d58:	4903      	ldr	r1, [pc, #12]	; (1d68 <vTaskSwitchContext+0x9c>)
    1d5a:	18cb      	adds	r3, r1, r3
    1d5c:	6058      	str	r0, [r3, #4]
    1d5e:	e7ed      	b.n	1d3c <vTaskSwitchContext+0x70>
    1d60:	20000514 	.word	0x20000514
    1d64:	20000518 	.word	0x20000518
    1d68:	200004ac 	.word	0x200004ac
    1d6c:	2000051c 	.word	0x2000051c
    1d70:	200004a0 	.word	0x200004a0

00001d74 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1d74:	b510      	push	{r4, lr}
    1d76:	b082      	sub	sp, #8
    1d78:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1d7a:	4b0e      	ldr	r3, [pc, #56]	; (1db4 <sercom_set_gclk_generator+0x40>)
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d007      	beq.n	1d92 <sercom_set_gclk_generator+0x1e>
    1d82:	2900      	cmp	r1, #0
    1d84:	d105      	bne.n	1d92 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1d86:	4b0b      	ldr	r3, [pc, #44]	; (1db4 <sercom_set_gclk_generator+0x40>)
    1d88:	785b      	ldrb	r3, [r3, #1]
    1d8a:	4283      	cmp	r3, r0
    1d8c:	d010      	beq.n	1db0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1d8e:	201d      	movs	r0, #29
    1d90:	e00c      	b.n	1dac <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1d92:	a901      	add	r1, sp, #4
    1d94:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1d96:	2013      	movs	r0, #19
    1d98:	4b07      	ldr	r3, [pc, #28]	; (1db8 <sercom_set_gclk_generator+0x44>)
    1d9a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1d9c:	2013      	movs	r0, #19
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <sercom_set_gclk_generator+0x48>)
    1da0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1da2:	4b04      	ldr	r3, [pc, #16]	; (1db4 <sercom_set_gclk_generator+0x40>)
    1da4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1da6:	2201      	movs	r2, #1
    1da8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1daa:	2000      	movs	r0, #0
}
    1dac:	b002      	add	sp, #8
    1dae:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1db0:	2000      	movs	r0, #0
    1db2:	e7fb      	b.n	1dac <sercom_set_gclk_generator+0x38>
    1db4:	20000528 	.word	0x20000528
    1db8:	00002259 	.word	0x00002259
    1dbc:	000021cd 	.word	0x000021cd

00001dc0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1dc0:	4b40      	ldr	r3, [pc, #256]	; (1ec4 <_sercom_get_default_pad+0x104>)
    1dc2:	4298      	cmp	r0, r3
    1dc4:	d031      	beq.n	1e2a <_sercom_get_default_pad+0x6a>
    1dc6:	d90a      	bls.n	1dde <_sercom_get_default_pad+0x1e>
    1dc8:	4b3f      	ldr	r3, [pc, #252]	; (1ec8 <_sercom_get_default_pad+0x108>)
    1dca:	4298      	cmp	r0, r3
    1dcc:	d04d      	beq.n	1e6a <_sercom_get_default_pad+0xaa>
    1dce:	4b3f      	ldr	r3, [pc, #252]	; (1ecc <_sercom_get_default_pad+0x10c>)
    1dd0:	4298      	cmp	r0, r3
    1dd2:	d05a      	beq.n	1e8a <_sercom_get_default_pad+0xca>
    1dd4:	4b3e      	ldr	r3, [pc, #248]	; (1ed0 <_sercom_get_default_pad+0x110>)
    1dd6:	4298      	cmp	r0, r3
    1dd8:	d037      	beq.n	1e4a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1dda:	2000      	movs	r0, #0
}
    1ddc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1dde:	4b3d      	ldr	r3, [pc, #244]	; (1ed4 <_sercom_get_default_pad+0x114>)
    1de0:	4298      	cmp	r0, r3
    1de2:	d00c      	beq.n	1dfe <_sercom_get_default_pad+0x3e>
    1de4:	4b3c      	ldr	r3, [pc, #240]	; (1ed8 <_sercom_get_default_pad+0x118>)
    1de6:	4298      	cmp	r0, r3
    1de8:	d1f7      	bne.n	1dda <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1dea:	2901      	cmp	r1, #1
    1dec:	d017      	beq.n	1e1e <_sercom_get_default_pad+0x5e>
    1dee:	2900      	cmp	r1, #0
    1df0:	d05d      	beq.n	1eae <_sercom_get_default_pad+0xee>
    1df2:	2902      	cmp	r1, #2
    1df4:	d015      	beq.n	1e22 <_sercom_get_default_pad+0x62>
    1df6:	2903      	cmp	r1, #3
    1df8:	d015      	beq.n	1e26 <_sercom_get_default_pad+0x66>
	return 0;
    1dfa:	2000      	movs	r0, #0
    1dfc:	e7ee      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1dfe:	2901      	cmp	r1, #1
    1e00:	d007      	beq.n	1e12 <_sercom_get_default_pad+0x52>
    1e02:	2900      	cmp	r1, #0
    1e04:	d051      	beq.n	1eaa <_sercom_get_default_pad+0xea>
    1e06:	2902      	cmp	r1, #2
    1e08:	d005      	beq.n	1e16 <_sercom_get_default_pad+0x56>
    1e0a:	2903      	cmp	r1, #3
    1e0c:	d005      	beq.n	1e1a <_sercom_get_default_pad+0x5a>
	return 0;
    1e0e:	2000      	movs	r0, #0
    1e10:	e7e4      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e12:	4832      	ldr	r0, [pc, #200]	; (1edc <_sercom_get_default_pad+0x11c>)
    1e14:	e7e2      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e16:	4832      	ldr	r0, [pc, #200]	; (1ee0 <_sercom_get_default_pad+0x120>)
    1e18:	e7e0      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e1a:	4832      	ldr	r0, [pc, #200]	; (1ee4 <_sercom_get_default_pad+0x124>)
    1e1c:	e7de      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e1e:	4832      	ldr	r0, [pc, #200]	; (1ee8 <_sercom_get_default_pad+0x128>)
    1e20:	e7dc      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e22:	4832      	ldr	r0, [pc, #200]	; (1eec <_sercom_get_default_pad+0x12c>)
    1e24:	e7da      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e26:	4832      	ldr	r0, [pc, #200]	; (1ef0 <_sercom_get_default_pad+0x130>)
    1e28:	e7d8      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e2a:	2901      	cmp	r1, #1
    1e2c:	d007      	beq.n	1e3e <_sercom_get_default_pad+0x7e>
    1e2e:	2900      	cmp	r1, #0
    1e30:	d03f      	beq.n	1eb2 <_sercom_get_default_pad+0xf2>
    1e32:	2902      	cmp	r1, #2
    1e34:	d005      	beq.n	1e42 <_sercom_get_default_pad+0x82>
    1e36:	2903      	cmp	r1, #3
    1e38:	d005      	beq.n	1e46 <_sercom_get_default_pad+0x86>
	return 0;
    1e3a:	2000      	movs	r0, #0
    1e3c:	e7ce      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e3e:	482d      	ldr	r0, [pc, #180]	; (1ef4 <_sercom_get_default_pad+0x134>)
    1e40:	e7cc      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e42:	482d      	ldr	r0, [pc, #180]	; (1ef8 <_sercom_get_default_pad+0x138>)
    1e44:	e7ca      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e46:	482d      	ldr	r0, [pc, #180]	; (1efc <_sercom_get_default_pad+0x13c>)
    1e48:	e7c8      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e4a:	2901      	cmp	r1, #1
    1e4c:	d007      	beq.n	1e5e <_sercom_get_default_pad+0x9e>
    1e4e:	2900      	cmp	r1, #0
    1e50:	d031      	beq.n	1eb6 <_sercom_get_default_pad+0xf6>
    1e52:	2902      	cmp	r1, #2
    1e54:	d005      	beq.n	1e62 <_sercom_get_default_pad+0xa2>
    1e56:	2903      	cmp	r1, #3
    1e58:	d005      	beq.n	1e66 <_sercom_get_default_pad+0xa6>
	return 0;
    1e5a:	2000      	movs	r0, #0
    1e5c:	e7be      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e5e:	4828      	ldr	r0, [pc, #160]	; (1f00 <_sercom_get_default_pad+0x140>)
    1e60:	e7bc      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e62:	4828      	ldr	r0, [pc, #160]	; (1f04 <_sercom_get_default_pad+0x144>)
    1e64:	e7ba      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e66:	4828      	ldr	r0, [pc, #160]	; (1f08 <_sercom_get_default_pad+0x148>)
    1e68:	e7b8      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e6a:	2901      	cmp	r1, #1
    1e6c:	d007      	beq.n	1e7e <_sercom_get_default_pad+0xbe>
    1e6e:	2900      	cmp	r1, #0
    1e70:	d023      	beq.n	1eba <_sercom_get_default_pad+0xfa>
    1e72:	2902      	cmp	r1, #2
    1e74:	d005      	beq.n	1e82 <_sercom_get_default_pad+0xc2>
    1e76:	2903      	cmp	r1, #3
    1e78:	d005      	beq.n	1e86 <_sercom_get_default_pad+0xc6>
	return 0;
    1e7a:	2000      	movs	r0, #0
    1e7c:	e7ae      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e7e:	4823      	ldr	r0, [pc, #140]	; (1f0c <_sercom_get_default_pad+0x14c>)
    1e80:	e7ac      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e82:	4823      	ldr	r0, [pc, #140]	; (1f10 <_sercom_get_default_pad+0x150>)
    1e84:	e7aa      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e86:	4823      	ldr	r0, [pc, #140]	; (1f14 <_sercom_get_default_pad+0x154>)
    1e88:	e7a8      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1e8a:	2901      	cmp	r1, #1
    1e8c:	d007      	beq.n	1e9e <_sercom_get_default_pad+0xde>
    1e8e:	2900      	cmp	r1, #0
    1e90:	d015      	beq.n	1ebe <_sercom_get_default_pad+0xfe>
    1e92:	2902      	cmp	r1, #2
    1e94:	d005      	beq.n	1ea2 <_sercom_get_default_pad+0xe2>
    1e96:	2903      	cmp	r1, #3
    1e98:	d005      	beq.n	1ea6 <_sercom_get_default_pad+0xe6>
	return 0;
    1e9a:	2000      	movs	r0, #0
    1e9c:	e79e      	b.n	1ddc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e9e:	481e      	ldr	r0, [pc, #120]	; (1f18 <_sercom_get_default_pad+0x158>)
    1ea0:	e79c      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1ea2:	481e      	ldr	r0, [pc, #120]	; (1f1c <_sercom_get_default_pad+0x15c>)
    1ea4:	e79a      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1ea6:	481e      	ldr	r0, [pc, #120]	; (1f20 <_sercom_get_default_pad+0x160>)
    1ea8:	e798      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1eaa:	481e      	ldr	r0, [pc, #120]	; (1f24 <_sercom_get_default_pad+0x164>)
    1eac:	e796      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1eae:	2003      	movs	r0, #3
    1eb0:	e794      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1eb2:	481d      	ldr	r0, [pc, #116]	; (1f28 <_sercom_get_default_pad+0x168>)
    1eb4:	e792      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1eb6:	481d      	ldr	r0, [pc, #116]	; (1f2c <_sercom_get_default_pad+0x16c>)
    1eb8:	e790      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1eba:	481d      	ldr	r0, [pc, #116]	; (1f30 <_sercom_get_default_pad+0x170>)
    1ebc:	e78e      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1ebe:	481d      	ldr	r0, [pc, #116]	; (1f34 <_sercom_get_default_pad+0x174>)
    1ec0:	e78c      	b.n	1ddc <_sercom_get_default_pad+0x1c>
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	42001000 	.word	0x42001000
    1ec8:	42001800 	.word	0x42001800
    1ecc:	42001c00 	.word	0x42001c00
    1ed0:	42001400 	.word	0x42001400
    1ed4:	42000800 	.word	0x42000800
    1ed8:	42000c00 	.word	0x42000c00
    1edc:	00050003 	.word	0x00050003
    1ee0:	00060003 	.word	0x00060003
    1ee4:	00070003 	.word	0x00070003
    1ee8:	00010003 	.word	0x00010003
    1eec:	001e0003 	.word	0x001e0003
    1ef0:	001f0003 	.word	0x001f0003
    1ef4:	00090003 	.word	0x00090003
    1ef8:	000a0003 	.word	0x000a0003
    1efc:	000b0003 	.word	0x000b0003
    1f00:	00110003 	.word	0x00110003
    1f04:	00120003 	.word	0x00120003
    1f08:	00130003 	.word	0x00130003
    1f0c:	000d0003 	.word	0x000d0003
    1f10:	000e0003 	.word	0x000e0003
    1f14:	000f0003 	.word	0x000f0003
    1f18:	00170003 	.word	0x00170003
    1f1c:	00180003 	.word	0x00180003
    1f20:	00190003 	.word	0x00190003
    1f24:	00040003 	.word	0x00040003
    1f28:	00080003 	.word	0x00080003
    1f2c:	00100003 	.word	0x00100003
    1f30:	000c0003 	.word	0x000c0003
    1f34:	00160003 	.word	0x00160003

00001f38 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f38:	b530      	push	{r4, r5, lr}
    1f3a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f3c:	4b0b      	ldr	r3, [pc, #44]	; (1f6c <_sercom_get_sercom_inst_index+0x34>)
    1f3e:	466a      	mov	r2, sp
    1f40:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f42:	c232      	stmia	r2!, {r1, r4, r5}
    1f44:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f46:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f48:	9b00      	ldr	r3, [sp, #0]
    1f4a:	4283      	cmp	r3, r0
    1f4c:	d00b      	beq.n	1f66 <_sercom_get_sercom_inst_index+0x2e>
    1f4e:	2301      	movs	r3, #1
    1f50:	009a      	lsls	r2, r3, #2
    1f52:	4669      	mov	r1, sp
    1f54:	5852      	ldr	r2, [r2, r1]
    1f56:	4282      	cmp	r2, r0
    1f58:	d006      	beq.n	1f68 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f5a:	3301      	adds	r3, #1
    1f5c:	2b06      	cmp	r3, #6
    1f5e:	d1f7      	bne.n	1f50 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f60:	2000      	movs	r0, #0
}
    1f62:	b007      	add	sp, #28
    1f64:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f66:	2300      	movs	r3, #0
			return i;
    1f68:	b2d8      	uxtb	r0, r3
    1f6a:	e7fa      	b.n	1f62 <_sercom_get_sercom_inst_index+0x2a>
    1f6c:	00005e60 	.word	0x00005e60

00001f70 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1f70:	4770      	bx	lr
	...

00001f74 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1f76:	4b0a      	ldr	r3, [pc, #40]	; (1fa0 <_sercom_set_handler+0x2c>)
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d10c      	bne.n	1f98 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f7e:	4f09      	ldr	r7, [pc, #36]	; (1fa4 <_sercom_set_handler+0x30>)
    1f80:	4e09      	ldr	r6, [pc, #36]	; (1fa8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1f82:	4d0a      	ldr	r5, [pc, #40]	; (1fac <_sercom_set_handler+0x38>)
    1f84:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f86:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1f88:	195a      	adds	r2, r3, r5
    1f8a:	6014      	str	r4, [r2, #0]
    1f8c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f8e:	2b18      	cmp	r3, #24
    1f90:	d1f9      	bne.n	1f86 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1f92:	2201      	movs	r2, #1
    1f94:	4b02      	ldr	r3, [pc, #8]	; (1fa0 <_sercom_set_handler+0x2c>)
    1f96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1f98:	0080      	lsls	r0, r0, #2
    1f9a:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <_sercom_set_handler+0x30>)
    1f9c:	50c1      	str	r1, [r0, r3]
}
    1f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa0:	2000052a 	.word	0x2000052a
    1fa4:	2000052c 	.word	0x2000052c
    1fa8:	00001f71 	.word	0x00001f71
    1fac:	20000680 	.word	0x20000680

00001fb0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1fb0:	b500      	push	{lr}
    1fb2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1fb4:	2309      	movs	r3, #9
    1fb6:	466a      	mov	r2, sp
    1fb8:	7013      	strb	r3, [r2, #0]
    1fba:	3301      	adds	r3, #1
    1fbc:	7053      	strb	r3, [r2, #1]
    1fbe:	3301      	adds	r3, #1
    1fc0:	7093      	strb	r3, [r2, #2]
    1fc2:	3301      	adds	r3, #1
    1fc4:	70d3      	strb	r3, [r2, #3]
    1fc6:	3301      	adds	r3, #1
    1fc8:	7113      	strb	r3, [r2, #4]
    1fca:	3301      	adds	r3, #1
    1fcc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1fce:	4b03      	ldr	r3, [pc, #12]	; (1fdc <_sercom_get_interrupt_vector+0x2c>)
    1fd0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1fd2:	466b      	mov	r3, sp
    1fd4:	5618      	ldrsb	r0, [r3, r0]
}
    1fd6:	b003      	add	sp, #12
    1fd8:	bd00      	pop	{pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00001f39 	.word	0x00001f39

00001fe0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1fe0:	b510      	push	{r4, lr}
    1fe2:	4b02      	ldr	r3, [pc, #8]	; (1fec <SERCOM0_Handler+0xc>)
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	2000      	movs	r0, #0
    1fe8:	4798      	blx	r3
    1fea:	bd10      	pop	{r4, pc}
    1fec:	2000052c 	.word	0x2000052c

00001ff0 <SERCOM1_Handler>:
    1ff0:	b510      	push	{r4, lr}
    1ff2:	4b02      	ldr	r3, [pc, #8]	; (1ffc <SERCOM1_Handler+0xc>)
    1ff4:	685b      	ldr	r3, [r3, #4]
    1ff6:	2001      	movs	r0, #1
    1ff8:	4798      	blx	r3
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	2000052c 	.word	0x2000052c

00002000 <SERCOM2_Handler>:
    2000:	b510      	push	{r4, lr}
    2002:	4b02      	ldr	r3, [pc, #8]	; (200c <STACK_SIZE+0xc>)
    2004:	689b      	ldr	r3, [r3, #8]
    2006:	2002      	movs	r0, #2
    2008:	4798      	blx	r3
    200a:	bd10      	pop	{r4, pc}
    200c:	2000052c 	.word	0x2000052c

00002010 <SERCOM3_Handler>:
    2010:	b510      	push	{r4, lr}
    2012:	4b02      	ldr	r3, [pc, #8]	; (201c <SERCOM3_Handler+0xc>)
    2014:	68db      	ldr	r3, [r3, #12]
    2016:	2003      	movs	r0, #3
    2018:	4798      	blx	r3
    201a:	bd10      	pop	{r4, pc}
    201c:	2000052c 	.word	0x2000052c

00002020 <SERCOM4_Handler>:
    2020:	b510      	push	{r4, lr}
    2022:	4b02      	ldr	r3, [pc, #8]	; (202c <SERCOM4_Handler+0xc>)
    2024:	691b      	ldr	r3, [r3, #16]
    2026:	2004      	movs	r0, #4
    2028:	4798      	blx	r3
    202a:	bd10      	pop	{r4, pc}
    202c:	2000052c 	.word	0x2000052c

00002030 <SERCOM5_Handler>:
    2030:	b510      	push	{r4, lr}
    2032:	4b02      	ldr	r3, [pc, #8]	; (203c <SERCOM5_Handler+0xc>)
    2034:	695b      	ldr	r3, [r3, #20]
    2036:	2005      	movs	r0, #5
    2038:	4798      	blx	r3
    203a:	bd10      	pop	{r4, pc}
    203c:	2000052c 	.word	0x2000052c

00002040 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2040:	4b0c      	ldr	r3, [pc, #48]	; (2074 <cpu_irq_enter_critical+0x34>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d106      	bne.n	2056 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2048:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    204c:	2b00      	cmp	r3, #0
    204e:	d007      	beq.n	2060 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2050:	2200      	movs	r2, #0
    2052:	4b09      	ldr	r3, [pc, #36]	; (2078 <cpu_irq_enter_critical+0x38>)
    2054:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2056:	4a07      	ldr	r2, [pc, #28]	; (2074 <cpu_irq_enter_critical+0x34>)
    2058:	6813      	ldr	r3, [r2, #0]
    205a:	3301      	adds	r3, #1
    205c:	6013      	str	r3, [r2, #0]
}
    205e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2060:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2062:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2066:	2200      	movs	r2, #0
    2068:	4b04      	ldr	r3, [pc, #16]	; (207c <cpu_irq_enter_critical+0x3c>)
    206a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    206c:	3201      	adds	r2, #1
    206e:	4b02      	ldr	r3, [pc, #8]	; (2078 <cpu_irq_enter_critical+0x38>)
    2070:	701a      	strb	r2, [r3, #0]
    2072:	e7f0      	b.n	2056 <cpu_irq_enter_critical+0x16>
    2074:	20000544 	.word	0x20000544
    2078:	20000548 	.word	0x20000548
    207c:	2000000c 	.word	0x2000000c

00002080 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <cpu_irq_leave_critical+0x24>)
    2082:	681a      	ldr	r2, [r3, #0]
    2084:	3a01      	subs	r2, #1
    2086:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	2b00      	cmp	r3, #0
    208c:	d109      	bne.n	20a2 <cpu_irq_leave_critical+0x22>
    208e:	4b06      	ldr	r3, [pc, #24]	; (20a8 <cpu_irq_leave_critical+0x28>)
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	2b00      	cmp	r3, #0
    2094:	d005      	beq.n	20a2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2096:	2201      	movs	r2, #1
    2098:	4b04      	ldr	r3, [pc, #16]	; (20ac <cpu_irq_leave_critical+0x2c>)
    209a:	701a      	strb	r2, [r3, #0]
    209c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    20a0:	b662      	cpsie	i
	}
}
    20a2:	4770      	bx	lr
    20a4:	20000544 	.word	0x20000544
    20a8:	20000548 	.word	0x20000548
    20ac:	2000000c 	.word	0x2000000c

000020b0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    20b0:	b510      	push	{r4, lr}
	switch (clock_source) {
    20b2:	2808      	cmp	r0, #8
    20b4:	d803      	bhi.n	20be <system_clock_source_get_hz+0xe>
    20b6:	0080      	lsls	r0, r0, #2
    20b8:	4b1b      	ldr	r3, [pc, #108]	; (2128 <system_clock_source_get_hz+0x78>)
    20ba:	581b      	ldr	r3, [r3, r0]
    20bc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    20be:	2000      	movs	r0, #0
    20c0:	e030      	b.n	2124 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    20c2:	4b1a      	ldr	r3, [pc, #104]	; (212c <system_clock_source_get_hz+0x7c>)
    20c4:	6918      	ldr	r0, [r3, #16]
    20c6:	e02d      	b.n	2124 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    20c8:	4b19      	ldr	r3, [pc, #100]	; (2130 <system_clock_source_get_hz+0x80>)
    20ca:	6a1b      	ldr	r3, [r3, #32]
    20cc:	059b      	lsls	r3, r3, #22
    20ce:	0f9b      	lsrs	r3, r3, #30
    20d0:	4818      	ldr	r0, [pc, #96]	; (2134 <system_clock_source_get_hz+0x84>)
    20d2:	40d8      	lsrs	r0, r3
    20d4:	e026      	b.n	2124 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    20d6:	4b15      	ldr	r3, [pc, #84]	; (212c <system_clock_source_get_hz+0x7c>)
    20d8:	6958      	ldr	r0, [r3, #20]
    20da:	e023      	b.n	2124 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20dc:	4b13      	ldr	r3, [pc, #76]	; (212c <system_clock_source_get_hz+0x7c>)
    20de:	681b      	ldr	r3, [r3, #0]
			return 0;
    20e0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20e2:	079b      	lsls	r3, r3, #30
    20e4:	d51e      	bpl.n	2124 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20e6:	4912      	ldr	r1, [pc, #72]	; (2130 <system_clock_source_get_hz+0x80>)
    20e8:	2210      	movs	r2, #16
    20ea:	68cb      	ldr	r3, [r1, #12]
    20ec:	421a      	tst	r2, r3
    20ee:	d0fc      	beq.n	20ea <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    20f0:	4b0e      	ldr	r3, [pc, #56]	; (212c <system_clock_source_get_hz+0x7c>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	075b      	lsls	r3, r3, #29
    20f6:	d401      	bmi.n	20fc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    20f8:	480f      	ldr	r0, [pc, #60]	; (2138 <system_clock_source_get_hz+0x88>)
    20fa:	e013      	b.n	2124 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    20fc:	2000      	movs	r0, #0
    20fe:	4b0f      	ldr	r3, [pc, #60]	; (213c <system_clock_source_get_hz+0x8c>)
    2100:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2102:	4b0a      	ldr	r3, [pc, #40]	; (212c <system_clock_source_get_hz+0x7c>)
    2104:	689b      	ldr	r3, [r3, #8]
    2106:	041b      	lsls	r3, r3, #16
    2108:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    210a:	4358      	muls	r0, r3
    210c:	e00a      	b.n	2124 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    210e:	2350      	movs	r3, #80	; 0x50
    2110:	4a07      	ldr	r2, [pc, #28]	; (2130 <system_clock_source_get_hz+0x80>)
    2112:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2114:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2116:	075b      	lsls	r3, r3, #29
    2118:	d504      	bpl.n	2124 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    211a:	4b04      	ldr	r3, [pc, #16]	; (212c <system_clock_source_get_hz+0x7c>)
    211c:	68d8      	ldr	r0, [r3, #12]
    211e:	e001      	b.n	2124 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2120:	2080      	movs	r0, #128	; 0x80
    2122:	0200      	lsls	r0, r0, #8
	}
}
    2124:	bd10      	pop	{r4, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00005e78 	.word	0x00005e78
    212c:	2000054c 	.word	0x2000054c
    2130:	40000800 	.word	0x40000800
    2134:	007a1200 	.word	0x007a1200
    2138:	02dc6c00 	.word	0x02dc6c00
    213c:	00002275 	.word	0x00002275

00002140 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2140:	b570      	push	{r4, r5, r6, lr}
    2142:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2144:	4a1a      	ldr	r2, [pc, #104]	; (21b0 <system_gclk_gen_get_hz+0x70>)
    2146:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2148:	b25b      	sxtb	r3, r3
    214a:	2b00      	cmp	r3, #0
    214c:	dbfb      	blt.n	2146 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    214e:	4b19      	ldr	r3, [pc, #100]	; (21b4 <system_gclk_gen_get_hz+0x74>)
    2150:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2152:	4b19      	ldr	r3, [pc, #100]	; (21b8 <system_gclk_gen_get_hz+0x78>)
    2154:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2156:	4a16      	ldr	r2, [pc, #88]	; (21b0 <system_gclk_gen_get_hz+0x70>)
    2158:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    215a:	b25b      	sxtb	r3, r3
    215c:	2b00      	cmp	r3, #0
    215e:	dbfb      	blt.n	2158 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2160:	4e13      	ldr	r6, [pc, #76]	; (21b0 <system_gclk_gen_get_hz+0x70>)
    2162:	6870      	ldr	r0, [r6, #4]
    2164:	04c0      	lsls	r0, r0, #19
    2166:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2168:	4b14      	ldr	r3, [pc, #80]	; (21bc <system_gclk_gen_get_hz+0x7c>)
    216a:	4798      	blx	r3
    216c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    216e:	4b12      	ldr	r3, [pc, #72]	; (21b8 <system_gclk_gen_get_hz+0x78>)
    2170:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2172:	6876      	ldr	r6, [r6, #4]
    2174:	02f6      	lsls	r6, r6, #11
    2176:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2178:	4b11      	ldr	r3, [pc, #68]	; (21c0 <system_gclk_gen_get_hz+0x80>)
    217a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    217c:	4a0c      	ldr	r2, [pc, #48]	; (21b0 <system_gclk_gen_get_hz+0x70>)
    217e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2180:	b25b      	sxtb	r3, r3
    2182:	2b00      	cmp	r3, #0
    2184:	dbfb      	blt.n	217e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2186:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <system_gclk_gen_get_hz+0x70>)
    2188:	689c      	ldr	r4, [r3, #8]
    218a:	0224      	lsls	r4, r4, #8
    218c:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    218e:	4b0d      	ldr	r3, [pc, #52]	; (21c4 <system_gclk_gen_get_hz+0x84>)
    2190:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2192:	2e00      	cmp	r6, #0
    2194:	d107      	bne.n	21a6 <system_gclk_gen_get_hz+0x66>
    2196:	2c01      	cmp	r4, #1
    2198:	d907      	bls.n	21aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    219a:	0021      	movs	r1, r4
    219c:	0028      	movs	r0, r5
    219e:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <system_gclk_gen_get_hz+0x88>)
    21a0:	4798      	blx	r3
    21a2:	0005      	movs	r5, r0
    21a4:	e001      	b.n	21aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    21a6:	3401      	adds	r4, #1
    21a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    21aa:	0028      	movs	r0, r5
    21ac:	bd70      	pop	{r4, r5, r6, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	40000c00 	.word	0x40000c00
    21b4:	00002041 	.word	0x00002041
    21b8:	40000c04 	.word	0x40000c04
    21bc:	000020b1 	.word	0x000020b1
    21c0:	40000c08 	.word	0x40000c08
    21c4:	00002081 	.word	0x00002081
    21c8:	00002679 	.word	0x00002679

000021cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    21cc:	b510      	push	{r4, lr}
    21ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21d0:	4b06      	ldr	r3, [pc, #24]	; (21ec <system_gclk_chan_enable+0x20>)
    21d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21d4:	4b06      	ldr	r3, [pc, #24]	; (21f0 <system_gclk_chan_enable+0x24>)
    21d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21d8:	4a06      	ldr	r2, [pc, #24]	; (21f4 <system_gclk_chan_enable+0x28>)
    21da:	8853      	ldrh	r3, [r2, #2]
    21dc:	2180      	movs	r1, #128	; 0x80
    21de:	01c9      	lsls	r1, r1, #7
    21e0:	430b      	orrs	r3, r1
    21e2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <system_gclk_chan_enable+0x2c>)
    21e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21e8:	bd10      	pop	{r4, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	00002041 	.word	0x00002041
    21f0:	40000c02 	.word	0x40000c02
    21f4:	40000c00 	.word	0x40000c00
    21f8:	00002081 	.word	0x00002081

000021fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21fc:	b510      	push	{r4, lr}
    21fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2200:	4b0f      	ldr	r3, [pc, #60]	; (2240 <system_gclk_chan_disable+0x44>)
    2202:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2204:	4b0f      	ldr	r3, [pc, #60]	; (2244 <system_gclk_chan_disable+0x48>)
    2206:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2208:	4a0f      	ldr	r2, [pc, #60]	; (2248 <system_gclk_chan_disable+0x4c>)
    220a:	8853      	ldrh	r3, [r2, #2]
    220c:	051b      	lsls	r3, r3, #20
    220e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2210:	8853      	ldrh	r3, [r2, #2]
    2212:	490e      	ldr	r1, [pc, #56]	; (224c <system_gclk_chan_disable+0x50>)
    2214:	400b      	ands	r3, r1
    2216:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2218:	8853      	ldrh	r3, [r2, #2]
    221a:	490d      	ldr	r1, [pc, #52]	; (2250 <system_gclk_chan_disable+0x54>)
    221c:	400b      	ands	r3, r1
    221e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2220:	0011      	movs	r1, r2
    2222:	2280      	movs	r2, #128	; 0x80
    2224:	01d2      	lsls	r2, r2, #7
    2226:	884b      	ldrh	r3, [r1, #2]
    2228:	4213      	tst	r3, r2
    222a:	d1fc      	bne.n	2226 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    222c:	4906      	ldr	r1, [pc, #24]	; (2248 <system_gclk_chan_disable+0x4c>)
    222e:	884a      	ldrh	r2, [r1, #2]
    2230:	0203      	lsls	r3, r0, #8
    2232:	4806      	ldr	r0, [pc, #24]	; (224c <system_gclk_chan_disable+0x50>)
    2234:	4002      	ands	r2, r0
    2236:	4313      	orrs	r3, r2
    2238:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <system_gclk_chan_disable+0x58>)
    223c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    223e:	bd10      	pop	{r4, pc}
    2240:	00002041 	.word	0x00002041
    2244:	40000c02 	.word	0x40000c02
    2248:	40000c00 	.word	0x40000c00
    224c:	fffff0ff 	.word	0xfffff0ff
    2250:	ffffbfff 	.word	0xffffbfff
    2254:	00002081 	.word	0x00002081

00002258 <system_gclk_chan_set_config>:
{
    2258:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    225a:	780c      	ldrb	r4, [r1, #0]
    225c:	0224      	lsls	r4, r4, #8
    225e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <system_gclk_chan_set_config+0x14>)
    2262:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2264:	b2a4      	uxth	r4, r4
    2266:	4b02      	ldr	r3, [pc, #8]	; (2270 <system_gclk_chan_set_config+0x18>)
    2268:	805c      	strh	r4, [r3, #2]
}
    226a:	bd10      	pop	{r4, pc}
    226c:	000021fd 	.word	0x000021fd
    2270:	40000c00 	.word	0x40000c00

00002274 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2274:	b510      	push	{r4, lr}
    2276:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2278:	4b06      	ldr	r3, [pc, #24]	; (2294 <system_gclk_chan_get_hz+0x20>)
    227a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    227c:	4b06      	ldr	r3, [pc, #24]	; (2298 <system_gclk_chan_get_hz+0x24>)
    227e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2280:	4b06      	ldr	r3, [pc, #24]	; (229c <system_gclk_chan_get_hz+0x28>)
    2282:	885c      	ldrh	r4, [r3, #2]
    2284:	0524      	lsls	r4, r4, #20
    2286:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2288:	4b05      	ldr	r3, [pc, #20]	; (22a0 <system_gclk_chan_get_hz+0x2c>)
    228a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    228c:	0020      	movs	r0, r4
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <system_gclk_chan_get_hz+0x30>)
    2290:	4798      	blx	r3
}
    2292:	bd10      	pop	{r4, pc}
    2294:	00002041 	.word	0x00002041
    2298:	40000c02 	.word	0x40000c02
    229c:	40000c00 	.word	0x40000c00
    22a0:	00002081 	.word	0x00002081
    22a4:	00002141 	.word	0x00002141

000022a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    22a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    22aa:	78d3      	ldrb	r3, [r2, #3]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d135      	bne.n	231c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    22b0:	7813      	ldrb	r3, [r2, #0]
    22b2:	2b80      	cmp	r3, #128	; 0x80
    22b4:	d029      	beq.n	230a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    22b6:	061b      	lsls	r3, r3, #24
    22b8:	2480      	movs	r4, #128	; 0x80
    22ba:	0264      	lsls	r4, r4, #9
    22bc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    22be:	7854      	ldrb	r4, [r2, #1]
    22c0:	2502      	movs	r5, #2
    22c2:	43ac      	bics	r4, r5
    22c4:	d106      	bne.n	22d4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    22c6:	7894      	ldrb	r4, [r2, #2]
    22c8:	2c00      	cmp	r4, #0
    22ca:	d120      	bne.n	230e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    22cc:	2480      	movs	r4, #128	; 0x80
    22ce:	02a4      	lsls	r4, r4, #10
    22d0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22d4:	7854      	ldrb	r4, [r2, #1]
    22d6:	3c01      	subs	r4, #1
    22d8:	2c01      	cmp	r4, #1
    22da:	d91c      	bls.n	2316 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22dc:	040d      	lsls	r5, r1, #16
    22de:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22e0:	24a0      	movs	r4, #160	; 0xa0
    22e2:	05e4      	lsls	r4, r4, #23
    22e4:	432c      	orrs	r4, r5
    22e6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22e8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22ea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22ec:	24d0      	movs	r4, #208	; 0xd0
    22ee:	0624      	lsls	r4, r4, #24
    22f0:	432c      	orrs	r4, r5
    22f2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22f4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22f6:	78d4      	ldrb	r4, [r2, #3]
    22f8:	2c00      	cmp	r4, #0
    22fa:	d122      	bne.n	2342 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22fc:	035b      	lsls	r3, r3, #13
    22fe:	d51c      	bpl.n	233a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2300:	7893      	ldrb	r3, [r2, #2]
    2302:	2b01      	cmp	r3, #1
    2304:	d01e      	beq.n	2344 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2306:	6141      	str	r1, [r0, #20]
    2308:	e017      	b.n	233a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    230a:	2300      	movs	r3, #0
    230c:	e7d7      	b.n	22be <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    230e:	24c0      	movs	r4, #192	; 0xc0
    2310:	02e4      	lsls	r4, r4, #11
    2312:	4323      	orrs	r3, r4
    2314:	e7dd      	b.n	22d2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2316:	4c0d      	ldr	r4, [pc, #52]	; (234c <_system_pinmux_config+0xa4>)
    2318:	4023      	ands	r3, r4
    231a:	e7df      	b.n	22dc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    231c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    231e:	040c      	lsls	r4, r1, #16
    2320:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2322:	23a0      	movs	r3, #160	; 0xa0
    2324:	05db      	lsls	r3, r3, #23
    2326:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2328:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    232a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    232c:	23d0      	movs	r3, #208	; 0xd0
    232e:	061b      	lsls	r3, r3, #24
    2330:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2332:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2334:	78d3      	ldrb	r3, [r2, #3]
    2336:	2b00      	cmp	r3, #0
    2338:	d103      	bne.n	2342 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    233a:	7853      	ldrb	r3, [r2, #1]
    233c:	3b01      	subs	r3, #1
    233e:	2b01      	cmp	r3, #1
    2340:	d902      	bls.n	2348 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2342:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2344:	6181      	str	r1, [r0, #24]
    2346:	e7f8      	b.n	233a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2348:	6081      	str	r1, [r0, #8]
}
    234a:	e7fa      	b.n	2342 <_system_pinmux_config+0x9a>
    234c:	fffbffff 	.word	0xfffbffff

00002350 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2350:	b510      	push	{r4, lr}
    2352:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2354:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2356:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2358:	2900      	cmp	r1, #0
    235a:	d104      	bne.n	2366 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    235c:	0943      	lsrs	r3, r0, #5
    235e:	01db      	lsls	r3, r3, #7
    2360:	4905      	ldr	r1, [pc, #20]	; (2378 <system_pinmux_pin_set_config+0x28>)
    2362:	468c      	mov	ip, r1
    2364:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2366:	241f      	movs	r4, #31
    2368:	4020      	ands	r0, r4
    236a:	2101      	movs	r1, #1
    236c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    236e:	0018      	movs	r0, r3
    2370:	4b02      	ldr	r3, [pc, #8]	; (237c <system_pinmux_pin_set_config+0x2c>)
    2372:	4798      	blx	r3
}
    2374:	bd10      	pop	{r4, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	41004400 	.word	0x41004400
    237c:	000022a9 	.word	0x000022a9

00002380 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2380:	e7fe      	b.n	2380 <Dummy_Handler>
	...

00002384 <Reset_Handler>:
{
    2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2386:	4a2a      	ldr	r2, [pc, #168]	; (2430 <Reset_Handler+0xac>)
    2388:	4b2a      	ldr	r3, [pc, #168]	; (2434 <Reset_Handler+0xb0>)
    238a:	429a      	cmp	r2, r3
    238c:	d011      	beq.n	23b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    238e:	001a      	movs	r2, r3
    2390:	4b29      	ldr	r3, [pc, #164]	; (2438 <Reset_Handler+0xb4>)
    2392:	429a      	cmp	r2, r3
    2394:	d20d      	bcs.n	23b2 <Reset_Handler+0x2e>
    2396:	4a29      	ldr	r2, [pc, #164]	; (243c <Reset_Handler+0xb8>)
    2398:	3303      	adds	r3, #3
    239a:	1a9b      	subs	r3, r3, r2
    239c:	089b      	lsrs	r3, r3, #2
    239e:	3301      	adds	r3, #1
    23a0:	009b      	lsls	r3, r3, #2
    23a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    23a4:	4823      	ldr	r0, [pc, #140]	; (2434 <Reset_Handler+0xb0>)
    23a6:	4922      	ldr	r1, [pc, #136]	; (2430 <Reset_Handler+0xac>)
    23a8:	588c      	ldr	r4, [r1, r2]
    23aa:	5084      	str	r4, [r0, r2]
    23ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    23ae:	429a      	cmp	r2, r3
    23b0:	d1fa      	bne.n	23a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    23b2:	4a23      	ldr	r2, [pc, #140]	; (2440 <Reset_Handler+0xbc>)
    23b4:	4b23      	ldr	r3, [pc, #140]	; (2444 <Reset_Handler+0xc0>)
    23b6:	429a      	cmp	r2, r3
    23b8:	d20a      	bcs.n	23d0 <Reset_Handler+0x4c>
    23ba:	43d3      	mvns	r3, r2
    23bc:	4921      	ldr	r1, [pc, #132]	; (2444 <Reset_Handler+0xc0>)
    23be:	185b      	adds	r3, r3, r1
    23c0:	2103      	movs	r1, #3
    23c2:	438b      	bics	r3, r1
    23c4:	3304      	adds	r3, #4
    23c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    23c8:	2100      	movs	r1, #0
    23ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    23cc:	4293      	cmp	r3, r2
    23ce:	d1fc      	bne.n	23ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    23d0:	4a1d      	ldr	r2, [pc, #116]	; (2448 <Reset_Handler+0xc4>)
    23d2:	21ff      	movs	r1, #255	; 0xff
    23d4:	4b1d      	ldr	r3, [pc, #116]	; (244c <Reset_Handler+0xc8>)
    23d6:	438b      	bics	r3, r1
    23d8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    23da:	39fd      	subs	r1, #253	; 0xfd
    23dc:	2390      	movs	r3, #144	; 0x90
    23de:	005b      	lsls	r3, r3, #1
    23e0:	4a1b      	ldr	r2, [pc, #108]	; (2450 <Reset_Handler+0xcc>)
    23e2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    23e4:	4a1b      	ldr	r2, [pc, #108]	; (2454 <Reset_Handler+0xd0>)
    23e6:	78d3      	ldrb	r3, [r2, #3]
    23e8:	2503      	movs	r5, #3
    23ea:	43ab      	bics	r3, r5
    23ec:	2402      	movs	r4, #2
    23ee:	4323      	orrs	r3, r4
    23f0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    23f2:	78d3      	ldrb	r3, [r2, #3]
    23f4:	270c      	movs	r7, #12
    23f6:	43bb      	bics	r3, r7
    23f8:	2608      	movs	r6, #8
    23fa:	4333      	orrs	r3, r6
    23fc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    23fe:	4b16      	ldr	r3, [pc, #88]	; (2458 <Reset_Handler+0xd4>)
    2400:	7b98      	ldrb	r0, [r3, #14]
    2402:	2230      	movs	r2, #48	; 0x30
    2404:	4390      	bics	r0, r2
    2406:	2220      	movs	r2, #32
    2408:	4310      	orrs	r0, r2
    240a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    240c:	7b99      	ldrb	r1, [r3, #14]
    240e:	43b9      	bics	r1, r7
    2410:	4331      	orrs	r1, r6
    2412:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2414:	7b9a      	ldrb	r2, [r3, #14]
    2416:	43aa      	bics	r2, r5
    2418:	4322      	orrs	r2, r4
    241a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    241c:	4a0f      	ldr	r2, [pc, #60]	; (245c <Reset_Handler+0xd8>)
    241e:	6853      	ldr	r3, [r2, #4]
    2420:	2180      	movs	r1, #128	; 0x80
    2422:	430b      	orrs	r3, r1
    2424:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2426:	4b0e      	ldr	r3, [pc, #56]	; (2460 <Reset_Handler+0xdc>)
    2428:	4798      	blx	r3
        main();
    242a:	4b0e      	ldr	r3, [pc, #56]	; (2464 <Reset_Handler+0xe0>)
    242c:	4798      	blx	r3
    242e:	e7fe      	b.n	242e <Reset_Handler+0xaa>
    2430:	0000608c 	.word	0x0000608c
    2434:	20000000 	.word	0x20000000
    2438:	20000074 	.word	0x20000074
    243c:	20000004 	.word	0x20000004
    2440:	20000074 	.word	0x20000074
    2444:	2000069c 	.word	0x2000069c
    2448:	e000ed00 	.word	0xe000ed00
    244c:	00000000 	.word	0x00000000
    2450:	41007000 	.word	0x41007000
    2454:	41005000 	.word	0x41005000
    2458:	41004800 	.word	0x41004800
    245c:	41004000 	.word	0x41004000
    2460:	00004731 	.word	0x00004731
    2464:	000025a1 	.word	0x000025a1

00002468 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2468:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    246a:	4a06      	ldr	r2, [pc, #24]	; (2484 <_sbrk+0x1c>)
    246c:	6812      	ldr	r2, [r2, #0]
    246e:	2a00      	cmp	r2, #0
    2470:	d004      	beq.n	247c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2472:	4a04      	ldr	r2, [pc, #16]	; (2484 <_sbrk+0x1c>)
    2474:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2476:	18c3      	adds	r3, r0, r3
    2478:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    247a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    247c:	4902      	ldr	r1, [pc, #8]	; (2488 <_sbrk+0x20>)
    247e:	4a01      	ldr	r2, [pc, #4]	; (2484 <_sbrk+0x1c>)
    2480:	6011      	str	r1, [r2, #0]
    2482:	e7f6      	b.n	2472 <_sbrk+0xa>
    2484:	20000564 	.word	0x20000564
    2488:	200026a0 	.word	0x200026a0

0000248c <configure_i2c_master>:
 #include <I2C.h>



void configure_i2c_master(void)
{
    248c:	b530      	push	{r4, r5, lr}
    248e:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2490:	aa01      	add	r2, sp, #4
    2492:	2364      	movs	r3, #100	; 0x64
    2494:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2496:	4b21      	ldr	r3, [pc, #132]	; (251c <configure_i2c_master+0x90>)
    2498:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    249a:	2300      	movs	r3, #0
    249c:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    249e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    24a0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    24a2:	2180      	movs	r1, #128	; 0x80
    24a4:	0389      	lsls	r1, r1, #14
    24a6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    24a8:	2101      	movs	r1, #1
    24aa:	4249      	negs	r1, r1
    24ac:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    24ae:	3125      	adds	r1, #37	; 0x25
    24b0:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    24b2:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    24b4:	3108      	adds	r1, #8
    24b6:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    24b8:	3101      	adds	r1, #1
    24ba:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    24bc:	3101      	adds	r1, #1
    24be:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    24c0:	33d7      	adds	r3, #215	; 0xd7
    24c2:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    24c4:	4b16      	ldr	r3, [pc, #88]	; (2520 <configure_i2c_master+0x94>)
    24c6:	82d3      	strh	r3, [r2, #22]

	// change pins to use outputs marked on the Feather board (from samd21g18a.h)
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0; // sda pin
    24c8:	4b16      	ldr	r3, [pc, #88]	; (2524 <configure_i2c_master+0x98>)
    24ca:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1; // sck pin
    24cc:	4b16      	ldr	r3, [pc, #88]	; (2528 <configure_i2c_master+0x9c>)
    24ce:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    24d0:	4c16      	ldr	r4, [pc, #88]	; (252c <configure_i2c_master+0xa0>)
    24d2:	4917      	ldr	r1, [pc, #92]	; (2530 <configure_i2c_master+0xa4>)
    24d4:	0020      	movs	r0, r4
    24d6:	4b17      	ldr	r3, [pc, #92]	; (2534 <configure_i2c_master+0xa8>)
    24d8:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    24da:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    24dc:	2207      	movs	r2, #7
    24de:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    24e0:	421a      	tst	r2, r3
    24e2:	d1fc      	bne.n	24de <configure_i2c_master+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    24e4:	6823      	ldr	r3, [r4, #0]
    24e6:	2202      	movs	r2, #2
    24e8:	4313      	orrs	r3, r2
    24ea:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    24ec:	4d0f      	ldr	r5, [pc, #60]	; (252c <configure_i2c_master+0xa0>)
    24ee:	6828      	ldr	r0, [r5, #0]
    24f0:	4b11      	ldr	r3, [pc, #68]	; (2538 <configure_i2c_master+0xac>)
    24f2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    24f4:	231f      	movs	r3, #31
    24f6:	4018      	ands	r0, r3
    24f8:	3b1e      	subs	r3, #30
    24fa:	4083      	lsls	r3, r0
    24fc:	4a0f      	ldr	r2, [pc, #60]	; (253c <configure_i2c_master+0xb0>)
    24fe:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2500:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2502:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2504:	2110      	movs	r1, #16
    2506:	8b62      	ldrh	r2, [r4, #26]
    2508:	420a      	tst	r2, r1
    250a:	d104      	bne.n	2516 <configure_i2c_master+0x8a>
		timeout_counter++;
    250c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    250e:	4283      	cmp	r3, r0
    2510:	d3f9      	bcc.n	2506 <configure_i2c_master+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2512:	2310      	movs	r3, #16
    2514:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    2516:	b00f      	add	sp, #60	; 0x3c
    2518:	bd30      	pop	{r4, r5, pc}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	00000d48 	.word	0x00000d48
    2520:	00002710 	.word	0x00002710
    2524:	00160002 	.word	0x00160002
    2528:	00170002 	.word	0x00170002
    252c:	20000658 	.word	0x20000658
    2530:	42001400 	.word	0x42001400
    2534:	00000869 	.word	0x00000869
    2538:	00001fb1 	.word	0x00001fb1
    253c:	e000e100 	.word	0xe000e100

00002540 <I2C_Read>:
//u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt
uint8_t I2C_Read(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    2540:	b530      	push	{r4, r5, lr}
    2542:	b085      	sub	sp, #20
	uint8_t retVAl = 0;
	uint8_t timeout;
	struct i2c_master_packet readPacket = {
    2544:	a901      	add	r1, sp, #4
    2546:	8008      	strh	r0, [r1, #0]
    2548:	804b      	strh	r3, [r1, #2]
    254a:	9202      	str	r2, [sp, #8]
    254c:	2300      	movs	r3, #0
    254e:	720b      	strb	r3, [r1, #8]
    2550:	724b      	strb	r3, [r1, #9]
    2552:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_read_packet_wait(&i2c_master_instance, &readPacket) !=
    2554:	4d04      	ldr	r5, [pc, #16]	; (2568 <I2C_Read+0x28>)
    2556:	4c05      	ldr	r4, [pc, #20]	; (256c <I2C_Read+0x2c>)
    2558:	a901      	add	r1, sp, #4
    255a:	0028      	movs	r0, r5
    255c:	47a0      	blx	r4
    255e:	2800      	cmp	r0, #0
    2560:	d1fa      	bne.n	2558 <I2C_Read+0x18>
		if (timeout++ == TIMEOUT) {
			retVAl = -1;
		}
	}
	return retVAl;
}
    2562:	b005      	add	sp, #20
    2564:	bd30      	pop	{r4, r5, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	20000658 	.word	0x20000658
    256c:	00000e71 	.word	0x00000e71

00002570 <I2C_Write>:

//u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt
uint8_t I2C_Write(uint8_t addr, uint8_t startRegister, uint8_t *data, uint8_t cnt)
{
    2570:	b530      	push	{r4, r5, lr}
    2572:	b085      	sub	sp, #20
	uint8_t retVAl = 0;
	uint8_t timeout;
	struct i2c_master_packet writePacket = {
    2574:	a901      	add	r1, sp, #4
    2576:	8008      	strh	r0, [r1, #0]
    2578:	804b      	strh	r3, [r1, #2]
    257a:	9202      	str	r2, [sp, #8]
    257c:	2300      	movs	r3, #0
    257e:	720b      	strb	r3, [r1, #8]
    2580:	724b      	strb	r3, [r1, #9]
    2582:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	while (i2c_master_write_packet_wait(&i2c_master_instance, &writePacket) !=
    2584:	4d04      	ldr	r5, [pc, #16]	; (2598 <I2C_Write+0x28>)
    2586:	4c05      	ldr	r4, [pc, #20]	; (259c <I2C_Write+0x2c>)
    2588:	a901      	add	r1, sp, #4
    258a:	0028      	movs	r0, r5
    258c:	47a0      	blx	r4
    258e:	2800      	cmp	r0, #0
    2590:	d1fa      	bne.n	2588 <I2C_Write+0x18>
			retVAl = -1;
		}
	}

	return retVAl;
}
    2592:	b005      	add	sp, #20
    2594:	bd30      	pop	{r4, r5, pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	20000658 	.word	0x20000658
    259c:	00000e95 	.word	0x00000e95

000025a0 <main>:

//////////////////////////////////////////////////////////////////////////
//Main Function Where The Magic Happens!
//////////////////////////////////////////////////////////////////////////
int main (void)
{	
    25a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a2:	b089      	sub	sp, #36	; 0x24
	int8_t result = 0;

	double temperature = 0;
    25a4:	2200      	movs	r2, #0
    25a6:	2300      	movs	r3, #0
    25a8:	9206      	str	r2, [sp, #24]
    25aa:	9307      	str	r3, [sp, #28]
	double pressure = 0;		
    25ac:	9204      	str	r2, [sp, #16]
    25ae:	9305      	str	r3, [sp, #20]

	//Initialize I2C settings
	configure_i2c_master();
    25b0:	4b1f      	ldr	r3, [pc, #124]	; (2630 <main+0x90>)
    25b2:	4798      	blx	r3
	
	//Initialize delay settings
	delay_init();
    25b4:	4b1f      	ldr	r3, [pc, #124]	; (2634 <main+0x94>)
    25b6:	4798      	blx	r3

	//Init BMP280 Data structure
	result = InitBMP280();
    25b8:	4b1f      	ldr	r3, [pc, #124]	; (2638 <main+0x98>)
    25ba:	4798      	blx	r3

	if(result == BMP280_OK)
    25bc:	2800      	cmp	r0, #0
    25be:	d006      	beq.n	25ce <main+0x2e>
		SEGGER_RTT_printf(0,"Temperature is: %s F\r\nPressure is: %s inHg\r\n",tempStr,presStr);

		delay_ms(5000);
	}
	
	SEGGER_RTT_printf(0, "Error has occured!");
    25c0:	491e      	ldr	r1, [pc, #120]	; (263c <main+0x9c>)
    25c2:	2000      	movs	r0, #0
    25c4:	4b1e      	ldr	r3, [pc, #120]	; (2640 <main+0xa0>)
    25c6:	4798      	blx	r3
			

	return 0;
}
    25c8:	2000      	movs	r0, #0
    25ca:	b009      	add	sp, #36	; 0x24
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = ConfigureBMP280();
    25ce:	4b1d      	ldr	r3, [pc, #116]	; (2644 <main+0xa4>)
    25d0:	4798      	blx	r3
	while(result == BMP280_OK)
    25d2:	2800      	cmp	r0, #0
    25d4:	d1f4      	bne.n	25c0 <main+0x20>
		BMP280_ReadCompPresTemp(&temperature, &pressure);
    25d6:	a904      	add	r1, sp, #16
    25d8:	a806      	add	r0, sp, #24
    25da:	4b1b      	ldr	r3, [pc, #108]	; (2648 <main+0xa8>)
    25dc:	4798      	blx	r3
		float ftemperature = temperature * 1.8f + 32;
    25de:	4f1b      	ldr	r7, [pc, #108]	; (264c <main+0xac>)
    25e0:	22c0      	movs	r2, #192	; 0xc0
    25e2:	0612      	lsls	r2, r2, #24
    25e4:	4b1a      	ldr	r3, [pc, #104]	; (2650 <main+0xb0>)
    25e6:	9806      	ldr	r0, [sp, #24]
    25e8:	9907      	ldr	r1, [sp, #28]
    25ea:	47b8      	blx	r7
    25ec:	2200      	movs	r2, #0
    25ee:	4b19      	ldr	r3, [pc, #100]	; (2654 <main+0xb4>)
    25f0:	4c19      	ldr	r4, [pc, #100]	; (2658 <main+0xb8>)
    25f2:	47a0      	blx	r4
    25f4:	4e19      	ldr	r6, [pc, #100]	; (265c <main+0xbc>)
    25f6:	47b0      	blx	r6
		gcvt(ftemperature,4,tempStr);
    25f8:	4d19      	ldr	r5, [pc, #100]	; (2660 <main+0xc0>)
    25fa:	47a8      	blx	r5
    25fc:	ab02      	add	r3, sp, #8
    25fe:	2204      	movs	r2, #4
    2600:	4c18      	ldr	r4, [pc, #96]	; (2664 <main+0xc4>)
    2602:	47a0      	blx	r4
		float fpressure = pressure * .0002953f;
    2604:	22e0      	movs	r2, #224	; 0xe0
    2606:	0612      	lsls	r2, r2, #24
    2608:	4b17      	ldr	r3, [pc, #92]	; (2668 <main+0xc8>)
    260a:	9804      	ldr	r0, [sp, #16]
    260c:	9905      	ldr	r1, [sp, #20]
    260e:	47b8      	blx	r7
    2610:	47b0      	blx	r6
		gcvt(fpressure,4,presStr);
    2612:	47a8      	blx	r5
    2614:	466b      	mov	r3, sp
    2616:	2204      	movs	r2, #4
    2618:	47a0      	blx	r4
		SEGGER_RTT_printf(0,"Temperature is: %s F\r\nPressure is: %s inHg\r\n",tempStr,presStr);
    261a:	466b      	mov	r3, sp
    261c:	aa02      	add	r2, sp, #8
    261e:	4913      	ldr	r1, [pc, #76]	; (266c <main+0xcc>)
    2620:	2000      	movs	r0, #0
    2622:	4c07      	ldr	r4, [pc, #28]	; (2640 <main+0xa0>)
    2624:	47a0      	blx	r4
		delay_ms(5000);
    2626:	4812      	ldr	r0, [pc, #72]	; (2670 <main+0xd0>)
    2628:	4b12      	ldr	r3, [pc, #72]	; (2674 <main+0xd4>)
    262a:	4798      	blx	r3
    262c:	e7d3      	b.n	25d6 <main+0x36>
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	0000248d 	.word	0x0000248d
    2634:	000007c5 	.word	0x000007c5
    2638:	00001a69 	.word	0x00001a69
    263c:	00005ecc 	.word	0x00005ecc
    2640:	000007a5 	.word	0x000007a5
    2644:	00001a9d 	.word	0x00001a9d
    2648:	00001aed 	.word	0x00001aed
    264c:	00003869 	.word	0x00003869
    2650:	3ffccccc 	.word	0x3ffccccc
    2654:	40400000 	.word	0x40400000
    2658:	000029e1 	.word	0x000029e1
    265c:	00004595 	.word	0x00004595
    2660:	000044f1 	.word	0x000044f1
    2664:	000046e5 	.word	0x000046e5
    2668:	3f335a4f 	.word	0x3f335a4f
    266c:	00005e9c 	.word	0x00005e9c
    2670:	00001388 	.word	0x00001388
    2674:	00000831 	.word	0x00000831

00002678 <__udivsi3>:
    2678:	2200      	movs	r2, #0
    267a:	0843      	lsrs	r3, r0, #1
    267c:	428b      	cmp	r3, r1
    267e:	d374      	bcc.n	276a <__udivsi3+0xf2>
    2680:	0903      	lsrs	r3, r0, #4
    2682:	428b      	cmp	r3, r1
    2684:	d35f      	bcc.n	2746 <__udivsi3+0xce>
    2686:	0a03      	lsrs	r3, r0, #8
    2688:	428b      	cmp	r3, r1
    268a:	d344      	bcc.n	2716 <__udivsi3+0x9e>
    268c:	0b03      	lsrs	r3, r0, #12
    268e:	428b      	cmp	r3, r1
    2690:	d328      	bcc.n	26e4 <__udivsi3+0x6c>
    2692:	0c03      	lsrs	r3, r0, #16
    2694:	428b      	cmp	r3, r1
    2696:	d30d      	bcc.n	26b4 <__udivsi3+0x3c>
    2698:	22ff      	movs	r2, #255	; 0xff
    269a:	0209      	lsls	r1, r1, #8
    269c:	ba12      	rev	r2, r2
    269e:	0c03      	lsrs	r3, r0, #16
    26a0:	428b      	cmp	r3, r1
    26a2:	d302      	bcc.n	26aa <__udivsi3+0x32>
    26a4:	1212      	asrs	r2, r2, #8
    26a6:	0209      	lsls	r1, r1, #8
    26a8:	d065      	beq.n	2776 <__udivsi3+0xfe>
    26aa:	0b03      	lsrs	r3, r0, #12
    26ac:	428b      	cmp	r3, r1
    26ae:	d319      	bcc.n	26e4 <__udivsi3+0x6c>
    26b0:	e000      	b.n	26b4 <__udivsi3+0x3c>
    26b2:	0a09      	lsrs	r1, r1, #8
    26b4:	0bc3      	lsrs	r3, r0, #15
    26b6:	428b      	cmp	r3, r1
    26b8:	d301      	bcc.n	26be <__udivsi3+0x46>
    26ba:	03cb      	lsls	r3, r1, #15
    26bc:	1ac0      	subs	r0, r0, r3
    26be:	4152      	adcs	r2, r2
    26c0:	0b83      	lsrs	r3, r0, #14
    26c2:	428b      	cmp	r3, r1
    26c4:	d301      	bcc.n	26ca <__udivsi3+0x52>
    26c6:	038b      	lsls	r3, r1, #14
    26c8:	1ac0      	subs	r0, r0, r3
    26ca:	4152      	adcs	r2, r2
    26cc:	0b43      	lsrs	r3, r0, #13
    26ce:	428b      	cmp	r3, r1
    26d0:	d301      	bcc.n	26d6 <__udivsi3+0x5e>
    26d2:	034b      	lsls	r3, r1, #13
    26d4:	1ac0      	subs	r0, r0, r3
    26d6:	4152      	adcs	r2, r2
    26d8:	0b03      	lsrs	r3, r0, #12
    26da:	428b      	cmp	r3, r1
    26dc:	d301      	bcc.n	26e2 <__udivsi3+0x6a>
    26de:	030b      	lsls	r3, r1, #12
    26e0:	1ac0      	subs	r0, r0, r3
    26e2:	4152      	adcs	r2, r2
    26e4:	0ac3      	lsrs	r3, r0, #11
    26e6:	428b      	cmp	r3, r1
    26e8:	d301      	bcc.n	26ee <__udivsi3+0x76>
    26ea:	02cb      	lsls	r3, r1, #11
    26ec:	1ac0      	subs	r0, r0, r3
    26ee:	4152      	adcs	r2, r2
    26f0:	0a83      	lsrs	r3, r0, #10
    26f2:	428b      	cmp	r3, r1
    26f4:	d301      	bcc.n	26fa <__udivsi3+0x82>
    26f6:	028b      	lsls	r3, r1, #10
    26f8:	1ac0      	subs	r0, r0, r3
    26fa:	4152      	adcs	r2, r2
    26fc:	0a43      	lsrs	r3, r0, #9
    26fe:	428b      	cmp	r3, r1
    2700:	d301      	bcc.n	2706 <__udivsi3+0x8e>
    2702:	024b      	lsls	r3, r1, #9
    2704:	1ac0      	subs	r0, r0, r3
    2706:	4152      	adcs	r2, r2
    2708:	0a03      	lsrs	r3, r0, #8
    270a:	428b      	cmp	r3, r1
    270c:	d301      	bcc.n	2712 <__udivsi3+0x9a>
    270e:	020b      	lsls	r3, r1, #8
    2710:	1ac0      	subs	r0, r0, r3
    2712:	4152      	adcs	r2, r2
    2714:	d2cd      	bcs.n	26b2 <__udivsi3+0x3a>
    2716:	09c3      	lsrs	r3, r0, #7
    2718:	428b      	cmp	r3, r1
    271a:	d301      	bcc.n	2720 <__udivsi3+0xa8>
    271c:	01cb      	lsls	r3, r1, #7
    271e:	1ac0      	subs	r0, r0, r3
    2720:	4152      	adcs	r2, r2
    2722:	0983      	lsrs	r3, r0, #6
    2724:	428b      	cmp	r3, r1
    2726:	d301      	bcc.n	272c <__udivsi3+0xb4>
    2728:	018b      	lsls	r3, r1, #6
    272a:	1ac0      	subs	r0, r0, r3
    272c:	4152      	adcs	r2, r2
    272e:	0943      	lsrs	r3, r0, #5
    2730:	428b      	cmp	r3, r1
    2732:	d301      	bcc.n	2738 <__udivsi3+0xc0>
    2734:	014b      	lsls	r3, r1, #5
    2736:	1ac0      	subs	r0, r0, r3
    2738:	4152      	adcs	r2, r2
    273a:	0903      	lsrs	r3, r0, #4
    273c:	428b      	cmp	r3, r1
    273e:	d301      	bcc.n	2744 <__udivsi3+0xcc>
    2740:	010b      	lsls	r3, r1, #4
    2742:	1ac0      	subs	r0, r0, r3
    2744:	4152      	adcs	r2, r2
    2746:	08c3      	lsrs	r3, r0, #3
    2748:	428b      	cmp	r3, r1
    274a:	d301      	bcc.n	2750 <__udivsi3+0xd8>
    274c:	00cb      	lsls	r3, r1, #3
    274e:	1ac0      	subs	r0, r0, r3
    2750:	4152      	adcs	r2, r2
    2752:	0883      	lsrs	r3, r0, #2
    2754:	428b      	cmp	r3, r1
    2756:	d301      	bcc.n	275c <__udivsi3+0xe4>
    2758:	008b      	lsls	r3, r1, #2
    275a:	1ac0      	subs	r0, r0, r3
    275c:	4152      	adcs	r2, r2
    275e:	0843      	lsrs	r3, r0, #1
    2760:	428b      	cmp	r3, r1
    2762:	d301      	bcc.n	2768 <__udivsi3+0xf0>
    2764:	004b      	lsls	r3, r1, #1
    2766:	1ac0      	subs	r0, r0, r3
    2768:	4152      	adcs	r2, r2
    276a:	1a41      	subs	r1, r0, r1
    276c:	d200      	bcs.n	2770 <__udivsi3+0xf8>
    276e:	4601      	mov	r1, r0
    2770:	4152      	adcs	r2, r2
    2772:	4610      	mov	r0, r2
    2774:	4770      	bx	lr
    2776:	e7ff      	b.n	2778 <__udivsi3+0x100>
    2778:	b501      	push	{r0, lr}
    277a:	2000      	movs	r0, #0
    277c:	f000 f8f0 	bl	2960 <__aeabi_idiv0>
    2780:	bd02      	pop	{r1, pc}
    2782:	46c0      	nop			; (mov r8, r8)

00002784 <__aeabi_uidivmod>:
    2784:	2900      	cmp	r1, #0
    2786:	d0f7      	beq.n	2778 <__udivsi3+0x100>
    2788:	e776      	b.n	2678 <__udivsi3>
    278a:	4770      	bx	lr

0000278c <__divsi3>:
    278c:	4603      	mov	r3, r0
    278e:	430b      	orrs	r3, r1
    2790:	d47f      	bmi.n	2892 <__divsi3+0x106>
    2792:	2200      	movs	r2, #0
    2794:	0843      	lsrs	r3, r0, #1
    2796:	428b      	cmp	r3, r1
    2798:	d374      	bcc.n	2884 <__divsi3+0xf8>
    279a:	0903      	lsrs	r3, r0, #4
    279c:	428b      	cmp	r3, r1
    279e:	d35f      	bcc.n	2860 <__divsi3+0xd4>
    27a0:	0a03      	lsrs	r3, r0, #8
    27a2:	428b      	cmp	r3, r1
    27a4:	d344      	bcc.n	2830 <__divsi3+0xa4>
    27a6:	0b03      	lsrs	r3, r0, #12
    27a8:	428b      	cmp	r3, r1
    27aa:	d328      	bcc.n	27fe <__divsi3+0x72>
    27ac:	0c03      	lsrs	r3, r0, #16
    27ae:	428b      	cmp	r3, r1
    27b0:	d30d      	bcc.n	27ce <__divsi3+0x42>
    27b2:	22ff      	movs	r2, #255	; 0xff
    27b4:	0209      	lsls	r1, r1, #8
    27b6:	ba12      	rev	r2, r2
    27b8:	0c03      	lsrs	r3, r0, #16
    27ba:	428b      	cmp	r3, r1
    27bc:	d302      	bcc.n	27c4 <__divsi3+0x38>
    27be:	1212      	asrs	r2, r2, #8
    27c0:	0209      	lsls	r1, r1, #8
    27c2:	d065      	beq.n	2890 <__divsi3+0x104>
    27c4:	0b03      	lsrs	r3, r0, #12
    27c6:	428b      	cmp	r3, r1
    27c8:	d319      	bcc.n	27fe <__divsi3+0x72>
    27ca:	e000      	b.n	27ce <__divsi3+0x42>
    27cc:	0a09      	lsrs	r1, r1, #8
    27ce:	0bc3      	lsrs	r3, r0, #15
    27d0:	428b      	cmp	r3, r1
    27d2:	d301      	bcc.n	27d8 <__divsi3+0x4c>
    27d4:	03cb      	lsls	r3, r1, #15
    27d6:	1ac0      	subs	r0, r0, r3
    27d8:	4152      	adcs	r2, r2
    27da:	0b83      	lsrs	r3, r0, #14
    27dc:	428b      	cmp	r3, r1
    27de:	d301      	bcc.n	27e4 <__divsi3+0x58>
    27e0:	038b      	lsls	r3, r1, #14
    27e2:	1ac0      	subs	r0, r0, r3
    27e4:	4152      	adcs	r2, r2
    27e6:	0b43      	lsrs	r3, r0, #13
    27e8:	428b      	cmp	r3, r1
    27ea:	d301      	bcc.n	27f0 <__divsi3+0x64>
    27ec:	034b      	lsls	r3, r1, #13
    27ee:	1ac0      	subs	r0, r0, r3
    27f0:	4152      	adcs	r2, r2
    27f2:	0b03      	lsrs	r3, r0, #12
    27f4:	428b      	cmp	r3, r1
    27f6:	d301      	bcc.n	27fc <__divsi3+0x70>
    27f8:	030b      	lsls	r3, r1, #12
    27fa:	1ac0      	subs	r0, r0, r3
    27fc:	4152      	adcs	r2, r2
    27fe:	0ac3      	lsrs	r3, r0, #11
    2800:	428b      	cmp	r3, r1
    2802:	d301      	bcc.n	2808 <__divsi3+0x7c>
    2804:	02cb      	lsls	r3, r1, #11
    2806:	1ac0      	subs	r0, r0, r3
    2808:	4152      	adcs	r2, r2
    280a:	0a83      	lsrs	r3, r0, #10
    280c:	428b      	cmp	r3, r1
    280e:	d301      	bcc.n	2814 <__divsi3+0x88>
    2810:	028b      	lsls	r3, r1, #10
    2812:	1ac0      	subs	r0, r0, r3
    2814:	4152      	adcs	r2, r2
    2816:	0a43      	lsrs	r3, r0, #9
    2818:	428b      	cmp	r3, r1
    281a:	d301      	bcc.n	2820 <__divsi3+0x94>
    281c:	024b      	lsls	r3, r1, #9
    281e:	1ac0      	subs	r0, r0, r3
    2820:	4152      	adcs	r2, r2
    2822:	0a03      	lsrs	r3, r0, #8
    2824:	428b      	cmp	r3, r1
    2826:	d301      	bcc.n	282c <__divsi3+0xa0>
    2828:	020b      	lsls	r3, r1, #8
    282a:	1ac0      	subs	r0, r0, r3
    282c:	4152      	adcs	r2, r2
    282e:	d2cd      	bcs.n	27cc <__divsi3+0x40>
    2830:	09c3      	lsrs	r3, r0, #7
    2832:	428b      	cmp	r3, r1
    2834:	d301      	bcc.n	283a <__divsi3+0xae>
    2836:	01cb      	lsls	r3, r1, #7
    2838:	1ac0      	subs	r0, r0, r3
    283a:	4152      	adcs	r2, r2
    283c:	0983      	lsrs	r3, r0, #6
    283e:	428b      	cmp	r3, r1
    2840:	d301      	bcc.n	2846 <__divsi3+0xba>
    2842:	018b      	lsls	r3, r1, #6
    2844:	1ac0      	subs	r0, r0, r3
    2846:	4152      	adcs	r2, r2
    2848:	0943      	lsrs	r3, r0, #5
    284a:	428b      	cmp	r3, r1
    284c:	d301      	bcc.n	2852 <__divsi3+0xc6>
    284e:	014b      	lsls	r3, r1, #5
    2850:	1ac0      	subs	r0, r0, r3
    2852:	4152      	adcs	r2, r2
    2854:	0903      	lsrs	r3, r0, #4
    2856:	428b      	cmp	r3, r1
    2858:	d301      	bcc.n	285e <__divsi3+0xd2>
    285a:	010b      	lsls	r3, r1, #4
    285c:	1ac0      	subs	r0, r0, r3
    285e:	4152      	adcs	r2, r2
    2860:	08c3      	lsrs	r3, r0, #3
    2862:	428b      	cmp	r3, r1
    2864:	d301      	bcc.n	286a <__divsi3+0xde>
    2866:	00cb      	lsls	r3, r1, #3
    2868:	1ac0      	subs	r0, r0, r3
    286a:	4152      	adcs	r2, r2
    286c:	0883      	lsrs	r3, r0, #2
    286e:	428b      	cmp	r3, r1
    2870:	d301      	bcc.n	2876 <__divsi3+0xea>
    2872:	008b      	lsls	r3, r1, #2
    2874:	1ac0      	subs	r0, r0, r3
    2876:	4152      	adcs	r2, r2
    2878:	0843      	lsrs	r3, r0, #1
    287a:	428b      	cmp	r3, r1
    287c:	d301      	bcc.n	2882 <__divsi3+0xf6>
    287e:	004b      	lsls	r3, r1, #1
    2880:	1ac0      	subs	r0, r0, r3
    2882:	4152      	adcs	r2, r2
    2884:	1a41      	subs	r1, r0, r1
    2886:	d200      	bcs.n	288a <__divsi3+0xfe>
    2888:	4601      	mov	r1, r0
    288a:	4152      	adcs	r2, r2
    288c:	4610      	mov	r0, r2
    288e:	4770      	bx	lr
    2890:	e05d      	b.n	294e <__divsi3+0x1c2>
    2892:	0fca      	lsrs	r2, r1, #31
    2894:	d000      	beq.n	2898 <__divsi3+0x10c>
    2896:	4249      	negs	r1, r1
    2898:	1003      	asrs	r3, r0, #32
    289a:	d300      	bcc.n	289e <__divsi3+0x112>
    289c:	4240      	negs	r0, r0
    289e:	4053      	eors	r3, r2
    28a0:	2200      	movs	r2, #0
    28a2:	469c      	mov	ip, r3
    28a4:	0903      	lsrs	r3, r0, #4
    28a6:	428b      	cmp	r3, r1
    28a8:	d32d      	bcc.n	2906 <__divsi3+0x17a>
    28aa:	0a03      	lsrs	r3, r0, #8
    28ac:	428b      	cmp	r3, r1
    28ae:	d312      	bcc.n	28d6 <__divsi3+0x14a>
    28b0:	22fc      	movs	r2, #252	; 0xfc
    28b2:	0189      	lsls	r1, r1, #6
    28b4:	ba12      	rev	r2, r2
    28b6:	0a03      	lsrs	r3, r0, #8
    28b8:	428b      	cmp	r3, r1
    28ba:	d30c      	bcc.n	28d6 <__divsi3+0x14a>
    28bc:	0189      	lsls	r1, r1, #6
    28be:	1192      	asrs	r2, r2, #6
    28c0:	428b      	cmp	r3, r1
    28c2:	d308      	bcc.n	28d6 <__divsi3+0x14a>
    28c4:	0189      	lsls	r1, r1, #6
    28c6:	1192      	asrs	r2, r2, #6
    28c8:	428b      	cmp	r3, r1
    28ca:	d304      	bcc.n	28d6 <__divsi3+0x14a>
    28cc:	0189      	lsls	r1, r1, #6
    28ce:	d03a      	beq.n	2946 <__divsi3+0x1ba>
    28d0:	1192      	asrs	r2, r2, #6
    28d2:	e000      	b.n	28d6 <__divsi3+0x14a>
    28d4:	0989      	lsrs	r1, r1, #6
    28d6:	09c3      	lsrs	r3, r0, #7
    28d8:	428b      	cmp	r3, r1
    28da:	d301      	bcc.n	28e0 <__divsi3+0x154>
    28dc:	01cb      	lsls	r3, r1, #7
    28de:	1ac0      	subs	r0, r0, r3
    28e0:	4152      	adcs	r2, r2
    28e2:	0983      	lsrs	r3, r0, #6
    28e4:	428b      	cmp	r3, r1
    28e6:	d301      	bcc.n	28ec <__divsi3+0x160>
    28e8:	018b      	lsls	r3, r1, #6
    28ea:	1ac0      	subs	r0, r0, r3
    28ec:	4152      	adcs	r2, r2
    28ee:	0943      	lsrs	r3, r0, #5
    28f0:	428b      	cmp	r3, r1
    28f2:	d301      	bcc.n	28f8 <__divsi3+0x16c>
    28f4:	014b      	lsls	r3, r1, #5
    28f6:	1ac0      	subs	r0, r0, r3
    28f8:	4152      	adcs	r2, r2
    28fa:	0903      	lsrs	r3, r0, #4
    28fc:	428b      	cmp	r3, r1
    28fe:	d301      	bcc.n	2904 <__divsi3+0x178>
    2900:	010b      	lsls	r3, r1, #4
    2902:	1ac0      	subs	r0, r0, r3
    2904:	4152      	adcs	r2, r2
    2906:	08c3      	lsrs	r3, r0, #3
    2908:	428b      	cmp	r3, r1
    290a:	d301      	bcc.n	2910 <__divsi3+0x184>
    290c:	00cb      	lsls	r3, r1, #3
    290e:	1ac0      	subs	r0, r0, r3
    2910:	4152      	adcs	r2, r2
    2912:	0883      	lsrs	r3, r0, #2
    2914:	428b      	cmp	r3, r1
    2916:	d301      	bcc.n	291c <__divsi3+0x190>
    2918:	008b      	lsls	r3, r1, #2
    291a:	1ac0      	subs	r0, r0, r3
    291c:	4152      	adcs	r2, r2
    291e:	d2d9      	bcs.n	28d4 <__divsi3+0x148>
    2920:	0843      	lsrs	r3, r0, #1
    2922:	428b      	cmp	r3, r1
    2924:	d301      	bcc.n	292a <__divsi3+0x19e>
    2926:	004b      	lsls	r3, r1, #1
    2928:	1ac0      	subs	r0, r0, r3
    292a:	4152      	adcs	r2, r2
    292c:	1a41      	subs	r1, r0, r1
    292e:	d200      	bcs.n	2932 <__divsi3+0x1a6>
    2930:	4601      	mov	r1, r0
    2932:	4663      	mov	r3, ip
    2934:	4152      	adcs	r2, r2
    2936:	105b      	asrs	r3, r3, #1
    2938:	4610      	mov	r0, r2
    293a:	d301      	bcc.n	2940 <__divsi3+0x1b4>
    293c:	4240      	negs	r0, r0
    293e:	2b00      	cmp	r3, #0
    2940:	d500      	bpl.n	2944 <__divsi3+0x1b8>
    2942:	4249      	negs	r1, r1
    2944:	4770      	bx	lr
    2946:	4663      	mov	r3, ip
    2948:	105b      	asrs	r3, r3, #1
    294a:	d300      	bcc.n	294e <__divsi3+0x1c2>
    294c:	4240      	negs	r0, r0
    294e:	b501      	push	{r0, lr}
    2950:	2000      	movs	r0, #0
    2952:	f000 f805 	bl	2960 <__aeabi_idiv0>
    2956:	bd02      	pop	{r1, pc}

00002958 <__aeabi_idivmod>:
    2958:	2900      	cmp	r1, #0
    295a:	d0f8      	beq.n	294e <__divsi3+0x1c2>
    295c:	e716      	b.n	278c <__divsi3>
    295e:	4770      	bx	lr

00002960 <__aeabi_idiv0>:
    2960:	4770      	bx	lr
    2962:	46c0      	nop			; (mov r8, r8)

00002964 <__aeabi_cdrcmple>:
    2964:	4684      	mov	ip, r0
    2966:	1c10      	adds	r0, r2, #0
    2968:	4662      	mov	r2, ip
    296a:	468c      	mov	ip, r1
    296c:	1c19      	adds	r1, r3, #0
    296e:	4663      	mov	r3, ip
    2970:	e000      	b.n	2974 <__aeabi_cdcmpeq>
    2972:	46c0      	nop			; (mov r8, r8)

00002974 <__aeabi_cdcmpeq>:
    2974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2976:	f000 ff15 	bl	37a4 <__ledf2>
    297a:	2800      	cmp	r0, #0
    297c:	d401      	bmi.n	2982 <__aeabi_cdcmpeq+0xe>
    297e:	2100      	movs	r1, #0
    2980:	42c8      	cmn	r0, r1
    2982:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002984 <__aeabi_dcmpeq>:
    2984:	b510      	push	{r4, lr}
    2986:	f000 fe6f 	bl	3668 <__eqdf2>
    298a:	4240      	negs	r0, r0
    298c:	3001      	adds	r0, #1
    298e:	bd10      	pop	{r4, pc}

00002990 <__aeabi_dcmplt>:
    2990:	b510      	push	{r4, lr}
    2992:	f000 ff07 	bl	37a4 <__ledf2>
    2996:	2800      	cmp	r0, #0
    2998:	db01      	blt.n	299e <__aeabi_dcmplt+0xe>
    299a:	2000      	movs	r0, #0
    299c:	bd10      	pop	{r4, pc}
    299e:	2001      	movs	r0, #1
    29a0:	bd10      	pop	{r4, pc}
    29a2:	46c0      	nop			; (mov r8, r8)

000029a4 <__aeabi_dcmple>:
    29a4:	b510      	push	{r4, lr}
    29a6:	f000 fefd 	bl	37a4 <__ledf2>
    29aa:	2800      	cmp	r0, #0
    29ac:	dd01      	ble.n	29b2 <__aeabi_dcmple+0xe>
    29ae:	2000      	movs	r0, #0
    29b0:	bd10      	pop	{r4, pc}
    29b2:	2001      	movs	r0, #1
    29b4:	bd10      	pop	{r4, pc}
    29b6:	46c0      	nop			; (mov r8, r8)

000029b8 <__aeabi_dcmpgt>:
    29b8:	b510      	push	{r4, lr}
    29ba:	f000 fe8f 	bl	36dc <__gedf2>
    29be:	2800      	cmp	r0, #0
    29c0:	dc01      	bgt.n	29c6 <__aeabi_dcmpgt+0xe>
    29c2:	2000      	movs	r0, #0
    29c4:	bd10      	pop	{r4, pc}
    29c6:	2001      	movs	r0, #1
    29c8:	bd10      	pop	{r4, pc}
    29ca:	46c0      	nop			; (mov r8, r8)

000029cc <__aeabi_dcmpge>:
    29cc:	b510      	push	{r4, lr}
    29ce:	f000 fe85 	bl	36dc <__gedf2>
    29d2:	2800      	cmp	r0, #0
    29d4:	da01      	bge.n	29da <__aeabi_dcmpge+0xe>
    29d6:	2000      	movs	r0, #0
    29d8:	bd10      	pop	{r4, pc}
    29da:	2001      	movs	r0, #1
    29dc:	bd10      	pop	{r4, pc}
    29de:	46c0      	nop			; (mov r8, r8)

000029e0 <__aeabi_dadd>:
    29e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29e2:	4645      	mov	r5, r8
    29e4:	46de      	mov	lr, fp
    29e6:	4657      	mov	r7, sl
    29e8:	464e      	mov	r6, r9
    29ea:	030c      	lsls	r4, r1, #12
    29ec:	b5e0      	push	{r5, r6, r7, lr}
    29ee:	004e      	lsls	r6, r1, #1
    29f0:	0fc9      	lsrs	r1, r1, #31
    29f2:	4688      	mov	r8, r1
    29f4:	000d      	movs	r5, r1
    29f6:	0a61      	lsrs	r1, r4, #9
    29f8:	0f44      	lsrs	r4, r0, #29
    29fa:	430c      	orrs	r4, r1
    29fc:	00c7      	lsls	r7, r0, #3
    29fe:	0319      	lsls	r1, r3, #12
    2a00:	0058      	lsls	r0, r3, #1
    2a02:	0fdb      	lsrs	r3, r3, #31
    2a04:	469b      	mov	fp, r3
    2a06:	0a4b      	lsrs	r3, r1, #9
    2a08:	0f51      	lsrs	r1, r2, #29
    2a0a:	430b      	orrs	r3, r1
    2a0c:	0d76      	lsrs	r6, r6, #21
    2a0e:	0d40      	lsrs	r0, r0, #21
    2a10:	0019      	movs	r1, r3
    2a12:	00d2      	lsls	r2, r2, #3
    2a14:	45d8      	cmp	r8, fp
    2a16:	d100      	bne.n	2a1a <__aeabi_dadd+0x3a>
    2a18:	e0ae      	b.n	2b78 <__aeabi_dadd+0x198>
    2a1a:	1a35      	subs	r5, r6, r0
    2a1c:	2d00      	cmp	r5, #0
    2a1e:	dc00      	bgt.n	2a22 <__aeabi_dadd+0x42>
    2a20:	e0f6      	b.n	2c10 <__aeabi_dadd+0x230>
    2a22:	2800      	cmp	r0, #0
    2a24:	d10f      	bne.n	2a46 <__aeabi_dadd+0x66>
    2a26:	4313      	orrs	r3, r2
    2a28:	d100      	bne.n	2a2c <__aeabi_dadd+0x4c>
    2a2a:	e0db      	b.n	2be4 <__aeabi_dadd+0x204>
    2a2c:	1e6b      	subs	r3, r5, #1
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d000      	beq.n	2a34 <__aeabi_dadd+0x54>
    2a32:	e137      	b.n	2ca4 <__aeabi_dadd+0x2c4>
    2a34:	1aba      	subs	r2, r7, r2
    2a36:	4297      	cmp	r7, r2
    2a38:	41bf      	sbcs	r7, r7
    2a3a:	1a64      	subs	r4, r4, r1
    2a3c:	427f      	negs	r7, r7
    2a3e:	1be4      	subs	r4, r4, r7
    2a40:	2601      	movs	r6, #1
    2a42:	0017      	movs	r7, r2
    2a44:	e024      	b.n	2a90 <__aeabi_dadd+0xb0>
    2a46:	4bc6      	ldr	r3, [pc, #792]	; (2d60 <__aeabi_dadd+0x380>)
    2a48:	429e      	cmp	r6, r3
    2a4a:	d04d      	beq.n	2ae8 <__aeabi_dadd+0x108>
    2a4c:	2380      	movs	r3, #128	; 0x80
    2a4e:	041b      	lsls	r3, r3, #16
    2a50:	4319      	orrs	r1, r3
    2a52:	2d38      	cmp	r5, #56	; 0x38
    2a54:	dd00      	ble.n	2a58 <__aeabi_dadd+0x78>
    2a56:	e107      	b.n	2c68 <__aeabi_dadd+0x288>
    2a58:	2d1f      	cmp	r5, #31
    2a5a:	dd00      	ble.n	2a5e <__aeabi_dadd+0x7e>
    2a5c:	e138      	b.n	2cd0 <__aeabi_dadd+0x2f0>
    2a5e:	2020      	movs	r0, #32
    2a60:	1b43      	subs	r3, r0, r5
    2a62:	469a      	mov	sl, r3
    2a64:	000b      	movs	r3, r1
    2a66:	4650      	mov	r0, sl
    2a68:	4083      	lsls	r3, r0
    2a6a:	4699      	mov	r9, r3
    2a6c:	0013      	movs	r3, r2
    2a6e:	4648      	mov	r0, r9
    2a70:	40eb      	lsrs	r3, r5
    2a72:	4318      	orrs	r0, r3
    2a74:	0003      	movs	r3, r0
    2a76:	4650      	mov	r0, sl
    2a78:	4082      	lsls	r2, r0
    2a7a:	1e50      	subs	r0, r2, #1
    2a7c:	4182      	sbcs	r2, r0
    2a7e:	40e9      	lsrs	r1, r5
    2a80:	431a      	orrs	r2, r3
    2a82:	1aba      	subs	r2, r7, r2
    2a84:	1a61      	subs	r1, r4, r1
    2a86:	4297      	cmp	r7, r2
    2a88:	41a4      	sbcs	r4, r4
    2a8a:	0017      	movs	r7, r2
    2a8c:	4264      	negs	r4, r4
    2a8e:	1b0c      	subs	r4, r1, r4
    2a90:	0223      	lsls	r3, r4, #8
    2a92:	d562      	bpl.n	2b5a <__aeabi_dadd+0x17a>
    2a94:	0264      	lsls	r4, r4, #9
    2a96:	0a65      	lsrs	r5, r4, #9
    2a98:	2d00      	cmp	r5, #0
    2a9a:	d100      	bne.n	2a9e <__aeabi_dadd+0xbe>
    2a9c:	e0df      	b.n	2c5e <__aeabi_dadd+0x27e>
    2a9e:	0028      	movs	r0, r5
    2aa0:	f001 fe02 	bl	46a8 <__clzsi2>
    2aa4:	0003      	movs	r3, r0
    2aa6:	3b08      	subs	r3, #8
    2aa8:	2b1f      	cmp	r3, #31
    2aaa:	dd00      	ble.n	2aae <__aeabi_dadd+0xce>
    2aac:	e0d2      	b.n	2c54 <__aeabi_dadd+0x274>
    2aae:	2220      	movs	r2, #32
    2ab0:	003c      	movs	r4, r7
    2ab2:	1ad2      	subs	r2, r2, r3
    2ab4:	409d      	lsls	r5, r3
    2ab6:	40d4      	lsrs	r4, r2
    2ab8:	409f      	lsls	r7, r3
    2aba:	4325      	orrs	r5, r4
    2abc:	429e      	cmp	r6, r3
    2abe:	dd00      	ble.n	2ac2 <__aeabi_dadd+0xe2>
    2ac0:	e0c4      	b.n	2c4c <__aeabi_dadd+0x26c>
    2ac2:	1b9e      	subs	r6, r3, r6
    2ac4:	1c73      	adds	r3, r6, #1
    2ac6:	2b1f      	cmp	r3, #31
    2ac8:	dd00      	ble.n	2acc <__aeabi_dadd+0xec>
    2aca:	e0f1      	b.n	2cb0 <__aeabi_dadd+0x2d0>
    2acc:	2220      	movs	r2, #32
    2ace:	0038      	movs	r0, r7
    2ad0:	0029      	movs	r1, r5
    2ad2:	1ad2      	subs	r2, r2, r3
    2ad4:	40d8      	lsrs	r0, r3
    2ad6:	4091      	lsls	r1, r2
    2ad8:	4097      	lsls	r7, r2
    2ada:	002c      	movs	r4, r5
    2adc:	4301      	orrs	r1, r0
    2ade:	1e78      	subs	r0, r7, #1
    2ae0:	4187      	sbcs	r7, r0
    2ae2:	40dc      	lsrs	r4, r3
    2ae4:	2600      	movs	r6, #0
    2ae6:	430f      	orrs	r7, r1
    2ae8:	077b      	lsls	r3, r7, #29
    2aea:	d009      	beq.n	2b00 <__aeabi_dadd+0x120>
    2aec:	230f      	movs	r3, #15
    2aee:	403b      	ands	r3, r7
    2af0:	2b04      	cmp	r3, #4
    2af2:	d005      	beq.n	2b00 <__aeabi_dadd+0x120>
    2af4:	1d3b      	adds	r3, r7, #4
    2af6:	42bb      	cmp	r3, r7
    2af8:	41bf      	sbcs	r7, r7
    2afa:	427f      	negs	r7, r7
    2afc:	19e4      	adds	r4, r4, r7
    2afe:	001f      	movs	r7, r3
    2b00:	0223      	lsls	r3, r4, #8
    2b02:	d52c      	bpl.n	2b5e <__aeabi_dadd+0x17e>
    2b04:	4b96      	ldr	r3, [pc, #600]	; (2d60 <__aeabi_dadd+0x380>)
    2b06:	3601      	adds	r6, #1
    2b08:	429e      	cmp	r6, r3
    2b0a:	d100      	bne.n	2b0e <__aeabi_dadd+0x12e>
    2b0c:	e09a      	b.n	2c44 <__aeabi_dadd+0x264>
    2b0e:	4645      	mov	r5, r8
    2b10:	4b94      	ldr	r3, [pc, #592]	; (2d64 <__aeabi_dadd+0x384>)
    2b12:	08ff      	lsrs	r7, r7, #3
    2b14:	401c      	ands	r4, r3
    2b16:	0760      	lsls	r0, r4, #29
    2b18:	0576      	lsls	r6, r6, #21
    2b1a:	0264      	lsls	r4, r4, #9
    2b1c:	4307      	orrs	r7, r0
    2b1e:	0b24      	lsrs	r4, r4, #12
    2b20:	0d76      	lsrs	r6, r6, #21
    2b22:	2100      	movs	r1, #0
    2b24:	0324      	lsls	r4, r4, #12
    2b26:	0b23      	lsrs	r3, r4, #12
    2b28:	0d0c      	lsrs	r4, r1, #20
    2b2a:	4a8f      	ldr	r2, [pc, #572]	; (2d68 <__aeabi_dadd+0x388>)
    2b2c:	0524      	lsls	r4, r4, #20
    2b2e:	431c      	orrs	r4, r3
    2b30:	4014      	ands	r4, r2
    2b32:	0533      	lsls	r3, r6, #20
    2b34:	4323      	orrs	r3, r4
    2b36:	005b      	lsls	r3, r3, #1
    2b38:	07ed      	lsls	r5, r5, #31
    2b3a:	085b      	lsrs	r3, r3, #1
    2b3c:	432b      	orrs	r3, r5
    2b3e:	0038      	movs	r0, r7
    2b40:	0019      	movs	r1, r3
    2b42:	bc3c      	pop	{r2, r3, r4, r5}
    2b44:	4690      	mov	r8, r2
    2b46:	4699      	mov	r9, r3
    2b48:	46a2      	mov	sl, r4
    2b4a:	46ab      	mov	fp, r5
    2b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b4e:	4664      	mov	r4, ip
    2b50:	4304      	orrs	r4, r0
    2b52:	d100      	bne.n	2b56 <__aeabi_dadd+0x176>
    2b54:	e211      	b.n	2f7a <__aeabi_dadd+0x59a>
    2b56:	0004      	movs	r4, r0
    2b58:	4667      	mov	r7, ip
    2b5a:	077b      	lsls	r3, r7, #29
    2b5c:	d1c6      	bne.n	2aec <__aeabi_dadd+0x10c>
    2b5e:	4645      	mov	r5, r8
    2b60:	0760      	lsls	r0, r4, #29
    2b62:	08ff      	lsrs	r7, r7, #3
    2b64:	4307      	orrs	r7, r0
    2b66:	08e4      	lsrs	r4, r4, #3
    2b68:	4b7d      	ldr	r3, [pc, #500]	; (2d60 <__aeabi_dadd+0x380>)
    2b6a:	429e      	cmp	r6, r3
    2b6c:	d030      	beq.n	2bd0 <__aeabi_dadd+0x1f0>
    2b6e:	0324      	lsls	r4, r4, #12
    2b70:	0576      	lsls	r6, r6, #21
    2b72:	0b24      	lsrs	r4, r4, #12
    2b74:	0d76      	lsrs	r6, r6, #21
    2b76:	e7d4      	b.n	2b22 <__aeabi_dadd+0x142>
    2b78:	1a33      	subs	r3, r6, r0
    2b7a:	469a      	mov	sl, r3
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	dd78      	ble.n	2c72 <__aeabi_dadd+0x292>
    2b80:	2800      	cmp	r0, #0
    2b82:	d031      	beq.n	2be8 <__aeabi_dadd+0x208>
    2b84:	4876      	ldr	r0, [pc, #472]	; (2d60 <__aeabi_dadd+0x380>)
    2b86:	4286      	cmp	r6, r0
    2b88:	d0ae      	beq.n	2ae8 <__aeabi_dadd+0x108>
    2b8a:	2080      	movs	r0, #128	; 0x80
    2b8c:	0400      	lsls	r0, r0, #16
    2b8e:	4301      	orrs	r1, r0
    2b90:	4653      	mov	r3, sl
    2b92:	2b38      	cmp	r3, #56	; 0x38
    2b94:	dc00      	bgt.n	2b98 <__aeabi_dadd+0x1b8>
    2b96:	e0e9      	b.n	2d6c <__aeabi_dadd+0x38c>
    2b98:	430a      	orrs	r2, r1
    2b9a:	1e51      	subs	r1, r2, #1
    2b9c:	418a      	sbcs	r2, r1
    2b9e:	2100      	movs	r1, #0
    2ba0:	19d2      	adds	r2, r2, r7
    2ba2:	42ba      	cmp	r2, r7
    2ba4:	41bf      	sbcs	r7, r7
    2ba6:	1909      	adds	r1, r1, r4
    2ba8:	427c      	negs	r4, r7
    2baa:	0017      	movs	r7, r2
    2bac:	190c      	adds	r4, r1, r4
    2bae:	0223      	lsls	r3, r4, #8
    2bb0:	d5d3      	bpl.n	2b5a <__aeabi_dadd+0x17a>
    2bb2:	4b6b      	ldr	r3, [pc, #428]	; (2d60 <__aeabi_dadd+0x380>)
    2bb4:	3601      	adds	r6, #1
    2bb6:	429e      	cmp	r6, r3
    2bb8:	d100      	bne.n	2bbc <__aeabi_dadd+0x1dc>
    2bba:	e13a      	b.n	2e32 <__aeabi_dadd+0x452>
    2bbc:	2001      	movs	r0, #1
    2bbe:	4b69      	ldr	r3, [pc, #420]	; (2d64 <__aeabi_dadd+0x384>)
    2bc0:	401c      	ands	r4, r3
    2bc2:	087b      	lsrs	r3, r7, #1
    2bc4:	4007      	ands	r7, r0
    2bc6:	431f      	orrs	r7, r3
    2bc8:	07e0      	lsls	r0, r4, #31
    2bca:	4307      	orrs	r7, r0
    2bcc:	0864      	lsrs	r4, r4, #1
    2bce:	e78b      	b.n	2ae8 <__aeabi_dadd+0x108>
    2bd0:	0023      	movs	r3, r4
    2bd2:	433b      	orrs	r3, r7
    2bd4:	d100      	bne.n	2bd8 <__aeabi_dadd+0x1f8>
    2bd6:	e1cb      	b.n	2f70 <__aeabi_dadd+0x590>
    2bd8:	2280      	movs	r2, #128	; 0x80
    2bda:	0312      	lsls	r2, r2, #12
    2bdc:	4314      	orrs	r4, r2
    2bde:	0324      	lsls	r4, r4, #12
    2be0:	0b24      	lsrs	r4, r4, #12
    2be2:	e79e      	b.n	2b22 <__aeabi_dadd+0x142>
    2be4:	002e      	movs	r6, r5
    2be6:	e77f      	b.n	2ae8 <__aeabi_dadd+0x108>
    2be8:	0008      	movs	r0, r1
    2bea:	4310      	orrs	r0, r2
    2bec:	d100      	bne.n	2bf0 <__aeabi_dadd+0x210>
    2bee:	e0b4      	b.n	2d5a <__aeabi_dadd+0x37a>
    2bf0:	1e58      	subs	r0, r3, #1
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d000      	beq.n	2bf8 <__aeabi_dadd+0x218>
    2bf6:	e0de      	b.n	2db6 <__aeabi_dadd+0x3d6>
    2bf8:	18ba      	adds	r2, r7, r2
    2bfa:	42ba      	cmp	r2, r7
    2bfc:	419b      	sbcs	r3, r3
    2bfe:	1864      	adds	r4, r4, r1
    2c00:	425b      	negs	r3, r3
    2c02:	18e4      	adds	r4, r4, r3
    2c04:	0017      	movs	r7, r2
    2c06:	2601      	movs	r6, #1
    2c08:	0223      	lsls	r3, r4, #8
    2c0a:	d5a6      	bpl.n	2b5a <__aeabi_dadd+0x17a>
    2c0c:	2602      	movs	r6, #2
    2c0e:	e7d5      	b.n	2bbc <__aeabi_dadd+0x1dc>
    2c10:	2d00      	cmp	r5, #0
    2c12:	d16e      	bne.n	2cf2 <__aeabi_dadd+0x312>
    2c14:	1c70      	adds	r0, r6, #1
    2c16:	0540      	lsls	r0, r0, #21
    2c18:	0d40      	lsrs	r0, r0, #21
    2c1a:	2801      	cmp	r0, #1
    2c1c:	dc00      	bgt.n	2c20 <__aeabi_dadd+0x240>
    2c1e:	e0f9      	b.n	2e14 <__aeabi_dadd+0x434>
    2c20:	1ab8      	subs	r0, r7, r2
    2c22:	4684      	mov	ip, r0
    2c24:	4287      	cmp	r7, r0
    2c26:	4180      	sbcs	r0, r0
    2c28:	1ae5      	subs	r5, r4, r3
    2c2a:	4240      	negs	r0, r0
    2c2c:	1a2d      	subs	r5, r5, r0
    2c2e:	0228      	lsls	r0, r5, #8
    2c30:	d400      	bmi.n	2c34 <__aeabi_dadd+0x254>
    2c32:	e089      	b.n	2d48 <__aeabi_dadd+0x368>
    2c34:	1bd7      	subs	r7, r2, r7
    2c36:	42ba      	cmp	r2, r7
    2c38:	4192      	sbcs	r2, r2
    2c3a:	1b1c      	subs	r4, r3, r4
    2c3c:	4252      	negs	r2, r2
    2c3e:	1aa5      	subs	r5, r4, r2
    2c40:	46d8      	mov	r8, fp
    2c42:	e729      	b.n	2a98 <__aeabi_dadd+0xb8>
    2c44:	4645      	mov	r5, r8
    2c46:	2400      	movs	r4, #0
    2c48:	2700      	movs	r7, #0
    2c4a:	e76a      	b.n	2b22 <__aeabi_dadd+0x142>
    2c4c:	4c45      	ldr	r4, [pc, #276]	; (2d64 <__aeabi_dadd+0x384>)
    2c4e:	1af6      	subs	r6, r6, r3
    2c50:	402c      	ands	r4, r5
    2c52:	e749      	b.n	2ae8 <__aeabi_dadd+0x108>
    2c54:	003d      	movs	r5, r7
    2c56:	3828      	subs	r0, #40	; 0x28
    2c58:	4085      	lsls	r5, r0
    2c5a:	2700      	movs	r7, #0
    2c5c:	e72e      	b.n	2abc <__aeabi_dadd+0xdc>
    2c5e:	0038      	movs	r0, r7
    2c60:	f001 fd22 	bl	46a8 <__clzsi2>
    2c64:	3020      	adds	r0, #32
    2c66:	e71d      	b.n	2aa4 <__aeabi_dadd+0xc4>
    2c68:	430a      	orrs	r2, r1
    2c6a:	1e51      	subs	r1, r2, #1
    2c6c:	418a      	sbcs	r2, r1
    2c6e:	2100      	movs	r1, #0
    2c70:	e707      	b.n	2a82 <__aeabi_dadd+0xa2>
    2c72:	2b00      	cmp	r3, #0
    2c74:	d000      	beq.n	2c78 <__aeabi_dadd+0x298>
    2c76:	e0f3      	b.n	2e60 <__aeabi_dadd+0x480>
    2c78:	1c70      	adds	r0, r6, #1
    2c7a:	0543      	lsls	r3, r0, #21
    2c7c:	0d5b      	lsrs	r3, r3, #21
    2c7e:	2b01      	cmp	r3, #1
    2c80:	dc00      	bgt.n	2c84 <__aeabi_dadd+0x2a4>
    2c82:	e0ad      	b.n	2de0 <__aeabi_dadd+0x400>
    2c84:	4b36      	ldr	r3, [pc, #216]	; (2d60 <__aeabi_dadd+0x380>)
    2c86:	4298      	cmp	r0, r3
    2c88:	d100      	bne.n	2c8c <__aeabi_dadd+0x2ac>
    2c8a:	e0d1      	b.n	2e30 <__aeabi_dadd+0x450>
    2c8c:	18ba      	adds	r2, r7, r2
    2c8e:	42ba      	cmp	r2, r7
    2c90:	41bf      	sbcs	r7, r7
    2c92:	1864      	adds	r4, r4, r1
    2c94:	427f      	negs	r7, r7
    2c96:	19e4      	adds	r4, r4, r7
    2c98:	07e7      	lsls	r7, r4, #31
    2c9a:	0852      	lsrs	r2, r2, #1
    2c9c:	4317      	orrs	r7, r2
    2c9e:	0864      	lsrs	r4, r4, #1
    2ca0:	0006      	movs	r6, r0
    2ca2:	e721      	b.n	2ae8 <__aeabi_dadd+0x108>
    2ca4:	482e      	ldr	r0, [pc, #184]	; (2d60 <__aeabi_dadd+0x380>)
    2ca6:	4285      	cmp	r5, r0
    2ca8:	d100      	bne.n	2cac <__aeabi_dadd+0x2cc>
    2caa:	e093      	b.n	2dd4 <__aeabi_dadd+0x3f4>
    2cac:	001d      	movs	r5, r3
    2cae:	e6d0      	b.n	2a52 <__aeabi_dadd+0x72>
    2cb0:	0029      	movs	r1, r5
    2cb2:	3e1f      	subs	r6, #31
    2cb4:	40f1      	lsrs	r1, r6
    2cb6:	2b20      	cmp	r3, #32
    2cb8:	d100      	bne.n	2cbc <__aeabi_dadd+0x2dc>
    2cba:	e08d      	b.n	2dd8 <__aeabi_dadd+0x3f8>
    2cbc:	2240      	movs	r2, #64	; 0x40
    2cbe:	1ad3      	subs	r3, r2, r3
    2cc0:	409d      	lsls	r5, r3
    2cc2:	432f      	orrs	r7, r5
    2cc4:	1e7d      	subs	r5, r7, #1
    2cc6:	41af      	sbcs	r7, r5
    2cc8:	2400      	movs	r4, #0
    2cca:	430f      	orrs	r7, r1
    2ccc:	2600      	movs	r6, #0
    2cce:	e744      	b.n	2b5a <__aeabi_dadd+0x17a>
    2cd0:	002b      	movs	r3, r5
    2cd2:	0008      	movs	r0, r1
    2cd4:	3b20      	subs	r3, #32
    2cd6:	40d8      	lsrs	r0, r3
    2cd8:	0003      	movs	r3, r0
    2cda:	2d20      	cmp	r5, #32
    2cdc:	d100      	bne.n	2ce0 <__aeabi_dadd+0x300>
    2cde:	e07d      	b.n	2ddc <__aeabi_dadd+0x3fc>
    2ce0:	2040      	movs	r0, #64	; 0x40
    2ce2:	1b45      	subs	r5, r0, r5
    2ce4:	40a9      	lsls	r1, r5
    2ce6:	430a      	orrs	r2, r1
    2ce8:	1e51      	subs	r1, r2, #1
    2cea:	418a      	sbcs	r2, r1
    2cec:	2100      	movs	r1, #0
    2cee:	431a      	orrs	r2, r3
    2cf0:	e6c7      	b.n	2a82 <__aeabi_dadd+0xa2>
    2cf2:	2e00      	cmp	r6, #0
    2cf4:	d050      	beq.n	2d98 <__aeabi_dadd+0x3b8>
    2cf6:	4e1a      	ldr	r6, [pc, #104]	; (2d60 <__aeabi_dadd+0x380>)
    2cf8:	42b0      	cmp	r0, r6
    2cfa:	d057      	beq.n	2dac <__aeabi_dadd+0x3cc>
    2cfc:	2680      	movs	r6, #128	; 0x80
    2cfe:	426b      	negs	r3, r5
    2d00:	4699      	mov	r9, r3
    2d02:	0436      	lsls	r6, r6, #16
    2d04:	4334      	orrs	r4, r6
    2d06:	464b      	mov	r3, r9
    2d08:	2b38      	cmp	r3, #56	; 0x38
    2d0a:	dd00      	ble.n	2d0e <__aeabi_dadd+0x32e>
    2d0c:	e0d6      	b.n	2ebc <__aeabi_dadd+0x4dc>
    2d0e:	2b1f      	cmp	r3, #31
    2d10:	dd00      	ble.n	2d14 <__aeabi_dadd+0x334>
    2d12:	e135      	b.n	2f80 <__aeabi_dadd+0x5a0>
    2d14:	2620      	movs	r6, #32
    2d16:	1af5      	subs	r5, r6, r3
    2d18:	0026      	movs	r6, r4
    2d1a:	40ae      	lsls	r6, r5
    2d1c:	46b2      	mov	sl, r6
    2d1e:	003e      	movs	r6, r7
    2d20:	40de      	lsrs	r6, r3
    2d22:	46ac      	mov	ip, r5
    2d24:	0035      	movs	r5, r6
    2d26:	4656      	mov	r6, sl
    2d28:	432e      	orrs	r6, r5
    2d2a:	4665      	mov	r5, ip
    2d2c:	40af      	lsls	r7, r5
    2d2e:	1e7d      	subs	r5, r7, #1
    2d30:	41af      	sbcs	r7, r5
    2d32:	40dc      	lsrs	r4, r3
    2d34:	4337      	orrs	r7, r6
    2d36:	1bd7      	subs	r7, r2, r7
    2d38:	42ba      	cmp	r2, r7
    2d3a:	4192      	sbcs	r2, r2
    2d3c:	1b0c      	subs	r4, r1, r4
    2d3e:	4252      	negs	r2, r2
    2d40:	1aa4      	subs	r4, r4, r2
    2d42:	0006      	movs	r6, r0
    2d44:	46d8      	mov	r8, fp
    2d46:	e6a3      	b.n	2a90 <__aeabi_dadd+0xb0>
    2d48:	4664      	mov	r4, ip
    2d4a:	4667      	mov	r7, ip
    2d4c:	432c      	orrs	r4, r5
    2d4e:	d000      	beq.n	2d52 <__aeabi_dadd+0x372>
    2d50:	e6a2      	b.n	2a98 <__aeabi_dadd+0xb8>
    2d52:	2500      	movs	r5, #0
    2d54:	2600      	movs	r6, #0
    2d56:	2700      	movs	r7, #0
    2d58:	e706      	b.n	2b68 <__aeabi_dadd+0x188>
    2d5a:	001e      	movs	r6, r3
    2d5c:	e6c4      	b.n	2ae8 <__aeabi_dadd+0x108>
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	000007ff 	.word	0x000007ff
    2d64:	ff7fffff 	.word	0xff7fffff
    2d68:	800fffff 	.word	0x800fffff
    2d6c:	2b1f      	cmp	r3, #31
    2d6e:	dc63      	bgt.n	2e38 <__aeabi_dadd+0x458>
    2d70:	2020      	movs	r0, #32
    2d72:	1ac3      	subs	r3, r0, r3
    2d74:	0008      	movs	r0, r1
    2d76:	4098      	lsls	r0, r3
    2d78:	469c      	mov	ip, r3
    2d7a:	4683      	mov	fp, r0
    2d7c:	4653      	mov	r3, sl
    2d7e:	0010      	movs	r0, r2
    2d80:	40d8      	lsrs	r0, r3
    2d82:	0003      	movs	r3, r0
    2d84:	4658      	mov	r0, fp
    2d86:	4318      	orrs	r0, r3
    2d88:	4663      	mov	r3, ip
    2d8a:	409a      	lsls	r2, r3
    2d8c:	1e53      	subs	r3, r2, #1
    2d8e:	419a      	sbcs	r2, r3
    2d90:	4653      	mov	r3, sl
    2d92:	4302      	orrs	r2, r0
    2d94:	40d9      	lsrs	r1, r3
    2d96:	e703      	b.n	2ba0 <__aeabi_dadd+0x1c0>
    2d98:	0026      	movs	r6, r4
    2d9a:	433e      	orrs	r6, r7
    2d9c:	d006      	beq.n	2dac <__aeabi_dadd+0x3cc>
    2d9e:	43eb      	mvns	r3, r5
    2da0:	4699      	mov	r9, r3
    2da2:	2b00      	cmp	r3, #0
    2da4:	d0c7      	beq.n	2d36 <__aeabi_dadd+0x356>
    2da6:	4e94      	ldr	r6, [pc, #592]	; (2ff8 <__aeabi_dadd+0x618>)
    2da8:	42b0      	cmp	r0, r6
    2daa:	d1ac      	bne.n	2d06 <__aeabi_dadd+0x326>
    2dac:	000c      	movs	r4, r1
    2dae:	0017      	movs	r7, r2
    2db0:	0006      	movs	r6, r0
    2db2:	46d8      	mov	r8, fp
    2db4:	e698      	b.n	2ae8 <__aeabi_dadd+0x108>
    2db6:	4b90      	ldr	r3, [pc, #576]	; (2ff8 <__aeabi_dadd+0x618>)
    2db8:	459a      	cmp	sl, r3
    2dba:	d00b      	beq.n	2dd4 <__aeabi_dadd+0x3f4>
    2dbc:	4682      	mov	sl, r0
    2dbe:	e6e7      	b.n	2b90 <__aeabi_dadd+0x1b0>
    2dc0:	2800      	cmp	r0, #0
    2dc2:	d000      	beq.n	2dc6 <__aeabi_dadd+0x3e6>
    2dc4:	e09e      	b.n	2f04 <__aeabi_dadd+0x524>
    2dc6:	0018      	movs	r0, r3
    2dc8:	4310      	orrs	r0, r2
    2dca:	d100      	bne.n	2dce <__aeabi_dadd+0x3ee>
    2dcc:	e0e9      	b.n	2fa2 <__aeabi_dadd+0x5c2>
    2dce:	001c      	movs	r4, r3
    2dd0:	0017      	movs	r7, r2
    2dd2:	46d8      	mov	r8, fp
    2dd4:	4e88      	ldr	r6, [pc, #544]	; (2ff8 <__aeabi_dadd+0x618>)
    2dd6:	e687      	b.n	2ae8 <__aeabi_dadd+0x108>
    2dd8:	2500      	movs	r5, #0
    2dda:	e772      	b.n	2cc2 <__aeabi_dadd+0x2e2>
    2ddc:	2100      	movs	r1, #0
    2dde:	e782      	b.n	2ce6 <__aeabi_dadd+0x306>
    2de0:	0023      	movs	r3, r4
    2de2:	433b      	orrs	r3, r7
    2de4:	2e00      	cmp	r6, #0
    2de6:	d000      	beq.n	2dea <__aeabi_dadd+0x40a>
    2de8:	e0ab      	b.n	2f42 <__aeabi_dadd+0x562>
    2dea:	2b00      	cmp	r3, #0
    2dec:	d100      	bne.n	2df0 <__aeabi_dadd+0x410>
    2dee:	e0e7      	b.n	2fc0 <__aeabi_dadd+0x5e0>
    2df0:	000b      	movs	r3, r1
    2df2:	4313      	orrs	r3, r2
    2df4:	d100      	bne.n	2df8 <__aeabi_dadd+0x418>
    2df6:	e677      	b.n	2ae8 <__aeabi_dadd+0x108>
    2df8:	18ba      	adds	r2, r7, r2
    2dfa:	42ba      	cmp	r2, r7
    2dfc:	41bf      	sbcs	r7, r7
    2dfe:	1864      	adds	r4, r4, r1
    2e00:	427f      	negs	r7, r7
    2e02:	19e4      	adds	r4, r4, r7
    2e04:	0223      	lsls	r3, r4, #8
    2e06:	d400      	bmi.n	2e0a <__aeabi_dadd+0x42a>
    2e08:	e0f2      	b.n	2ff0 <__aeabi_dadd+0x610>
    2e0a:	4b7c      	ldr	r3, [pc, #496]	; (2ffc <__aeabi_dadd+0x61c>)
    2e0c:	0017      	movs	r7, r2
    2e0e:	401c      	ands	r4, r3
    2e10:	0006      	movs	r6, r0
    2e12:	e669      	b.n	2ae8 <__aeabi_dadd+0x108>
    2e14:	0020      	movs	r0, r4
    2e16:	4338      	orrs	r0, r7
    2e18:	2e00      	cmp	r6, #0
    2e1a:	d1d1      	bne.n	2dc0 <__aeabi_dadd+0x3e0>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d15b      	bne.n	2ed8 <__aeabi_dadd+0x4f8>
    2e20:	001c      	movs	r4, r3
    2e22:	4314      	orrs	r4, r2
    2e24:	d100      	bne.n	2e28 <__aeabi_dadd+0x448>
    2e26:	e0a8      	b.n	2f7a <__aeabi_dadd+0x59a>
    2e28:	001c      	movs	r4, r3
    2e2a:	0017      	movs	r7, r2
    2e2c:	46d8      	mov	r8, fp
    2e2e:	e65b      	b.n	2ae8 <__aeabi_dadd+0x108>
    2e30:	0006      	movs	r6, r0
    2e32:	2400      	movs	r4, #0
    2e34:	2700      	movs	r7, #0
    2e36:	e697      	b.n	2b68 <__aeabi_dadd+0x188>
    2e38:	4650      	mov	r0, sl
    2e3a:	000b      	movs	r3, r1
    2e3c:	3820      	subs	r0, #32
    2e3e:	40c3      	lsrs	r3, r0
    2e40:	4699      	mov	r9, r3
    2e42:	4653      	mov	r3, sl
    2e44:	2b20      	cmp	r3, #32
    2e46:	d100      	bne.n	2e4a <__aeabi_dadd+0x46a>
    2e48:	e095      	b.n	2f76 <__aeabi_dadd+0x596>
    2e4a:	2340      	movs	r3, #64	; 0x40
    2e4c:	4650      	mov	r0, sl
    2e4e:	1a1b      	subs	r3, r3, r0
    2e50:	4099      	lsls	r1, r3
    2e52:	430a      	orrs	r2, r1
    2e54:	1e51      	subs	r1, r2, #1
    2e56:	418a      	sbcs	r2, r1
    2e58:	464b      	mov	r3, r9
    2e5a:	2100      	movs	r1, #0
    2e5c:	431a      	orrs	r2, r3
    2e5e:	e69f      	b.n	2ba0 <__aeabi_dadd+0x1c0>
    2e60:	2e00      	cmp	r6, #0
    2e62:	d130      	bne.n	2ec6 <__aeabi_dadd+0x4e6>
    2e64:	0026      	movs	r6, r4
    2e66:	433e      	orrs	r6, r7
    2e68:	d067      	beq.n	2f3a <__aeabi_dadd+0x55a>
    2e6a:	43db      	mvns	r3, r3
    2e6c:	469a      	mov	sl, r3
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d01c      	beq.n	2eac <__aeabi_dadd+0x4cc>
    2e72:	4e61      	ldr	r6, [pc, #388]	; (2ff8 <__aeabi_dadd+0x618>)
    2e74:	42b0      	cmp	r0, r6
    2e76:	d060      	beq.n	2f3a <__aeabi_dadd+0x55a>
    2e78:	4653      	mov	r3, sl
    2e7a:	2b38      	cmp	r3, #56	; 0x38
    2e7c:	dd00      	ble.n	2e80 <__aeabi_dadd+0x4a0>
    2e7e:	e096      	b.n	2fae <__aeabi_dadd+0x5ce>
    2e80:	2b1f      	cmp	r3, #31
    2e82:	dd00      	ble.n	2e86 <__aeabi_dadd+0x4a6>
    2e84:	e09f      	b.n	2fc6 <__aeabi_dadd+0x5e6>
    2e86:	2620      	movs	r6, #32
    2e88:	1af3      	subs	r3, r6, r3
    2e8a:	0026      	movs	r6, r4
    2e8c:	409e      	lsls	r6, r3
    2e8e:	469c      	mov	ip, r3
    2e90:	46b3      	mov	fp, r6
    2e92:	4653      	mov	r3, sl
    2e94:	003e      	movs	r6, r7
    2e96:	40de      	lsrs	r6, r3
    2e98:	0033      	movs	r3, r6
    2e9a:	465e      	mov	r6, fp
    2e9c:	431e      	orrs	r6, r3
    2e9e:	4663      	mov	r3, ip
    2ea0:	409f      	lsls	r7, r3
    2ea2:	1e7b      	subs	r3, r7, #1
    2ea4:	419f      	sbcs	r7, r3
    2ea6:	4653      	mov	r3, sl
    2ea8:	40dc      	lsrs	r4, r3
    2eaa:	4337      	orrs	r7, r6
    2eac:	18bf      	adds	r7, r7, r2
    2eae:	4297      	cmp	r7, r2
    2eb0:	4192      	sbcs	r2, r2
    2eb2:	1864      	adds	r4, r4, r1
    2eb4:	4252      	negs	r2, r2
    2eb6:	18a4      	adds	r4, r4, r2
    2eb8:	0006      	movs	r6, r0
    2eba:	e678      	b.n	2bae <__aeabi_dadd+0x1ce>
    2ebc:	4327      	orrs	r7, r4
    2ebe:	1e7c      	subs	r4, r7, #1
    2ec0:	41a7      	sbcs	r7, r4
    2ec2:	2400      	movs	r4, #0
    2ec4:	e737      	b.n	2d36 <__aeabi_dadd+0x356>
    2ec6:	4e4c      	ldr	r6, [pc, #304]	; (2ff8 <__aeabi_dadd+0x618>)
    2ec8:	42b0      	cmp	r0, r6
    2eca:	d036      	beq.n	2f3a <__aeabi_dadd+0x55a>
    2ecc:	2680      	movs	r6, #128	; 0x80
    2ece:	425b      	negs	r3, r3
    2ed0:	0436      	lsls	r6, r6, #16
    2ed2:	469a      	mov	sl, r3
    2ed4:	4334      	orrs	r4, r6
    2ed6:	e7cf      	b.n	2e78 <__aeabi_dadd+0x498>
    2ed8:	0018      	movs	r0, r3
    2eda:	4310      	orrs	r0, r2
    2edc:	d100      	bne.n	2ee0 <__aeabi_dadd+0x500>
    2ede:	e603      	b.n	2ae8 <__aeabi_dadd+0x108>
    2ee0:	1ab8      	subs	r0, r7, r2
    2ee2:	4684      	mov	ip, r0
    2ee4:	4567      	cmp	r7, ip
    2ee6:	41ad      	sbcs	r5, r5
    2ee8:	1ae0      	subs	r0, r4, r3
    2eea:	426d      	negs	r5, r5
    2eec:	1b40      	subs	r0, r0, r5
    2eee:	0205      	lsls	r5, r0, #8
    2ef0:	d400      	bmi.n	2ef4 <__aeabi_dadd+0x514>
    2ef2:	e62c      	b.n	2b4e <__aeabi_dadd+0x16e>
    2ef4:	1bd7      	subs	r7, r2, r7
    2ef6:	42ba      	cmp	r2, r7
    2ef8:	4192      	sbcs	r2, r2
    2efa:	1b1c      	subs	r4, r3, r4
    2efc:	4252      	negs	r2, r2
    2efe:	1aa4      	subs	r4, r4, r2
    2f00:	46d8      	mov	r8, fp
    2f02:	e5f1      	b.n	2ae8 <__aeabi_dadd+0x108>
    2f04:	0018      	movs	r0, r3
    2f06:	4310      	orrs	r0, r2
    2f08:	d100      	bne.n	2f0c <__aeabi_dadd+0x52c>
    2f0a:	e763      	b.n	2dd4 <__aeabi_dadd+0x3f4>
    2f0c:	08f8      	lsrs	r0, r7, #3
    2f0e:	0767      	lsls	r7, r4, #29
    2f10:	4307      	orrs	r7, r0
    2f12:	2080      	movs	r0, #128	; 0x80
    2f14:	08e4      	lsrs	r4, r4, #3
    2f16:	0300      	lsls	r0, r0, #12
    2f18:	4204      	tst	r4, r0
    2f1a:	d008      	beq.n	2f2e <__aeabi_dadd+0x54e>
    2f1c:	08dd      	lsrs	r5, r3, #3
    2f1e:	4205      	tst	r5, r0
    2f20:	d105      	bne.n	2f2e <__aeabi_dadd+0x54e>
    2f22:	08d2      	lsrs	r2, r2, #3
    2f24:	0759      	lsls	r1, r3, #29
    2f26:	4311      	orrs	r1, r2
    2f28:	000f      	movs	r7, r1
    2f2a:	002c      	movs	r4, r5
    2f2c:	46d8      	mov	r8, fp
    2f2e:	0f7b      	lsrs	r3, r7, #29
    2f30:	00e4      	lsls	r4, r4, #3
    2f32:	431c      	orrs	r4, r3
    2f34:	00ff      	lsls	r7, r7, #3
    2f36:	4e30      	ldr	r6, [pc, #192]	; (2ff8 <__aeabi_dadd+0x618>)
    2f38:	e5d6      	b.n	2ae8 <__aeabi_dadd+0x108>
    2f3a:	000c      	movs	r4, r1
    2f3c:	0017      	movs	r7, r2
    2f3e:	0006      	movs	r6, r0
    2f40:	e5d2      	b.n	2ae8 <__aeabi_dadd+0x108>
    2f42:	2b00      	cmp	r3, #0
    2f44:	d038      	beq.n	2fb8 <__aeabi_dadd+0x5d8>
    2f46:	000b      	movs	r3, r1
    2f48:	4313      	orrs	r3, r2
    2f4a:	d100      	bne.n	2f4e <__aeabi_dadd+0x56e>
    2f4c:	e742      	b.n	2dd4 <__aeabi_dadd+0x3f4>
    2f4e:	08f8      	lsrs	r0, r7, #3
    2f50:	0767      	lsls	r7, r4, #29
    2f52:	4307      	orrs	r7, r0
    2f54:	2080      	movs	r0, #128	; 0x80
    2f56:	08e4      	lsrs	r4, r4, #3
    2f58:	0300      	lsls	r0, r0, #12
    2f5a:	4204      	tst	r4, r0
    2f5c:	d0e7      	beq.n	2f2e <__aeabi_dadd+0x54e>
    2f5e:	08cb      	lsrs	r3, r1, #3
    2f60:	4203      	tst	r3, r0
    2f62:	d1e4      	bne.n	2f2e <__aeabi_dadd+0x54e>
    2f64:	08d2      	lsrs	r2, r2, #3
    2f66:	0749      	lsls	r1, r1, #29
    2f68:	4311      	orrs	r1, r2
    2f6a:	000f      	movs	r7, r1
    2f6c:	001c      	movs	r4, r3
    2f6e:	e7de      	b.n	2f2e <__aeabi_dadd+0x54e>
    2f70:	2700      	movs	r7, #0
    2f72:	2400      	movs	r4, #0
    2f74:	e5d5      	b.n	2b22 <__aeabi_dadd+0x142>
    2f76:	2100      	movs	r1, #0
    2f78:	e76b      	b.n	2e52 <__aeabi_dadd+0x472>
    2f7a:	2500      	movs	r5, #0
    2f7c:	2700      	movs	r7, #0
    2f7e:	e5f3      	b.n	2b68 <__aeabi_dadd+0x188>
    2f80:	464e      	mov	r6, r9
    2f82:	0025      	movs	r5, r4
    2f84:	3e20      	subs	r6, #32
    2f86:	40f5      	lsrs	r5, r6
    2f88:	464b      	mov	r3, r9
    2f8a:	002e      	movs	r6, r5
    2f8c:	2b20      	cmp	r3, #32
    2f8e:	d02d      	beq.n	2fec <__aeabi_dadd+0x60c>
    2f90:	2540      	movs	r5, #64	; 0x40
    2f92:	1aed      	subs	r5, r5, r3
    2f94:	40ac      	lsls	r4, r5
    2f96:	4327      	orrs	r7, r4
    2f98:	1e7c      	subs	r4, r7, #1
    2f9a:	41a7      	sbcs	r7, r4
    2f9c:	2400      	movs	r4, #0
    2f9e:	4337      	orrs	r7, r6
    2fa0:	e6c9      	b.n	2d36 <__aeabi_dadd+0x356>
    2fa2:	2480      	movs	r4, #128	; 0x80
    2fa4:	2500      	movs	r5, #0
    2fa6:	0324      	lsls	r4, r4, #12
    2fa8:	4e13      	ldr	r6, [pc, #76]	; (2ff8 <__aeabi_dadd+0x618>)
    2faa:	2700      	movs	r7, #0
    2fac:	e5dc      	b.n	2b68 <__aeabi_dadd+0x188>
    2fae:	4327      	orrs	r7, r4
    2fb0:	1e7c      	subs	r4, r7, #1
    2fb2:	41a7      	sbcs	r7, r4
    2fb4:	2400      	movs	r4, #0
    2fb6:	e779      	b.n	2eac <__aeabi_dadd+0x4cc>
    2fb8:	000c      	movs	r4, r1
    2fba:	0017      	movs	r7, r2
    2fbc:	4e0e      	ldr	r6, [pc, #56]	; (2ff8 <__aeabi_dadd+0x618>)
    2fbe:	e593      	b.n	2ae8 <__aeabi_dadd+0x108>
    2fc0:	000c      	movs	r4, r1
    2fc2:	0017      	movs	r7, r2
    2fc4:	e590      	b.n	2ae8 <__aeabi_dadd+0x108>
    2fc6:	4656      	mov	r6, sl
    2fc8:	0023      	movs	r3, r4
    2fca:	3e20      	subs	r6, #32
    2fcc:	40f3      	lsrs	r3, r6
    2fce:	4699      	mov	r9, r3
    2fd0:	4653      	mov	r3, sl
    2fd2:	2b20      	cmp	r3, #32
    2fd4:	d00e      	beq.n	2ff4 <__aeabi_dadd+0x614>
    2fd6:	2340      	movs	r3, #64	; 0x40
    2fd8:	4656      	mov	r6, sl
    2fda:	1b9b      	subs	r3, r3, r6
    2fdc:	409c      	lsls	r4, r3
    2fde:	4327      	orrs	r7, r4
    2fe0:	1e7c      	subs	r4, r7, #1
    2fe2:	41a7      	sbcs	r7, r4
    2fe4:	464b      	mov	r3, r9
    2fe6:	2400      	movs	r4, #0
    2fe8:	431f      	orrs	r7, r3
    2fea:	e75f      	b.n	2eac <__aeabi_dadd+0x4cc>
    2fec:	2400      	movs	r4, #0
    2fee:	e7d2      	b.n	2f96 <__aeabi_dadd+0x5b6>
    2ff0:	0017      	movs	r7, r2
    2ff2:	e5b2      	b.n	2b5a <__aeabi_dadd+0x17a>
    2ff4:	2400      	movs	r4, #0
    2ff6:	e7f2      	b.n	2fde <__aeabi_dadd+0x5fe>
    2ff8:	000007ff 	.word	0x000007ff
    2ffc:	ff7fffff 	.word	0xff7fffff

00003000 <__aeabi_ddiv>:
    3000:	b5f0      	push	{r4, r5, r6, r7, lr}
    3002:	4657      	mov	r7, sl
    3004:	4645      	mov	r5, r8
    3006:	46de      	mov	lr, fp
    3008:	464e      	mov	r6, r9
    300a:	b5e0      	push	{r5, r6, r7, lr}
    300c:	004c      	lsls	r4, r1, #1
    300e:	030e      	lsls	r6, r1, #12
    3010:	b087      	sub	sp, #28
    3012:	4683      	mov	fp, r0
    3014:	4692      	mov	sl, r2
    3016:	001d      	movs	r5, r3
    3018:	4680      	mov	r8, r0
    301a:	0b36      	lsrs	r6, r6, #12
    301c:	0d64      	lsrs	r4, r4, #21
    301e:	0fcf      	lsrs	r7, r1, #31
    3020:	2c00      	cmp	r4, #0
    3022:	d04f      	beq.n	30c4 <__aeabi_ddiv+0xc4>
    3024:	4b6f      	ldr	r3, [pc, #444]	; (31e4 <__aeabi_ddiv+0x1e4>)
    3026:	429c      	cmp	r4, r3
    3028:	d035      	beq.n	3096 <__aeabi_ddiv+0x96>
    302a:	2380      	movs	r3, #128	; 0x80
    302c:	0f42      	lsrs	r2, r0, #29
    302e:	041b      	lsls	r3, r3, #16
    3030:	00f6      	lsls	r6, r6, #3
    3032:	4313      	orrs	r3, r2
    3034:	4333      	orrs	r3, r6
    3036:	4699      	mov	r9, r3
    3038:	00c3      	lsls	r3, r0, #3
    303a:	4698      	mov	r8, r3
    303c:	4b6a      	ldr	r3, [pc, #424]	; (31e8 <__aeabi_ddiv+0x1e8>)
    303e:	2600      	movs	r6, #0
    3040:	469c      	mov	ip, r3
    3042:	2300      	movs	r3, #0
    3044:	4464      	add	r4, ip
    3046:	9303      	str	r3, [sp, #12]
    3048:	032b      	lsls	r3, r5, #12
    304a:	0b1b      	lsrs	r3, r3, #12
    304c:	469b      	mov	fp, r3
    304e:	006b      	lsls	r3, r5, #1
    3050:	0fed      	lsrs	r5, r5, #31
    3052:	4650      	mov	r0, sl
    3054:	0d5b      	lsrs	r3, r3, #21
    3056:	9501      	str	r5, [sp, #4]
    3058:	d05e      	beq.n	3118 <__aeabi_ddiv+0x118>
    305a:	4a62      	ldr	r2, [pc, #392]	; (31e4 <__aeabi_ddiv+0x1e4>)
    305c:	4293      	cmp	r3, r2
    305e:	d053      	beq.n	3108 <__aeabi_ddiv+0x108>
    3060:	465a      	mov	r2, fp
    3062:	00d1      	lsls	r1, r2, #3
    3064:	2280      	movs	r2, #128	; 0x80
    3066:	0f40      	lsrs	r0, r0, #29
    3068:	0412      	lsls	r2, r2, #16
    306a:	4302      	orrs	r2, r0
    306c:	430a      	orrs	r2, r1
    306e:	4693      	mov	fp, r2
    3070:	4652      	mov	r2, sl
    3072:	00d1      	lsls	r1, r2, #3
    3074:	4a5c      	ldr	r2, [pc, #368]	; (31e8 <__aeabi_ddiv+0x1e8>)
    3076:	4694      	mov	ip, r2
    3078:	2200      	movs	r2, #0
    307a:	4463      	add	r3, ip
    307c:	0038      	movs	r0, r7
    307e:	4068      	eors	r0, r5
    3080:	4684      	mov	ip, r0
    3082:	9002      	str	r0, [sp, #8]
    3084:	1ae4      	subs	r4, r4, r3
    3086:	4316      	orrs	r6, r2
    3088:	2e0f      	cmp	r6, #15
    308a:	d900      	bls.n	308e <__aeabi_ddiv+0x8e>
    308c:	e0b4      	b.n	31f8 <__aeabi_ddiv+0x1f8>
    308e:	4b57      	ldr	r3, [pc, #348]	; (31ec <__aeabi_ddiv+0x1ec>)
    3090:	00b6      	lsls	r6, r6, #2
    3092:	599b      	ldr	r3, [r3, r6]
    3094:	469f      	mov	pc, r3
    3096:	0003      	movs	r3, r0
    3098:	4333      	orrs	r3, r6
    309a:	4699      	mov	r9, r3
    309c:	d16c      	bne.n	3178 <__aeabi_ddiv+0x178>
    309e:	2300      	movs	r3, #0
    30a0:	4698      	mov	r8, r3
    30a2:	3302      	adds	r3, #2
    30a4:	2608      	movs	r6, #8
    30a6:	9303      	str	r3, [sp, #12]
    30a8:	e7ce      	b.n	3048 <__aeabi_ddiv+0x48>
    30aa:	46cb      	mov	fp, r9
    30ac:	4641      	mov	r1, r8
    30ae:	9a03      	ldr	r2, [sp, #12]
    30b0:	9701      	str	r7, [sp, #4]
    30b2:	2a02      	cmp	r2, #2
    30b4:	d165      	bne.n	3182 <__aeabi_ddiv+0x182>
    30b6:	9b01      	ldr	r3, [sp, #4]
    30b8:	4c4a      	ldr	r4, [pc, #296]	; (31e4 <__aeabi_ddiv+0x1e4>)
    30ba:	469c      	mov	ip, r3
    30bc:	2300      	movs	r3, #0
    30be:	2200      	movs	r2, #0
    30c0:	4698      	mov	r8, r3
    30c2:	e06b      	b.n	319c <__aeabi_ddiv+0x19c>
    30c4:	0003      	movs	r3, r0
    30c6:	4333      	orrs	r3, r6
    30c8:	4699      	mov	r9, r3
    30ca:	d04e      	beq.n	316a <__aeabi_ddiv+0x16a>
    30cc:	2e00      	cmp	r6, #0
    30ce:	d100      	bne.n	30d2 <__aeabi_ddiv+0xd2>
    30d0:	e1bc      	b.n	344c <__aeabi_ddiv+0x44c>
    30d2:	0030      	movs	r0, r6
    30d4:	f001 fae8 	bl	46a8 <__clzsi2>
    30d8:	0003      	movs	r3, r0
    30da:	3b0b      	subs	r3, #11
    30dc:	2b1c      	cmp	r3, #28
    30de:	dd00      	ble.n	30e2 <__aeabi_ddiv+0xe2>
    30e0:	e1ac      	b.n	343c <__aeabi_ddiv+0x43c>
    30e2:	221d      	movs	r2, #29
    30e4:	1ad3      	subs	r3, r2, r3
    30e6:	465a      	mov	r2, fp
    30e8:	0001      	movs	r1, r0
    30ea:	40da      	lsrs	r2, r3
    30ec:	3908      	subs	r1, #8
    30ee:	408e      	lsls	r6, r1
    30f0:	0013      	movs	r3, r2
    30f2:	4333      	orrs	r3, r6
    30f4:	4699      	mov	r9, r3
    30f6:	465b      	mov	r3, fp
    30f8:	408b      	lsls	r3, r1
    30fa:	4698      	mov	r8, r3
    30fc:	2300      	movs	r3, #0
    30fe:	4c3c      	ldr	r4, [pc, #240]	; (31f0 <__aeabi_ddiv+0x1f0>)
    3100:	2600      	movs	r6, #0
    3102:	1a24      	subs	r4, r4, r0
    3104:	9303      	str	r3, [sp, #12]
    3106:	e79f      	b.n	3048 <__aeabi_ddiv+0x48>
    3108:	4651      	mov	r1, sl
    310a:	465a      	mov	r2, fp
    310c:	4311      	orrs	r1, r2
    310e:	d129      	bne.n	3164 <__aeabi_ddiv+0x164>
    3110:	2200      	movs	r2, #0
    3112:	4693      	mov	fp, r2
    3114:	3202      	adds	r2, #2
    3116:	e7b1      	b.n	307c <__aeabi_ddiv+0x7c>
    3118:	4659      	mov	r1, fp
    311a:	4301      	orrs	r1, r0
    311c:	d01e      	beq.n	315c <__aeabi_ddiv+0x15c>
    311e:	465b      	mov	r3, fp
    3120:	2b00      	cmp	r3, #0
    3122:	d100      	bne.n	3126 <__aeabi_ddiv+0x126>
    3124:	e19e      	b.n	3464 <__aeabi_ddiv+0x464>
    3126:	4658      	mov	r0, fp
    3128:	f001 fabe 	bl	46a8 <__clzsi2>
    312c:	0003      	movs	r3, r0
    312e:	3b0b      	subs	r3, #11
    3130:	2b1c      	cmp	r3, #28
    3132:	dd00      	ble.n	3136 <__aeabi_ddiv+0x136>
    3134:	e18f      	b.n	3456 <__aeabi_ddiv+0x456>
    3136:	0002      	movs	r2, r0
    3138:	4659      	mov	r1, fp
    313a:	3a08      	subs	r2, #8
    313c:	4091      	lsls	r1, r2
    313e:	468b      	mov	fp, r1
    3140:	211d      	movs	r1, #29
    3142:	1acb      	subs	r3, r1, r3
    3144:	4651      	mov	r1, sl
    3146:	40d9      	lsrs	r1, r3
    3148:	000b      	movs	r3, r1
    314a:	4659      	mov	r1, fp
    314c:	430b      	orrs	r3, r1
    314e:	4651      	mov	r1, sl
    3150:	469b      	mov	fp, r3
    3152:	4091      	lsls	r1, r2
    3154:	4b26      	ldr	r3, [pc, #152]	; (31f0 <__aeabi_ddiv+0x1f0>)
    3156:	2200      	movs	r2, #0
    3158:	1a1b      	subs	r3, r3, r0
    315a:	e78f      	b.n	307c <__aeabi_ddiv+0x7c>
    315c:	2300      	movs	r3, #0
    315e:	2201      	movs	r2, #1
    3160:	469b      	mov	fp, r3
    3162:	e78b      	b.n	307c <__aeabi_ddiv+0x7c>
    3164:	4651      	mov	r1, sl
    3166:	2203      	movs	r2, #3
    3168:	e788      	b.n	307c <__aeabi_ddiv+0x7c>
    316a:	2300      	movs	r3, #0
    316c:	4698      	mov	r8, r3
    316e:	3301      	adds	r3, #1
    3170:	2604      	movs	r6, #4
    3172:	2400      	movs	r4, #0
    3174:	9303      	str	r3, [sp, #12]
    3176:	e767      	b.n	3048 <__aeabi_ddiv+0x48>
    3178:	2303      	movs	r3, #3
    317a:	46b1      	mov	r9, r6
    317c:	9303      	str	r3, [sp, #12]
    317e:	260c      	movs	r6, #12
    3180:	e762      	b.n	3048 <__aeabi_ddiv+0x48>
    3182:	2a03      	cmp	r2, #3
    3184:	d100      	bne.n	3188 <__aeabi_ddiv+0x188>
    3186:	e25c      	b.n	3642 <__aeabi_ddiv+0x642>
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	2a01      	cmp	r2, #1
    318c:	d000      	beq.n	3190 <__aeabi_ddiv+0x190>
    318e:	e1e4      	b.n	355a <__aeabi_ddiv+0x55a>
    3190:	4013      	ands	r3, r2
    3192:	469c      	mov	ip, r3
    3194:	2300      	movs	r3, #0
    3196:	2400      	movs	r4, #0
    3198:	2200      	movs	r2, #0
    319a:	4698      	mov	r8, r3
    319c:	2100      	movs	r1, #0
    319e:	0312      	lsls	r2, r2, #12
    31a0:	0b13      	lsrs	r3, r2, #12
    31a2:	0d0a      	lsrs	r2, r1, #20
    31a4:	0512      	lsls	r2, r2, #20
    31a6:	431a      	orrs	r2, r3
    31a8:	0523      	lsls	r3, r4, #20
    31aa:	4c12      	ldr	r4, [pc, #72]	; (31f4 <__aeabi_ddiv+0x1f4>)
    31ac:	4640      	mov	r0, r8
    31ae:	4022      	ands	r2, r4
    31b0:	4313      	orrs	r3, r2
    31b2:	4662      	mov	r2, ip
    31b4:	005b      	lsls	r3, r3, #1
    31b6:	07d2      	lsls	r2, r2, #31
    31b8:	085b      	lsrs	r3, r3, #1
    31ba:	4313      	orrs	r3, r2
    31bc:	0019      	movs	r1, r3
    31be:	b007      	add	sp, #28
    31c0:	bc3c      	pop	{r2, r3, r4, r5}
    31c2:	4690      	mov	r8, r2
    31c4:	4699      	mov	r9, r3
    31c6:	46a2      	mov	sl, r4
    31c8:	46ab      	mov	fp, r5
    31ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31cc:	2300      	movs	r3, #0
    31ce:	2280      	movs	r2, #128	; 0x80
    31d0:	469c      	mov	ip, r3
    31d2:	0312      	lsls	r2, r2, #12
    31d4:	4698      	mov	r8, r3
    31d6:	4c03      	ldr	r4, [pc, #12]	; (31e4 <__aeabi_ddiv+0x1e4>)
    31d8:	e7e0      	b.n	319c <__aeabi_ddiv+0x19c>
    31da:	2300      	movs	r3, #0
    31dc:	4c01      	ldr	r4, [pc, #4]	; (31e4 <__aeabi_ddiv+0x1e4>)
    31de:	2200      	movs	r2, #0
    31e0:	4698      	mov	r8, r3
    31e2:	e7db      	b.n	319c <__aeabi_ddiv+0x19c>
    31e4:	000007ff 	.word	0x000007ff
    31e8:	fffffc01 	.word	0xfffffc01
    31ec:	00005ee0 	.word	0x00005ee0
    31f0:	fffffc0d 	.word	0xfffffc0d
    31f4:	800fffff 	.word	0x800fffff
    31f8:	45d9      	cmp	r9, fp
    31fa:	d900      	bls.n	31fe <__aeabi_ddiv+0x1fe>
    31fc:	e139      	b.n	3472 <__aeabi_ddiv+0x472>
    31fe:	d100      	bne.n	3202 <__aeabi_ddiv+0x202>
    3200:	e134      	b.n	346c <__aeabi_ddiv+0x46c>
    3202:	2300      	movs	r3, #0
    3204:	4646      	mov	r6, r8
    3206:	464d      	mov	r5, r9
    3208:	469a      	mov	sl, r3
    320a:	3c01      	subs	r4, #1
    320c:	465b      	mov	r3, fp
    320e:	0e0a      	lsrs	r2, r1, #24
    3210:	021b      	lsls	r3, r3, #8
    3212:	431a      	orrs	r2, r3
    3214:	020b      	lsls	r3, r1, #8
    3216:	0c17      	lsrs	r7, r2, #16
    3218:	9303      	str	r3, [sp, #12]
    321a:	0413      	lsls	r3, r2, #16
    321c:	0c1b      	lsrs	r3, r3, #16
    321e:	0039      	movs	r1, r7
    3220:	0028      	movs	r0, r5
    3222:	4690      	mov	r8, r2
    3224:	9301      	str	r3, [sp, #4]
    3226:	f7ff fa27 	bl	2678 <__udivsi3>
    322a:	0002      	movs	r2, r0
    322c:	9b01      	ldr	r3, [sp, #4]
    322e:	4683      	mov	fp, r0
    3230:	435a      	muls	r2, r3
    3232:	0028      	movs	r0, r5
    3234:	0039      	movs	r1, r7
    3236:	4691      	mov	r9, r2
    3238:	f7ff faa4 	bl	2784 <__aeabi_uidivmod>
    323c:	0c35      	lsrs	r5, r6, #16
    323e:	0409      	lsls	r1, r1, #16
    3240:	430d      	orrs	r5, r1
    3242:	45a9      	cmp	r9, r5
    3244:	d90d      	bls.n	3262 <__aeabi_ddiv+0x262>
    3246:	465b      	mov	r3, fp
    3248:	4445      	add	r5, r8
    324a:	3b01      	subs	r3, #1
    324c:	45a8      	cmp	r8, r5
    324e:	d900      	bls.n	3252 <__aeabi_ddiv+0x252>
    3250:	e13a      	b.n	34c8 <__aeabi_ddiv+0x4c8>
    3252:	45a9      	cmp	r9, r5
    3254:	d800      	bhi.n	3258 <__aeabi_ddiv+0x258>
    3256:	e137      	b.n	34c8 <__aeabi_ddiv+0x4c8>
    3258:	2302      	movs	r3, #2
    325a:	425b      	negs	r3, r3
    325c:	469c      	mov	ip, r3
    325e:	4445      	add	r5, r8
    3260:	44e3      	add	fp, ip
    3262:	464b      	mov	r3, r9
    3264:	1aeb      	subs	r3, r5, r3
    3266:	0039      	movs	r1, r7
    3268:	0018      	movs	r0, r3
    326a:	9304      	str	r3, [sp, #16]
    326c:	f7ff fa04 	bl	2678 <__udivsi3>
    3270:	9b01      	ldr	r3, [sp, #4]
    3272:	0005      	movs	r5, r0
    3274:	4343      	muls	r3, r0
    3276:	0039      	movs	r1, r7
    3278:	9804      	ldr	r0, [sp, #16]
    327a:	4699      	mov	r9, r3
    327c:	f7ff fa82 	bl	2784 <__aeabi_uidivmod>
    3280:	0433      	lsls	r3, r6, #16
    3282:	0409      	lsls	r1, r1, #16
    3284:	0c1b      	lsrs	r3, r3, #16
    3286:	430b      	orrs	r3, r1
    3288:	4599      	cmp	r9, r3
    328a:	d909      	bls.n	32a0 <__aeabi_ddiv+0x2a0>
    328c:	4443      	add	r3, r8
    328e:	1e6a      	subs	r2, r5, #1
    3290:	4598      	cmp	r8, r3
    3292:	d900      	bls.n	3296 <__aeabi_ddiv+0x296>
    3294:	e11a      	b.n	34cc <__aeabi_ddiv+0x4cc>
    3296:	4599      	cmp	r9, r3
    3298:	d800      	bhi.n	329c <__aeabi_ddiv+0x29c>
    329a:	e117      	b.n	34cc <__aeabi_ddiv+0x4cc>
    329c:	3d02      	subs	r5, #2
    329e:	4443      	add	r3, r8
    32a0:	464a      	mov	r2, r9
    32a2:	1a9b      	subs	r3, r3, r2
    32a4:	465a      	mov	r2, fp
    32a6:	0412      	lsls	r2, r2, #16
    32a8:	432a      	orrs	r2, r5
    32aa:	9903      	ldr	r1, [sp, #12]
    32ac:	4693      	mov	fp, r2
    32ae:	0c10      	lsrs	r0, r2, #16
    32b0:	0c0a      	lsrs	r2, r1, #16
    32b2:	4691      	mov	r9, r2
    32b4:	0409      	lsls	r1, r1, #16
    32b6:	465a      	mov	r2, fp
    32b8:	0c09      	lsrs	r1, r1, #16
    32ba:	464e      	mov	r6, r9
    32bc:	000d      	movs	r5, r1
    32be:	0412      	lsls	r2, r2, #16
    32c0:	0c12      	lsrs	r2, r2, #16
    32c2:	4345      	muls	r5, r0
    32c4:	9105      	str	r1, [sp, #20]
    32c6:	4351      	muls	r1, r2
    32c8:	4372      	muls	r2, r6
    32ca:	4370      	muls	r0, r6
    32cc:	1952      	adds	r2, r2, r5
    32ce:	0c0e      	lsrs	r6, r1, #16
    32d0:	18b2      	adds	r2, r6, r2
    32d2:	4295      	cmp	r5, r2
    32d4:	d903      	bls.n	32de <__aeabi_ddiv+0x2de>
    32d6:	2580      	movs	r5, #128	; 0x80
    32d8:	026d      	lsls	r5, r5, #9
    32da:	46ac      	mov	ip, r5
    32dc:	4460      	add	r0, ip
    32de:	0c15      	lsrs	r5, r2, #16
    32e0:	0409      	lsls	r1, r1, #16
    32e2:	0412      	lsls	r2, r2, #16
    32e4:	0c09      	lsrs	r1, r1, #16
    32e6:	1828      	adds	r0, r5, r0
    32e8:	1852      	adds	r2, r2, r1
    32ea:	4283      	cmp	r3, r0
    32ec:	d200      	bcs.n	32f0 <__aeabi_ddiv+0x2f0>
    32ee:	e0ce      	b.n	348e <__aeabi_ddiv+0x48e>
    32f0:	d100      	bne.n	32f4 <__aeabi_ddiv+0x2f4>
    32f2:	e0c8      	b.n	3486 <__aeabi_ddiv+0x486>
    32f4:	1a1d      	subs	r5, r3, r0
    32f6:	4653      	mov	r3, sl
    32f8:	1a9e      	subs	r6, r3, r2
    32fa:	45b2      	cmp	sl, r6
    32fc:	4192      	sbcs	r2, r2
    32fe:	4252      	negs	r2, r2
    3300:	1aab      	subs	r3, r5, r2
    3302:	469a      	mov	sl, r3
    3304:	4598      	cmp	r8, r3
    3306:	d100      	bne.n	330a <__aeabi_ddiv+0x30a>
    3308:	e117      	b.n	353a <__aeabi_ddiv+0x53a>
    330a:	0039      	movs	r1, r7
    330c:	0018      	movs	r0, r3
    330e:	f7ff f9b3 	bl	2678 <__udivsi3>
    3312:	9b01      	ldr	r3, [sp, #4]
    3314:	0005      	movs	r5, r0
    3316:	4343      	muls	r3, r0
    3318:	0039      	movs	r1, r7
    331a:	4650      	mov	r0, sl
    331c:	9304      	str	r3, [sp, #16]
    331e:	f7ff fa31 	bl	2784 <__aeabi_uidivmod>
    3322:	9804      	ldr	r0, [sp, #16]
    3324:	040b      	lsls	r3, r1, #16
    3326:	0c31      	lsrs	r1, r6, #16
    3328:	4319      	orrs	r1, r3
    332a:	4288      	cmp	r0, r1
    332c:	d909      	bls.n	3342 <__aeabi_ddiv+0x342>
    332e:	4441      	add	r1, r8
    3330:	1e6b      	subs	r3, r5, #1
    3332:	4588      	cmp	r8, r1
    3334:	d900      	bls.n	3338 <__aeabi_ddiv+0x338>
    3336:	e107      	b.n	3548 <__aeabi_ddiv+0x548>
    3338:	4288      	cmp	r0, r1
    333a:	d800      	bhi.n	333e <__aeabi_ddiv+0x33e>
    333c:	e104      	b.n	3548 <__aeabi_ddiv+0x548>
    333e:	3d02      	subs	r5, #2
    3340:	4441      	add	r1, r8
    3342:	9b04      	ldr	r3, [sp, #16]
    3344:	1acb      	subs	r3, r1, r3
    3346:	0018      	movs	r0, r3
    3348:	0039      	movs	r1, r7
    334a:	9304      	str	r3, [sp, #16]
    334c:	f7ff f994 	bl	2678 <__udivsi3>
    3350:	9b01      	ldr	r3, [sp, #4]
    3352:	4682      	mov	sl, r0
    3354:	4343      	muls	r3, r0
    3356:	0039      	movs	r1, r7
    3358:	9804      	ldr	r0, [sp, #16]
    335a:	9301      	str	r3, [sp, #4]
    335c:	f7ff fa12 	bl	2784 <__aeabi_uidivmod>
    3360:	9801      	ldr	r0, [sp, #4]
    3362:	040b      	lsls	r3, r1, #16
    3364:	0431      	lsls	r1, r6, #16
    3366:	0c09      	lsrs	r1, r1, #16
    3368:	4319      	orrs	r1, r3
    336a:	4288      	cmp	r0, r1
    336c:	d90d      	bls.n	338a <__aeabi_ddiv+0x38a>
    336e:	4653      	mov	r3, sl
    3370:	4441      	add	r1, r8
    3372:	3b01      	subs	r3, #1
    3374:	4588      	cmp	r8, r1
    3376:	d900      	bls.n	337a <__aeabi_ddiv+0x37a>
    3378:	e0e8      	b.n	354c <__aeabi_ddiv+0x54c>
    337a:	4288      	cmp	r0, r1
    337c:	d800      	bhi.n	3380 <__aeabi_ddiv+0x380>
    337e:	e0e5      	b.n	354c <__aeabi_ddiv+0x54c>
    3380:	2302      	movs	r3, #2
    3382:	425b      	negs	r3, r3
    3384:	469c      	mov	ip, r3
    3386:	4441      	add	r1, r8
    3388:	44e2      	add	sl, ip
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	042d      	lsls	r5, r5, #16
    338e:	1ace      	subs	r6, r1, r3
    3390:	4651      	mov	r1, sl
    3392:	4329      	orrs	r1, r5
    3394:	9d05      	ldr	r5, [sp, #20]
    3396:	464f      	mov	r7, r9
    3398:	002a      	movs	r2, r5
    339a:	040b      	lsls	r3, r1, #16
    339c:	0c08      	lsrs	r0, r1, #16
    339e:	0c1b      	lsrs	r3, r3, #16
    33a0:	435a      	muls	r2, r3
    33a2:	4345      	muls	r5, r0
    33a4:	437b      	muls	r3, r7
    33a6:	4378      	muls	r0, r7
    33a8:	195b      	adds	r3, r3, r5
    33aa:	0c17      	lsrs	r7, r2, #16
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	429d      	cmp	r5, r3
    33b0:	d903      	bls.n	33ba <__aeabi_ddiv+0x3ba>
    33b2:	2580      	movs	r5, #128	; 0x80
    33b4:	026d      	lsls	r5, r5, #9
    33b6:	46ac      	mov	ip, r5
    33b8:	4460      	add	r0, ip
    33ba:	0c1d      	lsrs	r5, r3, #16
    33bc:	0412      	lsls	r2, r2, #16
    33be:	041b      	lsls	r3, r3, #16
    33c0:	0c12      	lsrs	r2, r2, #16
    33c2:	1828      	adds	r0, r5, r0
    33c4:	189b      	adds	r3, r3, r2
    33c6:	4286      	cmp	r6, r0
    33c8:	d200      	bcs.n	33cc <__aeabi_ddiv+0x3cc>
    33ca:	e093      	b.n	34f4 <__aeabi_ddiv+0x4f4>
    33cc:	d100      	bne.n	33d0 <__aeabi_ddiv+0x3d0>
    33ce:	e08e      	b.n	34ee <__aeabi_ddiv+0x4ee>
    33d0:	2301      	movs	r3, #1
    33d2:	4319      	orrs	r1, r3
    33d4:	4ba0      	ldr	r3, [pc, #640]	; (3658 <__aeabi_ddiv+0x658>)
    33d6:	18e3      	adds	r3, r4, r3
    33d8:	2b00      	cmp	r3, #0
    33da:	dc00      	bgt.n	33de <__aeabi_ddiv+0x3de>
    33dc:	e099      	b.n	3512 <__aeabi_ddiv+0x512>
    33de:	074a      	lsls	r2, r1, #29
    33e0:	d000      	beq.n	33e4 <__aeabi_ddiv+0x3e4>
    33e2:	e09e      	b.n	3522 <__aeabi_ddiv+0x522>
    33e4:	465a      	mov	r2, fp
    33e6:	01d2      	lsls	r2, r2, #7
    33e8:	d506      	bpl.n	33f8 <__aeabi_ddiv+0x3f8>
    33ea:	465a      	mov	r2, fp
    33ec:	4b9b      	ldr	r3, [pc, #620]	; (365c <__aeabi_ddiv+0x65c>)
    33ee:	401a      	ands	r2, r3
    33f0:	2380      	movs	r3, #128	; 0x80
    33f2:	4693      	mov	fp, r2
    33f4:	00db      	lsls	r3, r3, #3
    33f6:	18e3      	adds	r3, r4, r3
    33f8:	4a99      	ldr	r2, [pc, #612]	; (3660 <__aeabi_ddiv+0x660>)
    33fa:	4293      	cmp	r3, r2
    33fc:	dd68      	ble.n	34d0 <__aeabi_ddiv+0x4d0>
    33fe:	2301      	movs	r3, #1
    3400:	9a02      	ldr	r2, [sp, #8]
    3402:	4c98      	ldr	r4, [pc, #608]	; (3664 <__aeabi_ddiv+0x664>)
    3404:	401a      	ands	r2, r3
    3406:	2300      	movs	r3, #0
    3408:	4694      	mov	ip, r2
    340a:	4698      	mov	r8, r3
    340c:	2200      	movs	r2, #0
    340e:	e6c5      	b.n	319c <__aeabi_ddiv+0x19c>
    3410:	2280      	movs	r2, #128	; 0x80
    3412:	464b      	mov	r3, r9
    3414:	0312      	lsls	r2, r2, #12
    3416:	4213      	tst	r3, r2
    3418:	d00a      	beq.n	3430 <__aeabi_ddiv+0x430>
    341a:	465b      	mov	r3, fp
    341c:	4213      	tst	r3, r2
    341e:	d106      	bne.n	342e <__aeabi_ddiv+0x42e>
    3420:	431a      	orrs	r2, r3
    3422:	0312      	lsls	r2, r2, #12
    3424:	0b12      	lsrs	r2, r2, #12
    3426:	46ac      	mov	ip, r5
    3428:	4688      	mov	r8, r1
    342a:	4c8e      	ldr	r4, [pc, #568]	; (3664 <__aeabi_ddiv+0x664>)
    342c:	e6b6      	b.n	319c <__aeabi_ddiv+0x19c>
    342e:	464b      	mov	r3, r9
    3430:	431a      	orrs	r2, r3
    3432:	0312      	lsls	r2, r2, #12
    3434:	0b12      	lsrs	r2, r2, #12
    3436:	46bc      	mov	ip, r7
    3438:	4c8a      	ldr	r4, [pc, #552]	; (3664 <__aeabi_ddiv+0x664>)
    343a:	e6af      	b.n	319c <__aeabi_ddiv+0x19c>
    343c:	0003      	movs	r3, r0
    343e:	465a      	mov	r2, fp
    3440:	3b28      	subs	r3, #40	; 0x28
    3442:	409a      	lsls	r2, r3
    3444:	2300      	movs	r3, #0
    3446:	4691      	mov	r9, r2
    3448:	4698      	mov	r8, r3
    344a:	e657      	b.n	30fc <__aeabi_ddiv+0xfc>
    344c:	4658      	mov	r0, fp
    344e:	f001 f92b 	bl	46a8 <__clzsi2>
    3452:	3020      	adds	r0, #32
    3454:	e640      	b.n	30d8 <__aeabi_ddiv+0xd8>
    3456:	0003      	movs	r3, r0
    3458:	4652      	mov	r2, sl
    345a:	3b28      	subs	r3, #40	; 0x28
    345c:	409a      	lsls	r2, r3
    345e:	2100      	movs	r1, #0
    3460:	4693      	mov	fp, r2
    3462:	e677      	b.n	3154 <__aeabi_ddiv+0x154>
    3464:	f001 f920 	bl	46a8 <__clzsi2>
    3468:	3020      	adds	r0, #32
    346a:	e65f      	b.n	312c <__aeabi_ddiv+0x12c>
    346c:	4588      	cmp	r8, r1
    346e:	d200      	bcs.n	3472 <__aeabi_ddiv+0x472>
    3470:	e6c7      	b.n	3202 <__aeabi_ddiv+0x202>
    3472:	464b      	mov	r3, r9
    3474:	07de      	lsls	r6, r3, #31
    3476:	085d      	lsrs	r5, r3, #1
    3478:	4643      	mov	r3, r8
    347a:	085b      	lsrs	r3, r3, #1
    347c:	431e      	orrs	r6, r3
    347e:	4643      	mov	r3, r8
    3480:	07db      	lsls	r3, r3, #31
    3482:	469a      	mov	sl, r3
    3484:	e6c2      	b.n	320c <__aeabi_ddiv+0x20c>
    3486:	2500      	movs	r5, #0
    3488:	4592      	cmp	sl, r2
    348a:	d300      	bcc.n	348e <__aeabi_ddiv+0x48e>
    348c:	e733      	b.n	32f6 <__aeabi_ddiv+0x2f6>
    348e:	9e03      	ldr	r6, [sp, #12]
    3490:	4659      	mov	r1, fp
    3492:	46b4      	mov	ip, r6
    3494:	44e2      	add	sl, ip
    3496:	45b2      	cmp	sl, r6
    3498:	41ad      	sbcs	r5, r5
    349a:	426d      	negs	r5, r5
    349c:	4445      	add	r5, r8
    349e:	18eb      	adds	r3, r5, r3
    34a0:	3901      	subs	r1, #1
    34a2:	4598      	cmp	r8, r3
    34a4:	d207      	bcs.n	34b6 <__aeabi_ddiv+0x4b6>
    34a6:	4298      	cmp	r0, r3
    34a8:	d900      	bls.n	34ac <__aeabi_ddiv+0x4ac>
    34aa:	e07f      	b.n	35ac <__aeabi_ddiv+0x5ac>
    34ac:	d100      	bne.n	34b0 <__aeabi_ddiv+0x4b0>
    34ae:	e0bc      	b.n	362a <__aeabi_ddiv+0x62a>
    34b0:	1a1d      	subs	r5, r3, r0
    34b2:	468b      	mov	fp, r1
    34b4:	e71f      	b.n	32f6 <__aeabi_ddiv+0x2f6>
    34b6:	4598      	cmp	r8, r3
    34b8:	d1fa      	bne.n	34b0 <__aeabi_ddiv+0x4b0>
    34ba:	9d03      	ldr	r5, [sp, #12]
    34bc:	4555      	cmp	r5, sl
    34be:	d9f2      	bls.n	34a6 <__aeabi_ddiv+0x4a6>
    34c0:	4643      	mov	r3, r8
    34c2:	468b      	mov	fp, r1
    34c4:	1a1d      	subs	r5, r3, r0
    34c6:	e716      	b.n	32f6 <__aeabi_ddiv+0x2f6>
    34c8:	469b      	mov	fp, r3
    34ca:	e6ca      	b.n	3262 <__aeabi_ddiv+0x262>
    34cc:	0015      	movs	r5, r2
    34ce:	e6e7      	b.n	32a0 <__aeabi_ddiv+0x2a0>
    34d0:	465a      	mov	r2, fp
    34d2:	08c9      	lsrs	r1, r1, #3
    34d4:	0752      	lsls	r2, r2, #29
    34d6:	430a      	orrs	r2, r1
    34d8:	055b      	lsls	r3, r3, #21
    34da:	4690      	mov	r8, r2
    34dc:	0d5c      	lsrs	r4, r3, #21
    34de:	465a      	mov	r2, fp
    34e0:	2301      	movs	r3, #1
    34e2:	9902      	ldr	r1, [sp, #8]
    34e4:	0252      	lsls	r2, r2, #9
    34e6:	4019      	ands	r1, r3
    34e8:	0b12      	lsrs	r2, r2, #12
    34ea:	468c      	mov	ip, r1
    34ec:	e656      	b.n	319c <__aeabi_ddiv+0x19c>
    34ee:	2b00      	cmp	r3, #0
    34f0:	d100      	bne.n	34f4 <__aeabi_ddiv+0x4f4>
    34f2:	e76f      	b.n	33d4 <__aeabi_ddiv+0x3d4>
    34f4:	4446      	add	r6, r8
    34f6:	1e4a      	subs	r2, r1, #1
    34f8:	45b0      	cmp	r8, r6
    34fa:	d929      	bls.n	3550 <__aeabi_ddiv+0x550>
    34fc:	0011      	movs	r1, r2
    34fe:	4286      	cmp	r6, r0
    3500:	d000      	beq.n	3504 <__aeabi_ddiv+0x504>
    3502:	e765      	b.n	33d0 <__aeabi_ddiv+0x3d0>
    3504:	9a03      	ldr	r2, [sp, #12]
    3506:	4293      	cmp	r3, r2
    3508:	d000      	beq.n	350c <__aeabi_ddiv+0x50c>
    350a:	e761      	b.n	33d0 <__aeabi_ddiv+0x3d0>
    350c:	e762      	b.n	33d4 <__aeabi_ddiv+0x3d4>
    350e:	2101      	movs	r1, #1
    3510:	4249      	negs	r1, r1
    3512:	2001      	movs	r0, #1
    3514:	1ac2      	subs	r2, r0, r3
    3516:	2a38      	cmp	r2, #56	; 0x38
    3518:	dd21      	ble.n	355e <__aeabi_ddiv+0x55e>
    351a:	9b02      	ldr	r3, [sp, #8]
    351c:	4003      	ands	r3, r0
    351e:	469c      	mov	ip, r3
    3520:	e638      	b.n	3194 <__aeabi_ddiv+0x194>
    3522:	220f      	movs	r2, #15
    3524:	400a      	ands	r2, r1
    3526:	2a04      	cmp	r2, #4
    3528:	d100      	bne.n	352c <__aeabi_ddiv+0x52c>
    352a:	e75b      	b.n	33e4 <__aeabi_ddiv+0x3e4>
    352c:	000a      	movs	r2, r1
    352e:	1d11      	adds	r1, r2, #4
    3530:	4291      	cmp	r1, r2
    3532:	4192      	sbcs	r2, r2
    3534:	4252      	negs	r2, r2
    3536:	4493      	add	fp, r2
    3538:	e754      	b.n	33e4 <__aeabi_ddiv+0x3e4>
    353a:	4b47      	ldr	r3, [pc, #284]	; (3658 <__aeabi_ddiv+0x658>)
    353c:	18e3      	adds	r3, r4, r3
    353e:	2b00      	cmp	r3, #0
    3540:	dde5      	ble.n	350e <__aeabi_ddiv+0x50e>
    3542:	2201      	movs	r2, #1
    3544:	4252      	negs	r2, r2
    3546:	e7f2      	b.n	352e <__aeabi_ddiv+0x52e>
    3548:	001d      	movs	r5, r3
    354a:	e6fa      	b.n	3342 <__aeabi_ddiv+0x342>
    354c:	469a      	mov	sl, r3
    354e:	e71c      	b.n	338a <__aeabi_ddiv+0x38a>
    3550:	42b0      	cmp	r0, r6
    3552:	d839      	bhi.n	35c8 <__aeabi_ddiv+0x5c8>
    3554:	d06e      	beq.n	3634 <__aeabi_ddiv+0x634>
    3556:	0011      	movs	r1, r2
    3558:	e73a      	b.n	33d0 <__aeabi_ddiv+0x3d0>
    355a:	9302      	str	r3, [sp, #8]
    355c:	e73a      	b.n	33d4 <__aeabi_ddiv+0x3d4>
    355e:	2a1f      	cmp	r2, #31
    3560:	dc3c      	bgt.n	35dc <__aeabi_ddiv+0x5dc>
    3562:	2320      	movs	r3, #32
    3564:	1a9b      	subs	r3, r3, r2
    3566:	000c      	movs	r4, r1
    3568:	4658      	mov	r0, fp
    356a:	4099      	lsls	r1, r3
    356c:	4098      	lsls	r0, r3
    356e:	1e4b      	subs	r3, r1, #1
    3570:	4199      	sbcs	r1, r3
    3572:	465b      	mov	r3, fp
    3574:	40d4      	lsrs	r4, r2
    3576:	40d3      	lsrs	r3, r2
    3578:	4320      	orrs	r0, r4
    357a:	4308      	orrs	r0, r1
    357c:	001a      	movs	r2, r3
    357e:	0743      	lsls	r3, r0, #29
    3580:	d009      	beq.n	3596 <__aeabi_ddiv+0x596>
    3582:	230f      	movs	r3, #15
    3584:	4003      	ands	r3, r0
    3586:	2b04      	cmp	r3, #4
    3588:	d005      	beq.n	3596 <__aeabi_ddiv+0x596>
    358a:	0001      	movs	r1, r0
    358c:	1d08      	adds	r0, r1, #4
    358e:	4288      	cmp	r0, r1
    3590:	419b      	sbcs	r3, r3
    3592:	425b      	negs	r3, r3
    3594:	18d2      	adds	r2, r2, r3
    3596:	0213      	lsls	r3, r2, #8
    3598:	d53a      	bpl.n	3610 <__aeabi_ddiv+0x610>
    359a:	2301      	movs	r3, #1
    359c:	9a02      	ldr	r2, [sp, #8]
    359e:	2401      	movs	r4, #1
    35a0:	401a      	ands	r2, r3
    35a2:	2300      	movs	r3, #0
    35a4:	4694      	mov	ip, r2
    35a6:	4698      	mov	r8, r3
    35a8:	2200      	movs	r2, #0
    35aa:	e5f7      	b.n	319c <__aeabi_ddiv+0x19c>
    35ac:	2102      	movs	r1, #2
    35ae:	4249      	negs	r1, r1
    35b0:	468c      	mov	ip, r1
    35b2:	9d03      	ldr	r5, [sp, #12]
    35b4:	44e3      	add	fp, ip
    35b6:	46ac      	mov	ip, r5
    35b8:	44e2      	add	sl, ip
    35ba:	45aa      	cmp	sl, r5
    35bc:	41ad      	sbcs	r5, r5
    35be:	426d      	negs	r5, r5
    35c0:	4445      	add	r5, r8
    35c2:	18ed      	adds	r5, r5, r3
    35c4:	1a2d      	subs	r5, r5, r0
    35c6:	e696      	b.n	32f6 <__aeabi_ddiv+0x2f6>
    35c8:	1e8a      	subs	r2, r1, #2
    35ca:	9903      	ldr	r1, [sp, #12]
    35cc:	004d      	lsls	r5, r1, #1
    35ce:	428d      	cmp	r5, r1
    35d0:	4189      	sbcs	r1, r1
    35d2:	4249      	negs	r1, r1
    35d4:	4441      	add	r1, r8
    35d6:	1876      	adds	r6, r6, r1
    35d8:	9503      	str	r5, [sp, #12]
    35da:	e78f      	b.n	34fc <__aeabi_ddiv+0x4fc>
    35dc:	201f      	movs	r0, #31
    35de:	4240      	negs	r0, r0
    35e0:	1ac3      	subs	r3, r0, r3
    35e2:	4658      	mov	r0, fp
    35e4:	40d8      	lsrs	r0, r3
    35e6:	0003      	movs	r3, r0
    35e8:	2a20      	cmp	r2, #32
    35ea:	d028      	beq.n	363e <__aeabi_ddiv+0x63e>
    35ec:	2040      	movs	r0, #64	; 0x40
    35ee:	465d      	mov	r5, fp
    35f0:	1a82      	subs	r2, r0, r2
    35f2:	4095      	lsls	r5, r2
    35f4:	4329      	orrs	r1, r5
    35f6:	1e4a      	subs	r2, r1, #1
    35f8:	4191      	sbcs	r1, r2
    35fa:	4319      	orrs	r1, r3
    35fc:	2307      	movs	r3, #7
    35fe:	2200      	movs	r2, #0
    3600:	400b      	ands	r3, r1
    3602:	d009      	beq.n	3618 <__aeabi_ddiv+0x618>
    3604:	230f      	movs	r3, #15
    3606:	2200      	movs	r2, #0
    3608:	400b      	ands	r3, r1
    360a:	0008      	movs	r0, r1
    360c:	2b04      	cmp	r3, #4
    360e:	d1bd      	bne.n	358c <__aeabi_ddiv+0x58c>
    3610:	0001      	movs	r1, r0
    3612:	0753      	lsls	r3, r2, #29
    3614:	0252      	lsls	r2, r2, #9
    3616:	0b12      	lsrs	r2, r2, #12
    3618:	08c9      	lsrs	r1, r1, #3
    361a:	4319      	orrs	r1, r3
    361c:	2301      	movs	r3, #1
    361e:	4688      	mov	r8, r1
    3620:	9902      	ldr	r1, [sp, #8]
    3622:	2400      	movs	r4, #0
    3624:	4019      	ands	r1, r3
    3626:	468c      	mov	ip, r1
    3628:	e5b8      	b.n	319c <__aeabi_ddiv+0x19c>
    362a:	4552      	cmp	r2, sl
    362c:	d8be      	bhi.n	35ac <__aeabi_ddiv+0x5ac>
    362e:	468b      	mov	fp, r1
    3630:	2500      	movs	r5, #0
    3632:	e660      	b.n	32f6 <__aeabi_ddiv+0x2f6>
    3634:	9d03      	ldr	r5, [sp, #12]
    3636:	429d      	cmp	r5, r3
    3638:	d3c6      	bcc.n	35c8 <__aeabi_ddiv+0x5c8>
    363a:	0011      	movs	r1, r2
    363c:	e762      	b.n	3504 <__aeabi_ddiv+0x504>
    363e:	2500      	movs	r5, #0
    3640:	e7d8      	b.n	35f4 <__aeabi_ddiv+0x5f4>
    3642:	2280      	movs	r2, #128	; 0x80
    3644:	465b      	mov	r3, fp
    3646:	0312      	lsls	r2, r2, #12
    3648:	431a      	orrs	r2, r3
    364a:	9b01      	ldr	r3, [sp, #4]
    364c:	0312      	lsls	r2, r2, #12
    364e:	0b12      	lsrs	r2, r2, #12
    3650:	469c      	mov	ip, r3
    3652:	4688      	mov	r8, r1
    3654:	4c03      	ldr	r4, [pc, #12]	; (3664 <__aeabi_ddiv+0x664>)
    3656:	e5a1      	b.n	319c <__aeabi_ddiv+0x19c>
    3658:	000003ff 	.word	0x000003ff
    365c:	feffffff 	.word	0xfeffffff
    3660:	000007fe 	.word	0x000007fe
    3664:	000007ff 	.word	0x000007ff

00003668 <__eqdf2>:
    3668:	b5f0      	push	{r4, r5, r6, r7, lr}
    366a:	464f      	mov	r7, r9
    366c:	4646      	mov	r6, r8
    366e:	46d6      	mov	lr, sl
    3670:	005c      	lsls	r4, r3, #1
    3672:	b5c0      	push	{r6, r7, lr}
    3674:	031f      	lsls	r7, r3, #12
    3676:	0fdb      	lsrs	r3, r3, #31
    3678:	469a      	mov	sl, r3
    367a:	4b17      	ldr	r3, [pc, #92]	; (36d8 <__eqdf2+0x70>)
    367c:	030e      	lsls	r6, r1, #12
    367e:	004d      	lsls	r5, r1, #1
    3680:	4684      	mov	ip, r0
    3682:	4680      	mov	r8, r0
    3684:	0b36      	lsrs	r6, r6, #12
    3686:	0d6d      	lsrs	r5, r5, #21
    3688:	0fc9      	lsrs	r1, r1, #31
    368a:	4691      	mov	r9, r2
    368c:	0b3f      	lsrs	r7, r7, #12
    368e:	0d64      	lsrs	r4, r4, #21
    3690:	2001      	movs	r0, #1
    3692:	429d      	cmp	r5, r3
    3694:	d008      	beq.n	36a8 <__eqdf2+0x40>
    3696:	429c      	cmp	r4, r3
    3698:	d001      	beq.n	369e <__eqdf2+0x36>
    369a:	42a5      	cmp	r5, r4
    369c:	d00b      	beq.n	36b6 <__eqdf2+0x4e>
    369e:	bc1c      	pop	{r2, r3, r4}
    36a0:	4690      	mov	r8, r2
    36a2:	4699      	mov	r9, r3
    36a4:	46a2      	mov	sl, r4
    36a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36a8:	4663      	mov	r3, ip
    36aa:	4333      	orrs	r3, r6
    36ac:	d1f7      	bne.n	369e <__eqdf2+0x36>
    36ae:	42ac      	cmp	r4, r5
    36b0:	d1f5      	bne.n	369e <__eqdf2+0x36>
    36b2:	433a      	orrs	r2, r7
    36b4:	d1f3      	bne.n	369e <__eqdf2+0x36>
    36b6:	2001      	movs	r0, #1
    36b8:	42be      	cmp	r6, r7
    36ba:	d1f0      	bne.n	369e <__eqdf2+0x36>
    36bc:	45c8      	cmp	r8, r9
    36be:	d1ee      	bne.n	369e <__eqdf2+0x36>
    36c0:	4551      	cmp	r1, sl
    36c2:	d007      	beq.n	36d4 <__eqdf2+0x6c>
    36c4:	2d00      	cmp	r5, #0
    36c6:	d1ea      	bne.n	369e <__eqdf2+0x36>
    36c8:	4663      	mov	r3, ip
    36ca:	431e      	orrs	r6, r3
    36cc:	0030      	movs	r0, r6
    36ce:	1e46      	subs	r6, r0, #1
    36d0:	41b0      	sbcs	r0, r6
    36d2:	e7e4      	b.n	369e <__eqdf2+0x36>
    36d4:	2000      	movs	r0, #0
    36d6:	e7e2      	b.n	369e <__eqdf2+0x36>
    36d8:	000007ff 	.word	0x000007ff

000036dc <__gedf2>:
    36dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36de:	4645      	mov	r5, r8
    36e0:	46de      	mov	lr, fp
    36e2:	4657      	mov	r7, sl
    36e4:	464e      	mov	r6, r9
    36e6:	b5e0      	push	{r5, r6, r7, lr}
    36e8:	031f      	lsls	r7, r3, #12
    36ea:	0b3d      	lsrs	r5, r7, #12
    36ec:	4f2c      	ldr	r7, [pc, #176]	; (37a0 <__gedf2+0xc4>)
    36ee:	030e      	lsls	r6, r1, #12
    36f0:	004c      	lsls	r4, r1, #1
    36f2:	46ab      	mov	fp, r5
    36f4:	005d      	lsls	r5, r3, #1
    36f6:	4684      	mov	ip, r0
    36f8:	0b36      	lsrs	r6, r6, #12
    36fa:	0d64      	lsrs	r4, r4, #21
    36fc:	0fc9      	lsrs	r1, r1, #31
    36fe:	4690      	mov	r8, r2
    3700:	0d6d      	lsrs	r5, r5, #21
    3702:	0fdb      	lsrs	r3, r3, #31
    3704:	42bc      	cmp	r4, r7
    3706:	d02a      	beq.n	375e <__gedf2+0x82>
    3708:	4f25      	ldr	r7, [pc, #148]	; (37a0 <__gedf2+0xc4>)
    370a:	42bd      	cmp	r5, r7
    370c:	d02d      	beq.n	376a <__gedf2+0x8e>
    370e:	2c00      	cmp	r4, #0
    3710:	d10f      	bne.n	3732 <__gedf2+0x56>
    3712:	4330      	orrs	r0, r6
    3714:	0007      	movs	r7, r0
    3716:	4681      	mov	r9, r0
    3718:	4278      	negs	r0, r7
    371a:	4178      	adcs	r0, r7
    371c:	b2c0      	uxtb	r0, r0
    371e:	2d00      	cmp	r5, #0
    3720:	d117      	bne.n	3752 <__gedf2+0x76>
    3722:	465f      	mov	r7, fp
    3724:	433a      	orrs	r2, r7
    3726:	d114      	bne.n	3752 <__gedf2+0x76>
    3728:	464b      	mov	r3, r9
    372a:	2000      	movs	r0, #0
    372c:	2b00      	cmp	r3, #0
    372e:	d00a      	beq.n	3746 <__gedf2+0x6a>
    3730:	e006      	b.n	3740 <__gedf2+0x64>
    3732:	2d00      	cmp	r5, #0
    3734:	d102      	bne.n	373c <__gedf2+0x60>
    3736:	4658      	mov	r0, fp
    3738:	4302      	orrs	r2, r0
    373a:	d001      	beq.n	3740 <__gedf2+0x64>
    373c:	4299      	cmp	r1, r3
    373e:	d018      	beq.n	3772 <__gedf2+0x96>
    3740:	4248      	negs	r0, r1
    3742:	2101      	movs	r1, #1
    3744:	4308      	orrs	r0, r1
    3746:	bc3c      	pop	{r2, r3, r4, r5}
    3748:	4690      	mov	r8, r2
    374a:	4699      	mov	r9, r3
    374c:	46a2      	mov	sl, r4
    374e:	46ab      	mov	fp, r5
    3750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3752:	2800      	cmp	r0, #0
    3754:	d0f2      	beq.n	373c <__gedf2+0x60>
    3756:	2001      	movs	r0, #1
    3758:	3b01      	subs	r3, #1
    375a:	4318      	orrs	r0, r3
    375c:	e7f3      	b.n	3746 <__gedf2+0x6a>
    375e:	0037      	movs	r7, r6
    3760:	4307      	orrs	r7, r0
    3762:	d0d1      	beq.n	3708 <__gedf2+0x2c>
    3764:	2002      	movs	r0, #2
    3766:	4240      	negs	r0, r0
    3768:	e7ed      	b.n	3746 <__gedf2+0x6a>
    376a:	465f      	mov	r7, fp
    376c:	4317      	orrs	r7, r2
    376e:	d0ce      	beq.n	370e <__gedf2+0x32>
    3770:	e7f8      	b.n	3764 <__gedf2+0x88>
    3772:	42ac      	cmp	r4, r5
    3774:	dce4      	bgt.n	3740 <__gedf2+0x64>
    3776:	da03      	bge.n	3780 <__gedf2+0xa4>
    3778:	1e48      	subs	r0, r1, #1
    377a:	2101      	movs	r1, #1
    377c:	4308      	orrs	r0, r1
    377e:	e7e2      	b.n	3746 <__gedf2+0x6a>
    3780:	455e      	cmp	r6, fp
    3782:	d8dd      	bhi.n	3740 <__gedf2+0x64>
    3784:	d006      	beq.n	3794 <__gedf2+0xb8>
    3786:	2000      	movs	r0, #0
    3788:	455e      	cmp	r6, fp
    378a:	d2dc      	bcs.n	3746 <__gedf2+0x6a>
    378c:	2301      	movs	r3, #1
    378e:	1e48      	subs	r0, r1, #1
    3790:	4318      	orrs	r0, r3
    3792:	e7d8      	b.n	3746 <__gedf2+0x6a>
    3794:	45c4      	cmp	ip, r8
    3796:	d8d3      	bhi.n	3740 <__gedf2+0x64>
    3798:	2000      	movs	r0, #0
    379a:	45c4      	cmp	ip, r8
    379c:	d3f6      	bcc.n	378c <__gedf2+0xb0>
    379e:	e7d2      	b.n	3746 <__gedf2+0x6a>
    37a0:	000007ff 	.word	0x000007ff

000037a4 <__ledf2>:
    37a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37a6:	464e      	mov	r6, r9
    37a8:	4645      	mov	r5, r8
    37aa:	46de      	mov	lr, fp
    37ac:	4657      	mov	r7, sl
    37ae:	005c      	lsls	r4, r3, #1
    37b0:	b5e0      	push	{r5, r6, r7, lr}
    37b2:	031f      	lsls	r7, r3, #12
    37b4:	0fdb      	lsrs	r3, r3, #31
    37b6:	4699      	mov	r9, r3
    37b8:	4b2a      	ldr	r3, [pc, #168]	; (3864 <__ledf2+0xc0>)
    37ba:	030e      	lsls	r6, r1, #12
    37bc:	004d      	lsls	r5, r1, #1
    37be:	0fc9      	lsrs	r1, r1, #31
    37c0:	4684      	mov	ip, r0
    37c2:	0b36      	lsrs	r6, r6, #12
    37c4:	0d6d      	lsrs	r5, r5, #21
    37c6:	468b      	mov	fp, r1
    37c8:	4690      	mov	r8, r2
    37ca:	0b3f      	lsrs	r7, r7, #12
    37cc:	0d64      	lsrs	r4, r4, #21
    37ce:	429d      	cmp	r5, r3
    37d0:	d020      	beq.n	3814 <__ledf2+0x70>
    37d2:	4b24      	ldr	r3, [pc, #144]	; (3864 <__ledf2+0xc0>)
    37d4:	429c      	cmp	r4, r3
    37d6:	d022      	beq.n	381e <__ledf2+0x7a>
    37d8:	2d00      	cmp	r5, #0
    37da:	d112      	bne.n	3802 <__ledf2+0x5e>
    37dc:	4330      	orrs	r0, r6
    37de:	4243      	negs	r3, r0
    37e0:	4143      	adcs	r3, r0
    37e2:	b2db      	uxtb	r3, r3
    37e4:	2c00      	cmp	r4, #0
    37e6:	d01f      	beq.n	3828 <__ledf2+0x84>
    37e8:	2b00      	cmp	r3, #0
    37ea:	d00c      	beq.n	3806 <__ledf2+0x62>
    37ec:	464b      	mov	r3, r9
    37ee:	2001      	movs	r0, #1
    37f0:	3b01      	subs	r3, #1
    37f2:	4303      	orrs	r3, r0
    37f4:	0018      	movs	r0, r3
    37f6:	bc3c      	pop	{r2, r3, r4, r5}
    37f8:	4690      	mov	r8, r2
    37fa:	4699      	mov	r9, r3
    37fc:	46a2      	mov	sl, r4
    37fe:	46ab      	mov	fp, r5
    3800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3802:	2c00      	cmp	r4, #0
    3804:	d016      	beq.n	3834 <__ledf2+0x90>
    3806:	45cb      	cmp	fp, r9
    3808:	d017      	beq.n	383a <__ledf2+0x96>
    380a:	465b      	mov	r3, fp
    380c:	4259      	negs	r1, r3
    380e:	2301      	movs	r3, #1
    3810:	430b      	orrs	r3, r1
    3812:	e7ef      	b.n	37f4 <__ledf2+0x50>
    3814:	0031      	movs	r1, r6
    3816:	2302      	movs	r3, #2
    3818:	4301      	orrs	r1, r0
    381a:	d1eb      	bne.n	37f4 <__ledf2+0x50>
    381c:	e7d9      	b.n	37d2 <__ledf2+0x2e>
    381e:	0039      	movs	r1, r7
    3820:	2302      	movs	r3, #2
    3822:	4311      	orrs	r1, r2
    3824:	d1e6      	bne.n	37f4 <__ledf2+0x50>
    3826:	e7d7      	b.n	37d8 <__ledf2+0x34>
    3828:	433a      	orrs	r2, r7
    382a:	d1dd      	bne.n	37e8 <__ledf2+0x44>
    382c:	2300      	movs	r3, #0
    382e:	2800      	cmp	r0, #0
    3830:	d0e0      	beq.n	37f4 <__ledf2+0x50>
    3832:	e7ea      	b.n	380a <__ledf2+0x66>
    3834:	433a      	orrs	r2, r7
    3836:	d1e6      	bne.n	3806 <__ledf2+0x62>
    3838:	e7e7      	b.n	380a <__ledf2+0x66>
    383a:	42a5      	cmp	r5, r4
    383c:	dce5      	bgt.n	380a <__ledf2+0x66>
    383e:	db05      	blt.n	384c <__ledf2+0xa8>
    3840:	42be      	cmp	r6, r7
    3842:	d8e2      	bhi.n	380a <__ledf2+0x66>
    3844:	d007      	beq.n	3856 <__ledf2+0xb2>
    3846:	2300      	movs	r3, #0
    3848:	42be      	cmp	r6, r7
    384a:	d2d3      	bcs.n	37f4 <__ledf2+0x50>
    384c:	4659      	mov	r1, fp
    384e:	2301      	movs	r3, #1
    3850:	3901      	subs	r1, #1
    3852:	430b      	orrs	r3, r1
    3854:	e7ce      	b.n	37f4 <__ledf2+0x50>
    3856:	45c4      	cmp	ip, r8
    3858:	d8d7      	bhi.n	380a <__ledf2+0x66>
    385a:	2300      	movs	r3, #0
    385c:	45c4      	cmp	ip, r8
    385e:	d3f5      	bcc.n	384c <__ledf2+0xa8>
    3860:	e7c8      	b.n	37f4 <__ledf2+0x50>
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	000007ff 	.word	0x000007ff

00003868 <__aeabi_dmul>:
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
    386a:	4657      	mov	r7, sl
    386c:	4645      	mov	r5, r8
    386e:	46de      	mov	lr, fp
    3870:	464e      	mov	r6, r9
    3872:	b5e0      	push	{r5, r6, r7, lr}
    3874:	030c      	lsls	r4, r1, #12
    3876:	4698      	mov	r8, r3
    3878:	004e      	lsls	r6, r1, #1
    387a:	0b23      	lsrs	r3, r4, #12
    387c:	b087      	sub	sp, #28
    387e:	0007      	movs	r7, r0
    3880:	4692      	mov	sl, r2
    3882:	469b      	mov	fp, r3
    3884:	0d76      	lsrs	r6, r6, #21
    3886:	0fcd      	lsrs	r5, r1, #31
    3888:	2e00      	cmp	r6, #0
    388a:	d06b      	beq.n	3964 <__aeabi_dmul+0xfc>
    388c:	4b6d      	ldr	r3, [pc, #436]	; (3a44 <__aeabi_dmul+0x1dc>)
    388e:	429e      	cmp	r6, r3
    3890:	d035      	beq.n	38fe <__aeabi_dmul+0x96>
    3892:	2480      	movs	r4, #128	; 0x80
    3894:	465b      	mov	r3, fp
    3896:	0f42      	lsrs	r2, r0, #29
    3898:	0424      	lsls	r4, r4, #16
    389a:	00db      	lsls	r3, r3, #3
    389c:	4314      	orrs	r4, r2
    389e:	431c      	orrs	r4, r3
    38a0:	00c3      	lsls	r3, r0, #3
    38a2:	4699      	mov	r9, r3
    38a4:	4b68      	ldr	r3, [pc, #416]	; (3a48 <__aeabi_dmul+0x1e0>)
    38a6:	46a3      	mov	fp, r4
    38a8:	469c      	mov	ip, r3
    38aa:	2300      	movs	r3, #0
    38ac:	2700      	movs	r7, #0
    38ae:	4466      	add	r6, ip
    38b0:	9302      	str	r3, [sp, #8]
    38b2:	4643      	mov	r3, r8
    38b4:	031c      	lsls	r4, r3, #12
    38b6:	005a      	lsls	r2, r3, #1
    38b8:	0fdb      	lsrs	r3, r3, #31
    38ba:	4650      	mov	r0, sl
    38bc:	0b24      	lsrs	r4, r4, #12
    38be:	0d52      	lsrs	r2, r2, #21
    38c0:	4698      	mov	r8, r3
    38c2:	d100      	bne.n	38c6 <__aeabi_dmul+0x5e>
    38c4:	e076      	b.n	39b4 <__aeabi_dmul+0x14c>
    38c6:	4b5f      	ldr	r3, [pc, #380]	; (3a44 <__aeabi_dmul+0x1dc>)
    38c8:	429a      	cmp	r2, r3
    38ca:	d06d      	beq.n	39a8 <__aeabi_dmul+0x140>
    38cc:	2380      	movs	r3, #128	; 0x80
    38ce:	0f41      	lsrs	r1, r0, #29
    38d0:	041b      	lsls	r3, r3, #16
    38d2:	430b      	orrs	r3, r1
    38d4:	495c      	ldr	r1, [pc, #368]	; (3a48 <__aeabi_dmul+0x1e0>)
    38d6:	00e4      	lsls	r4, r4, #3
    38d8:	468c      	mov	ip, r1
    38da:	431c      	orrs	r4, r3
    38dc:	00c3      	lsls	r3, r0, #3
    38de:	2000      	movs	r0, #0
    38e0:	4462      	add	r2, ip
    38e2:	4641      	mov	r1, r8
    38e4:	18b6      	adds	r6, r6, r2
    38e6:	4069      	eors	r1, r5
    38e8:	1c72      	adds	r2, r6, #1
    38ea:	9101      	str	r1, [sp, #4]
    38ec:	4694      	mov	ip, r2
    38ee:	4307      	orrs	r7, r0
    38f0:	2f0f      	cmp	r7, #15
    38f2:	d900      	bls.n	38f6 <__aeabi_dmul+0x8e>
    38f4:	e0b0      	b.n	3a58 <__aeabi_dmul+0x1f0>
    38f6:	4a55      	ldr	r2, [pc, #340]	; (3a4c <__aeabi_dmul+0x1e4>)
    38f8:	00bf      	lsls	r7, r7, #2
    38fa:	59d2      	ldr	r2, [r2, r7]
    38fc:	4697      	mov	pc, r2
    38fe:	465b      	mov	r3, fp
    3900:	4303      	orrs	r3, r0
    3902:	4699      	mov	r9, r3
    3904:	d000      	beq.n	3908 <__aeabi_dmul+0xa0>
    3906:	e087      	b.n	3a18 <__aeabi_dmul+0x1b0>
    3908:	2300      	movs	r3, #0
    390a:	469b      	mov	fp, r3
    390c:	3302      	adds	r3, #2
    390e:	2708      	movs	r7, #8
    3910:	9302      	str	r3, [sp, #8]
    3912:	e7ce      	b.n	38b2 <__aeabi_dmul+0x4a>
    3914:	4642      	mov	r2, r8
    3916:	9201      	str	r2, [sp, #4]
    3918:	2802      	cmp	r0, #2
    391a:	d067      	beq.n	39ec <__aeabi_dmul+0x184>
    391c:	2803      	cmp	r0, #3
    391e:	d100      	bne.n	3922 <__aeabi_dmul+0xba>
    3920:	e20e      	b.n	3d40 <__aeabi_dmul+0x4d8>
    3922:	2801      	cmp	r0, #1
    3924:	d000      	beq.n	3928 <__aeabi_dmul+0xc0>
    3926:	e162      	b.n	3bee <__aeabi_dmul+0x386>
    3928:	2300      	movs	r3, #0
    392a:	2400      	movs	r4, #0
    392c:	2200      	movs	r2, #0
    392e:	4699      	mov	r9, r3
    3930:	9901      	ldr	r1, [sp, #4]
    3932:	4001      	ands	r1, r0
    3934:	b2cd      	uxtb	r5, r1
    3936:	2100      	movs	r1, #0
    3938:	0312      	lsls	r2, r2, #12
    393a:	0d0b      	lsrs	r3, r1, #20
    393c:	0b12      	lsrs	r2, r2, #12
    393e:	051b      	lsls	r3, r3, #20
    3940:	4313      	orrs	r3, r2
    3942:	4a43      	ldr	r2, [pc, #268]	; (3a50 <__aeabi_dmul+0x1e8>)
    3944:	0524      	lsls	r4, r4, #20
    3946:	4013      	ands	r3, r2
    3948:	431c      	orrs	r4, r3
    394a:	0064      	lsls	r4, r4, #1
    394c:	07ed      	lsls	r5, r5, #31
    394e:	0864      	lsrs	r4, r4, #1
    3950:	432c      	orrs	r4, r5
    3952:	4648      	mov	r0, r9
    3954:	0021      	movs	r1, r4
    3956:	b007      	add	sp, #28
    3958:	bc3c      	pop	{r2, r3, r4, r5}
    395a:	4690      	mov	r8, r2
    395c:	4699      	mov	r9, r3
    395e:	46a2      	mov	sl, r4
    3960:	46ab      	mov	fp, r5
    3962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3964:	4303      	orrs	r3, r0
    3966:	4699      	mov	r9, r3
    3968:	d04f      	beq.n	3a0a <__aeabi_dmul+0x1a2>
    396a:	465b      	mov	r3, fp
    396c:	2b00      	cmp	r3, #0
    396e:	d100      	bne.n	3972 <__aeabi_dmul+0x10a>
    3970:	e189      	b.n	3c86 <__aeabi_dmul+0x41e>
    3972:	4658      	mov	r0, fp
    3974:	f000 fe98 	bl	46a8 <__clzsi2>
    3978:	0003      	movs	r3, r0
    397a:	3b0b      	subs	r3, #11
    397c:	2b1c      	cmp	r3, #28
    397e:	dd00      	ble.n	3982 <__aeabi_dmul+0x11a>
    3980:	e17a      	b.n	3c78 <__aeabi_dmul+0x410>
    3982:	221d      	movs	r2, #29
    3984:	1ad3      	subs	r3, r2, r3
    3986:	003a      	movs	r2, r7
    3988:	0001      	movs	r1, r0
    398a:	465c      	mov	r4, fp
    398c:	40da      	lsrs	r2, r3
    398e:	3908      	subs	r1, #8
    3990:	408c      	lsls	r4, r1
    3992:	0013      	movs	r3, r2
    3994:	408f      	lsls	r7, r1
    3996:	4323      	orrs	r3, r4
    3998:	469b      	mov	fp, r3
    399a:	46b9      	mov	r9, r7
    399c:	2300      	movs	r3, #0
    399e:	4e2d      	ldr	r6, [pc, #180]	; (3a54 <__aeabi_dmul+0x1ec>)
    39a0:	2700      	movs	r7, #0
    39a2:	1a36      	subs	r6, r6, r0
    39a4:	9302      	str	r3, [sp, #8]
    39a6:	e784      	b.n	38b2 <__aeabi_dmul+0x4a>
    39a8:	4653      	mov	r3, sl
    39aa:	4323      	orrs	r3, r4
    39ac:	d12a      	bne.n	3a04 <__aeabi_dmul+0x19c>
    39ae:	2400      	movs	r4, #0
    39b0:	2002      	movs	r0, #2
    39b2:	e796      	b.n	38e2 <__aeabi_dmul+0x7a>
    39b4:	4653      	mov	r3, sl
    39b6:	4323      	orrs	r3, r4
    39b8:	d020      	beq.n	39fc <__aeabi_dmul+0x194>
    39ba:	2c00      	cmp	r4, #0
    39bc:	d100      	bne.n	39c0 <__aeabi_dmul+0x158>
    39be:	e157      	b.n	3c70 <__aeabi_dmul+0x408>
    39c0:	0020      	movs	r0, r4
    39c2:	f000 fe71 	bl	46a8 <__clzsi2>
    39c6:	0003      	movs	r3, r0
    39c8:	3b0b      	subs	r3, #11
    39ca:	2b1c      	cmp	r3, #28
    39cc:	dd00      	ble.n	39d0 <__aeabi_dmul+0x168>
    39ce:	e149      	b.n	3c64 <__aeabi_dmul+0x3fc>
    39d0:	211d      	movs	r1, #29
    39d2:	1acb      	subs	r3, r1, r3
    39d4:	4651      	mov	r1, sl
    39d6:	0002      	movs	r2, r0
    39d8:	40d9      	lsrs	r1, r3
    39da:	4653      	mov	r3, sl
    39dc:	3a08      	subs	r2, #8
    39de:	4094      	lsls	r4, r2
    39e0:	4093      	lsls	r3, r2
    39e2:	430c      	orrs	r4, r1
    39e4:	4a1b      	ldr	r2, [pc, #108]	; (3a54 <__aeabi_dmul+0x1ec>)
    39e6:	1a12      	subs	r2, r2, r0
    39e8:	2000      	movs	r0, #0
    39ea:	e77a      	b.n	38e2 <__aeabi_dmul+0x7a>
    39ec:	2501      	movs	r5, #1
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	4c14      	ldr	r4, [pc, #80]	; (3a44 <__aeabi_dmul+0x1dc>)
    39f2:	401d      	ands	r5, r3
    39f4:	2300      	movs	r3, #0
    39f6:	2200      	movs	r2, #0
    39f8:	4699      	mov	r9, r3
    39fa:	e79c      	b.n	3936 <__aeabi_dmul+0xce>
    39fc:	2400      	movs	r4, #0
    39fe:	2200      	movs	r2, #0
    3a00:	2001      	movs	r0, #1
    3a02:	e76e      	b.n	38e2 <__aeabi_dmul+0x7a>
    3a04:	4653      	mov	r3, sl
    3a06:	2003      	movs	r0, #3
    3a08:	e76b      	b.n	38e2 <__aeabi_dmul+0x7a>
    3a0a:	2300      	movs	r3, #0
    3a0c:	469b      	mov	fp, r3
    3a0e:	3301      	adds	r3, #1
    3a10:	2704      	movs	r7, #4
    3a12:	2600      	movs	r6, #0
    3a14:	9302      	str	r3, [sp, #8]
    3a16:	e74c      	b.n	38b2 <__aeabi_dmul+0x4a>
    3a18:	2303      	movs	r3, #3
    3a1a:	4681      	mov	r9, r0
    3a1c:	270c      	movs	r7, #12
    3a1e:	9302      	str	r3, [sp, #8]
    3a20:	e747      	b.n	38b2 <__aeabi_dmul+0x4a>
    3a22:	2280      	movs	r2, #128	; 0x80
    3a24:	2300      	movs	r3, #0
    3a26:	2500      	movs	r5, #0
    3a28:	0312      	lsls	r2, r2, #12
    3a2a:	4699      	mov	r9, r3
    3a2c:	4c05      	ldr	r4, [pc, #20]	; (3a44 <__aeabi_dmul+0x1dc>)
    3a2e:	e782      	b.n	3936 <__aeabi_dmul+0xce>
    3a30:	465c      	mov	r4, fp
    3a32:	464b      	mov	r3, r9
    3a34:	9802      	ldr	r0, [sp, #8]
    3a36:	e76f      	b.n	3918 <__aeabi_dmul+0xb0>
    3a38:	465c      	mov	r4, fp
    3a3a:	464b      	mov	r3, r9
    3a3c:	9501      	str	r5, [sp, #4]
    3a3e:	9802      	ldr	r0, [sp, #8]
    3a40:	e76a      	b.n	3918 <__aeabi_dmul+0xb0>
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	000007ff 	.word	0x000007ff
    3a48:	fffffc01 	.word	0xfffffc01
    3a4c:	00005f20 	.word	0x00005f20
    3a50:	800fffff 	.word	0x800fffff
    3a54:	fffffc0d 	.word	0xfffffc0d
    3a58:	464a      	mov	r2, r9
    3a5a:	4649      	mov	r1, r9
    3a5c:	0c17      	lsrs	r7, r2, #16
    3a5e:	0c1a      	lsrs	r2, r3, #16
    3a60:	041b      	lsls	r3, r3, #16
    3a62:	0c1b      	lsrs	r3, r3, #16
    3a64:	0408      	lsls	r0, r1, #16
    3a66:	0019      	movs	r1, r3
    3a68:	0c00      	lsrs	r0, r0, #16
    3a6a:	4341      	muls	r1, r0
    3a6c:	0015      	movs	r5, r2
    3a6e:	4688      	mov	r8, r1
    3a70:	0019      	movs	r1, r3
    3a72:	437d      	muls	r5, r7
    3a74:	4379      	muls	r1, r7
    3a76:	9503      	str	r5, [sp, #12]
    3a78:	4689      	mov	r9, r1
    3a7a:	0029      	movs	r1, r5
    3a7c:	0015      	movs	r5, r2
    3a7e:	4345      	muls	r5, r0
    3a80:	444d      	add	r5, r9
    3a82:	9502      	str	r5, [sp, #8]
    3a84:	4645      	mov	r5, r8
    3a86:	0c2d      	lsrs	r5, r5, #16
    3a88:	46aa      	mov	sl, r5
    3a8a:	9d02      	ldr	r5, [sp, #8]
    3a8c:	4455      	add	r5, sl
    3a8e:	45a9      	cmp	r9, r5
    3a90:	d906      	bls.n	3aa0 <__aeabi_dmul+0x238>
    3a92:	468a      	mov	sl, r1
    3a94:	2180      	movs	r1, #128	; 0x80
    3a96:	0249      	lsls	r1, r1, #9
    3a98:	4689      	mov	r9, r1
    3a9a:	44ca      	add	sl, r9
    3a9c:	4651      	mov	r1, sl
    3a9e:	9103      	str	r1, [sp, #12]
    3aa0:	0c29      	lsrs	r1, r5, #16
    3aa2:	9104      	str	r1, [sp, #16]
    3aa4:	4641      	mov	r1, r8
    3aa6:	0409      	lsls	r1, r1, #16
    3aa8:	042d      	lsls	r5, r5, #16
    3aaa:	0c09      	lsrs	r1, r1, #16
    3aac:	4688      	mov	r8, r1
    3aae:	0029      	movs	r1, r5
    3ab0:	0c25      	lsrs	r5, r4, #16
    3ab2:	0424      	lsls	r4, r4, #16
    3ab4:	4441      	add	r1, r8
    3ab6:	0c24      	lsrs	r4, r4, #16
    3ab8:	9105      	str	r1, [sp, #20]
    3aba:	0021      	movs	r1, r4
    3abc:	4341      	muls	r1, r0
    3abe:	4688      	mov	r8, r1
    3ac0:	0021      	movs	r1, r4
    3ac2:	4379      	muls	r1, r7
    3ac4:	468a      	mov	sl, r1
    3ac6:	4368      	muls	r0, r5
    3ac8:	4641      	mov	r1, r8
    3aca:	4450      	add	r0, sl
    3acc:	4681      	mov	r9, r0
    3ace:	0c08      	lsrs	r0, r1, #16
    3ad0:	4448      	add	r0, r9
    3ad2:	436f      	muls	r7, r5
    3ad4:	4582      	cmp	sl, r0
    3ad6:	d903      	bls.n	3ae0 <__aeabi_dmul+0x278>
    3ad8:	2180      	movs	r1, #128	; 0x80
    3ada:	0249      	lsls	r1, r1, #9
    3adc:	4689      	mov	r9, r1
    3ade:	444f      	add	r7, r9
    3ae0:	0c01      	lsrs	r1, r0, #16
    3ae2:	4689      	mov	r9, r1
    3ae4:	0039      	movs	r1, r7
    3ae6:	4449      	add	r1, r9
    3ae8:	9102      	str	r1, [sp, #8]
    3aea:	4641      	mov	r1, r8
    3aec:	040f      	lsls	r7, r1, #16
    3aee:	9904      	ldr	r1, [sp, #16]
    3af0:	0c3f      	lsrs	r7, r7, #16
    3af2:	4688      	mov	r8, r1
    3af4:	0400      	lsls	r0, r0, #16
    3af6:	19c0      	adds	r0, r0, r7
    3af8:	4480      	add	r8, r0
    3afa:	4641      	mov	r1, r8
    3afc:	9104      	str	r1, [sp, #16]
    3afe:	4659      	mov	r1, fp
    3b00:	0c0f      	lsrs	r7, r1, #16
    3b02:	0409      	lsls	r1, r1, #16
    3b04:	0c09      	lsrs	r1, r1, #16
    3b06:	4688      	mov	r8, r1
    3b08:	4359      	muls	r1, r3
    3b0a:	468a      	mov	sl, r1
    3b0c:	0039      	movs	r1, r7
    3b0e:	4351      	muls	r1, r2
    3b10:	4689      	mov	r9, r1
    3b12:	4641      	mov	r1, r8
    3b14:	434a      	muls	r2, r1
    3b16:	4651      	mov	r1, sl
    3b18:	0c09      	lsrs	r1, r1, #16
    3b1a:	468b      	mov	fp, r1
    3b1c:	437b      	muls	r3, r7
    3b1e:	18d2      	adds	r2, r2, r3
    3b20:	445a      	add	r2, fp
    3b22:	4293      	cmp	r3, r2
    3b24:	d903      	bls.n	3b2e <__aeabi_dmul+0x2c6>
    3b26:	2380      	movs	r3, #128	; 0x80
    3b28:	025b      	lsls	r3, r3, #9
    3b2a:	469b      	mov	fp, r3
    3b2c:	44d9      	add	r9, fp
    3b2e:	4651      	mov	r1, sl
    3b30:	0409      	lsls	r1, r1, #16
    3b32:	0c09      	lsrs	r1, r1, #16
    3b34:	468a      	mov	sl, r1
    3b36:	4641      	mov	r1, r8
    3b38:	4361      	muls	r1, r4
    3b3a:	437c      	muls	r4, r7
    3b3c:	0c13      	lsrs	r3, r2, #16
    3b3e:	0412      	lsls	r2, r2, #16
    3b40:	444b      	add	r3, r9
    3b42:	4452      	add	r2, sl
    3b44:	46a1      	mov	r9, r4
    3b46:	468a      	mov	sl, r1
    3b48:	003c      	movs	r4, r7
    3b4a:	4641      	mov	r1, r8
    3b4c:	436c      	muls	r4, r5
    3b4e:	434d      	muls	r5, r1
    3b50:	4651      	mov	r1, sl
    3b52:	444d      	add	r5, r9
    3b54:	0c0f      	lsrs	r7, r1, #16
    3b56:	197d      	adds	r5, r7, r5
    3b58:	45a9      	cmp	r9, r5
    3b5a:	d903      	bls.n	3b64 <__aeabi_dmul+0x2fc>
    3b5c:	2180      	movs	r1, #128	; 0x80
    3b5e:	0249      	lsls	r1, r1, #9
    3b60:	4688      	mov	r8, r1
    3b62:	4444      	add	r4, r8
    3b64:	9f04      	ldr	r7, [sp, #16]
    3b66:	9903      	ldr	r1, [sp, #12]
    3b68:	46b8      	mov	r8, r7
    3b6a:	4441      	add	r1, r8
    3b6c:	468b      	mov	fp, r1
    3b6e:	4583      	cmp	fp, r0
    3b70:	4180      	sbcs	r0, r0
    3b72:	4241      	negs	r1, r0
    3b74:	4688      	mov	r8, r1
    3b76:	4651      	mov	r1, sl
    3b78:	0408      	lsls	r0, r1, #16
    3b7a:	042f      	lsls	r7, r5, #16
    3b7c:	0c00      	lsrs	r0, r0, #16
    3b7e:	183f      	adds	r7, r7, r0
    3b80:	4658      	mov	r0, fp
    3b82:	9902      	ldr	r1, [sp, #8]
    3b84:	1810      	adds	r0, r2, r0
    3b86:	4689      	mov	r9, r1
    3b88:	4290      	cmp	r0, r2
    3b8a:	4192      	sbcs	r2, r2
    3b8c:	444f      	add	r7, r9
    3b8e:	46ba      	mov	sl, r7
    3b90:	4252      	negs	r2, r2
    3b92:	4699      	mov	r9, r3
    3b94:	4693      	mov	fp, r2
    3b96:	44c2      	add	sl, r8
    3b98:	44d1      	add	r9, sl
    3b9a:	44cb      	add	fp, r9
    3b9c:	428f      	cmp	r7, r1
    3b9e:	41bf      	sbcs	r7, r7
    3ba0:	45c2      	cmp	sl, r8
    3ba2:	4189      	sbcs	r1, r1
    3ba4:	4599      	cmp	r9, r3
    3ba6:	419b      	sbcs	r3, r3
    3ba8:	4593      	cmp	fp, r2
    3baa:	4192      	sbcs	r2, r2
    3bac:	427f      	negs	r7, r7
    3bae:	4249      	negs	r1, r1
    3bb0:	0c2d      	lsrs	r5, r5, #16
    3bb2:	4252      	negs	r2, r2
    3bb4:	430f      	orrs	r7, r1
    3bb6:	425b      	negs	r3, r3
    3bb8:	4313      	orrs	r3, r2
    3bba:	197f      	adds	r7, r7, r5
    3bbc:	18ff      	adds	r7, r7, r3
    3bbe:	465b      	mov	r3, fp
    3bc0:	193c      	adds	r4, r7, r4
    3bc2:	0ddb      	lsrs	r3, r3, #23
    3bc4:	9a05      	ldr	r2, [sp, #20]
    3bc6:	0264      	lsls	r4, r4, #9
    3bc8:	431c      	orrs	r4, r3
    3bca:	0243      	lsls	r3, r0, #9
    3bcc:	4313      	orrs	r3, r2
    3bce:	1e5d      	subs	r5, r3, #1
    3bd0:	41ab      	sbcs	r3, r5
    3bd2:	465a      	mov	r2, fp
    3bd4:	0dc0      	lsrs	r0, r0, #23
    3bd6:	4303      	orrs	r3, r0
    3bd8:	0252      	lsls	r2, r2, #9
    3bda:	4313      	orrs	r3, r2
    3bdc:	01e2      	lsls	r2, r4, #7
    3bde:	d556      	bpl.n	3c8e <__aeabi_dmul+0x426>
    3be0:	2001      	movs	r0, #1
    3be2:	085a      	lsrs	r2, r3, #1
    3be4:	4003      	ands	r3, r0
    3be6:	4313      	orrs	r3, r2
    3be8:	07e2      	lsls	r2, r4, #31
    3bea:	4313      	orrs	r3, r2
    3bec:	0864      	lsrs	r4, r4, #1
    3bee:	485a      	ldr	r0, [pc, #360]	; (3d58 <__aeabi_dmul+0x4f0>)
    3bf0:	4460      	add	r0, ip
    3bf2:	2800      	cmp	r0, #0
    3bf4:	dd4d      	ble.n	3c92 <__aeabi_dmul+0x42a>
    3bf6:	075a      	lsls	r2, r3, #29
    3bf8:	d009      	beq.n	3c0e <__aeabi_dmul+0x3a6>
    3bfa:	220f      	movs	r2, #15
    3bfc:	401a      	ands	r2, r3
    3bfe:	2a04      	cmp	r2, #4
    3c00:	d005      	beq.n	3c0e <__aeabi_dmul+0x3a6>
    3c02:	1d1a      	adds	r2, r3, #4
    3c04:	429a      	cmp	r2, r3
    3c06:	419b      	sbcs	r3, r3
    3c08:	425b      	negs	r3, r3
    3c0a:	18e4      	adds	r4, r4, r3
    3c0c:	0013      	movs	r3, r2
    3c0e:	01e2      	lsls	r2, r4, #7
    3c10:	d504      	bpl.n	3c1c <__aeabi_dmul+0x3b4>
    3c12:	2080      	movs	r0, #128	; 0x80
    3c14:	4a51      	ldr	r2, [pc, #324]	; (3d5c <__aeabi_dmul+0x4f4>)
    3c16:	00c0      	lsls	r0, r0, #3
    3c18:	4014      	ands	r4, r2
    3c1a:	4460      	add	r0, ip
    3c1c:	4a50      	ldr	r2, [pc, #320]	; (3d60 <__aeabi_dmul+0x4f8>)
    3c1e:	4290      	cmp	r0, r2
    3c20:	dd00      	ble.n	3c24 <__aeabi_dmul+0x3bc>
    3c22:	e6e3      	b.n	39ec <__aeabi_dmul+0x184>
    3c24:	2501      	movs	r5, #1
    3c26:	08db      	lsrs	r3, r3, #3
    3c28:	0762      	lsls	r2, r4, #29
    3c2a:	431a      	orrs	r2, r3
    3c2c:	0264      	lsls	r4, r4, #9
    3c2e:	9b01      	ldr	r3, [sp, #4]
    3c30:	4691      	mov	r9, r2
    3c32:	0b22      	lsrs	r2, r4, #12
    3c34:	0544      	lsls	r4, r0, #21
    3c36:	0d64      	lsrs	r4, r4, #21
    3c38:	401d      	ands	r5, r3
    3c3a:	e67c      	b.n	3936 <__aeabi_dmul+0xce>
    3c3c:	2280      	movs	r2, #128	; 0x80
    3c3e:	4659      	mov	r1, fp
    3c40:	0312      	lsls	r2, r2, #12
    3c42:	4211      	tst	r1, r2
    3c44:	d008      	beq.n	3c58 <__aeabi_dmul+0x3f0>
    3c46:	4214      	tst	r4, r2
    3c48:	d106      	bne.n	3c58 <__aeabi_dmul+0x3f0>
    3c4a:	4322      	orrs	r2, r4
    3c4c:	0312      	lsls	r2, r2, #12
    3c4e:	0b12      	lsrs	r2, r2, #12
    3c50:	4645      	mov	r5, r8
    3c52:	4699      	mov	r9, r3
    3c54:	4c43      	ldr	r4, [pc, #268]	; (3d64 <__aeabi_dmul+0x4fc>)
    3c56:	e66e      	b.n	3936 <__aeabi_dmul+0xce>
    3c58:	465b      	mov	r3, fp
    3c5a:	431a      	orrs	r2, r3
    3c5c:	0312      	lsls	r2, r2, #12
    3c5e:	0b12      	lsrs	r2, r2, #12
    3c60:	4c40      	ldr	r4, [pc, #256]	; (3d64 <__aeabi_dmul+0x4fc>)
    3c62:	e668      	b.n	3936 <__aeabi_dmul+0xce>
    3c64:	0003      	movs	r3, r0
    3c66:	4654      	mov	r4, sl
    3c68:	3b28      	subs	r3, #40	; 0x28
    3c6a:	409c      	lsls	r4, r3
    3c6c:	2300      	movs	r3, #0
    3c6e:	e6b9      	b.n	39e4 <__aeabi_dmul+0x17c>
    3c70:	f000 fd1a 	bl	46a8 <__clzsi2>
    3c74:	3020      	adds	r0, #32
    3c76:	e6a6      	b.n	39c6 <__aeabi_dmul+0x15e>
    3c78:	0003      	movs	r3, r0
    3c7a:	3b28      	subs	r3, #40	; 0x28
    3c7c:	409f      	lsls	r7, r3
    3c7e:	2300      	movs	r3, #0
    3c80:	46bb      	mov	fp, r7
    3c82:	4699      	mov	r9, r3
    3c84:	e68a      	b.n	399c <__aeabi_dmul+0x134>
    3c86:	f000 fd0f 	bl	46a8 <__clzsi2>
    3c8a:	3020      	adds	r0, #32
    3c8c:	e674      	b.n	3978 <__aeabi_dmul+0x110>
    3c8e:	46b4      	mov	ip, r6
    3c90:	e7ad      	b.n	3bee <__aeabi_dmul+0x386>
    3c92:	2501      	movs	r5, #1
    3c94:	1a2a      	subs	r2, r5, r0
    3c96:	2a38      	cmp	r2, #56	; 0x38
    3c98:	dd06      	ble.n	3ca8 <__aeabi_dmul+0x440>
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	2400      	movs	r4, #0
    3c9e:	401d      	ands	r5, r3
    3ca0:	2300      	movs	r3, #0
    3ca2:	2200      	movs	r2, #0
    3ca4:	4699      	mov	r9, r3
    3ca6:	e646      	b.n	3936 <__aeabi_dmul+0xce>
    3ca8:	2a1f      	cmp	r2, #31
    3caa:	dc21      	bgt.n	3cf0 <__aeabi_dmul+0x488>
    3cac:	2520      	movs	r5, #32
    3cae:	0020      	movs	r0, r4
    3cb0:	1aad      	subs	r5, r5, r2
    3cb2:	001e      	movs	r6, r3
    3cb4:	40ab      	lsls	r3, r5
    3cb6:	40a8      	lsls	r0, r5
    3cb8:	40d6      	lsrs	r6, r2
    3cba:	1e5d      	subs	r5, r3, #1
    3cbc:	41ab      	sbcs	r3, r5
    3cbe:	4330      	orrs	r0, r6
    3cc0:	4318      	orrs	r0, r3
    3cc2:	40d4      	lsrs	r4, r2
    3cc4:	0743      	lsls	r3, r0, #29
    3cc6:	d009      	beq.n	3cdc <__aeabi_dmul+0x474>
    3cc8:	230f      	movs	r3, #15
    3cca:	4003      	ands	r3, r0
    3ccc:	2b04      	cmp	r3, #4
    3cce:	d005      	beq.n	3cdc <__aeabi_dmul+0x474>
    3cd0:	0003      	movs	r3, r0
    3cd2:	1d18      	adds	r0, r3, #4
    3cd4:	4298      	cmp	r0, r3
    3cd6:	419b      	sbcs	r3, r3
    3cd8:	425b      	negs	r3, r3
    3cda:	18e4      	adds	r4, r4, r3
    3cdc:	0223      	lsls	r3, r4, #8
    3cde:	d521      	bpl.n	3d24 <__aeabi_dmul+0x4bc>
    3ce0:	2501      	movs	r5, #1
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	2401      	movs	r4, #1
    3ce6:	401d      	ands	r5, r3
    3ce8:	2300      	movs	r3, #0
    3cea:	2200      	movs	r2, #0
    3cec:	4699      	mov	r9, r3
    3cee:	e622      	b.n	3936 <__aeabi_dmul+0xce>
    3cf0:	251f      	movs	r5, #31
    3cf2:	0021      	movs	r1, r4
    3cf4:	426d      	negs	r5, r5
    3cf6:	1a28      	subs	r0, r5, r0
    3cf8:	40c1      	lsrs	r1, r0
    3cfa:	0008      	movs	r0, r1
    3cfc:	2a20      	cmp	r2, #32
    3cfe:	d01d      	beq.n	3d3c <__aeabi_dmul+0x4d4>
    3d00:	355f      	adds	r5, #95	; 0x5f
    3d02:	1aaa      	subs	r2, r5, r2
    3d04:	4094      	lsls	r4, r2
    3d06:	4323      	orrs	r3, r4
    3d08:	1e5c      	subs	r4, r3, #1
    3d0a:	41a3      	sbcs	r3, r4
    3d0c:	2507      	movs	r5, #7
    3d0e:	4303      	orrs	r3, r0
    3d10:	401d      	ands	r5, r3
    3d12:	2200      	movs	r2, #0
    3d14:	2d00      	cmp	r5, #0
    3d16:	d009      	beq.n	3d2c <__aeabi_dmul+0x4c4>
    3d18:	220f      	movs	r2, #15
    3d1a:	2400      	movs	r4, #0
    3d1c:	401a      	ands	r2, r3
    3d1e:	0018      	movs	r0, r3
    3d20:	2a04      	cmp	r2, #4
    3d22:	d1d6      	bne.n	3cd2 <__aeabi_dmul+0x46a>
    3d24:	0003      	movs	r3, r0
    3d26:	0765      	lsls	r5, r4, #29
    3d28:	0264      	lsls	r4, r4, #9
    3d2a:	0b22      	lsrs	r2, r4, #12
    3d2c:	08db      	lsrs	r3, r3, #3
    3d2e:	432b      	orrs	r3, r5
    3d30:	2501      	movs	r5, #1
    3d32:	4699      	mov	r9, r3
    3d34:	9b01      	ldr	r3, [sp, #4]
    3d36:	2400      	movs	r4, #0
    3d38:	401d      	ands	r5, r3
    3d3a:	e5fc      	b.n	3936 <__aeabi_dmul+0xce>
    3d3c:	2400      	movs	r4, #0
    3d3e:	e7e2      	b.n	3d06 <__aeabi_dmul+0x49e>
    3d40:	2280      	movs	r2, #128	; 0x80
    3d42:	2501      	movs	r5, #1
    3d44:	0312      	lsls	r2, r2, #12
    3d46:	4322      	orrs	r2, r4
    3d48:	9901      	ldr	r1, [sp, #4]
    3d4a:	0312      	lsls	r2, r2, #12
    3d4c:	0b12      	lsrs	r2, r2, #12
    3d4e:	400d      	ands	r5, r1
    3d50:	4699      	mov	r9, r3
    3d52:	4c04      	ldr	r4, [pc, #16]	; (3d64 <__aeabi_dmul+0x4fc>)
    3d54:	e5ef      	b.n	3936 <__aeabi_dmul+0xce>
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	000003ff 	.word	0x000003ff
    3d5c:	feffffff 	.word	0xfeffffff
    3d60:	000007fe 	.word	0x000007fe
    3d64:	000007ff 	.word	0x000007ff

00003d68 <__aeabi_dsub>:
    3d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d6a:	4646      	mov	r6, r8
    3d6c:	46d6      	mov	lr, sl
    3d6e:	464f      	mov	r7, r9
    3d70:	030c      	lsls	r4, r1, #12
    3d72:	b5c0      	push	{r6, r7, lr}
    3d74:	0fcd      	lsrs	r5, r1, #31
    3d76:	004e      	lsls	r6, r1, #1
    3d78:	0a61      	lsrs	r1, r4, #9
    3d7a:	0f44      	lsrs	r4, r0, #29
    3d7c:	430c      	orrs	r4, r1
    3d7e:	00c1      	lsls	r1, r0, #3
    3d80:	0058      	lsls	r0, r3, #1
    3d82:	0d40      	lsrs	r0, r0, #21
    3d84:	4684      	mov	ip, r0
    3d86:	468a      	mov	sl, r1
    3d88:	000f      	movs	r7, r1
    3d8a:	0319      	lsls	r1, r3, #12
    3d8c:	0f50      	lsrs	r0, r2, #29
    3d8e:	0a49      	lsrs	r1, r1, #9
    3d90:	4301      	orrs	r1, r0
    3d92:	48c6      	ldr	r0, [pc, #792]	; (40ac <__aeabi_dsub+0x344>)
    3d94:	0d76      	lsrs	r6, r6, #21
    3d96:	46a8      	mov	r8, r5
    3d98:	0fdb      	lsrs	r3, r3, #31
    3d9a:	00d2      	lsls	r2, r2, #3
    3d9c:	4584      	cmp	ip, r0
    3d9e:	d100      	bne.n	3da2 <__aeabi_dsub+0x3a>
    3da0:	e0d8      	b.n	3f54 <__aeabi_dsub+0x1ec>
    3da2:	2001      	movs	r0, #1
    3da4:	4043      	eors	r3, r0
    3da6:	42ab      	cmp	r3, r5
    3da8:	d100      	bne.n	3dac <__aeabi_dsub+0x44>
    3daa:	e0a6      	b.n	3efa <__aeabi_dsub+0x192>
    3dac:	4660      	mov	r0, ip
    3dae:	1a35      	subs	r5, r6, r0
    3db0:	2d00      	cmp	r5, #0
    3db2:	dc00      	bgt.n	3db6 <__aeabi_dsub+0x4e>
    3db4:	e105      	b.n	3fc2 <__aeabi_dsub+0x25a>
    3db6:	2800      	cmp	r0, #0
    3db8:	d110      	bne.n	3ddc <__aeabi_dsub+0x74>
    3dba:	000b      	movs	r3, r1
    3dbc:	4313      	orrs	r3, r2
    3dbe:	d100      	bne.n	3dc2 <__aeabi_dsub+0x5a>
    3dc0:	e0d7      	b.n	3f72 <__aeabi_dsub+0x20a>
    3dc2:	1e6b      	subs	r3, r5, #1
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d000      	beq.n	3dca <__aeabi_dsub+0x62>
    3dc8:	e14b      	b.n	4062 <__aeabi_dsub+0x2fa>
    3dca:	4653      	mov	r3, sl
    3dcc:	1a9f      	subs	r7, r3, r2
    3dce:	45ba      	cmp	sl, r7
    3dd0:	4180      	sbcs	r0, r0
    3dd2:	1a64      	subs	r4, r4, r1
    3dd4:	4240      	negs	r0, r0
    3dd6:	1a24      	subs	r4, r4, r0
    3dd8:	2601      	movs	r6, #1
    3dda:	e01e      	b.n	3e1a <__aeabi_dsub+0xb2>
    3ddc:	4bb3      	ldr	r3, [pc, #716]	; (40ac <__aeabi_dsub+0x344>)
    3dde:	429e      	cmp	r6, r3
    3de0:	d048      	beq.n	3e74 <__aeabi_dsub+0x10c>
    3de2:	2380      	movs	r3, #128	; 0x80
    3de4:	041b      	lsls	r3, r3, #16
    3de6:	4319      	orrs	r1, r3
    3de8:	2d38      	cmp	r5, #56	; 0x38
    3dea:	dd00      	ble.n	3dee <__aeabi_dsub+0x86>
    3dec:	e119      	b.n	4022 <__aeabi_dsub+0x2ba>
    3dee:	2d1f      	cmp	r5, #31
    3df0:	dd00      	ble.n	3df4 <__aeabi_dsub+0x8c>
    3df2:	e14c      	b.n	408e <__aeabi_dsub+0x326>
    3df4:	2320      	movs	r3, #32
    3df6:	000f      	movs	r7, r1
    3df8:	1b5b      	subs	r3, r3, r5
    3dfa:	0010      	movs	r0, r2
    3dfc:	409a      	lsls	r2, r3
    3dfe:	409f      	lsls	r7, r3
    3e00:	40e8      	lsrs	r0, r5
    3e02:	1e53      	subs	r3, r2, #1
    3e04:	419a      	sbcs	r2, r3
    3e06:	40e9      	lsrs	r1, r5
    3e08:	4307      	orrs	r7, r0
    3e0a:	4317      	orrs	r7, r2
    3e0c:	4653      	mov	r3, sl
    3e0e:	1bdf      	subs	r7, r3, r7
    3e10:	1a61      	subs	r1, r4, r1
    3e12:	45ba      	cmp	sl, r7
    3e14:	41a4      	sbcs	r4, r4
    3e16:	4264      	negs	r4, r4
    3e18:	1b0c      	subs	r4, r1, r4
    3e1a:	0223      	lsls	r3, r4, #8
    3e1c:	d400      	bmi.n	3e20 <__aeabi_dsub+0xb8>
    3e1e:	e0c5      	b.n	3fac <__aeabi_dsub+0x244>
    3e20:	0264      	lsls	r4, r4, #9
    3e22:	0a65      	lsrs	r5, r4, #9
    3e24:	2d00      	cmp	r5, #0
    3e26:	d100      	bne.n	3e2a <__aeabi_dsub+0xc2>
    3e28:	e0f6      	b.n	4018 <__aeabi_dsub+0x2b0>
    3e2a:	0028      	movs	r0, r5
    3e2c:	f000 fc3c 	bl	46a8 <__clzsi2>
    3e30:	0003      	movs	r3, r0
    3e32:	3b08      	subs	r3, #8
    3e34:	2b1f      	cmp	r3, #31
    3e36:	dd00      	ble.n	3e3a <__aeabi_dsub+0xd2>
    3e38:	e0e9      	b.n	400e <__aeabi_dsub+0x2a6>
    3e3a:	2220      	movs	r2, #32
    3e3c:	003c      	movs	r4, r7
    3e3e:	1ad2      	subs	r2, r2, r3
    3e40:	409d      	lsls	r5, r3
    3e42:	40d4      	lsrs	r4, r2
    3e44:	409f      	lsls	r7, r3
    3e46:	4325      	orrs	r5, r4
    3e48:	429e      	cmp	r6, r3
    3e4a:	dd00      	ble.n	3e4e <__aeabi_dsub+0xe6>
    3e4c:	e0db      	b.n	4006 <__aeabi_dsub+0x29e>
    3e4e:	1b9e      	subs	r6, r3, r6
    3e50:	1c73      	adds	r3, r6, #1
    3e52:	2b1f      	cmp	r3, #31
    3e54:	dd00      	ble.n	3e58 <__aeabi_dsub+0xf0>
    3e56:	e10a      	b.n	406e <__aeabi_dsub+0x306>
    3e58:	2220      	movs	r2, #32
    3e5a:	0038      	movs	r0, r7
    3e5c:	1ad2      	subs	r2, r2, r3
    3e5e:	0029      	movs	r1, r5
    3e60:	4097      	lsls	r7, r2
    3e62:	002c      	movs	r4, r5
    3e64:	4091      	lsls	r1, r2
    3e66:	40d8      	lsrs	r0, r3
    3e68:	1e7a      	subs	r2, r7, #1
    3e6a:	4197      	sbcs	r7, r2
    3e6c:	40dc      	lsrs	r4, r3
    3e6e:	2600      	movs	r6, #0
    3e70:	4301      	orrs	r1, r0
    3e72:	430f      	orrs	r7, r1
    3e74:	077b      	lsls	r3, r7, #29
    3e76:	d009      	beq.n	3e8c <__aeabi_dsub+0x124>
    3e78:	230f      	movs	r3, #15
    3e7a:	403b      	ands	r3, r7
    3e7c:	2b04      	cmp	r3, #4
    3e7e:	d005      	beq.n	3e8c <__aeabi_dsub+0x124>
    3e80:	1d3b      	adds	r3, r7, #4
    3e82:	42bb      	cmp	r3, r7
    3e84:	41bf      	sbcs	r7, r7
    3e86:	427f      	negs	r7, r7
    3e88:	19e4      	adds	r4, r4, r7
    3e8a:	001f      	movs	r7, r3
    3e8c:	0223      	lsls	r3, r4, #8
    3e8e:	d525      	bpl.n	3edc <__aeabi_dsub+0x174>
    3e90:	4b86      	ldr	r3, [pc, #536]	; (40ac <__aeabi_dsub+0x344>)
    3e92:	3601      	adds	r6, #1
    3e94:	429e      	cmp	r6, r3
    3e96:	d100      	bne.n	3e9a <__aeabi_dsub+0x132>
    3e98:	e0af      	b.n	3ffa <__aeabi_dsub+0x292>
    3e9a:	4b85      	ldr	r3, [pc, #532]	; (40b0 <__aeabi_dsub+0x348>)
    3e9c:	2501      	movs	r5, #1
    3e9e:	401c      	ands	r4, r3
    3ea0:	4643      	mov	r3, r8
    3ea2:	0762      	lsls	r2, r4, #29
    3ea4:	08ff      	lsrs	r7, r7, #3
    3ea6:	0264      	lsls	r4, r4, #9
    3ea8:	0576      	lsls	r6, r6, #21
    3eaa:	4317      	orrs	r7, r2
    3eac:	0b24      	lsrs	r4, r4, #12
    3eae:	0d76      	lsrs	r6, r6, #21
    3eb0:	401d      	ands	r5, r3
    3eb2:	2100      	movs	r1, #0
    3eb4:	0324      	lsls	r4, r4, #12
    3eb6:	0b23      	lsrs	r3, r4, #12
    3eb8:	0d0c      	lsrs	r4, r1, #20
    3eba:	4a7e      	ldr	r2, [pc, #504]	; (40b4 <__aeabi_dsub+0x34c>)
    3ebc:	0524      	lsls	r4, r4, #20
    3ebe:	431c      	orrs	r4, r3
    3ec0:	4014      	ands	r4, r2
    3ec2:	0533      	lsls	r3, r6, #20
    3ec4:	4323      	orrs	r3, r4
    3ec6:	005b      	lsls	r3, r3, #1
    3ec8:	07ed      	lsls	r5, r5, #31
    3eca:	085b      	lsrs	r3, r3, #1
    3ecc:	432b      	orrs	r3, r5
    3ece:	0038      	movs	r0, r7
    3ed0:	0019      	movs	r1, r3
    3ed2:	bc1c      	pop	{r2, r3, r4}
    3ed4:	4690      	mov	r8, r2
    3ed6:	4699      	mov	r9, r3
    3ed8:	46a2      	mov	sl, r4
    3eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3edc:	2501      	movs	r5, #1
    3ede:	4643      	mov	r3, r8
    3ee0:	0762      	lsls	r2, r4, #29
    3ee2:	08ff      	lsrs	r7, r7, #3
    3ee4:	4317      	orrs	r7, r2
    3ee6:	08e4      	lsrs	r4, r4, #3
    3ee8:	401d      	ands	r5, r3
    3eea:	4b70      	ldr	r3, [pc, #448]	; (40ac <__aeabi_dsub+0x344>)
    3eec:	429e      	cmp	r6, r3
    3eee:	d036      	beq.n	3f5e <__aeabi_dsub+0x1f6>
    3ef0:	0324      	lsls	r4, r4, #12
    3ef2:	0576      	lsls	r6, r6, #21
    3ef4:	0b24      	lsrs	r4, r4, #12
    3ef6:	0d76      	lsrs	r6, r6, #21
    3ef8:	e7db      	b.n	3eb2 <__aeabi_dsub+0x14a>
    3efa:	4663      	mov	r3, ip
    3efc:	1af3      	subs	r3, r6, r3
    3efe:	2b00      	cmp	r3, #0
    3f00:	dc00      	bgt.n	3f04 <__aeabi_dsub+0x19c>
    3f02:	e094      	b.n	402e <__aeabi_dsub+0x2c6>
    3f04:	4660      	mov	r0, ip
    3f06:	2800      	cmp	r0, #0
    3f08:	d035      	beq.n	3f76 <__aeabi_dsub+0x20e>
    3f0a:	4868      	ldr	r0, [pc, #416]	; (40ac <__aeabi_dsub+0x344>)
    3f0c:	4286      	cmp	r6, r0
    3f0e:	d0b1      	beq.n	3e74 <__aeabi_dsub+0x10c>
    3f10:	2780      	movs	r7, #128	; 0x80
    3f12:	043f      	lsls	r7, r7, #16
    3f14:	4339      	orrs	r1, r7
    3f16:	2b38      	cmp	r3, #56	; 0x38
    3f18:	dc00      	bgt.n	3f1c <__aeabi_dsub+0x1b4>
    3f1a:	e0fd      	b.n	4118 <__aeabi_dsub+0x3b0>
    3f1c:	430a      	orrs	r2, r1
    3f1e:	0017      	movs	r7, r2
    3f20:	2100      	movs	r1, #0
    3f22:	1e7a      	subs	r2, r7, #1
    3f24:	4197      	sbcs	r7, r2
    3f26:	4457      	add	r7, sl
    3f28:	4557      	cmp	r7, sl
    3f2a:	4180      	sbcs	r0, r0
    3f2c:	1909      	adds	r1, r1, r4
    3f2e:	4244      	negs	r4, r0
    3f30:	190c      	adds	r4, r1, r4
    3f32:	0223      	lsls	r3, r4, #8
    3f34:	d53a      	bpl.n	3fac <__aeabi_dsub+0x244>
    3f36:	4b5d      	ldr	r3, [pc, #372]	; (40ac <__aeabi_dsub+0x344>)
    3f38:	3601      	adds	r6, #1
    3f3a:	429e      	cmp	r6, r3
    3f3c:	d100      	bne.n	3f40 <__aeabi_dsub+0x1d8>
    3f3e:	e14b      	b.n	41d8 <__aeabi_dsub+0x470>
    3f40:	2201      	movs	r2, #1
    3f42:	4b5b      	ldr	r3, [pc, #364]	; (40b0 <__aeabi_dsub+0x348>)
    3f44:	401c      	ands	r4, r3
    3f46:	087b      	lsrs	r3, r7, #1
    3f48:	4017      	ands	r7, r2
    3f4a:	431f      	orrs	r7, r3
    3f4c:	07e2      	lsls	r2, r4, #31
    3f4e:	4317      	orrs	r7, r2
    3f50:	0864      	lsrs	r4, r4, #1
    3f52:	e78f      	b.n	3e74 <__aeabi_dsub+0x10c>
    3f54:	0008      	movs	r0, r1
    3f56:	4310      	orrs	r0, r2
    3f58:	d000      	beq.n	3f5c <__aeabi_dsub+0x1f4>
    3f5a:	e724      	b.n	3da6 <__aeabi_dsub+0x3e>
    3f5c:	e721      	b.n	3da2 <__aeabi_dsub+0x3a>
    3f5e:	0023      	movs	r3, r4
    3f60:	433b      	orrs	r3, r7
    3f62:	d100      	bne.n	3f66 <__aeabi_dsub+0x1fe>
    3f64:	e1b9      	b.n	42da <__aeabi_dsub+0x572>
    3f66:	2280      	movs	r2, #128	; 0x80
    3f68:	0312      	lsls	r2, r2, #12
    3f6a:	4314      	orrs	r4, r2
    3f6c:	0324      	lsls	r4, r4, #12
    3f6e:	0b24      	lsrs	r4, r4, #12
    3f70:	e79f      	b.n	3eb2 <__aeabi_dsub+0x14a>
    3f72:	002e      	movs	r6, r5
    3f74:	e77e      	b.n	3e74 <__aeabi_dsub+0x10c>
    3f76:	0008      	movs	r0, r1
    3f78:	4310      	orrs	r0, r2
    3f7a:	d100      	bne.n	3f7e <__aeabi_dsub+0x216>
    3f7c:	e0ca      	b.n	4114 <__aeabi_dsub+0x3ac>
    3f7e:	1e58      	subs	r0, r3, #1
    3f80:	4684      	mov	ip, r0
    3f82:	2800      	cmp	r0, #0
    3f84:	d000      	beq.n	3f88 <__aeabi_dsub+0x220>
    3f86:	e0e7      	b.n	4158 <__aeabi_dsub+0x3f0>
    3f88:	4452      	add	r2, sl
    3f8a:	4552      	cmp	r2, sl
    3f8c:	4180      	sbcs	r0, r0
    3f8e:	1864      	adds	r4, r4, r1
    3f90:	4240      	negs	r0, r0
    3f92:	1824      	adds	r4, r4, r0
    3f94:	0017      	movs	r7, r2
    3f96:	2601      	movs	r6, #1
    3f98:	0223      	lsls	r3, r4, #8
    3f9a:	d507      	bpl.n	3fac <__aeabi_dsub+0x244>
    3f9c:	2602      	movs	r6, #2
    3f9e:	e7cf      	b.n	3f40 <__aeabi_dsub+0x1d8>
    3fa0:	4664      	mov	r4, ip
    3fa2:	432c      	orrs	r4, r5
    3fa4:	d100      	bne.n	3fa8 <__aeabi_dsub+0x240>
    3fa6:	e1b3      	b.n	4310 <__aeabi_dsub+0x5a8>
    3fa8:	002c      	movs	r4, r5
    3faa:	4667      	mov	r7, ip
    3fac:	077b      	lsls	r3, r7, #29
    3fae:	d000      	beq.n	3fb2 <__aeabi_dsub+0x24a>
    3fb0:	e762      	b.n	3e78 <__aeabi_dsub+0x110>
    3fb2:	0763      	lsls	r3, r4, #29
    3fb4:	08ff      	lsrs	r7, r7, #3
    3fb6:	431f      	orrs	r7, r3
    3fb8:	2501      	movs	r5, #1
    3fba:	4643      	mov	r3, r8
    3fbc:	08e4      	lsrs	r4, r4, #3
    3fbe:	401d      	ands	r5, r3
    3fc0:	e793      	b.n	3eea <__aeabi_dsub+0x182>
    3fc2:	2d00      	cmp	r5, #0
    3fc4:	d178      	bne.n	40b8 <__aeabi_dsub+0x350>
    3fc6:	1c75      	adds	r5, r6, #1
    3fc8:	056d      	lsls	r5, r5, #21
    3fca:	0d6d      	lsrs	r5, r5, #21
    3fcc:	2d01      	cmp	r5, #1
    3fce:	dc00      	bgt.n	3fd2 <__aeabi_dsub+0x26a>
    3fd0:	e0f2      	b.n	41b8 <__aeabi_dsub+0x450>
    3fd2:	4650      	mov	r0, sl
    3fd4:	1a80      	subs	r0, r0, r2
    3fd6:	4582      	cmp	sl, r0
    3fd8:	41bf      	sbcs	r7, r7
    3fda:	1a65      	subs	r5, r4, r1
    3fdc:	427f      	negs	r7, r7
    3fde:	1bed      	subs	r5, r5, r7
    3fe0:	4684      	mov	ip, r0
    3fe2:	0228      	lsls	r0, r5, #8
    3fe4:	d400      	bmi.n	3fe8 <__aeabi_dsub+0x280>
    3fe6:	e08c      	b.n	4102 <__aeabi_dsub+0x39a>
    3fe8:	4650      	mov	r0, sl
    3fea:	1a17      	subs	r7, r2, r0
    3fec:	42ba      	cmp	r2, r7
    3fee:	4192      	sbcs	r2, r2
    3ff0:	1b0c      	subs	r4, r1, r4
    3ff2:	4255      	negs	r5, r2
    3ff4:	1b65      	subs	r5, r4, r5
    3ff6:	4698      	mov	r8, r3
    3ff8:	e714      	b.n	3e24 <__aeabi_dsub+0xbc>
    3ffa:	2501      	movs	r5, #1
    3ffc:	4643      	mov	r3, r8
    3ffe:	2400      	movs	r4, #0
    4000:	401d      	ands	r5, r3
    4002:	2700      	movs	r7, #0
    4004:	e755      	b.n	3eb2 <__aeabi_dsub+0x14a>
    4006:	4c2a      	ldr	r4, [pc, #168]	; (40b0 <__aeabi_dsub+0x348>)
    4008:	1af6      	subs	r6, r6, r3
    400a:	402c      	ands	r4, r5
    400c:	e732      	b.n	3e74 <__aeabi_dsub+0x10c>
    400e:	003d      	movs	r5, r7
    4010:	3828      	subs	r0, #40	; 0x28
    4012:	4085      	lsls	r5, r0
    4014:	2700      	movs	r7, #0
    4016:	e717      	b.n	3e48 <__aeabi_dsub+0xe0>
    4018:	0038      	movs	r0, r7
    401a:	f000 fb45 	bl	46a8 <__clzsi2>
    401e:	3020      	adds	r0, #32
    4020:	e706      	b.n	3e30 <__aeabi_dsub+0xc8>
    4022:	430a      	orrs	r2, r1
    4024:	0017      	movs	r7, r2
    4026:	2100      	movs	r1, #0
    4028:	1e7a      	subs	r2, r7, #1
    402a:	4197      	sbcs	r7, r2
    402c:	e6ee      	b.n	3e0c <__aeabi_dsub+0xa4>
    402e:	2b00      	cmp	r3, #0
    4030:	d000      	beq.n	4034 <__aeabi_dsub+0x2cc>
    4032:	e0e5      	b.n	4200 <__aeabi_dsub+0x498>
    4034:	1c73      	adds	r3, r6, #1
    4036:	469c      	mov	ip, r3
    4038:	055b      	lsls	r3, r3, #21
    403a:	0d5b      	lsrs	r3, r3, #21
    403c:	2b01      	cmp	r3, #1
    403e:	dc00      	bgt.n	4042 <__aeabi_dsub+0x2da>
    4040:	e09f      	b.n	4182 <__aeabi_dsub+0x41a>
    4042:	4b1a      	ldr	r3, [pc, #104]	; (40ac <__aeabi_dsub+0x344>)
    4044:	459c      	cmp	ip, r3
    4046:	d100      	bne.n	404a <__aeabi_dsub+0x2e2>
    4048:	e0c5      	b.n	41d6 <__aeabi_dsub+0x46e>
    404a:	4452      	add	r2, sl
    404c:	4552      	cmp	r2, sl
    404e:	4180      	sbcs	r0, r0
    4050:	1864      	adds	r4, r4, r1
    4052:	4240      	negs	r0, r0
    4054:	1824      	adds	r4, r4, r0
    4056:	07e7      	lsls	r7, r4, #31
    4058:	0852      	lsrs	r2, r2, #1
    405a:	4317      	orrs	r7, r2
    405c:	0864      	lsrs	r4, r4, #1
    405e:	4666      	mov	r6, ip
    4060:	e708      	b.n	3e74 <__aeabi_dsub+0x10c>
    4062:	4812      	ldr	r0, [pc, #72]	; (40ac <__aeabi_dsub+0x344>)
    4064:	4285      	cmp	r5, r0
    4066:	d100      	bne.n	406a <__aeabi_dsub+0x302>
    4068:	e085      	b.n	4176 <__aeabi_dsub+0x40e>
    406a:	001d      	movs	r5, r3
    406c:	e6bc      	b.n	3de8 <__aeabi_dsub+0x80>
    406e:	0029      	movs	r1, r5
    4070:	3e1f      	subs	r6, #31
    4072:	40f1      	lsrs	r1, r6
    4074:	2b20      	cmp	r3, #32
    4076:	d100      	bne.n	407a <__aeabi_dsub+0x312>
    4078:	e07f      	b.n	417a <__aeabi_dsub+0x412>
    407a:	2240      	movs	r2, #64	; 0x40
    407c:	1ad3      	subs	r3, r2, r3
    407e:	409d      	lsls	r5, r3
    4080:	432f      	orrs	r7, r5
    4082:	1e7d      	subs	r5, r7, #1
    4084:	41af      	sbcs	r7, r5
    4086:	2400      	movs	r4, #0
    4088:	430f      	orrs	r7, r1
    408a:	2600      	movs	r6, #0
    408c:	e78e      	b.n	3fac <__aeabi_dsub+0x244>
    408e:	002b      	movs	r3, r5
    4090:	000f      	movs	r7, r1
    4092:	3b20      	subs	r3, #32
    4094:	40df      	lsrs	r7, r3
    4096:	2d20      	cmp	r5, #32
    4098:	d071      	beq.n	417e <__aeabi_dsub+0x416>
    409a:	2340      	movs	r3, #64	; 0x40
    409c:	1b5d      	subs	r5, r3, r5
    409e:	40a9      	lsls	r1, r5
    40a0:	430a      	orrs	r2, r1
    40a2:	1e51      	subs	r1, r2, #1
    40a4:	418a      	sbcs	r2, r1
    40a6:	2100      	movs	r1, #0
    40a8:	4317      	orrs	r7, r2
    40aa:	e6af      	b.n	3e0c <__aeabi_dsub+0xa4>
    40ac:	000007ff 	.word	0x000007ff
    40b0:	ff7fffff 	.word	0xff7fffff
    40b4:	800fffff 	.word	0x800fffff
    40b8:	2e00      	cmp	r6, #0
    40ba:	d03e      	beq.n	413a <__aeabi_dsub+0x3d2>
    40bc:	4eb3      	ldr	r6, [pc, #716]	; (438c <__aeabi_dsub+0x624>)
    40be:	45b4      	cmp	ip, r6
    40c0:	d045      	beq.n	414e <__aeabi_dsub+0x3e6>
    40c2:	2680      	movs	r6, #128	; 0x80
    40c4:	0436      	lsls	r6, r6, #16
    40c6:	426d      	negs	r5, r5
    40c8:	4334      	orrs	r4, r6
    40ca:	2d38      	cmp	r5, #56	; 0x38
    40cc:	dd00      	ble.n	40d0 <__aeabi_dsub+0x368>
    40ce:	e0a8      	b.n	4222 <__aeabi_dsub+0x4ba>
    40d0:	2d1f      	cmp	r5, #31
    40d2:	dd00      	ble.n	40d6 <__aeabi_dsub+0x36e>
    40d4:	e11f      	b.n	4316 <__aeabi_dsub+0x5ae>
    40d6:	2620      	movs	r6, #32
    40d8:	0027      	movs	r7, r4
    40da:	4650      	mov	r0, sl
    40dc:	1b76      	subs	r6, r6, r5
    40de:	40b7      	lsls	r7, r6
    40e0:	40e8      	lsrs	r0, r5
    40e2:	4307      	orrs	r7, r0
    40e4:	4650      	mov	r0, sl
    40e6:	40b0      	lsls	r0, r6
    40e8:	1e46      	subs	r6, r0, #1
    40ea:	41b0      	sbcs	r0, r6
    40ec:	40ec      	lsrs	r4, r5
    40ee:	4338      	orrs	r0, r7
    40f0:	1a17      	subs	r7, r2, r0
    40f2:	42ba      	cmp	r2, r7
    40f4:	4192      	sbcs	r2, r2
    40f6:	1b0c      	subs	r4, r1, r4
    40f8:	4252      	negs	r2, r2
    40fa:	1aa4      	subs	r4, r4, r2
    40fc:	4666      	mov	r6, ip
    40fe:	4698      	mov	r8, r3
    4100:	e68b      	b.n	3e1a <__aeabi_dsub+0xb2>
    4102:	4664      	mov	r4, ip
    4104:	4667      	mov	r7, ip
    4106:	432c      	orrs	r4, r5
    4108:	d000      	beq.n	410c <__aeabi_dsub+0x3a4>
    410a:	e68b      	b.n	3e24 <__aeabi_dsub+0xbc>
    410c:	2500      	movs	r5, #0
    410e:	2600      	movs	r6, #0
    4110:	2700      	movs	r7, #0
    4112:	e6ea      	b.n	3eea <__aeabi_dsub+0x182>
    4114:	001e      	movs	r6, r3
    4116:	e6ad      	b.n	3e74 <__aeabi_dsub+0x10c>
    4118:	2b1f      	cmp	r3, #31
    411a:	dc60      	bgt.n	41de <__aeabi_dsub+0x476>
    411c:	2720      	movs	r7, #32
    411e:	1af8      	subs	r0, r7, r3
    4120:	000f      	movs	r7, r1
    4122:	4684      	mov	ip, r0
    4124:	4087      	lsls	r7, r0
    4126:	0010      	movs	r0, r2
    4128:	40d8      	lsrs	r0, r3
    412a:	4307      	orrs	r7, r0
    412c:	4660      	mov	r0, ip
    412e:	4082      	lsls	r2, r0
    4130:	1e50      	subs	r0, r2, #1
    4132:	4182      	sbcs	r2, r0
    4134:	40d9      	lsrs	r1, r3
    4136:	4317      	orrs	r7, r2
    4138:	e6f5      	b.n	3f26 <__aeabi_dsub+0x1be>
    413a:	0026      	movs	r6, r4
    413c:	4650      	mov	r0, sl
    413e:	4306      	orrs	r6, r0
    4140:	d005      	beq.n	414e <__aeabi_dsub+0x3e6>
    4142:	43ed      	mvns	r5, r5
    4144:	2d00      	cmp	r5, #0
    4146:	d0d3      	beq.n	40f0 <__aeabi_dsub+0x388>
    4148:	4e90      	ldr	r6, [pc, #576]	; (438c <__aeabi_dsub+0x624>)
    414a:	45b4      	cmp	ip, r6
    414c:	d1bd      	bne.n	40ca <__aeabi_dsub+0x362>
    414e:	000c      	movs	r4, r1
    4150:	0017      	movs	r7, r2
    4152:	4666      	mov	r6, ip
    4154:	4698      	mov	r8, r3
    4156:	e68d      	b.n	3e74 <__aeabi_dsub+0x10c>
    4158:	488c      	ldr	r0, [pc, #560]	; (438c <__aeabi_dsub+0x624>)
    415a:	4283      	cmp	r3, r0
    415c:	d00b      	beq.n	4176 <__aeabi_dsub+0x40e>
    415e:	4663      	mov	r3, ip
    4160:	e6d9      	b.n	3f16 <__aeabi_dsub+0x1ae>
    4162:	2d00      	cmp	r5, #0
    4164:	d000      	beq.n	4168 <__aeabi_dsub+0x400>
    4166:	e096      	b.n	4296 <__aeabi_dsub+0x52e>
    4168:	0008      	movs	r0, r1
    416a:	4310      	orrs	r0, r2
    416c:	d100      	bne.n	4170 <__aeabi_dsub+0x408>
    416e:	e0e2      	b.n	4336 <__aeabi_dsub+0x5ce>
    4170:	000c      	movs	r4, r1
    4172:	0017      	movs	r7, r2
    4174:	4698      	mov	r8, r3
    4176:	4e85      	ldr	r6, [pc, #532]	; (438c <__aeabi_dsub+0x624>)
    4178:	e67c      	b.n	3e74 <__aeabi_dsub+0x10c>
    417a:	2500      	movs	r5, #0
    417c:	e780      	b.n	4080 <__aeabi_dsub+0x318>
    417e:	2100      	movs	r1, #0
    4180:	e78e      	b.n	40a0 <__aeabi_dsub+0x338>
    4182:	0023      	movs	r3, r4
    4184:	4650      	mov	r0, sl
    4186:	4303      	orrs	r3, r0
    4188:	2e00      	cmp	r6, #0
    418a:	d000      	beq.n	418e <__aeabi_dsub+0x426>
    418c:	e0a8      	b.n	42e0 <__aeabi_dsub+0x578>
    418e:	2b00      	cmp	r3, #0
    4190:	d100      	bne.n	4194 <__aeabi_dsub+0x42c>
    4192:	e0de      	b.n	4352 <__aeabi_dsub+0x5ea>
    4194:	000b      	movs	r3, r1
    4196:	4313      	orrs	r3, r2
    4198:	d100      	bne.n	419c <__aeabi_dsub+0x434>
    419a:	e66b      	b.n	3e74 <__aeabi_dsub+0x10c>
    419c:	4452      	add	r2, sl
    419e:	4552      	cmp	r2, sl
    41a0:	4180      	sbcs	r0, r0
    41a2:	1864      	adds	r4, r4, r1
    41a4:	4240      	negs	r0, r0
    41a6:	1824      	adds	r4, r4, r0
    41a8:	0017      	movs	r7, r2
    41aa:	0223      	lsls	r3, r4, #8
    41ac:	d400      	bmi.n	41b0 <__aeabi_dsub+0x448>
    41ae:	e6fd      	b.n	3fac <__aeabi_dsub+0x244>
    41b0:	4b77      	ldr	r3, [pc, #476]	; (4390 <__aeabi_dsub+0x628>)
    41b2:	4666      	mov	r6, ip
    41b4:	401c      	ands	r4, r3
    41b6:	e65d      	b.n	3e74 <__aeabi_dsub+0x10c>
    41b8:	0025      	movs	r5, r4
    41ba:	4650      	mov	r0, sl
    41bc:	4305      	orrs	r5, r0
    41be:	2e00      	cmp	r6, #0
    41c0:	d1cf      	bne.n	4162 <__aeabi_dsub+0x3fa>
    41c2:	2d00      	cmp	r5, #0
    41c4:	d14f      	bne.n	4266 <__aeabi_dsub+0x4fe>
    41c6:	000c      	movs	r4, r1
    41c8:	4314      	orrs	r4, r2
    41ca:	d100      	bne.n	41ce <__aeabi_dsub+0x466>
    41cc:	e0a0      	b.n	4310 <__aeabi_dsub+0x5a8>
    41ce:	000c      	movs	r4, r1
    41d0:	0017      	movs	r7, r2
    41d2:	4698      	mov	r8, r3
    41d4:	e64e      	b.n	3e74 <__aeabi_dsub+0x10c>
    41d6:	4666      	mov	r6, ip
    41d8:	2400      	movs	r4, #0
    41da:	2700      	movs	r7, #0
    41dc:	e685      	b.n	3eea <__aeabi_dsub+0x182>
    41de:	001f      	movs	r7, r3
    41e0:	0008      	movs	r0, r1
    41e2:	3f20      	subs	r7, #32
    41e4:	40f8      	lsrs	r0, r7
    41e6:	0007      	movs	r7, r0
    41e8:	2b20      	cmp	r3, #32
    41ea:	d100      	bne.n	41ee <__aeabi_dsub+0x486>
    41ec:	e08e      	b.n	430c <__aeabi_dsub+0x5a4>
    41ee:	2040      	movs	r0, #64	; 0x40
    41f0:	1ac3      	subs	r3, r0, r3
    41f2:	4099      	lsls	r1, r3
    41f4:	430a      	orrs	r2, r1
    41f6:	1e51      	subs	r1, r2, #1
    41f8:	418a      	sbcs	r2, r1
    41fa:	2100      	movs	r1, #0
    41fc:	4317      	orrs	r7, r2
    41fe:	e692      	b.n	3f26 <__aeabi_dsub+0x1be>
    4200:	2e00      	cmp	r6, #0
    4202:	d114      	bne.n	422e <__aeabi_dsub+0x4c6>
    4204:	0026      	movs	r6, r4
    4206:	4650      	mov	r0, sl
    4208:	4306      	orrs	r6, r0
    420a:	d062      	beq.n	42d2 <__aeabi_dsub+0x56a>
    420c:	43db      	mvns	r3, r3
    420e:	2b00      	cmp	r3, #0
    4210:	d15c      	bne.n	42cc <__aeabi_dsub+0x564>
    4212:	1887      	adds	r7, r0, r2
    4214:	4297      	cmp	r7, r2
    4216:	4192      	sbcs	r2, r2
    4218:	1864      	adds	r4, r4, r1
    421a:	4252      	negs	r2, r2
    421c:	18a4      	adds	r4, r4, r2
    421e:	4666      	mov	r6, ip
    4220:	e687      	b.n	3f32 <__aeabi_dsub+0x1ca>
    4222:	4650      	mov	r0, sl
    4224:	4320      	orrs	r0, r4
    4226:	1e44      	subs	r4, r0, #1
    4228:	41a0      	sbcs	r0, r4
    422a:	2400      	movs	r4, #0
    422c:	e760      	b.n	40f0 <__aeabi_dsub+0x388>
    422e:	4e57      	ldr	r6, [pc, #348]	; (438c <__aeabi_dsub+0x624>)
    4230:	45b4      	cmp	ip, r6
    4232:	d04e      	beq.n	42d2 <__aeabi_dsub+0x56a>
    4234:	2680      	movs	r6, #128	; 0x80
    4236:	0436      	lsls	r6, r6, #16
    4238:	425b      	negs	r3, r3
    423a:	4334      	orrs	r4, r6
    423c:	2b38      	cmp	r3, #56	; 0x38
    423e:	dd00      	ble.n	4242 <__aeabi_dsub+0x4da>
    4240:	e07f      	b.n	4342 <__aeabi_dsub+0x5da>
    4242:	2b1f      	cmp	r3, #31
    4244:	dd00      	ble.n	4248 <__aeabi_dsub+0x4e0>
    4246:	e08b      	b.n	4360 <__aeabi_dsub+0x5f8>
    4248:	2620      	movs	r6, #32
    424a:	0027      	movs	r7, r4
    424c:	4650      	mov	r0, sl
    424e:	1af6      	subs	r6, r6, r3
    4250:	40b7      	lsls	r7, r6
    4252:	40d8      	lsrs	r0, r3
    4254:	4307      	orrs	r7, r0
    4256:	4650      	mov	r0, sl
    4258:	40b0      	lsls	r0, r6
    425a:	1e46      	subs	r6, r0, #1
    425c:	41b0      	sbcs	r0, r6
    425e:	4307      	orrs	r7, r0
    4260:	40dc      	lsrs	r4, r3
    4262:	18bf      	adds	r7, r7, r2
    4264:	e7d6      	b.n	4214 <__aeabi_dsub+0x4ac>
    4266:	000d      	movs	r5, r1
    4268:	4315      	orrs	r5, r2
    426a:	d100      	bne.n	426e <__aeabi_dsub+0x506>
    426c:	e602      	b.n	3e74 <__aeabi_dsub+0x10c>
    426e:	4650      	mov	r0, sl
    4270:	1a80      	subs	r0, r0, r2
    4272:	4582      	cmp	sl, r0
    4274:	41bf      	sbcs	r7, r7
    4276:	1a65      	subs	r5, r4, r1
    4278:	427f      	negs	r7, r7
    427a:	1bed      	subs	r5, r5, r7
    427c:	4684      	mov	ip, r0
    427e:	0228      	lsls	r0, r5, #8
    4280:	d400      	bmi.n	4284 <__aeabi_dsub+0x51c>
    4282:	e68d      	b.n	3fa0 <__aeabi_dsub+0x238>
    4284:	4650      	mov	r0, sl
    4286:	1a17      	subs	r7, r2, r0
    4288:	42ba      	cmp	r2, r7
    428a:	4192      	sbcs	r2, r2
    428c:	1b0c      	subs	r4, r1, r4
    428e:	4252      	negs	r2, r2
    4290:	1aa4      	subs	r4, r4, r2
    4292:	4698      	mov	r8, r3
    4294:	e5ee      	b.n	3e74 <__aeabi_dsub+0x10c>
    4296:	000d      	movs	r5, r1
    4298:	4315      	orrs	r5, r2
    429a:	d100      	bne.n	429e <__aeabi_dsub+0x536>
    429c:	e76b      	b.n	4176 <__aeabi_dsub+0x40e>
    429e:	4650      	mov	r0, sl
    42a0:	0767      	lsls	r7, r4, #29
    42a2:	08c0      	lsrs	r0, r0, #3
    42a4:	4307      	orrs	r7, r0
    42a6:	2080      	movs	r0, #128	; 0x80
    42a8:	08e4      	lsrs	r4, r4, #3
    42aa:	0300      	lsls	r0, r0, #12
    42ac:	4204      	tst	r4, r0
    42ae:	d007      	beq.n	42c0 <__aeabi_dsub+0x558>
    42b0:	08cd      	lsrs	r5, r1, #3
    42b2:	4205      	tst	r5, r0
    42b4:	d104      	bne.n	42c0 <__aeabi_dsub+0x558>
    42b6:	002c      	movs	r4, r5
    42b8:	4698      	mov	r8, r3
    42ba:	08d7      	lsrs	r7, r2, #3
    42bc:	0749      	lsls	r1, r1, #29
    42be:	430f      	orrs	r7, r1
    42c0:	0f7b      	lsrs	r3, r7, #29
    42c2:	00e4      	lsls	r4, r4, #3
    42c4:	431c      	orrs	r4, r3
    42c6:	00ff      	lsls	r7, r7, #3
    42c8:	4e30      	ldr	r6, [pc, #192]	; (438c <__aeabi_dsub+0x624>)
    42ca:	e5d3      	b.n	3e74 <__aeabi_dsub+0x10c>
    42cc:	4e2f      	ldr	r6, [pc, #188]	; (438c <__aeabi_dsub+0x624>)
    42ce:	45b4      	cmp	ip, r6
    42d0:	d1b4      	bne.n	423c <__aeabi_dsub+0x4d4>
    42d2:	000c      	movs	r4, r1
    42d4:	0017      	movs	r7, r2
    42d6:	4666      	mov	r6, ip
    42d8:	e5cc      	b.n	3e74 <__aeabi_dsub+0x10c>
    42da:	2700      	movs	r7, #0
    42dc:	2400      	movs	r4, #0
    42de:	e5e8      	b.n	3eb2 <__aeabi_dsub+0x14a>
    42e0:	2b00      	cmp	r3, #0
    42e2:	d039      	beq.n	4358 <__aeabi_dsub+0x5f0>
    42e4:	000b      	movs	r3, r1
    42e6:	4313      	orrs	r3, r2
    42e8:	d100      	bne.n	42ec <__aeabi_dsub+0x584>
    42ea:	e744      	b.n	4176 <__aeabi_dsub+0x40e>
    42ec:	08c0      	lsrs	r0, r0, #3
    42ee:	0767      	lsls	r7, r4, #29
    42f0:	4307      	orrs	r7, r0
    42f2:	2080      	movs	r0, #128	; 0x80
    42f4:	08e4      	lsrs	r4, r4, #3
    42f6:	0300      	lsls	r0, r0, #12
    42f8:	4204      	tst	r4, r0
    42fa:	d0e1      	beq.n	42c0 <__aeabi_dsub+0x558>
    42fc:	08cb      	lsrs	r3, r1, #3
    42fe:	4203      	tst	r3, r0
    4300:	d1de      	bne.n	42c0 <__aeabi_dsub+0x558>
    4302:	08d7      	lsrs	r7, r2, #3
    4304:	0749      	lsls	r1, r1, #29
    4306:	430f      	orrs	r7, r1
    4308:	001c      	movs	r4, r3
    430a:	e7d9      	b.n	42c0 <__aeabi_dsub+0x558>
    430c:	2100      	movs	r1, #0
    430e:	e771      	b.n	41f4 <__aeabi_dsub+0x48c>
    4310:	2500      	movs	r5, #0
    4312:	2700      	movs	r7, #0
    4314:	e5e9      	b.n	3eea <__aeabi_dsub+0x182>
    4316:	002e      	movs	r6, r5
    4318:	0027      	movs	r7, r4
    431a:	3e20      	subs	r6, #32
    431c:	40f7      	lsrs	r7, r6
    431e:	2d20      	cmp	r5, #32
    4320:	d02f      	beq.n	4382 <__aeabi_dsub+0x61a>
    4322:	2640      	movs	r6, #64	; 0x40
    4324:	1b75      	subs	r5, r6, r5
    4326:	40ac      	lsls	r4, r5
    4328:	4650      	mov	r0, sl
    432a:	4320      	orrs	r0, r4
    432c:	1e44      	subs	r4, r0, #1
    432e:	41a0      	sbcs	r0, r4
    4330:	2400      	movs	r4, #0
    4332:	4338      	orrs	r0, r7
    4334:	e6dc      	b.n	40f0 <__aeabi_dsub+0x388>
    4336:	2480      	movs	r4, #128	; 0x80
    4338:	2500      	movs	r5, #0
    433a:	0324      	lsls	r4, r4, #12
    433c:	4e13      	ldr	r6, [pc, #76]	; (438c <__aeabi_dsub+0x624>)
    433e:	2700      	movs	r7, #0
    4340:	e5d3      	b.n	3eea <__aeabi_dsub+0x182>
    4342:	4650      	mov	r0, sl
    4344:	4320      	orrs	r0, r4
    4346:	0007      	movs	r7, r0
    4348:	1e78      	subs	r0, r7, #1
    434a:	4187      	sbcs	r7, r0
    434c:	2400      	movs	r4, #0
    434e:	18bf      	adds	r7, r7, r2
    4350:	e760      	b.n	4214 <__aeabi_dsub+0x4ac>
    4352:	000c      	movs	r4, r1
    4354:	0017      	movs	r7, r2
    4356:	e58d      	b.n	3e74 <__aeabi_dsub+0x10c>
    4358:	000c      	movs	r4, r1
    435a:	0017      	movs	r7, r2
    435c:	4e0b      	ldr	r6, [pc, #44]	; (438c <__aeabi_dsub+0x624>)
    435e:	e589      	b.n	3e74 <__aeabi_dsub+0x10c>
    4360:	001e      	movs	r6, r3
    4362:	0027      	movs	r7, r4
    4364:	3e20      	subs	r6, #32
    4366:	40f7      	lsrs	r7, r6
    4368:	2b20      	cmp	r3, #32
    436a:	d00c      	beq.n	4386 <__aeabi_dsub+0x61e>
    436c:	2640      	movs	r6, #64	; 0x40
    436e:	1af3      	subs	r3, r6, r3
    4370:	409c      	lsls	r4, r3
    4372:	4650      	mov	r0, sl
    4374:	4320      	orrs	r0, r4
    4376:	1e44      	subs	r4, r0, #1
    4378:	41a0      	sbcs	r0, r4
    437a:	4307      	orrs	r7, r0
    437c:	2400      	movs	r4, #0
    437e:	18bf      	adds	r7, r7, r2
    4380:	e748      	b.n	4214 <__aeabi_dsub+0x4ac>
    4382:	2400      	movs	r4, #0
    4384:	e7d0      	b.n	4328 <__aeabi_dsub+0x5c0>
    4386:	2400      	movs	r4, #0
    4388:	e7f3      	b.n	4372 <__aeabi_dsub+0x60a>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	000007ff 	.word	0x000007ff
    4390:	ff7fffff 	.word	0xff7fffff

00004394 <__aeabi_d2iz>:
    4394:	b530      	push	{r4, r5, lr}
    4396:	4d13      	ldr	r5, [pc, #76]	; (43e4 <__aeabi_d2iz+0x50>)
    4398:	030a      	lsls	r2, r1, #12
    439a:	004b      	lsls	r3, r1, #1
    439c:	0b12      	lsrs	r2, r2, #12
    439e:	0d5b      	lsrs	r3, r3, #21
    43a0:	0fc9      	lsrs	r1, r1, #31
    43a2:	2400      	movs	r4, #0
    43a4:	42ab      	cmp	r3, r5
    43a6:	dd10      	ble.n	43ca <__aeabi_d2iz+0x36>
    43a8:	4c0f      	ldr	r4, [pc, #60]	; (43e8 <__aeabi_d2iz+0x54>)
    43aa:	42a3      	cmp	r3, r4
    43ac:	dc0f      	bgt.n	43ce <__aeabi_d2iz+0x3a>
    43ae:	2480      	movs	r4, #128	; 0x80
    43b0:	4d0e      	ldr	r5, [pc, #56]	; (43ec <__aeabi_d2iz+0x58>)
    43b2:	0364      	lsls	r4, r4, #13
    43b4:	4322      	orrs	r2, r4
    43b6:	1aed      	subs	r5, r5, r3
    43b8:	2d1f      	cmp	r5, #31
    43ba:	dd0b      	ble.n	43d4 <__aeabi_d2iz+0x40>
    43bc:	480c      	ldr	r0, [pc, #48]	; (43f0 <__aeabi_d2iz+0x5c>)
    43be:	1ac3      	subs	r3, r0, r3
    43c0:	40da      	lsrs	r2, r3
    43c2:	4254      	negs	r4, r2
    43c4:	2900      	cmp	r1, #0
    43c6:	d100      	bne.n	43ca <__aeabi_d2iz+0x36>
    43c8:	0014      	movs	r4, r2
    43ca:	0020      	movs	r0, r4
    43cc:	bd30      	pop	{r4, r5, pc}
    43ce:	4b09      	ldr	r3, [pc, #36]	; (43f4 <__aeabi_d2iz+0x60>)
    43d0:	18cc      	adds	r4, r1, r3
    43d2:	e7fa      	b.n	43ca <__aeabi_d2iz+0x36>
    43d4:	4c08      	ldr	r4, [pc, #32]	; (43f8 <__aeabi_d2iz+0x64>)
    43d6:	40e8      	lsrs	r0, r5
    43d8:	46a4      	mov	ip, r4
    43da:	4463      	add	r3, ip
    43dc:	409a      	lsls	r2, r3
    43de:	4302      	orrs	r2, r0
    43e0:	e7ef      	b.n	43c2 <__aeabi_d2iz+0x2e>
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	000003fe 	.word	0x000003fe
    43e8:	0000041d 	.word	0x0000041d
    43ec:	00000433 	.word	0x00000433
    43f0:	00000413 	.word	0x00000413
    43f4:	7fffffff 	.word	0x7fffffff
    43f8:	fffffbed 	.word	0xfffffbed

000043fc <__aeabi_i2d>:
    43fc:	b570      	push	{r4, r5, r6, lr}
    43fe:	2800      	cmp	r0, #0
    4400:	d030      	beq.n	4464 <__aeabi_i2d+0x68>
    4402:	17c3      	asrs	r3, r0, #31
    4404:	18c4      	adds	r4, r0, r3
    4406:	405c      	eors	r4, r3
    4408:	0fc5      	lsrs	r5, r0, #31
    440a:	0020      	movs	r0, r4
    440c:	f000 f94c 	bl	46a8 <__clzsi2>
    4410:	4b17      	ldr	r3, [pc, #92]	; (4470 <__aeabi_i2d+0x74>)
    4412:	4a18      	ldr	r2, [pc, #96]	; (4474 <__aeabi_i2d+0x78>)
    4414:	1a1b      	subs	r3, r3, r0
    4416:	1ad2      	subs	r2, r2, r3
    4418:	2a1f      	cmp	r2, #31
    441a:	dd18      	ble.n	444e <__aeabi_i2d+0x52>
    441c:	4a16      	ldr	r2, [pc, #88]	; (4478 <__aeabi_i2d+0x7c>)
    441e:	1ad2      	subs	r2, r2, r3
    4420:	4094      	lsls	r4, r2
    4422:	2200      	movs	r2, #0
    4424:	0324      	lsls	r4, r4, #12
    4426:	055b      	lsls	r3, r3, #21
    4428:	0b24      	lsrs	r4, r4, #12
    442a:	0d5b      	lsrs	r3, r3, #21
    442c:	2100      	movs	r1, #0
    442e:	0010      	movs	r0, r2
    4430:	0324      	lsls	r4, r4, #12
    4432:	0d0a      	lsrs	r2, r1, #20
    4434:	0b24      	lsrs	r4, r4, #12
    4436:	0512      	lsls	r2, r2, #20
    4438:	4322      	orrs	r2, r4
    443a:	4c10      	ldr	r4, [pc, #64]	; (447c <__aeabi_i2d+0x80>)
    443c:	051b      	lsls	r3, r3, #20
    443e:	4022      	ands	r2, r4
    4440:	4313      	orrs	r3, r2
    4442:	005b      	lsls	r3, r3, #1
    4444:	07ed      	lsls	r5, r5, #31
    4446:	085b      	lsrs	r3, r3, #1
    4448:	432b      	orrs	r3, r5
    444a:	0019      	movs	r1, r3
    444c:	bd70      	pop	{r4, r5, r6, pc}
    444e:	0021      	movs	r1, r4
    4450:	4091      	lsls	r1, r2
    4452:	000a      	movs	r2, r1
    4454:	210b      	movs	r1, #11
    4456:	1a08      	subs	r0, r1, r0
    4458:	40c4      	lsrs	r4, r0
    445a:	055b      	lsls	r3, r3, #21
    445c:	0324      	lsls	r4, r4, #12
    445e:	0b24      	lsrs	r4, r4, #12
    4460:	0d5b      	lsrs	r3, r3, #21
    4462:	e7e3      	b.n	442c <__aeabi_i2d+0x30>
    4464:	2500      	movs	r5, #0
    4466:	2300      	movs	r3, #0
    4468:	2400      	movs	r4, #0
    446a:	2200      	movs	r2, #0
    446c:	e7de      	b.n	442c <__aeabi_i2d+0x30>
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	0000041e 	.word	0x0000041e
    4474:	00000433 	.word	0x00000433
    4478:	00000413 	.word	0x00000413
    447c:	800fffff 	.word	0x800fffff

00004480 <__aeabi_ui2d>:
    4480:	b510      	push	{r4, lr}
    4482:	1e04      	subs	r4, r0, #0
    4484:	d028      	beq.n	44d8 <__aeabi_ui2d+0x58>
    4486:	f000 f90f 	bl	46a8 <__clzsi2>
    448a:	4b15      	ldr	r3, [pc, #84]	; (44e0 <__aeabi_ui2d+0x60>)
    448c:	4a15      	ldr	r2, [pc, #84]	; (44e4 <__aeabi_ui2d+0x64>)
    448e:	1a1b      	subs	r3, r3, r0
    4490:	1ad2      	subs	r2, r2, r3
    4492:	2a1f      	cmp	r2, #31
    4494:	dd15      	ble.n	44c2 <__aeabi_ui2d+0x42>
    4496:	4a14      	ldr	r2, [pc, #80]	; (44e8 <__aeabi_ui2d+0x68>)
    4498:	1ad2      	subs	r2, r2, r3
    449a:	4094      	lsls	r4, r2
    449c:	2200      	movs	r2, #0
    449e:	0324      	lsls	r4, r4, #12
    44a0:	055b      	lsls	r3, r3, #21
    44a2:	0b24      	lsrs	r4, r4, #12
    44a4:	0d5b      	lsrs	r3, r3, #21
    44a6:	2100      	movs	r1, #0
    44a8:	0010      	movs	r0, r2
    44aa:	0324      	lsls	r4, r4, #12
    44ac:	0d0a      	lsrs	r2, r1, #20
    44ae:	0b24      	lsrs	r4, r4, #12
    44b0:	0512      	lsls	r2, r2, #20
    44b2:	4322      	orrs	r2, r4
    44b4:	4c0d      	ldr	r4, [pc, #52]	; (44ec <__aeabi_ui2d+0x6c>)
    44b6:	051b      	lsls	r3, r3, #20
    44b8:	4022      	ands	r2, r4
    44ba:	4313      	orrs	r3, r2
    44bc:	005b      	lsls	r3, r3, #1
    44be:	0859      	lsrs	r1, r3, #1
    44c0:	bd10      	pop	{r4, pc}
    44c2:	0021      	movs	r1, r4
    44c4:	4091      	lsls	r1, r2
    44c6:	000a      	movs	r2, r1
    44c8:	210b      	movs	r1, #11
    44ca:	1a08      	subs	r0, r1, r0
    44cc:	40c4      	lsrs	r4, r0
    44ce:	055b      	lsls	r3, r3, #21
    44d0:	0324      	lsls	r4, r4, #12
    44d2:	0b24      	lsrs	r4, r4, #12
    44d4:	0d5b      	lsrs	r3, r3, #21
    44d6:	e7e6      	b.n	44a6 <__aeabi_ui2d+0x26>
    44d8:	2300      	movs	r3, #0
    44da:	2400      	movs	r4, #0
    44dc:	2200      	movs	r2, #0
    44de:	e7e2      	b.n	44a6 <__aeabi_ui2d+0x26>
    44e0:	0000041e 	.word	0x0000041e
    44e4:	00000433 	.word	0x00000433
    44e8:	00000413 	.word	0x00000413
    44ec:	800fffff 	.word	0x800fffff

000044f0 <__aeabi_f2d>:
    44f0:	0041      	lsls	r1, r0, #1
    44f2:	0e09      	lsrs	r1, r1, #24
    44f4:	1c4b      	adds	r3, r1, #1
    44f6:	b570      	push	{r4, r5, r6, lr}
    44f8:	b2db      	uxtb	r3, r3
    44fa:	0246      	lsls	r6, r0, #9
    44fc:	0a75      	lsrs	r5, r6, #9
    44fe:	0fc4      	lsrs	r4, r0, #31
    4500:	2b01      	cmp	r3, #1
    4502:	dd14      	ble.n	452e <__aeabi_f2d+0x3e>
    4504:	23e0      	movs	r3, #224	; 0xe0
    4506:	009b      	lsls	r3, r3, #2
    4508:	076d      	lsls	r5, r5, #29
    450a:	0b36      	lsrs	r6, r6, #12
    450c:	18cb      	adds	r3, r1, r3
    450e:	2100      	movs	r1, #0
    4510:	0d0a      	lsrs	r2, r1, #20
    4512:	0028      	movs	r0, r5
    4514:	0512      	lsls	r2, r2, #20
    4516:	4d1c      	ldr	r5, [pc, #112]	; (4588 <__aeabi_f2d+0x98>)
    4518:	4332      	orrs	r2, r6
    451a:	055b      	lsls	r3, r3, #21
    451c:	402a      	ands	r2, r5
    451e:	085b      	lsrs	r3, r3, #1
    4520:	4313      	orrs	r3, r2
    4522:	005b      	lsls	r3, r3, #1
    4524:	07e4      	lsls	r4, r4, #31
    4526:	085b      	lsrs	r3, r3, #1
    4528:	4323      	orrs	r3, r4
    452a:	0019      	movs	r1, r3
    452c:	bd70      	pop	{r4, r5, r6, pc}
    452e:	2900      	cmp	r1, #0
    4530:	d114      	bne.n	455c <__aeabi_f2d+0x6c>
    4532:	2d00      	cmp	r5, #0
    4534:	d01e      	beq.n	4574 <__aeabi_f2d+0x84>
    4536:	0028      	movs	r0, r5
    4538:	f000 f8b6 	bl	46a8 <__clzsi2>
    453c:	280a      	cmp	r0, #10
    453e:	dc1c      	bgt.n	457a <__aeabi_f2d+0x8a>
    4540:	230b      	movs	r3, #11
    4542:	002a      	movs	r2, r5
    4544:	1a1b      	subs	r3, r3, r0
    4546:	40da      	lsrs	r2, r3
    4548:	0003      	movs	r3, r0
    454a:	3315      	adds	r3, #21
    454c:	409d      	lsls	r5, r3
    454e:	4b0f      	ldr	r3, [pc, #60]	; (458c <__aeabi_f2d+0x9c>)
    4550:	0312      	lsls	r2, r2, #12
    4552:	1a1b      	subs	r3, r3, r0
    4554:	055b      	lsls	r3, r3, #21
    4556:	0b16      	lsrs	r6, r2, #12
    4558:	0d5b      	lsrs	r3, r3, #21
    455a:	e7d8      	b.n	450e <__aeabi_f2d+0x1e>
    455c:	2d00      	cmp	r5, #0
    455e:	d006      	beq.n	456e <__aeabi_f2d+0x7e>
    4560:	0b32      	lsrs	r2, r6, #12
    4562:	2680      	movs	r6, #128	; 0x80
    4564:	0336      	lsls	r6, r6, #12
    4566:	076d      	lsls	r5, r5, #29
    4568:	4316      	orrs	r6, r2
    456a:	4b09      	ldr	r3, [pc, #36]	; (4590 <__aeabi_f2d+0xa0>)
    456c:	e7cf      	b.n	450e <__aeabi_f2d+0x1e>
    456e:	4b08      	ldr	r3, [pc, #32]	; (4590 <__aeabi_f2d+0xa0>)
    4570:	2600      	movs	r6, #0
    4572:	e7cc      	b.n	450e <__aeabi_f2d+0x1e>
    4574:	2300      	movs	r3, #0
    4576:	2600      	movs	r6, #0
    4578:	e7c9      	b.n	450e <__aeabi_f2d+0x1e>
    457a:	0003      	movs	r3, r0
    457c:	002a      	movs	r2, r5
    457e:	3b0b      	subs	r3, #11
    4580:	409a      	lsls	r2, r3
    4582:	2500      	movs	r5, #0
    4584:	e7e3      	b.n	454e <__aeabi_f2d+0x5e>
    4586:	46c0      	nop			; (mov r8, r8)
    4588:	800fffff 	.word	0x800fffff
    458c:	00000389 	.word	0x00000389
    4590:	000007ff 	.word	0x000007ff

00004594 <__aeabi_d2f>:
    4594:	b5f0      	push	{r4, r5, r6, r7, lr}
    4596:	004c      	lsls	r4, r1, #1
    4598:	0d64      	lsrs	r4, r4, #21
    459a:	030b      	lsls	r3, r1, #12
    459c:	1c62      	adds	r2, r4, #1
    459e:	0f45      	lsrs	r5, r0, #29
    45a0:	0a5b      	lsrs	r3, r3, #9
    45a2:	0552      	lsls	r2, r2, #21
    45a4:	432b      	orrs	r3, r5
    45a6:	0fc9      	lsrs	r1, r1, #31
    45a8:	00c5      	lsls	r5, r0, #3
    45aa:	0d52      	lsrs	r2, r2, #21
    45ac:	2a01      	cmp	r2, #1
    45ae:	dd28      	ble.n	4602 <__aeabi_d2f+0x6e>
    45b0:	4a3a      	ldr	r2, [pc, #232]	; (469c <__aeabi_d2f+0x108>)
    45b2:	18a6      	adds	r6, r4, r2
    45b4:	2efe      	cmp	r6, #254	; 0xfe
    45b6:	dc1b      	bgt.n	45f0 <__aeabi_d2f+0x5c>
    45b8:	2e00      	cmp	r6, #0
    45ba:	dd3e      	ble.n	463a <__aeabi_d2f+0xa6>
    45bc:	0180      	lsls	r0, r0, #6
    45be:	0002      	movs	r2, r0
    45c0:	1e50      	subs	r0, r2, #1
    45c2:	4182      	sbcs	r2, r0
    45c4:	0f6d      	lsrs	r5, r5, #29
    45c6:	432a      	orrs	r2, r5
    45c8:	00db      	lsls	r3, r3, #3
    45ca:	4313      	orrs	r3, r2
    45cc:	075a      	lsls	r2, r3, #29
    45ce:	d004      	beq.n	45da <__aeabi_d2f+0x46>
    45d0:	220f      	movs	r2, #15
    45d2:	401a      	ands	r2, r3
    45d4:	2a04      	cmp	r2, #4
    45d6:	d000      	beq.n	45da <__aeabi_d2f+0x46>
    45d8:	3304      	adds	r3, #4
    45da:	2280      	movs	r2, #128	; 0x80
    45dc:	04d2      	lsls	r2, r2, #19
    45de:	401a      	ands	r2, r3
    45e0:	d05a      	beq.n	4698 <__aeabi_d2f+0x104>
    45e2:	3601      	adds	r6, #1
    45e4:	2eff      	cmp	r6, #255	; 0xff
    45e6:	d003      	beq.n	45f0 <__aeabi_d2f+0x5c>
    45e8:	019b      	lsls	r3, r3, #6
    45ea:	0a5b      	lsrs	r3, r3, #9
    45ec:	b2f4      	uxtb	r4, r6
    45ee:	e001      	b.n	45f4 <__aeabi_d2f+0x60>
    45f0:	24ff      	movs	r4, #255	; 0xff
    45f2:	2300      	movs	r3, #0
    45f4:	0258      	lsls	r0, r3, #9
    45f6:	05e4      	lsls	r4, r4, #23
    45f8:	0a40      	lsrs	r0, r0, #9
    45fa:	07c9      	lsls	r1, r1, #31
    45fc:	4320      	orrs	r0, r4
    45fe:	4308      	orrs	r0, r1
    4600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4602:	2c00      	cmp	r4, #0
    4604:	d007      	beq.n	4616 <__aeabi_d2f+0x82>
    4606:	431d      	orrs	r5, r3
    4608:	d0f2      	beq.n	45f0 <__aeabi_d2f+0x5c>
    460a:	2080      	movs	r0, #128	; 0x80
    460c:	00db      	lsls	r3, r3, #3
    460e:	0480      	lsls	r0, r0, #18
    4610:	4303      	orrs	r3, r0
    4612:	26ff      	movs	r6, #255	; 0xff
    4614:	e7da      	b.n	45cc <__aeabi_d2f+0x38>
    4616:	432b      	orrs	r3, r5
    4618:	d003      	beq.n	4622 <__aeabi_d2f+0x8e>
    461a:	2305      	movs	r3, #5
    461c:	08db      	lsrs	r3, r3, #3
    461e:	2cff      	cmp	r4, #255	; 0xff
    4620:	d003      	beq.n	462a <__aeabi_d2f+0x96>
    4622:	025b      	lsls	r3, r3, #9
    4624:	0a5b      	lsrs	r3, r3, #9
    4626:	b2e4      	uxtb	r4, r4
    4628:	e7e4      	b.n	45f4 <__aeabi_d2f+0x60>
    462a:	2b00      	cmp	r3, #0
    462c:	d032      	beq.n	4694 <__aeabi_d2f+0x100>
    462e:	2080      	movs	r0, #128	; 0x80
    4630:	03c0      	lsls	r0, r0, #15
    4632:	4303      	orrs	r3, r0
    4634:	025b      	lsls	r3, r3, #9
    4636:	0a5b      	lsrs	r3, r3, #9
    4638:	e7dc      	b.n	45f4 <__aeabi_d2f+0x60>
    463a:	0032      	movs	r2, r6
    463c:	3217      	adds	r2, #23
    463e:	db14      	blt.n	466a <__aeabi_d2f+0xd6>
    4640:	2280      	movs	r2, #128	; 0x80
    4642:	271e      	movs	r7, #30
    4644:	0412      	lsls	r2, r2, #16
    4646:	4313      	orrs	r3, r2
    4648:	1bbf      	subs	r7, r7, r6
    464a:	2f1f      	cmp	r7, #31
    464c:	dc0f      	bgt.n	466e <__aeabi_d2f+0xda>
    464e:	4a14      	ldr	r2, [pc, #80]	; (46a0 <__aeabi_d2f+0x10c>)
    4650:	4694      	mov	ip, r2
    4652:	4464      	add	r4, ip
    4654:	002a      	movs	r2, r5
    4656:	40a5      	lsls	r5, r4
    4658:	002e      	movs	r6, r5
    465a:	40a3      	lsls	r3, r4
    465c:	1e75      	subs	r5, r6, #1
    465e:	41ae      	sbcs	r6, r5
    4660:	40fa      	lsrs	r2, r7
    4662:	4333      	orrs	r3, r6
    4664:	4313      	orrs	r3, r2
    4666:	2600      	movs	r6, #0
    4668:	e7b0      	b.n	45cc <__aeabi_d2f+0x38>
    466a:	2400      	movs	r4, #0
    466c:	e7d5      	b.n	461a <__aeabi_d2f+0x86>
    466e:	2202      	movs	r2, #2
    4670:	4252      	negs	r2, r2
    4672:	1b96      	subs	r6, r2, r6
    4674:	001a      	movs	r2, r3
    4676:	40f2      	lsrs	r2, r6
    4678:	2f20      	cmp	r7, #32
    467a:	d009      	beq.n	4690 <__aeabi_d2f+0xfc>
    467c:	4809      	ldr	r0, [pc, #36]	; (46a4 <__aeabi_d2f+0x110>)
    467e:	4684      	mov	ip, r0
    4680:	4464      	add	r4, ip
    4682:	40a3      	lsls	r3, r4
    4684:	432b      	orrs	r3, r5
    4686:	1e5d      	subs	r5, r3, #1
    4688:	41ab      	sbcs	r3, r5
    468a:	2600      	movs	r6, #0
    468c:	4313      	orrs	r3, r2
    468e:	e79d      	b.n	45cc <__aeabi_d2f+0x38>
    4690:	2300      	movs	r3, #0
    4692:	e7f7      	b.n	4684 <__aeabi_d2f+0xf0>
    4694:	2300      	movs	r3, #0
    4696:	e7ad      	b.n	45f4 <__aeabi_d2f+0x60>
    4698:	0034      	movs	r4, r6
    469a:	e7bf      	b.n	461c <__aeabi_d2f+0x88>
    469c:	fffffc80 	.word	0xfffffc80
    46a0:	fffffc82 	.word	0xfffffc82
    46a4:	fffffca2 	.word	0xfffffca2

000046a8 <__clzsi2>:
    46a8:	211c      	movs	r1, #28
    46aa:	2301      	movs	r3, #1
    46ac:	041b      	lsls	r3, r3, #16
    46ae:	4298      	cmp	r0, r3
    46b0:	d301      	bcc.n	46b6 <__clzsi2+0xe>
    46b2:	0c00      	lsrs	r0, r0, #16
    46b4:	3910      	subs	r1, #16
    46b6:	0a1b      	lsrs	r3, r3, #8
    46b8:	4298      	cmp	r0, r3
    46ba:	d301      	bcc.n	46c0 <__clzsi2+0x18>
    46bc:	0a00      	lsrs	r0, r0, #8
    46be:	3908      	subs	r1, #8
    46c0:	091b      	lsrs	r3, r3, #4
    46c2:	4298      	cmp	r0, r3
    46c4:	d301      	bcc.n	46ca <__clzsi2+0x22>
    46c6:	0900      	lsrs	r0, r0, #4
    46c8:	3904      	subs	r1, #4
    46ca:	a202      	add	r2, pc, #8	; (adr r2, 46d4 <__clzsi2+0x2c>)
    46cc:	5c10      	ldrb	r0, [r2, r0]
    46ce:	1840      	adds	r0, r0, r1
    46d0:	4770      	bx	lr
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	02020304 	.word	0x02020304
    46d8:	01010101 	.word	0x01010101
	...

000046e4 <gcvt>:
    46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e6:	001c      	movs	r4, r3
    46e8:	b085      	sub	sp, #20
    46ea:	2300      	movs	r3, #0
    46ec:	0015      	movs	r5, r2
    46ee:	2200      	movs	r2, #0
    46f0:	0006      	movs	r6, r0
    46f2:	000f      	movs	r7, r1
    46f4:	f7fe f94c 	bl	2990 <__aeabi_dcmplt>
    46f8:	0023      	movs	r3, r4
    46fa:	2800      	cmp	r0, #0
    46fc:	d003      	beq.n	4706 <gcvt+0x22>
    46fe:	232d      	movs	r3, #45	; 0x2d
    4700:	3d01      	subs	r5, #1
    4702:	7023      	strb	r3, [r4, #0]
    4704:	1c63      	adds	r3, r4, #1
    4706:	2200      	movs	r2, #0
    4708:	4908      	ldr	r1, [pc, #32]	; (472c <gcvt+0x48>)
    470a:	9203      	str	r2, [sp, #12]
    470c:	3267      	adds	r2, #103	; 0x67
    470e:	9202      	str	r2, [sp, #8]
    4710:	9301      	str	r3, [sp, #4]
    4712:	9500      	str	r5, [sp, #0]
    4714:	003b      	movs	r3, r7
    4716:	0032      	movs	r2, r6
    4718:	6808      	ldr	r0, [r1, #0]
    471a:	f000 f8b9 	bl	4890 <_gcvt>
    471e:	1e43      	subs	r3, r0, #1
    4720:	4198      	sbcs	r0, r3
    4722:	4240      	negs	r0, r0
    4724:	4004      	ands	r4, r0
    4726:	0020      	movs	r0, r4
    4728:	b005      	add	sp, #20
    472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    472c:	20000010 	.word	0x20000010

00004730 <__libc_init_array>:
    4730:	b570      	push	{r4, r5, r6, lr}
    4732:	2600      	movs	r6, #0
    4734:	4d0c      	ldr	r5, [pc, #48]	; (4768 <__libc_init_array+0x38>)
    4736:	4c0d      	ldr	r4, [pc, #52]	; (476c <__libc_init_array+0x3c>)
    4738:	1b64      	subs	r4, r4, r5
    473a:	10a4      	asrs	r4, r4, #2
    473c:	42a6      	cmp	r6, r4
    473e:	d109      	bne.n	4754 <__libc_init_array+0x24>
    4740:	2600      	movs	r6, #0
    4742:	f001 fc93 	bl	606c <_init>
    4746:	4d0a      	ldr	r5, [pc, #40]	; (4770 <__libc_init_array+0x40>)
    4748:	4c0a      	ldr	r4, [pc, #40]	; (4774 <__libc_init_array+0x44>)
    474a:	1b64      	subs	r4, r4, r5
    474c:	10a4      	asrs	r4, r4, #2
    474e:	42a6      	cmp	r6, r4
    4750:	d105      	bne.n	475e <__libc_init_array+0x2e>
    4752:	bd70      	pop	{r4, r5, r6, pc}
    4754:	00b3      	lsls	r3, r6, #2
    4756:	58eb      	ldr	r3, [r5, r3]
    4758:	4798      	blx	r3
    475a:	3601      	adds	r6, #1
    475c:	e7ee      	b.n	473c <__libc_init_array+0xc>
    475e:	00b3      	lsls	r3, r6, #2
    4760:	58eb      	ldr	r3, [r5, r3]
    4762:	4798      	blx	r3
    4764:	3601      	adds	r6, #1
    4766:	e7f2      	b.n	474e <__libc_init_array+0x1e>
    4768:	00006078 	.word	0x00006078
    476c:	00006078 	.word	0x00006078
    4770:	00006078 	.word	0x00006078
    4774:	0000607c 	.word	0x0000607c

00004778 <memcpy>:
    4778:	2300      	movs	r3, #0
    477a:	b510      	push	{r4, lr}
    477c:	429a      	cmp	r2, r3
    477e:	d100      	bne.n	4782 <memcpy+0xa>
    4780:	bd10      	pop	{r4, pc}
    4782:	5ccc      	ldrb	r4, [r1, r3]
    4784:	54c4      	strb	r4, [r0, r3]
    4786:	3301      	adds	r3, #1
    4788:	e7f8      	b.n	477c <memcpy+0x4>

0000478a <memset>:
    478a:	0003      	movs	r3, r0
    478c:	1882      	adds	r2, r0, r2
    478e:	4293      	cmp	r3, r2
    4790:	d100      	bne.n	4794 <memset+0xa>
    4792:	4770      	bx	lr
    4794:	7019      	strb	r1, [r3, #0]
    4796:	3301      	adds	r3, #1
    4798:	e7f9      	b.n	478e <memset+0x4>
	...

0000479c <print_e>:
    479c:	b5f0      	push	{r4, r5, r6, r7, lr}
    479e:	b08b      	sub	sp, #44	; 0x2c
    47a0:	000e      	movs	r6, r1
    47a2:	a910      	add	r1, sp, #64	; 0x40
    47a4:	c910      	ldmia	r1!, {r4}
    47a6:	780d      	ldrb	r5, [r1, #0]
    47a8:	a908      	add	r1, sp, #32
    47aa:	9104      	str	r1, [sp, #16]
    47ac:	a907      	add	r1, sp, #28
    47ae:	9103      	str	r1, [sp, #12]
    47b0:	a909      	add	r1, sp, #36	; 0x24
    47b2:	9102      	str	r1, [sp, #8]
    47b4:	1c61      	adds	r1, r4, #1
    47b6:	9101      	str	r1, [sp, #4]
    47b8:	2102      	movs	r1, #2
    47ba:	9100      	str	r1, [sp, #0]
    47bc:	f000 fd3c 	bl	5238 <_dtoa_r>
    47c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    47c2:	4b32      	ldr	r3, [pc, #200]	; (488c <print_e+0xf0>)
    47c4:	429f      	cmp	r7, r3
    47c6:	d105      	bne.n	47d4 <print_e+0x38>
    47c8:	0001      	movs	r1, r0
    47ca:	0030      	movs	r0, r6
    47cc:	f000 fca8 	bl	5120 <strcpy>
    47d0:	b00b      	add	sp, #44	; 0x2c
    47d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d4:	7803      	ldrb	r3, [r0, #0]
    47d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    47d8:	1c41      	adds	r1, r0, #1
    47da:	7033      	strb	r3, [r6, #0]
    47dc:	4322      	orrs	r2, r4
    47de:	d109      	bne.n	47f4 <print_e+0x58>
    47e0:	0014      	movs	r4, r2
    47e2:	1c73      	adds	r3, r6, #1
    47e4:	7808      	ldrb	r0, [r1, #0]
    47e6:	001a      	movs	r2, r3
    47e8:	2800      	cmp	r0, #0
    47ea:	d107      	bne.n	47fc <print_e+0x60>
    47ec:	2d67      	cmp	r5, #103	; 0x67
    47ee:	d10c      	bne.n	480a <print_e+0x6e>
    47f0:	2565      	movs	r5, #101	; 0x65
    47f2:	e014      	b.n	481e <print_e+0x82>
    47f4:	222e      	movs	r2, #46	; 0x2e
    47f6:	1cb3      	adds	r3, r6, #2
    47f8:	7072      	strb	r2, [r6, #1]
    47fa:	e7f3      	b.n	47e4 <print_e+0x48>
    47fc:	2c00      	cmp	r4, #0
    47fe:	ddf5      	ble.n	47ec <print_e+0x50>
    4800:	7018      	strb	r0, [r3, #0]
    4802:	3101      	adds	r1, #1
    4804:	3c01      	subs	r4, #1
    4806:	3301      	adds	r3, #1
    4808:	e7ec      	b.n	47e4 <print_e+0x48>
    480a:	2d47      	cmp	r5, #71	; 0x47
    480c:	d039      	beq.n	4882 <print_e+0xe6>
    480e:	0021      	movs	r1, r4
    4810:	2030      	movs	r0, #48	; 0x30
    4812:	2900      	cmp	r1, #0
    4814:	dc31      	bgt.n	487a <print_e+0xde>
    4816:	43e3      	mvns	r3, r4
    4818:	17db      	asrs	r3, r3, #31
    481a:	401c      	ands	r4, r3
    481c:	1912      	adds	r2, r2, r4
    481e:	7015      	strb	r5, [r2, #0]
    4820:	1e7b      	subs	r3, r7, #1
    4822:	1c95      	adds	r5, r2, #2
    4824:	9309      	str	r3, [sp, #36]	; 0x24
    4826:	002c      	movs	r4, r5
    4828:	2b00      	cmp	r3, #0
    482a:	da2c      	bge.n	4886 <print_e+0xea>
    482c:	232d      	movs	r3, #45	; 0x2d
    482e:	7053      	strb	r3, [r2, #1]
    4830:	3b2c      	subs	r3, #44	; 0x2c
    4832:	1bdf      	subs	r7, r3, r7
    4834:	9709      	str	r7, [sp, #36]	; 0x24
    4836:	9e09      	ldr	r6, [sp, #36]	; 0x24
    4838:	2e63      	cmp	r6, #99	; 0x63
    483a:	dd0c      	ble.n	4856 <print_e+0xba>
    483c:	2164      	movs	r1, #100	; 0x64
    483e:	0030      	movs	r0, r6
    4840:	f7fd ffa4 	bl	278c <__divsi3>
    4844:	0003      	movs	r3, r0
    4846:	3330      	adds	r3, #48	; 0x30
    4848:	702b      	strb	r3, [r5, #0]
    484a:	2364      	movs	r3, #100	; 0x64
    484c:	425b      	negs	r3, r3
    484e:	4358      	muls	r0, r3
    4850:	1980      	adds	r0, r0, r6
    4852:	9009      	str	r0, [sp, #36]	; 0x24
    4854:	1c6c      	adds	r4, r5, #1
    4856:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4858:	210a      	movs	r1, #10
    485a:	0028      	movs	r0, r5
    485c:	f7fd ff96 	bl	278c <__divsi3>
    4860:	0003      	movs	r3, r0
    4862:	0002      	movs	r2, r0
    4864:	200a      	movs	r0, #10
    4866:	4240      	negs	r0, r0
    4868:	4358      	muls	r0, r3
    486a:	2300      	movs	r3, #0
    486c:	1940      	adds	r0, r0, r5
    486e:	3230      	adds	r2, #48	; 0x30
    4870:	3030      	adds	r0, #48	; 0x30
    4872:	7022      	strb	r2, [r4, #0]
    4874:	7060      	strb	r0, [r4, #1]
    4876:	70a3      	strb	r3, [r4, #2]
    4878:	e7aa      	b.n	47d0 <print_e+0x34>
    487a:	7018      	strb	r0, [r3, #0]
    487c:	3901      	subs	r1, #1
    487e:	3301      	adds	r3, #1
    4880:	e7c7      	b.n	4812 <print_e+0x76>
    4882:	2545      	movs	r5, #69	; 0x45
    4884:	e7cb      	b.n	481e <print_e+0x82>
    4886:	232b      	movs	r3, #43	; 0x2b
    4888:	7053      	strb	r3, [r2, #1]
    488a:	e7d4      	b.n	4836 <print_e+0x9a>
    488c:	0000270f 	.word	0x0000270f

00004890 <_gcvt>:
    4890:	b5f0      	push	{r4, r5, r6, r7, lr}
    4892:	0015      	movs	r5, r2
    4894:	001c      	movs	r4, r3
    4896:	b08d      	sub	sp, #52	; 0x34
    4898:	ab14      	add	r3, sp, #80	; 0x50
    489a:	781b      	ldrb	r3, [r3, #0]
    489c:	0006      	movs	r6, r0
    489e:	9307      	str	r3, [sp, #28]
    48a0:	2200      	movs	r2, #0
    48a2:	2300      	movs	r3, #0
    48a4:	0028      	movs	r0, r5
    48a6:	0021      	movs	r1, r4
    48a8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    48aa:	f7fe f871 	bl	2990 <__aeabi_dcmplt>
    48ae:	2800      	cmp	r0, #0
    48b0:	d002      	beq.n	48b8 <_gcvt+0x28>
    48b2:	2380      	movs	r3, #128	; 0x80
    48b4:	061b      	lsls	r3, r3, #24
    48b6:	18e4      	adds	r4, r4, r3
    48b8:	2200      	movs	r2, #0
    48ba:	2300      	movs	r3, #0
    48bc:	0028      	movs	r0, r5
    48be:	0021      	movs	r1, r4
    48c0:	f7fe f860 	bl	2984 <__aeabi_dcmpeq>
    48c4:	2800      	cmp	r0, #0
    48c6:	d006      	beq.n	48d6 <_gcvt+0x46>
    48c8:	2330      	movs	r3, #48	; 0x30
    48ca:	703b      	strb	r3, [r7, #0]
    48cc:	2300      	movs	r3, #0
    48ce:	707b      	strb	r3, [r7, #1]
    48d0:	0038      	movs	r0, r7
    48d2:	b00d      	add	sp, #52	; 0x34
    48d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48d6:	4a51      	ldr	r2, [pc, #324]	; (4a1c <_gcvt+0x18c>)
    48d8:	4b51      	ldr	r3, [pc, #324]	; (4a20 <_gcvt+0x190>)
    48da:	0028      	movs	r0, r5
    48dc:	0021      	movs	r1, r4
    48de:	f7fe f861 	bl	29a4 <__aeabi_dcmple>
    48e2:	2800      	cmp	r0, #0
    48e4:	d00d      	beq.n	4902 <_gcvt+0x72>
    48e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    48e8:	002a      	movs	r2, r5
    48ea:	9302      	str	r3, [sp, #8]
    48ec:	9b07      	ldr	r3, [sp, #28]
    48ee:	0039      	movs	r1, r7
    48f0:	9301      	str	r3, [sp, #4]
    48f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    48f4:	0030      	movs	r0, r6
    48f6:	3b01      	subs	r3, #1
    48f8:	9300      	str	r3, [sp, #0]
    48fa:	0023      	movs	r3, r4
    48fc:	f7ff ff4e 	bl	479c <print_e>
    4900:	e7e6      	b.n	48d0 <_gcvt+0x40>
    4902:	9812      	ldr	r0, [sp, #72]	; 0x48
    4904:	f000 fb74 	bl	4ff0 <_mprec_log10>
    4908:	0002      	movs	r2, r0
    490a:	000b      	movs	r3, r1
    490c:	0028      	movs	r0, r5
    490e:	0021      	movs	r1, r4
    4910:	f7fe f85c 	bl	29cc <__aeabi_dcmpge>
    4914:	2800      	cmp	r0, #0
    4916:	d1e6      	bne.n	48e6 <_gcvt+0x56>
    4918:	2200      	movs	r2, #0
    491a:	4b42      	ldr	r3, [pc, #264]	; (4a24 <_gcvt+0x194>)
    491c:	0028      	movs	r0, r5
    491e:	0021      	movs	r1, r4
    4920:	f7fe f836 	bl	2990 <__aeabi_dcmplt>
    4924:	ab0a      	add	r3, sp, #40	; 0x28
    4926:	9303      	str	r3, [sp, #12]
    4928:	ab09      	add	r3, sp, #36	; 0x24
    492a:	9302      	str	r3, [sp, #8]
    492c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    492e:	aa0b      	add	r2, sp, #44	; 0x2c
    4930:	9301      	str	r3, [sp, #4]
    4932:	9204      	str	r2, [sp, #16]
    4934:	2303      	movs	r3, #3
    4936:	2800      	cmp	r0, #0
    4938:	d100      	bne.n	493c <_gcvt+0xac>
    493a:	2302      	movs	r3, #2
    493c:	9300      	str	r3, [sp, #0]
    493e:	002a      	movs	r2, r5
    4940:	0023      	movs	r3, r4
    4942:	0030      	movs	r0, r6
    4944:	f000 fc78 	bl	5238 <_dtoa_r>
    4948:	4b37      	ldr	r3, [pc, #220]	; (4a28 <_gcvt+0x198>)
    494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    494c:	429a      	cmp	r2, r3
    494e:	d013      	beq.n	4978 <_gcvt+0xe8>
    4950:	003a      	movs	r2, r7
    4952:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4954:	7804      	ldrb	r4, [r0, #0]
    4956:	1a9b      	subs	r3, r3, r2
    4958:	0011      	movs	r1, r2
    495a:	18fb      	adds	r3, r7, r3
    495c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    495e:	2c00      	cmp	r4, #0
    4960:	d115      	bne.n	498e <_gcvt+0xfe>
    4962:	2101      	movs	r1, #1
    4964:	468c      	mov	ip, r1
    4966:	1aed      	subs	r5, r5, r3
    4968:	18ee      	adds	r6, r5, r3
    496a:	0011      	movs	r1, r2
    496c:	2e00      	cmp	r6, #0
    496e:	dc3b      	bgt.n	49e8 <_gcvt+0x158>
    4970:	2c00      	cmp	r4, #0
    4972:	d00e      	beq.n	4992 <_gcvt+0x102>
    4974:	9609      	str	r6, [sp, #36]	; 0x24
    4976:	e00c      	b.n	4992 <_gcvt+0x102>
    4978:	0001      	movs	r1, r0
    497a:	0038      	movs	r0, r7
    497c:	f000 fbd0 	bl	5120 <strcpy>
    4980:	e7a6      	b.n	48d0 <_gcvt+0x40>
    4982:	3d01      	subs	r5, #1
    4984:	7014      	strb	r4, [r2, #0]
    4986:	3001      	adds	r0, #1
    4988:	9509      	str	r5, [sp, #36]	; 0x24
    498a:	3201      	adds	r2, #1
    498c:	e7e1      	b.n	4952 <_gcvt+0xc2>
    498e:	2d00      	cmp	r5, #0
    4990:	dcf7      	bgt.n	4982 <_gcvt+0xf2>
    4992:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4994:	2c00      	cmp	r4, #0
    4996:	d102      	bne.n	499e <_gcvt+0x10e>
    4998:	7804      	ldrb	r4, [r0, #0]
    499a:	2c00      	cmp	r4, #0
    499c:	d021      	beq.n	49e2 <_gcvt+0x152>
    499e:	4297      	cmp	r7, r2
    49a0:	d102      	bne.n	49a8 <_gcvt+0x118>
    49a2:	2230      	movs	r2, #48	; 0x30
    49a4:	1c79      	adds	r1, r7, #1
    49a6:	703a      	strb	r2, [r7, #0]
    49a8:	222e      	movs	r2, #46	; 0x2e
    49aa:	2530      	movs	r5, #48	; 0x30
    49ac:	700a      	strb	r2, [r1, #0]
    49ae:	2601      	movs	r6, #1
    49b0:	1c4a      	adds	r2, r1, #1
    49b2:	2100      	movs	r1, #0
    49b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    49b6:	2c00      	cmp	r4, #0
    49b8:	db1e      	blt.n	49f8 <_gcvt+0x168>
    49ba:	2900      	cmp	r1, #0
    49bc:	d000      	beq.n	49c0 <_gcvt+0x130>
    49be:	9409      	str	r4, [sp, #36]	; 0x24
    49c0:	7804      	ldrb	r4, [r0, #0]
    49c2:	0011      	movs	r1, r2
    49c4:	2c00      	cmp	r4, #0
    49c6:	d001      	beq.n	49cc <_gcvt+0x13c>
    49c8:	2b00      	cmp	r3, #0
    49ca:	dc1d      	bgt.n	4a08 <_gcvt+0x178>
    49cc:	9815      	ldr	r0, [sp, #84]	; 0x54
    49ce:	2800      	cmp	r0, #0
    49d0:	d007      	beq.n	49e2 <_gcvt+0x152>
    49d2:	0018      	movs	r0, r3
    49d4:	2430      	movs	r4, #48	; 0x30
    49d6:	2800      	cmp	r0, #0
    49d8:	dc1b      	bgt.n	4a12 <_gcvt+0x182>
    49da:	43da      	mvns	r2, r3
    49dc:	17d2      	asrs	r2, r2, #31
    49de:	4013      	ands	r3, r2
    49e0:	18c9      	adds	r1, r1, r3
    49e2:	2300      	movs	r3, #0
    49e4:	700b      	strb	r3, [r1, #0]
    49e6:	e773      	b.n	48d0 <_gcvt+0x40>
    49e8:	2b00      	cmp	r3, #0
    49ea:	ddc1      	ble.n	4970 <_gcvt+0xe0>
    49ec:	2130      	movs	r1, #48	; 0x30
    49ee:	3b01      	subs	r3, #1
    49f0:	7011      	strb	r1, [r2, #0]
    49f2:	4664      	mov	r4, ip
    49f4:	3201      	adds	r2, #1
    49f6:	e7b7      	b.n	4968 <_gcvt+0xd8>
    49f8:	2b00      	cmp	r3, #0
    49fa:	ddde      	ble.n	49ba <_gcvt+0x12a>
    49fc:	7015      	strb	r5, [r2, #0]
    49fe:	3401      	adds	r4, #1
    4a00:	3b01      	subs	r3, #1
    4a02:	3201      	adds	r2, #1
    4a04:	0031      	movs	r1, r6
    4a06:	e7d6      	b.n	49b6 <_gcvt+0x126>
    4a08:	7014      	strb	r4, [r2, #0]
    4a0a:	3001      	adds	r0, #1
    4a0c:	3b01      	subs	r3, #1
    4a0e:	3201      	adds	r2, #1
    4a10:	e7d6      	b.n	49c0 <_gcvt+0x130>
    4a12:	7014      	strb	r4, [r2, #0]
    4a14:	3801      	subs	r0, #1
    4a16:	3201      	adds	r2, #1
    4a18:	e7dd      	b.n	49d6 <_gcvt+0x146>
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	eb1c432d 	.word	0xeb1c432d
    4a20:	3f1a36e2 	.word	0x3f1a36e2
    4a24:	3ff00000 	.word	0x3ff00000
    4a28:	0000270f 	.word	0x0000270f

00004a2c <_Balloc>:
    4a2c:	b570      	push	{r4, r5, r6, lr}
    4a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    4a30:	0004      	movs	r4, r0
    4a32:	000d      	movs	r5, r1
    4a34:	2e00      	cmp	r6, #0
    4a36:	d107      	bne.n	4a48 <_Balloc+0x1c>
    4a38:	2010      	movs	r0, #16
    4a3a:	f001 f9e5 	bl	5e08 <malloc>
    4a3e:	6260      	str	r0, [r4, #36]	; 0x24
    4a40:	6046      	str	r6, [r0, #4]
    4a42:	6086      	str	r6, [r0, #8]
    4a44:	6006      	str	r6, [r0, #0]
    4a46:	60c6      	str	r6, [r0, #12]
    4a48:	6a66      	ldr	r6, [r4, #36]	; 0x24
    4a4a:	68f3      	ldr	r3, [r6, #12]
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d013      	beq.n	4a78 <_Balloc+0x4c>
    4a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a52:	00aa      	lsls	r2, r5, #2
    4a54:	68db      	ldr	r3, [r3, #12]
    4a56:	189b      	adds	r3, r3, r2
    4a58:	6818      	ldr	r0, [r3, #0]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d118      	bne.n	4a90 <_Balloc+0x64>
    4a5e:	2101      	movs	r1, #1
    4a60:	000e      	movs	r6, r1
    4a62:	40ae      	lsls	r6, r5
    4a64:	1d72      	adds	r2, r6, #5
    4a66:	0092      	lsls	r2, r2, #2
    4a68:	0020      	movs	r0, r4
    4a6a:	f000 fadb 	bl	5024 <_calloc_r>
    4a6e:	2800      	cmp	r0, #0
    4a70:	d00c      	beq.n	4a8c <_Balloc+0x60>
    4a72:	6045      	str	r5, [r0, #4]
    4a74:	6086      	str	r6, [r0, #8]
    4a76:	e00d      	b.n	4a94 <_Balloc+0x68>
    4a78:	2221      	movs	r2, #33	; 0x21
    4a7a:	2104      	movs	r1, #4
    4a7c:	0020      	movs	r0, r4
    4a7e:	f000 fad1 	bl	5024 <_calloc_r>
    4a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a84:	60f0      	str	r0, [r6, #12]
    4a86:	68db      	ldr	r3, [r3, #12]
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d1e1      	bne.n	4a50 <_Balloc+0x24>
    4a8c:	2000      	movs	r0, #0
    4a8e:	bd70      	pop	{r4, r5, r6, pc}
    4a90:	6802      	ldr	r2, [r0, #0]
    4a92:	601a      	str	r2, [r3, #0]
    4a94:	2300      	movs	r3, #0
    4a96:	6103      	str	r3, [r0, #16]
    4a98:	60c3      	str	r3, [r0, #12]
    4a9a:	e7f8      	b.n	4a8e <_Balloc+0x62>

00004a9c <_Bfree>:
    4a9c:	b570      	push	{r4, r5, r6, lr}
    4a9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4aa0:	0006      	movs	r6, r0
    4aa2:	000d      	movs	r5, r1
    4aa4:	2c00      	cmp	r4, #0
    4aa6:	d107      	bne.n	4ab8 <_Bfree+0x1c>
    4aa8:	2010      	movs	r0, #16
    4aaa:	f001 f9ad 	bl	5e08 <malloc>
    4aae:	6270      	str	r0, [r6, #36]	; 0x24
    4ab0:	6044      	str	r4, [r0, #4]
    4ab2:	6084      	str	r4, [r0, #8]
    4ab4:	6004      	str	r4, [r0, #0]
    4ab6:	60c4      	str	r4, [r0, #12]
    4ab8:	2d00      	cmp	r5, #0
    4aba:	d007      	beq.n	4acc <_Bfree+0x30>
    4abc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    4abe:	686a      	ldr	r2, [r5, #4]
    4ac0:	68db      	ldr	r3, [r3, #12]
    4ac2:	0092      	lsls	r2, r2, #2
    4ac4:	189b      	adds	r3, r3, r2
    4ac6:	681a      	ldr	r2, [r3, #0]
    4ac8:	602a      	str	r2, [r5, #0]
    4aca:	601d      	str	r5, [r3, #0]
    4acc:	bd70      	pop	{r4, r5, r6, pc}

00004ace <__multadd>:
    4ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ad0:	001e      	movs	r6, r3
    4ad2:	2314      	movs	r3, #20
    4ad4:	469c      	mov	ip, r3
    4ad6:	0007      	movs	r7, r0
    4ad8:	000c      	movs	r4, r1
    4ada:	2000      	movs	r0, #0
    4adc:	690d      	ldr	r5, [r1, #16]
    4ade:	448c      	add	ip, r1
    4ae0:	4663      	mov	r3, ip
    4ae2:	8819      	ldrh	r1, [r3, #0]
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	4351      	muls	r1, r2
    4ae8:	0c1b      	lsrs	r3, r3, #16
    4aea:	4353      	muls	r3, r2
    4aec:	1989      	adds	r1, r1, r6
    4aee:	0c0e      	lsrs	r6, r1, #16
    4af0:	199b      	adds	r3, r3, r6
    4af2:	b289      	uxth	r1, r1
    4af4:	0c1e      	lsrs	r6, r3, #16
    4af6:	041b      	lsls	r3, r3, #16
    4af8:	185b      	adds	r3, r3, r1
    4afa:	4661      	mov	r1, ip
    4afc:	3001      	adds	r0, #1
    4afe:	c108      	stmia	r1!, {r3}
    4b00:	468c      	mov	ip, r1
    4b02:	4285      	cmp	r5, r0
    4b04:	dcec      	bgt.n	4ae0 <__multadd+0x12>
    4b06:	2e00      	cmp	r6, #0
    4b08:	d01b      	beq.n	4b42 <__multadd+0x74>
    4b0a:	68a3      	ldr	r3, [r4, #8]
    4b0c:	429d      	cmp	r5, r3
    4b0e:	db12      	blt.n	4b36 <__multadd+0x68>
    4b10:	6863      	ldr	r3, [r4, #4]
    4b12:	0038      	movs	r0, r7
    4b14:	1c59      	adds	r1, r3, #1
    4b16:	f7ff ff89 	bl	4a2c <_Balloc>
    4b1a:	0021      	movs	r1, r4
    4b1c:	6923      	ldr	r3, [r4, #16]
    4b1e:	9001      	str	r0, [sp, #4]
    4b20:	1c9a      	adds	r2, r3, #2
    4b22:	0092      	lsls	r2, r2, #2
    4b24:	310c      	adds	r1, #12
    4b26:	300c      	adds	r0, #12
    4b28:	f7ff fe26 	bl	4778 <memcpy>
    4b2c:	0021      	movs	r1, r4
    4b2e:	0038      	movs	r0, r7
    4b30:	f7ff ffb4 	bl	4a9c <_Bfree>
    4b34:	9c01      	ldr	r4, [sp, #4]
    4b36:	1d2b      	adds	r3, r5, #4
    4b38:	009b      	lsls	r3, r3, #2
    4b3a:	18e3      	adds	r3, r4, r3
    4b3c:	3501      	adds	r5, #1
    4b3e:	605e      	str	r6, [r3, #4]
    4b40:	6125      	str	r5, [r4, #16]
    4b42:	0020      	movs	r0, r4
    4b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004b46 <__hi0bits>:
    4b46:	0003      	movs	r3, r0
    4b48:	0c02      	lsrs	r2, r0, #16
    4b4a:	2000      	movs	r0, #0
    4b4c:	4282      	cmp	r2, r0
    4b4e:	d101      	bne.n	4b54 <__hi0bits+0xe>
    4b50:	041b      	lsls	r3, r3, #16
    4b52:	3010      	adds	r0, #16
    4b54:	0e1a      	lsrs	r2, r3, #24
    4b56:	d101      	bne.n	4b5c <__hi0bits+0x16>
    4b58:	3008      	adds	r0, #8
    4b5a:	021b      	lsls	r3, r3, #8
    4b5c:	0f1a      	lsrs	r2, r3, #28
    4b5e:	d101      	bne.n	4b64 <__hi0bits+0x1e>
    4b60:	3004      	adds	r0, #4
    4b62:	011b      	lsls	r3, r3, #4
    4b64:	0f9a      	lsrs	r2, r3, #30
    4b66:	d101      	bne.n	4b6c <__hi0bits+0x26>
    4b68:	3002      	adds	r0, #2
    4b6a:	009b      	lsls	r3, r3, #2
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	db03      	blt.n	4b78 <__hi0bits+0x32>
    4b70:	3001      	adds	r0, #1
    4b72:	005b      	lsls	r3, r3, #1
    4b74:	d400      	bmi.n	4b78 <__hi0bits+0x32>
    4b76:	2020      	movs	r0, #32
    4b78:	4770      	bx	lr

00004b7a <__lo0bits>:
    4b7a:	2207      	movs	r2, #7
    4b7c:	6803      	ldr	r3, [r0, #0]
    4b7e:	b510      	push	{r4, lr}
    4b80:	0001      	movs	r1, r0
    4b82:	401a      	ands	r2, r3
    4b84:	d00d      	beq.n	4ba2 <__lo0bits+0x28>
    4b86:	2401      	movs	r4, #1
    4b88:	2000      	movs	r0, #0
    4b8a:	4223      	tst	r3, r4
    4b8c:	d105      	bne.n	4b9a <__lo0bits+0x20>
    4b8e:	3002      	adds	r0, #2
    4b90:	4203      	tst	r3, r0
    4b92:	d003      	beq.n	4b9c <__lo0bits+0x22>
    4b94:	40e3      	lsrs	r3, r4
    4b96:	0020      	movs	r0, r4
    4b98:	600b      	str	r3, [r1, #0]
    4b9a:	bd10      	pop	{r4, pc}
    4b9c:	089b      	lsrs	r3, r3, #2
    4b9e:	600b      	str	r3, [r1, #0]
    4ba0:	e7fb      	b.n	4b9a <__lo0bits+0x20>
    4ba2:	b29c      	uxth	r4, r3
    4ba4:	0010      	movs	r0, r2
    4ba6:	2c00      	cmp	r4, #0
    4ba8:	d101      	bne.n	4bae <__lo0bits+0x34>
    4baa:	2010      	movs	r0, #16
    4bac:	0c1b      	lsrs	r3, r3, #16
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	2a00      	cmp	r2, #0
    4bb2:	d101      	bne.n	4bb8 <__lo0bits+0x3e>
    4bb4:	3008      	adds	r0, #8
    4bb6:	0a1b      	lsrs	r3, r3, #8
    4bb8:	071a      	lsls	r2, r3, #28
    4bba:	d101      	bne.n	4bc0 <__lo0bits+0x46>
    4bbc:	3004      	adds	r0, #4
    4bbe:	091b      	lsrs	r3, r3, #4
    4bc0:	079a      	lsls	r2, r3, #30
    4bc2:	d101      	bne.n	4bc8 <__lo0bits+0x4e>
    4bc4:	3002      	adds	r0, #2
    4bc6:	089b      	lsrs	r3, r3, #2
    4bc8:	07da      	lsls	r2, r3, #31
    4bca:	d4e8      	bmi.n	4b9e <__lo0bits+0x24>
    4bcc:	085b      	lsrs	r3, r3, #1
    4bce:	d001      	beq.n	4bd4 <__lo0bits+0x5a>
    4bd0:	3001      	adds	r0, #1
    4bd2:	e7e4      	b.n	4b9e <__lo0bits+0x24>
    4bd4:	2020      	movs	r0, #32
    4bd6:	e7e0      	b.n	4b9a <__lo0bits+0x20>

00004bd8 <__i2b>:
    4bd8:	b510      	push	{r4, lr}
    4bda:	000c      	movs	r4, r1
    4bdc:	2101      	movs	r1, #1
    4bde:	f7ff ff25 	bl	4a2c <_Balloc>
    4be2:	2301      	movs	r3, #1
    4be4:	6144      	str	r4, [r0, #20]
    4be6:	6103      	str	r3, [r0, #16]
    4be8:	bd10      	pop	{r4, pc}

00004bea <__multiply>:
    4bea:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bec:	690b      	ldr	r3, [r1, #16]
    4bee:	0015      	movs	r5, r2
    4bf0:	6912      	ldr	r2, [r2, #16]
    4bf2:	b089      	sub	sp, #36	; 0x24
    4bf4:	000c      	movs	r4, r1
    4bf6:	4293      	cmp	r3, r2
    4bf8:	da01      	bge.n	4bfe <__multiply+0x14>
    4bfa:	002c      	movs	r4, r5
    4bfc:	000d      	movs	r5, r1
    4bfe:	6927      	ldr	r7, [r4, #16]
    4c00:	692e      	ldr	r6, [r5, #16]
    4c02:	68a2      	ldr	r2, [r4, #8]
    4c04:	19bb      	adds	r3, r7, r6
    4c06:	6861      	ldr	r1, [r4, #4]
    4c08:	9301      	str	r3, [sp, #4]
    4c0a:	4293      	cmp	r3, r2
    4c0c:	dd00      	ble.n	4c10 <__multiply+0x26>
    4c0e:	3101      	adds	r1, #1
    4c10:	f7ff ff0c 	bl	4a2c <_Balloc>
    4c14:	0003      	movs	r3, r0
    4c16:	3314      	adds	r3, #20
    4c18:	9300      	str	r3, [sp, #0]
    4c1a:	9a00      	ldr	r2, [sp, #0]
    4c1c:	19bb      	adds	r3, r7, r6
    4c1e:	4694      	mov	ip, r2
    4c20:	009b      	lsls	r3, r3, #2
    4c22:	449c      	add	ip, r3
    4c24:	0013      	movs	r3, r2
    4c26:	2200      	movs	r2, #0
    4c28:	9004      	str	r0, [sp, #16]
    4c2a:	4563      	cmp	r3, ip
    4c2c:	d31c      	bcc.n	4c68 <__multiply+0x7e>
    4c2e:	002a      	movs	r2, r5
    4c30:	3414      	adds	r4, #20
    4c32:	00bf      	lsls	r7, r7, #2
    4c34:	19e3      	adds	r3, r4, r7
    4c36:	3214      	adds	r2, #20
    4c38:	00b6      	lsls	r6, r6, #2
    4c3a:	9305      	str	r3, [sp, #20]
    4c3c:	1993      	adds	r3, r2, r6
    4c3e:	9402      	str	r4, [sp, #8]
    4c40:	9306      	str	r3, [sp, #24]
    4c42:	9b06      	ldr	r3, [sp, #24]
    4c44:	429a      	cmp	r2, r3
    4c46:	d311      	bcc.n	4c6c <__multiply+0x82>
    4c48:	9b01      	ldr	r3, [sp, #4]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	dd06      	ble.n	4c5c <__multiply+0x72>
    4c4e:	2304      	movs	r3, #4
    4c50:	425b      	negs	r3, r3
    4c52:	449c      	add	ip, r3
    4c54:	4663      	mov	r3, ip
    4c56:	681b      	ldr	r3, [r3, #0]
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d051      	beq.n	4d00 <__multiply+0x116>
    4c5c:	9b04      	ldr	r3, [sp, #16]
    4c5e:	9a01      	ldr	r2, [sp, #4]
    4c60:	0018      	movs	r0, r3
    4c62:	611a      	str	r2, [r3, #16]
    4c64:	b009      	add	sp, #36	; 0x24
    4c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c68:	c304      	stmia	r3!, {r2}
    4c6a:	e7de      	b.n	4c2a <__multiply+0x40>
    4c6c:	8814      	ldrh	r4, [r2, #0]
    4c6e:	2c00      	cmp	r4, #0
    4c70:	d01e      	beq.n	4cb0 <__multiply+0xc6>
    4c72:	2600      	movs	r6, #0
    4c74:	9d00      	ldr	r5, [sp, #0]
    4c76:	9f02      	ldr	r7, [sp, #8]
    4c78:	cf01      	ldmia	r7!, {r0}
    4c7a:	9507      	str	r5, [sp, #28]
    4c7c:	cd08      	ldmia	r5!, {r3}
    4c7e:	9303      	str	r3, [sp, #12]
    4c80:	b283      	uxth	r3, r0
    4c82:	4363      	muls	r3, r4
    4c84:	0019      	movs	r1, r3
    4c86:	466b      	mov	r3, sp
    4c88:	0c00      	lsrs	r0, r0, #16
    4c8a:	899b      	ldrh	r3, [r3, #12]
    4c8c:	4360      	muls	r0, r4
    4c8e:	18cb      	adds	r3, r1, r3
    4c90:	9903      	ldr	r1, [sp, #12]
    4c92:	199b      	adds	r3, r3, r6
    4c94:	0c09      	lsrs	r1, r1, #16
    4c96:	1841      	adds	r1, r0, r1
    4c98:	0c18      	lsrs	r0, r3, #16
    4c9a:	1809      	adds	r1, r1, r0
    4c9c:	0c0e      	lsrs	r6, r1, #16
    4c9e:	b29b      	uxth	r3, r3
    4ca0:	0409      	lsls	r1, r1, #16
    4ca2:	430b      	orrs	r3, r1
    4ca4:	9907      	ldr	r1, [sp, #28]
    4ca6:	600b      	str	r3, [r1, #0]
    4ca8:	9b05      	ldr	r3, [sp, #20]
    4caa:	42bb      	cmp	r3, r7
    4cac:	d8e4      	bhi.n	4c78 <__multiply+0x8e>
    4cae:	602e      	str	r6, [r5, #0]
    4cb0:	6813      	ldr	r3, [r2, #0]
    4cb2:	0c1b      	lsrs	r3, r3, #16
    4cb4:	9303      	str	r3, [sp, #12]
    4cb6:	d01e      	beq.n	4cf6 <__multiply+0x10c>
    4cb8:	2600      	movs	r6, #0
    4cba:	9b00      	ldr	r3, [sp, #0]
    4cbc:	9c02      	ldr	r4, [sp, #8]
    4cbe:	681b      	ldr	r3, [r3, #0]
    4cc0:	9800      	ldr	r0, [sp, #0]
    4cc2:	0007      	movs	r7, r0
    4cc4:	8821      	ldrh	r1, [r4, #0]
    4cc6:	9d03      	ldr	r5, [sp, #12]
    4cc8:	b29b      	uxth	r3, r3
    4cca:	4369      	muls	r1, r5
    4ccc:	c820      	ldmia	r0!, {r5}
    4cce:	0c2d      	lsrs	r5, r5, #16
    4cd0:	1949      	adds	r1, r1, r5
    4cd2:	198e      	adds	r6, r1, r6
    4cd4:	0431      	lsls	r1, r6, #16
    4cd6:	430b      	orrs	r3, r1
    4cd8:	603b      	str	r3, [r7, #0]
    4cda:	cc08      	ldmia	r4!, {r3}
    4cdc:	9903      	ldr	r1, [sp, #12]
    4cde:	0c1b      	lsrs	r3, r3, #16
    4ce0:	434b      	muls	r3, r1
    4ce2:	6879      	ldr	r1, [r7, #4]
    4ce4:	0c36      	lsrs	r6, r6, #16
    4ce6:	b289      	uxth	r1, r1
    4ce8:	185b      	adds	r3, r3, r1
    4cea:	9905      	ldr	r1, [sp, #20]
    4cec:	199b      	adds	r3, r3, r6
    4cee:	0c1e      	lsrs	r6, r3, #16
    4cf0:	42a1      	cmp	r1, r4
    4cf2:	d8e6      	bhi.n	4cc2 <__multiply+0xd8>
    4cf4:	6003      	str	r3, [r0, #0]
    4cf6:	9b00      	ldr	r3, [sp, #0]
    4cf8:	3204      	adds	r2, #4
    4cfa:	3304      	adds	r3, #4
    4cfc:	9300      	str	r3, [sp, #0]
    4cfe:	e7a0      	b.n	4c42 <__multiply+0x58>
    4d00:	9b01      	ldr	r3, [sp, #4]
    4d02:	3b01      	subs	r3, #1
    4d04:	9301      	str	r3, [sp, #4]
    4d06:	e79f      	b.n	4c48 <__multiply+0x5e>

00004d08 <__pow5mult>:
    4d08:	2303      	movs	r3, #3
    4d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d0c:	4013      	ands	r3, r2
    4d0e:	0005      	movs	r5, r0
    4d10:	000e      	movs	r6, r1
    4d12:	0014      	movs	r4, r2
    4d14:	2b00      	cmp	r3, #0
    4d16:	d008      	beq.n	4d2a <__pow5mult+0x22>
    4d18:	4922      	ldr	r1, [pc, #136]	; (4da4 <__pow5mult+0x9c>)
    4d1a:	3b01      	subs	r3, #1
    4d1c:	009a      	lsls	r2, r3, #2
    4d1e:	5852      	ldr	r2, [r2, r1]
    4d20:	2300      	movs	r3, #0
    4d22:	0031      	movs	r1, r6
    4d24:	f7ff fed3 	bl	4ace <__multadd>
    4d28:	0006      	movs	r6, r0
    4d2a:	10a3      	asrs	r3, r4, #2
    4d2c:	9301      	str	r3, [sp, #4]
    4d2e:	d036      	beq.n	4d9e <__pow5mult+0x96>
    4d30:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    4d32:	2c00      	cmp	r4, #0
    4d34:	d107      	bne.n	4d46 <__pow5mult+0x3e>
    4d36:	2010      	movs	r0, #16
    4d38:	f001 f866 	bl	5e08 <malloc>
    4d3c:	6268      	str	r0, [r5, #36]	; 0x24
    4d3e:	6044      	str	r4, [r0, #4]
    4d40:	6084      	str	r4, [r0, #8]
    4d42:	6004      	str	r4, [r0, #0]
    4d44:	60c4      	str	r4, [r0, #12]
    4d46:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    4d48:	68bc      	ldr	r4, [r7, #8]
    4d4a:	2c00      	cmp	r4, #0
    4d4c:	d107      	bne.n	4d5e <__pow5mult+0x56>
    4d4e:	4916      	ldr	r1, [pc, #88]	; (4da8 <__pow5mult+0xa0>)
    4d50:	0028      	movs	r0, r5
    4d52:	f7ff ff41 	bl	4bd8 <__i2b>
    4d56:	2300      	movs	r3, #0
    4d58:	0004      	movs	r4, r0
    4d5a:	60b8      	str	r0, [r7, #8]
    4d5c:	6003      	str	r3, [r0, #0]
    4d5e:	2201      	movs	r2, #1
    4d60:	9b01      	ldr	r3, [sp, #4]
    4d62:	4213      	tst	r3, r2
    4d64:	d00a      	beq.n	4d7c <__pow5mult+0x74>
    4d66:	0031      	movs	r1, r6
    4d68:	0022      	movs	r2, r4
    4d6a:	0028      	movs	r0, r5
    4d6c:	f7ff ff3d 	bl	4bea <__multiply>
    4d70:	0007      	movs	r7, r0
    4d72:	0031      	movs	r1, r6
    4d74:	0028      	movs	r0, r5
    4d76:	f7ff fe91 	bl	4a9c <_Bfree>
    4d7a:	003e      	movs	r6, r7
    4d7c:	9b01      	ldr	r3, [sp, #4]
    4d7e:	105b      	asrs	r3, r3, #1
    4d80:	9301      	str	r3, [sp, #4]
    4d82:	d00c      	beq.n	4d9e <__pow5mult+0x96>
    4d84:	6820      	ldr	r0, [r4, #0]
    4d86:	2800      	cmp	r0, #0
    4d88:	d107      	bne.n	4d9a <__pow5mult+0x92>
    4d8a:	0022      	movs	r2, r4
    4d8c:	0021      	movs	r1, r4
    4d8e:	0028      	movs	r0, r5
    4d90:	f7ff ff2b 	bl	4bea <__multiply>
    4d94:	2300      	movs	r3, #0
    4d96:	6020      	str	r0, [r4, #0]
    4d98:	6003      	str	r3, [r0, #0]
    4d9a:	0004      	movs	r4, r0
    4d9c:	e7df      	b.n	4d5e <__pow5mult+0x56>
    4d9e:	0030      	movs	r0, r6
    4da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4da2:	46c0      	nop			; (mov r8, r8)
    4da4:	00006050 	.word	0x00006050
    4da8:	00000271 	.word	0x00000271

00004dac <__lshift>:
    4dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dae:	000d      	movs	r5, r1
    4db0:	0017      	movs	r7, r2
    4db2:	692b      	ldr	r3, [r5, #16]
    4db4:	1154      	asrs	r4, r2, #5
    4db6:	b085      	sub	sp, #20
    4db8:	18e3      	adds	r3, r4, r3
    4dba:	9302      	str	r3, [sp, #8]
    4dbc:	3301      	adds	r3, #1
    4dbe:	9301      	str	r3, [sp, #4]
    4dc0:	6849      	ldr	r1, [r1, #4]
    4dc2:	68ab      	ldr	r3, [r5, #8]
    4dc4:	9003      	str	r0, [sp, #12]
    4dc6:	9a01      	ldr	r2, [sp, #4]
    4dc8:	4293      	cmp	r3, r2
    4dca:	db34      	blt.n	4e36 <__lshift+0x8a>
    4dcc:	9803      	ldr	r0, [sp, #12]
    4dce:	f7ff fe2d 	bl	4a2c <_Balloc>
    4dd2:	2300      	movs	r3, #0
    4dd4:	0002      	movs	r2, r0
    4dd6:	0006      	movs	r6, r0
    4dd8:	0019      	movs	r1, r3
    4dda:	3214      	adds	r2, #20
    4ddc:	42a3      	cmp	r3, r4
    4dde:	db2d      	blt.n	4e3c <__lshift+0x90>
    4de0:	43e3      	mvns	r3, r4
    4de2:	17db      	asrs	r3, r3, #31
    4de4:	401c      	ands	r4, r3
    4de6:	002b      	movs	r3, r5
    4de8:	211f      	movs	r1, #31
    4dea:	00a4      	lsls	r4, r4, #2
    4dec:	1914      	adds	r4, r2, r4
    4dee:	692a      	ldr	r2, [r5, #16]
    4df0:	3314      	adds	r3, #20
    4df2:	0092      	lsls	r2, r2, #2
    4df4:	189a      	adds	r2, r3, r2
    4df6:	400f      	ands	r7, r1
    4df8:	d024      	beq.n	4e44 <__lshift+0x98>
    4dfa:	3101      	adds	r1, #1
    4dfc:	1bc9      	subs	r1, r1, r7
    4dfe:	468c      	mov	ip, r1
    4e00:	2100      	movs	r1, #0
    4e02:	6818      	ldr	r0, [r3, #0]
    4e04:	40b8      	lsls	r0, r7
    4e06:	4301      	orrs	r1, r0
    4e08:	4660      	mov	r0, ip
    4e0a:	6021      	str	r1, [r4, #0]
    4e0c:	cb02      	ldmia	r3!, {r1}
    4e0e:	3404      	adds	r4, #4
    4e10:	40c1      	lsrs	r1, r0
    4e12:	429a      	cmp	r2, r3
    4e14:	d8f5      	bhi.n	4e02 <__lshift+0x56>
    4e16:	6021      	str	r1, [r4, #0]
    4e18:	2900      	cmp	r1, #0
    4e1a:	d002      	beq.n	4e22 <__lshift+0x76>
    4e1c:	9b02      	ldr	r3, [sp, #8]
    4e1e:	3302      	adds	r3, #2
    4e20:	9301      	str	r3, [sp, #4]
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	9803      	ldr	r0, [sp, #12]
    4e26:	3b01      	subs	r3, #1
    4e28:	6133      	str	r3, [r6, #16]
    4e2a:	0029      	movs	r1, r5
    4e2c:	f7ff fe36 	bl	4a9c <_Bfree>
    4e30:	0030      	movs	r0, r6
    4e32:	b005      	add	sp, #20
    4e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e36:	3101      	adds	r1, #1
    4e38:	005b      	lsls	r3, r3, #1
    4e3a:	e7c4      	b.n	4dc6 <__lshift+0x1a>
    4e3c:	0098      	lsls	r0, r3, #2
    4e3e:	5011      	str	r1, [r2, r0]
    4e40:	3301      	adds	r3, #1
    4e42:	e7cb      	b.n	4ddc <__lshift+0x30>
    4e44:	cb02      	ldmia	r3!, {r1}
    4e46:	c402      	stmia	r4!, {r1}
    4e48:	429a      	cmp	r2, r3
    4e4a:	d8fb      	bhi.n	4e44 <__lshift+0x98>
    4e4c:	e7e9      	b.n	4e22 <__lshift+0x76>

00004e4e <__mcmp>:
    4e4e:	690a      	ldr	r2, [r1, #16]
    4e50:	6903      	ldr	r3, [r0, #16]
    4e52:	b530      	push	{r4, r5, lr}
    4e54:	1a9b      	subs	r3, r3, r2
    4e56:	d10e      	bne.n	4e76 <__mcmp+0x28>
    4e58:	0092      	lsls	r2, r2, #2
    4e5a:	3014      	adds	r0, #20
    4e5c:	3114      	adds	r1, #20
    4e5e:	1884      	adds	r4, r0, r2
    4e60:	1889      	adds	r1, r1, r2
    4e62:	3c04      	subs	r4, #4
    4e64:	3904      	subs	r1, #4
    4e66:	6822      	ldr	r2, [r4, #0]
    4e68:	680d      	ldr	r5, [r1, #0]
    4e6a:	42aa      	cmp	r2, r5
    4e6c:	d005      	beq.n	4e7a <__mcmp+0x2c>
    4e6e:	42aa      	cmp	r2, r5
    4e70:	4192      	sbcs	r2, r2
    4e72:	2301      	movs	r3, #1
    4e74:	4313      	orrs	r3, r2
    4e76:	0018      	movs	r0, r3
    4e78:	bd30      	pop	{r4, r5, pc}
    4e7a:	42a0      	cmp	r0, r4
    4e7c:	d3f1      	bcc.n	4e62 <__mcmp+0x14>
    4e7e:	e7fa      	b.n	4e76 <__mcmp+0x28>

00004e80 <__mdiff>:
    4e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e82:	000d      	movs	r5, r1
    4e84:	b085      	sub	sp, #20
    4e86:	0007      	movs	r7, r0
    4e88:	0011      	movs	r1, r2
    4e8a:	0028      	movs	r0, r5
    4e8c:	0014      	movs	r4, r2
    4e8e:	f7ff ffde 	bl	4e4e <__mcmp>
    4e92:	1e06      	subs	r6, r0, #0
    4e94:	d108      	bne.n	4ea8 <__mdiff+0x28>
    4e96:	0001      	movs	r1, r0
    4e98:	0038      	movs	r0, r7
    4e9a:	f7ff fdc7 	bl	4a2c <_Balloc>
    4e9e:	2301      	movs	r3, #1
    4ea0:	6146      	str	r6, [r0, #20]
    4ea2:	6103      	str	r3, [r0, #16]
    4ea4:	b005      	add	sp, #20
    4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ea8:	2301      	movs	r3, #1
    4eaa:	9301      	str	r3, [sp, #4]
    4eac:	2800      	cmp	r0, #0
    4eae:	db04      	blt.n	4eba <__mdiff+0x3a>
    4eb0:	0023      	movs	r3, r4
    4eb2:	002c      	movs	r4, r5
    4eb4:	001d      	movs	r5, r3
    4eb6:	2300      	movs	r3, #0
    4eb8:	9301      	str	r3, [sp, #4]
    4eba:	6861      	ldr	r1, [r4, #4]
    4ebc:	0038      	movs	r0, r7
    4ebe:	f7ff fdb5 	bl	4a2c <_Balloc>
    4ec2:	002f      	movs	r7, r5
    4ec4:	2200      	movs	r2, #0
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	6926      	ldr	r6, [r4, #16]
    4eca:	60c3      	str	r3, [r0, #12]
    4ecc:	3414      	adds	r4, #20
    4ece:	00b3      	lsls	r3, r6, #2
    4ed0:	18e3      	adds	r3, r4, r3
    4ed2:	9302      	str	r3, [sp, #8]
    4ed4:	692b      	ldr	r3, [r5, #16]
    4ed6:	3714      	adds	r7, #20
    4ed8:	009b      	lsls	r3, r3, #2
    4eda:	18fb      	adds	r3, r7, r3
    4edc:	9303      	str	r3, [sp, #12]
    4ede:	0003      	movs	r3, r0
    4ee0:	4694      	mov	ip, r2
    4ee2:	3314      	adds	r3, #20
    4ee4:	cc20      	ldmia	r4!, {r5}
    4ee6:	cf04      	ldmia	r7!, {r2}
    4ee8:	9201      	str	r2, [sp, #4]
    4eea:	b2aa      	uxth	r2, r5
    4eec:	4494      	add	ip, r2
    4eee:	466a      	mov	r2, sp
    4ef0:	4661      	mov	r1, ip
    4ef2:	8892      	ldrh	r2, [r2, #4]
    4ef4:	0c2d      	lsrs	r5, r5, #16
    4ef6:	1a8a      	subs	r2, r1, r2
    4ef8:	9901      	ldr	r1, [sp, #4]
    4efa:	0c09      	lsrs	r1, r1, #16
    4efc:	1a69      	subs	r1, r5, r1
    4efe:	1415      	asrs	r5, r2, #16
    4f00:	1949      	adds	r1, r1, r5
    4f02:	140d      	asrs	r5, r1, #16
    4f04:	b292      	uxth	r2, r2
    4f06:	0409      	lsls	r1, r1, #16
    4f08:	430a      	orrs	r2, r1
    4f0a:	601a      	str	r2, [r3, #0]
    4f0c:	9a03      	ldr	r2, [sp, #12]
    4f0e:	46ac      	mov	ip, r5
    4f10:	3304      	adds	r3, #4
    4f12:	42ba      	cmp	r2, r7
    4f14:	d8e6      	bhi.n	4ee4 <__mdiff+0x64>
    4f16:	9902      	ldr	r1, [sp, #8]
    4f18:	001a      	movs	r2, r3
    4f1a:	428c      	cmp	r4, r1
    4f1c:	d305      	bcc.n	4f2a <__mdiff+0xaa>
    4f1e:	3a04      	subs	r2, #4
    4f20:	6813      	ldr	r3, [r2, #0]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d00e      	beq.n	4f44 <__mdiff+0xc4>
    4f26:	6106      	str	r6, [r0, #16]
    4f28:	e7bc      	b.n	4ea4 <__mdiff+0x24>
    4f2a:	cc04      	ldmia	r4!, {r2}
    4f2c:	b291      	uxth	r1, r2
    4f2e:	4461      	add	r1, ip
    4f30:	140d      	asrs	r5, r1, #16
    4f32:	0c12      	lsrs	r2, r2, #16
    4f34:	1952      	adds	r2, r2, r5
    4f36:	1415      	asrs	r5, r2, #16
    4f38:	b289      	uxth	r1, r1
    4f3a:	0412      	lsls	r2, r2, #16
    4f3c:	430a      	orrs	r2, r1
    4f3e:	46ac      	mov	ip, r5
    4f40:	c304      	stmia	r3!, {r2}
    4f42:	e7e8      	b.n	4f16 <__mdiff+0x96>
    4f44:	3e01      	subs	r6, #1
    4f46:	e7ea      	b.n	4f1e <__mdiff+0x9e>

00004f48 <__d2b>:
    4f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f4a:	001d      	movs	r5, r3
    4f4c:	2101      	movs	r1, #1
    4f4e:	9f08      	ldr	r7, [sp, #32]
    4f50:	0014      	movs	r4, r2
    4f52:	f7ff fd6b 	bl	4a2c <_Balloc>
    4f56:	032b      	lsls	r3, r5, #12
    4f58:	006d      	lsls	r5, r5, #1
    4f5a:	0006      	movs	r6, r0
    4f5c:	0b1b      	lsrs	r3, r3, #12
    4f5e:	0d6d      	lsrs	r5, r5, #21
    4f60:	d124      	bne.n	4fac <__d2b+0x64>
    4f62:	9301      	str	r3, [sp, #4]
    4f64:	2c00      	cmp	r4, #0
    4f66:	d027      	beq.n	4fb8 <__d2b+0x70>
    4f68:	4668      	mov	r0, sp
    4f6a:	9400      	str	r4, [sp, #0]
    4f6c:	f7ff fe05 	bl	4b7a <__lo0bits>
    4f70:	9c00      	ldr	r4, [sp, #0]
    4f72:	2800      	cmp	r0, #0
    4f74:	d01e      	beq.n	4fb4 <__d2b+0x6c>
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	2120      	movs	r1, #32
    4f7a:	001a      	movs	r2, r3
    4f7c:	1a09      	subs	r1, r1, r0
    4f7e:	408a      	lsls	r2, r1
    4f80:	40c3      	lsrs	r3, r0
    4f82:	4322      	orrs	r2, r4
    4f84:	6172      	str	r2, [r6, #20]
    4f86:	9301      	str	r3, [sp, #4]
    4f88:	9c01      	ldr	r4, [sp, #4]
    4f8a:	61b4      	str	r4, [r6, #24]
    4f8c:	1e63      	subs	r3, r4, #1
    4f8e:	419c      	sbcs	r4, r3
    4f90:	3401      	adds	r4, #1
    4f92:	6134      	str	r4, [r6, #16]
    4f94:	2d00      	cmp	r5, #0
    4f96:	d018      	beq.n	4fca <__d2b+0x82>
    4f98:	4b12      	ldr	r3, [pc, #72]	; (4fe4 <__d2b+0x9c>)
    4f9a:	18ed      	adds	r5, r5, r3
    4f9c:	2335      	movs	r3, #53	; 0x35
    4f9e:	182d      	adds	r5, r5, r0
    4fa0:	603d      	str	r5, [r7, #0]
    4fa2:	1a18      	subs	r0, r3, r0
    4fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4fa6:	6018      	str	r0, [r3, #0]
    4fa8:	0030      	movs	r0, r6
    4faa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fac:	2280      	movs	r2, #128	; 0x80
    4fae:	0352      	lsls	r2, r2, #13
    4fb0:	4313      	orrs	r3, r2
    4fb2:	e7d6      	b.n	4f62 <__d2b+0x1a>
    4fb4:	6174      	str	r4, [r6, #20]
    4fb6:	e7e7      	b.n	4f88 <__d2b+0x40>
    4fb8:	a801      	add	r0, sp, #4
    4fba:	f7ff fdde 	bl	4b7a <__lo0bits>
    4fbe:	2401      	movs	r4, #1
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	6134      	str	r4, [r6, #16]
    4fc4:	6173      	str	r3, [r6, #20]
    4fc6:	3020      	adds	r0, #32
    4fc8:	e7e4      	b.n	4f94 <__d2b+0x4c>
    4fca:	4b07      	ldr	r3, [pc, #28]	; (4fe8 <__d2b+0xa0>)
    4fcc:	18c0      	adds	r0, r0, r3
    4fce:	4b07      	ldr	r3, [pc, #28]	; (4fec <__d2b+0xa4>)
    4fd0:	6038      	str	r0, [r7, #0]
    4fd2:	18e3      	adds	r3, r4, r3
    4fd4:	009b      	lsls	r3, r3, #2
    4fd6:	18f3      	adds	r3, r6, r3
    4fd8:	6958      	ldr	r0, [r3, #20]
    4fda:	f7ff fdb4 	bl	4b46 <__hi0bits>
    4fde:	0164      	lsls	r4, r4, #5
    4fe0:	1a20      	subs	r0, r4, r0
    4fe2:	e7df      	b.n	4fa4 <__d2b+0x5c>
    4fe4:	fffffbcd 	.word	0xfffffbcd
    4fe8:	fffffbce 	.word	0xfffffbce
    4fec:	3fffffff 	.word	0x3fffffff

00004ff0 <_mprec_log10>:
    4ff0:	b510      	push	{r4, lr}
    4ff2:	0004      	movs	r4, r0
    4ff4:	2817      	cmp	r0, #23
    4ff6:	dc05      	bgt.n	5004 <_mprec_log10+0x14>
    4ff8:	4b07      	ldr	r3, [pc, #28]	; (5018 <_mprec_log10+0x28>)
    4ffa:	00c4      	lsls	r4, r0, #3
    4ffc:	191c      	adds	r4, r3, r4
    4ffe:	6820      	ldr	r0, [r4, #0]
    5000:	6861      	ldr	r1, [r4, #4]
    5002:	bd10      	pop	{r4, pc}
    5004:	2000      	movs	r0, #0
    5006:	4905      	ldr	r1, [pc, #20]	; (501c <_mprec_log10+0x2c>)
    5008:	2200      	movs	r2, #0
    500a:	4b05      	ldr	r3, [pc, #20]	; (5020 <_mprec_log10+0x30>)
    500c:	3c01      	subs	r4, #1
    500e:	f7fe fc2b 	bl	3868 <__aeabi_dmul>
    5012:	2c00      	cmp	r4, #0
    5014:	d1f8      	bne.n	5008 <_mprec_log10+0x18>
    5016:	e7f4      	b.n	5002 <_mprec_log10+0x12>
    5018:	00005f88 	.word	0x00005f88
    501c:	3ff00000 	.word	0x3ff00000
    5020:	40240000 	.word	0x40240000

00005024 <_calloc_r>:
    5024:	434a      	muls	r2, r1
    5026:	b570      	push	{r4, r5, r6, lr}
    5028:	0011      	movs	r1, r2
    502a:	0014      	movs	r4, r2
    502c:	f000 f808 	bl	5040 <_malloc_r>
    5030:	1e05      	subs	r5, r0, #0
    5032:	d003      	beq.n	503c <_calloc_r+0x18>
    5034:	0022      	movs	r2, r4
    5036:	2100      	movs	r1, #0
    5038:	f7ff fba7 	bl	478a <memset>
    503c:	0028      	movs	r0, r5
    503e:	bd70      	pop	{r4, r5, r6, pc}

00005040 <_malloc_r>:
    5040:	2303      	movs	r3, #3
    5042:	b570      	push	{r4, r5, r6, lr}
    5044:	1ccd      	adds	r5, r1, #3
    5046:	439d      	bics	r5, r3
    5048:	3508      	adds	r5, #8
    504a:	0006      	movs	r6, r0
    504c:	2d0c      	cmp	r5, #12
    504e:	d21e      	bcs.n	508e <_malloc_r+0x4e>
    5050:	250c      	movs	r5, #12
    5052:	42a9      	cmp	r1, r5
    5054:	d81d      	bhi.n	5092 <_malloc_r+0x52>
    5056:	0030      	movs	r0, r6
    5058:	f000 fee0 	bl	5e1c <__malloc_lock>
    505c:	4a25      	ldr	r2, [pc, #148]	; (50f4 <_malloc_r+0xb4>)
    505e:	6814      	ldr	r4, [r2, #0]
    5060:	0021      	movs	r1, r4
    5062:	2900      	cmp	r1, #0
    5064:	d119      	bne.n	509a <_malloc_r+0x5a>
    5066:	4c24      	ldr	r4, [pc, #144]	; (50f8 <_malloc_r+0xb8>)
    5068:	6823      	ldr	r3, [r4, #0]
    506a:	2b00      	cmp	r3, #0
    506c:	d103      	bne.n	5076 <_malloc_r+0x36>
    506e:	0030      	movs	r0, r6
    5070:	f000 f844 	bl	50fc <_sbrk_r>
    5074:	6020      	str	r0, [r4, #0]
    5076:	0029      	movs	r1, r5
    5078:	0030      	movs	r0, r6
    507a:	f000 f83f 	bl	50fc <_sbrk_r>
    507e:	1c43      	adds	r3, r0, #1
    5080:	d12c      	bne.n	50dc <_malloc_r+0x9c>
    5082:	230c      	movs	r3, #12
    5084:	0030      	movs	r0, r6
    5086:	6033      	str	r3, [r6, #0]
    5088:	f000 fec9 	bl	5e1e <__malloc_unlock>
    508c:	e003      	b.n	5096 <_malloc_r+0x56>
    508e:	2d00      	cmp	r5, #0
    5090:	dadf      	bge.n	5052 <_malloc_r+0x12>
    5092:	230c      	movs	r3, #12
    5094:	6033      	str	r3, [r6, #0]
    5096:	2000      	movs	r0, #0
    5098:	bd70      	pop	{r4, r5, r6, pc}
    509a:	680b      	ldr	r3, [r1, #0]
    509c:	1b5b      	subs	r3, r3, r5
    509e:	d41a      	bmi.n	50d6 <_malloc_r+0x96>
    50a0:	2b0b      	cmp	r3, #11
    50a2:	d903      	bls.n	50ac <_malloc_r+0x6c>
    50a4:	600b      	str	r3, [r1, #0]
    50a6:	18cc      	adds	r4, r1, r3
    50a8:	6025      	str	r5, [r4, #0]
    50aa:	e003      	b.n	50b4 <_malloc_r+0x74>
    50ac:	428c      	cmp	r4, r1
    50ae:	d10e      	bne.n	50ce <_malloc_r+0x8e>
    50b0:	6863      	ldr	r3, [r4, #4]
    50b2:	6013      	str	r3, [r2, #0]
    50b4:	0030      	movs	r0, r6
    50b6:	f000 feb2 	bl	5e1e <__malloc_unlock>
    50ba:	0020      	movs	r0, r4
    50bc:	2207      	movs	r2, #7
    50be:	300b      	adds	r0, #11
    50c0:	1d23      	adds	r3, r4, #4
    50c2:	4390      	bics	r0, r2
    50c4:	1ac3      	subs	r3, r0, r3
    50c6:	d0e7      	beq.n	5098 <_malloc_r+0x58>
    50c8:	425a      	negs	r2, r3
    50ca:	50e2      	str	r2, [r4, r3]
    50cc:	e7e4      	b.n	5098 <_malloc_r+0x58>
    50ce:	684b      	ldr	r3, [r1, #4]
    50d0:	6063      	str	r3, [r4, #4]
    50d2:	000c      	movs	r4, r1
    50d4:	e7ee      	b.n	50b4 <_malloc_r+0x74>
    50d6:	000c      	movs	r4, r1
    50d8:	6849      	ldr	r1, [r1, #4]
    50da:	e7c2      	b.n	5062 <_malloc_r+0x22>
    50dc:	2303      	movs	r3, #3
    50de:	1cc4      	adds	r4, r0, #3
    50e0:	439c      	bics	r4, r3
    50e2:	42a0      	cmp	r0, r4
    50e4:	d0e0      	beq.n	50a8 <_malloc_r+0x68>
    50e6:	1a21      	subs	r1, r4, r0
    50e8:	0030      	movs	r0, r6
    50ea:	f000 f807 	bl	50fc <_sbrk_r>
    50ee:	1c43      	adds	r3, r0, #1
    50f0:	d1da      	bne.n	50a8 <_malloc_r+0x68>
    50f2:	e7c6      	b.n	5082 <_malloc_r+0x42>
    50f4:	20000568 	.word	0x20000568
    50f8:	2000056c 	.word	0x2000056c

000050fc <_sbrk_r>:
    50fc:	2300      	movs	r3, #0
    50fe:	b570      	push	{r4, r5, r6, lr}
    5100:	4c06      	ldr	r4, [pc, #24]	; (511c <_sbrk_r+0x20>)
    5102:	0005      	movs	r5, r0
    5104:	0008      	movs	r0, r1
    5106:	6023      	str	r3, [r4, #0]
    5108:	f7fd f9ae 	bl	2468 <_sbrk>
    510c:	1c43      	adds	r3, r0, #1
    510e:	d103      	bne.n	5118 <_sbrk_r+0x1c>
    5110:	6823      	ldr	r3, [r4, #0]
    5112:	2b00      	cmp	r3, #0
    5114:	d000      	beq.n	5118 <_sbrk_r+0x1c>
    5116:	602b      	str	r3, [r5, #0]
    5118:	bd70      	pop	{r4, r5, r6, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	20000698 	.word	0x20000698

00005120 <strcpy>:
    5120:	1c03      	adds	r3, r0, #0
    5122:	780a      	ldrb	r2, [r1, #0]
    5124:	3101      	adds	r1, #1
    5126:	701a      	strb	r2, [r3, #0]
    5128:	3301      	adds	r3, #1
    512a:	2a00      	cmp	r2, #0
    512c:	d1f9      	bne.n	5122 <strcpy+0x2>
    512e:	4770      	bx	lr

00005130 <quorem>:
    5130:	b5f0      	push	{r4, r5, r6, r7, lr}
    5132:	6903      	ldr	r3, [r0, #16]
    5134:	690c      	ldr	r4, [r1, #16]
    5136:	b089      	sub	sp, #36	; 0x24
    5138:	0007      	movs	r7, r0
    513a:	9105      	str	r1, [sp, #20]
    513c:	2600      	movs	r6, #0
    513e:	429c      	cmp	r4, r3
    5140:	dc6d      	bgt.n	521e <quorem+0xee>
    5142:	000b      	movs	r3, r1
    5144:	3c01      	subs	r4, #1
    5146:	3314      	adds	r3, #20
    5148:	00a5      	lsls	r5, r4, #2
    514a:	9303      	str	r3, [sp, #12]
    514c:	195b      	adds	r3, r3, r5
    514e:	9304      	str	r3, [sp, #16]
    5150:	0003      	movs	r3, r0
    5152:	3314      	adds	r3, #20
    5154:	9302      	str	r3, [sp, #8]
    5156:	195d      	adds	r5, r3, r5
    5158:	9b04      	ldr	r3, [sp, #16]
    515a:	6828      	ldr	r0, [r5, #0]
    515c:	681b      	ldr	r3, [r3, #0]
    515e:	1c59      	adds	r1, r3, #1
    5160:	9301      	str	r3, [sp, #4]
    5162:	f7fd fa89 	bl	2678 <__udivsi3>
    5166:	9001      	str	r0, [sp, #4]
    5168:	42b0      	cmp	r0, r6
    516a:	d02d      	beq.n	51c8 <quorem+0x98>
    516c:	9b03      	ldr	r3, [sp, #12]
    516e:	9802      	ldr	r0, [sp, #8]
    5170:	469c      	mov	ip, r3
    5172:	9606      	str	r6, [sp, #24]
    5174:	4662      	mov	r2, ip
    5176:	ca08      	ldmia	r2!, {r3}
    5178:	4694      	mov	ip, r2
    517a:	9a01      	ldr	r2, [sp, #4]
    517c:	b299      	uxth	r1, r3
    517e:	4351      	muls	r1, r2
    5180:	0c1b      	lsrs	r3, r3, #16
    5182:	4353      	muls	r3, r2
    5184:	1989      	adds	r1, r1, r6
    5186:	0c0a      	lsrs	r2, r1, #16
    5188:	189b      	adds	r3, r3, r2
    518a:	9307      	str	r3, [sp, #28]
    518c:	8802      	ldrh	r2, [r0, #0]
    518e:	0c1e      	lsrs	r6, r3, #16
    5190:	9b06      	ldr	r3, [sp, #24]
    5192:	b289      	uxth	r1, r1
    5194:	18d2      	adds	r2, r2, r3
    5196:	6803      	ldr	r3, [r0, #0]
    5198:	1a52      	subs	r2, r2, r1
    519a:	0c19      	lsrs	r1, r3, #16
    519c:	466b      	mov	r3, sp
    519e:	8b9b      	ldrh	r3, [r3, #28]
    51a0:	1acb      	subs	r3, r1, r3
    51a2:	1411      	asrs	r1, r2, #16
    51a4:	185b      	adds	r3, r3, r1
    51a6:	1419      	asrs	r1, r3, #16
    51a8:	b292      	uxth	r2, r2
    51aa:	041b      	lsls	r3, r3, #16
    51ac:	431a      	orrs	r2, r3
    51ae:	9b04      	ldr	r3, [sp, #16]
    51b0:	9106      	str	r1, [sp, #24]
    51b2:	c004      	stmia	r0!, {r2}
    51b4:	4563      	cmp	r3, ip
    51b6:	d2dd      	bcs.n	5174 <quorem+0x44>
    51b8:	682b      	ldr	r3, [r5, #0]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d104      	bne.n	51c8 <quorem+0x98>
    51be:	9b02      	ldr	r3, [sp, #8]
    51c0:	3d04      	subs	r5, #4
    51c2:	42ab      	cmp	r3, r5
    51c4:	d32e      	bcc.n	5224 <quorem+0xf4>
    51c6:	613c      	str	r4, [r7, #16]
    51c8:	9905      	ldr	r1, [sp, #20]
    51ca:	0038      	movs	r0, r7
    51cc:	f7ff fe3f 	bl	4e4e <__mcmp>
    51d0:	2800      	cmp	r0, #0
    51d2:	db23      	blt.n	521c <quorem+0xec>
    51d4:	2500      	movs	r5, #0
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	9802      	ldr	r0, [sp, #8]
    51da:	3301      	adds	r3, #1
    51dc:	9903      	ldr	r1, [sp, #12]
    51de:	9301      	str	r3, [sp, #4]
    51e0:	c908      	ldmia	r1!, {r3}
    51e2:	8802      	ldrh	r2, [r0, #0]
    51e4:	1955      	adds	r5, r2, r5
    51e6:	b29a      	uxth	r2, r3
    51e8:	1aaa      	subs	r2, r5, r2
    51ea:	6805      	ldr	r5, [r0, #0]
    51ec:	0c1b      	lsrs	r3, r3, #16
    51ee:	0c2d      	lsrs	r5, r5, #16
    51f0:	1aeb      	subs	r3, r5, r3
    51f2:	1415      	asrs	r5, r2, #16
    51f4:	195b      	adds	r3, r3, r5
    51f6:	141d      	asrs	r5, r3, #16
    51f8:	b292      	uxth	r2, r2
    51fa:	041b      	lsls	r3, r3, #16
    51fc:	4313      	orrs	r3, r2
    51fe:	c008      	stmia	r0!, {r3}
    5200:	9b04      	ldr	r3, [sp, #16]
    5202:	428b      	cmp	r3, r1
    5204:	d2ec      	bcs.n	51e0 <quorem+0xb0>
    5206:	9a02      	ldr	r2, [sp, #8]
    5208:	00a3      	lsls	r3, r4, #2
    520a:	18d3      	adds	r3, r2, r3
    520c:	681a      	ldr	r2, [r3, #0]
    520e:	2a00      	cmp	r2, #0
    5210:	d104      	bne.n	521c <quorem+0xec>
    5212:	9a02      	ldr	r2, [sp, #8]
    5214:	3b04      	subs	r3, #4
    5216:	429a      	cmp	r2, r3
    5218:	d309      	bcc.n	522e <quorem+0xfe>
    521a:	613c      	str	r4, [r7, #16]
    521c:	9e01      	ldr	r6, [sp, #4]
    521e:	0030      	movs	r0, r6
    5220:	b009      	add	sp, #36	; 0x24
    5222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5224:	682b      	ldr	r3, [r5, #0]
    5226:	2b00      	cmp	r3, #0
    5228:	d1cd      	bne.n	51c6 <quorem+0x96>
    522a:	3c01      	subs	r4, #1
    522c:	e7c7      	b.n	51be <quorem+0x8e>
    522e:	681a      	ldr	r2, [r3, #0]
    5230:	2a00      	cmp	r2, #0
    5232:	d1f2      	bne.n	521a <quorem+0xea>
    5234:	3c01      	subs	r4, #1
    5236:	e7ec      	b.n	5212 <quorem+0xe2>

00005238 <_dtoa_r>:
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	0016      	movs	r6, r2
    523c:	001f      	movs	r7, r3
    523e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5240:	b09d      	sub	sp, #116	; 0x74
    5242:	9004      	str	r0, [sp, #16]
    5244:	9d25      	ldr	r5, [sp, #148]	; 0x94
    5246:	9606      	str	r6, [sp, #24]
    5248:	9707      	str	r7, [sp, #28]
    524a:	2c00      	cmp	r4, #0
    524c:	d108      	bne.n	5260 <_dtoa_r+0x28>
    524e:	2010      	movs	r0, #16
    5250:	f000 fdda 	bl	5e08 <malloc>
    5254:	9b04      	ldr	r3, [sp, #16]
    5256:	6258      	str	r0, [r3, #36]	; 0x24
    5258:	6044      	str	r4, [r0, #4]
    525a:	6084      	str	r4, [r0, #8]
    525c:	6004      	str	r4, [r0, #0]
    525e:	60c4      	str	r4, [r0, #12]
    5260:	9b04      	ldr	r3, [sp, #16]
    5262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5264:	6819      	ldr	r1, [r3, #0]
    5266:	2900      	cmp	r1, #0
    5268:	d00b      	beq.n	5282 <_dtoa_r+0x4a>
    526a:	685a      	ldr	r2, [r3, #4]
    526c:	2301      	movs	r3, #1
    526e:	4093      	lsls	r3, r2
    5270:	604a      	str	r2, [r1, #4]
    5272:	608b      	str	r3, [r1, #8]
    5274:	9804      	ldr	r0, [sp, #16]
    5276:	f7ff fc11 	bl	4a9c <_Bfree>
    527a:	2200      	movs	r2, #0
    527c:	9b04      	ldr	r3, [sp, #16]
    527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5280:	601a      	str	r2, [r3, #0]
    5282:	9b07      	ldr	r3, [sp, #28]
    5284:	2b00      	cmp	r3, #0
    5286:	da1f      	bge.n	52c8 <_dtoa_r+0x90>
    5288:	2301      	movs	r3, #1
    528a:	602b      	str	r3, [r5, #0]
    528c:	007b      	lsls	r3, r7, #1
    528e:	085b      	lsrs	r3, r3, #1
    5290:	9307      	str	r3, [sp, #28]
    5292:	9c07      	ldr	r4, [sp, #28]
    5294:	4bb7      	ldr	r3, [pc, #732]	; (5574 <_dtoa_r+0x33c>)
    5296:	0022      	movs	r2, r4
    5298:	9319      	str	r3, [sp, #100]	; 0x64
    529a:	401a      	ands	r2, r3
    529c:	429a      	cmp	r2, r3
    529e:	d116      	bne.n	52ce <_dtoa_r+0x96>
    52a0:	4bb5      	ldr	r3, [pc, #724]	; (5578 <_dtoa_r+0x340>)
    52a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    52a4:	6013      	str	r3, [r2, #0]
    52a6:	9b06      	ldr	r3, [sp, #24]
    52a8:	2b00      	cmp	r3, #0
    52aa:	d103      	bne.n	52b4 <_dtoa_r+0x7c>
    52ac:	0324      	lsls	r4, r4, #12
    52ae:	d101      	bne.n	52b4 <_dtoa_r+0x7c>
    52b0:	f000 fd91 	bl	5dd6 <_dtoa_r+0xb9e>
    52b4:	4bb1      	ldr	r3, [pc, #708]	; (557c <_dtoa_r+0x344>)
    52b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    52b8:	930a      	str	r3, [sp, #40]	; 0x28
    52ba:	4bb1      	ldr	r3, [pc, #708]	; (5580 <_dtoa_r+0x348>)
    52bc:	2a00      	cmp	r2, #0
    52be:	d001      	beq.n	52c4 <_dtoa_r+0x8c>
    52c0:	f000 fd8f 	bl	5de2 <_dtoa_r+0xbaa>
    52c4:	f000 fd8f 	bl	5de6 <_dtoa_r+0xbae>
    52c8:	2300      	movs	r3, #0
    52ca:	602b      	str	r3, [r5, #0]
    52cc:	e7e1      	b.n	5292 <_dtoa_r+0x5a>
    52ce:	9e06      	ldr	r6, [sp, #24]
    52d0:	9f07      	ldr	r7, [sp, #28]
    52d2:	2200      	movs	r2, #0
    52d4:	2300      	movs	r3, #0
    52d6:	0030      	movs	r0, r6
    52d8:	0039      	movs	r1, r7
    52da:	f7fd fb53 	bl	2984 <__aeabi_dcmpeq>
    52de:	1e05      	subs	r5, r0, #0
    52e0:	d00e      	beq.n	5300 <_dtoa_r+0xc8>
    52e2:	2301      	movs	r3, #1
    52e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    52e6:	6013      	str	r3, [r2, #0]
    52e8:	4ba6      	ldr	r3, [pc, #664]	; (5584 <_dtoa_r+0x34c>)
    52ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    52ec:	930a      	str	r3, [sp, #40]	; 0x28
    52ee:	2a00      	cmp	r2, #0
    52f0:	d101      	bne.n	52f6 <_dtoa_r+0xbe>
    52f2:	f000 fd78 	bl	5de6 <_dtoa_r+0xbae>
    52f6:	4aa4      	ldr	r2, [pc, #656]	; (5588 <_dtoa_r+0x350>)
    52f8:	9926      	ldr	r1, [sp, #152]	; 0x98
    52fa:	600a      	str	r2, [r1, #0]
    52fc:	f000 fd73 	bl	5de6 <_dtoa_r+0xbae>
    5300:	ab1a      	add	r3, sp, #104	; 0x68
    5302:	9301      	str	r3, [sp, #4]
    5304:	ab1b      	add	r3, sp, #108	; 0x6c
    5306:	9300      	str	r3, [sp, #0]
    5308:	0032      	movs	r2, r6
    530a:	003b      	movs	r3, r7
    530c:	9804      	ldr	r0, [sp, #16]
    530e:	f7ff fe1b 	bl	4f48 <__d2b>
    5312:	0063      	lsls	r3, r4, #1
    5314:	9005      	str	r0, [sp, #20]
    5316:	0d5b      	lsrs	r3, r3, #21
    5318:	d100      	bne.n	531c <_dtoa_r+0xe4>
    531a:	e07f      	b.n	541c <_dtoa_r+0x1e4>
    531c:	033a      	lsls	r2, r7, #12
    531e:	4c9b      	ldr	r4, [pc, #620]	; (558c <_dtoa_r+0x354>)
    5320:	0b12      	lsrs	r2, r2, #12
    5322:	4314      	orrs	r4, r2
    5324:	0021      	movs	r1, r4
    5326:	4a9a      	ldr	r2, [pc, #616]	; (5590 <_dtoa_r+0x358>)
    5328:	0030      	movs	r0, r6
    532a:	9518      	str	r5, [sp, #96]	; 0x60
    532c:	189e      	adds	r6, r3, r2
    532e:	2200      	movs	r2, #0
    5330:	4b98      	ldr	r3, [pc, #608]	; (5594 <_dtoa_r+0x35c>)
    5332:	f7fe fd19 	bl	3d68 <__aeabi_dsub>
    5336:	4a98      	ldr	r2, [pc, #608]	; (5598 <_dtoa_r+0x360>)
    5338:	4b98      	ldr	r3, [pc, #608]	; (559c <_dtoa_r+0x364>)
    533a:	f7fe fa95 	bl	3868 <__aeabi_dmul>
    533e:	4a98      	ldr	r2, [pc, #608]	; (55a0 <_dtoa_r+0x368>)
    5340:	4b98      	ldr	r3, [pc, #608]	; (55a4 <_dtoa_r+0x36c>)
    5342:	f7fd fb4d 	bl	29e0 <__aeabi_dadd>
    5346:	0004      	movs	r4, r0
    5348:	0030      	movs	r0, r6
    534a:	000d      	movs	r5, r1
    534c:	f7ff f856 	bl	43fc <__aeabi_i2d>
    5350:	4a95      	ldr	r2, [pc, #596]	; (55a8 <_dtoa_r+0x370>)
    5352:	4b96      	ldr	r3, [pc, #600]	; (55ac <_dtoa_r+0x374>)
    5354:	f7fe fa88 	bl	3868 <__aeabi_dmul>
    5358:	0002      	movs	r2, r0
    535a:	000b      	movs	r3, r1
    535c:	0020      	movs	r0, r4
    535e:	0029      	movs	r1, r5
    5360:	f7fd fb3e 	bl	29e0 <__aeabi_dadd>
    5364:	0004      	movs	r4, r0
    5366:	000d      	movs	r5, r1
    5368:	f7ff f814 	bl	4394 <__aeabi_d2iz>
    536c:	2200      	movs	r2, #0
    536e:	9003      	str	r0, [sp, #12]
    5370:	2300      	movs	r3, #0
    5372:	0020      	movs	r0, r4
    5374:	0029      	movs	r1, r5
    5376:	f7fd fb0b 	bl	2990 <__aeabi_dcmplt>
    537a:	2800      	cmp	r0, #0
    537c:	d00e      	beq.n	539c <_dtoa_r+0x164>
    537e:	9803      	ldr	r0, [sp, #12]
    5380:	f7ff f83c 	bl	43fc <__aeabi_i2d>
    5384:	000b      	movs	r3, r1
    5386:	0002      	movs	r2, r0
    5388:	0029      	movs	r1, r5
    538a:	0020      	movs	r0, r4
    538c:	f7fd fafa 	bl	2984 <__aeabi_dcmpeq>
    5390:	0003      	movs	r3, r0
    5392:	4258      	negs	r0, r3
    5394:	4158      	adcs	r0, r3
    5396:	9b03      	ldr	r3, [sp, #12]
    5398:	1a1b      	subs	r3, r3, r0
    539a:	9303      	str	r3, [sp, #12]
    539c:	2301      	movs	r3, #1
    539e:	9316      	str	r3, [sp, #88]	; 0x58
    53a0:	9b03      	ldr	r3, [sp, #12]
    53a2:	2b16      	cmp	r3, #22
    53a4:	d80f      	bhi.n	53c6 <_dtoa_r+0x18e>
    53a6:	4982      	ldr	r1, [pc, #520]	; (55b0 <_dtoa_r+0x378>)
    53a8:	00db      	lsls	r3, r3, #3
    53aa:	18c9      	adds	r1, r1, r3
    53ac:	6808      	ldr	r0, [r1, #0]
    53ae:	6849      	ldr	r1, [r1, #4]
    53b0:	9a06      	ldr	r2, [sp, #24]
    53b2:	9b07      	ldr	r3, [sp, #28]
    53b4:	f7fd fb00 	bl	29b8 <__aeabi_dcmpgt>
    53b8:	2800      	cmp	r0, #0
    53ba:	d04b      	beq.n	5454 <_dtoa_r+0x21c>
    53bc:	9b03      	ldr	r3, [sp, #12]
    53be:	3b01      	subs	r3, #1
    53c0:	9303      	str	r3, [sp, #12]
    53c2:	2300      	movs	r3, #0
    53c4:	9316      	str	r3, [sp, #88]	; 0x58
    53c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    53c8:	1b9e      	subs	r6, r3, r6
    53ca:	2300      	movs	r3, #0
    53cc:	930b      	str	r3, [sp, #44]	; 0x2c
    53ce:	0033      	movs	r3, r6
    53d0:	3b01      	subs	r3, #1
    53d2:	930c      	str	r3, [sp, #48]	; 0x30
    53d4:	d504      	bpl.n	53e0 <_dtoa_r+0x1a8>
    53d6:	2301      	movs	r3, #1
    53d8:	1b9b      	subs	r3, r3, r6
    53da:	930b      	str	r3, [sp, #44]	; 0x2c
    53dc:	2300      	movs	r3, #0
    53de:	930c      	str	r3, [sp, #48]	; 0x30
    53e0:	9b03      	ldr	r3, [sp, #12]
    53e2:	2b00      	cmp	r3, #0
    53e4:	db38      	blt.n	5458 <_dtoa_r+0x220>
    53e6:	9a03      	ldr	r2, [sp, #12]
    53e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    53ea:	4694      	mov	ip, r2
    53ec:	4463      	add	r3, ip
    53ee:	930c      	str	r3, [sp, #48]	; 0x30
    53f0:	2300      	movs	r3, #0
    53f2:	920f      	str	r2, [sp, #60]	; 0x3c
    53f4:	9308      	str	r3, [sp, #32]
    53f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    53f8:	2501      	movs	r5, #1
    53fa:	2b09      	cmp	r3, #9
    53fc:	d900      	bls.n	5400 <_dtoa_r+0x1c8>
    53fe:	e091      	b.n	5524 <_dtoa_r+0x2ec>
    5400:	2b05      	cmp	r3, #5
    5402:	dd02      	ble.n	540a <_dtoa_r+0x1d2>
    5404:	2500      	movs	r5, #0
    5406:	3b04      	subs	r3, #4
    5408:	9322      	str	r3, [sp, #136]	; 0x88
    540a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    540c:	1e98      	subs	r0, r3, #2
    540e:	2803      	cmp	r0, #3
    5410:	d900      	bls.n	5414 <_dtoa_r+0x1dc>
    5412:	e091      	b.n	5538 <_dtoa_r+0x300>
    5414:	f000 fd04 	bl	5e20 <__gnu_thumb1_case_uqi>
    5418:	76298482 	.word	0x76298482
    541c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    541e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    5420:	189e      	adds	r6, r3, r2
    5422:	4b64      	ldr	r3, [pc, #400]	; (55b4 <_dtoa_r+0x37c>)
    5424:	18f2      	adds	r2, r6, r3
    5426:	2a20      	cmp	r2, #32
    5428:	dd0f      	ble.n	544a <_dtoa_r+0x212>
    542a:	4b63      	ldr	r3, [pc, #396]	; (55b8 <_dtoa_r+0x380>)
    542c:	9806      	ldr	r0, [sp, #24]
    542e:	18f3      	adds	r3, r6, r3
    5430:	40d8      	lsrs	r0, r3
    5432:	2340      	movs	r3, #64	; 0x40
    5434:	1a9b      	subs	r3, r3, r2
    5436:	409c      	lsls	r4, r3
    5438:	4320      	orrs	r0, r4
    543a:	f7ff f821 	bl	4480 <__aeabi_ui2d>
    543e:	2301      	movs	r3, #1
    5440:	4c5e      	ldr	r4, [pc, #376]	; (55bc <_dtoa_r+0x384>)
    5442:	3e01      	subs	r6, #1
    5444:	1909      	adds	r1, r1, r4
    5446:	9318      	str	r3, [sp, #96]	; 0x60
    5448:	e771      	b.n	532e <_dtoa_r+0xf6>
    544a:	2320      	movs	r3, #32
    544c:	9806      	ldr	r0, [sp, #24]
    544e:	1a9b      	subs	r3, r3, r2
    5450:	4098      	lsls	r0, r3
    5452:	e7f2      	b.n	543a <_dtoa_r+0x202>
    5454:	9016      	str	r0, [sp, #88]	; 0x58
    5456:	e7b6      	b.n	53c6 <_dtoa_r+0x18e>
    5458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    545a:	9a03      	ldr	r2, [sp, #12]
    545c:	1a9b      	subs	r3, r3, r2
    545e:	930b      	str	r3, [sp, #44]	; 0x2c
    5460:	4253      	negs	r3, r2
    5462:	9308      	str	r3, [sp, #32]
    5464:	2300      	movs	r3, #0
    5466:	930f      	str	r3, [sp, #60]	; 0x3c
    5468:	e7c5      	b.n	53f6 <_dtoa_r+0x1be>
    546a:	2301      	movs	r3, #1
    546c:	930e      	str	r3, [sp, #56]	; 0x38
    546e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5470:	2b00      	cmp	r3, #0
    5472:	dd65      	ble.n	5540 <_dtoa_r+0x308>
    5474:	001f      	movs	r7, r3
    5476:	930d      	str	r3, [sp, #52]	; 0x34
    5478:	9a04      	ldr	r2, [sp, #16]
    547a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    547c:	2200      	movs	r2, #0
    547e:	6062      	str	r2, [r4, #4]
    5480:	3204      	adds	r2, #4
    5482:	0011      	movs	r1, r2
    5484:	3114      	adds	r1, #20
    5486:	4299      	cmp	r1, r3
    5488:	d95f      	bls.n	554a <_dtoa_r+0x312>
    548a:	6861      	ldr	r1, [r4, #4]
    548c:	9804      	ldr	r0, [sp, #16]
    548e:	f7ff facd 	bl	4a2c <_Balloc>
    5492:	9b04      	ldr	r3, [sp, #16]
    5494:	6020      	str	r0, [r4, #0]
    5496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	930a      	str	r3, [sp, #40]	; 0x28
    549c:	2f0e      	cmp	r7, #14
    549e:	d900      	bls.n	54a2 <_dtoa_r+0x26a>
    54a0:	e105      	b.n	56ae <_dtoa_r+0x476>
    54a2:	2d00      	cmp	r5, #0
    54a4:	d100      	bne.n	54a8 <_dtoa_r+0x270>
    54a6:	e102      	b.n	56ae <_dtoa_r+0x476>
    54a8:	9b06      	ldr	r3, [sp, #24]
    54aa:	9c07      	ldr	r4, [sp, #28]
    54ac:	9314      	str	r3, [sp, #80]	; 0x50
    54ae:	9415      	str	r4, [sp, #84]	; 0x54
    54b0:	9b03      	ldr	r3, [sp, #12]
    54b2:	2b00      	cmp	r3, #0
    54b4:	dc00      	bgt.n	54b8 <_dtoa_r+0x280>
    54b6:	e085      	b.n	55c4 <_dtoa_r+0x38c>
    54b8:	001a      	movs	r2, r3
    54ba:	210f      	movs	r1, #15
    54bc:	4b3c      	ldr	r3, [pc, #240]	; (55b0 <_dtoa_r+0x378>)
    54be:	400a      	ands	r2, r1
    54c0:	00d2      	lsls	r2, r2, #3
    54c2:	189b      	adds	r3, r3, r2
    54c4:	685c      	ldr	r4, [r3, #4]
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	9310      	str	r3, [sp, #64]	; 0x40
    54ca:	9411      	str	r4, [sp, #68]	; 0x44
    54cc:	9b03      	ldr	r3, [sp, #12]
    54ce:	2402      	movs	r4, #2
    54d0:	111d      	asrs	r5, r3, #4
    54d2:	06eb      	lsls	r3, r5, #27
    54d4:	d50a      	bpl.n	54ec <_dtoa_r+0x2b4>
    54d6:	4b3a      	ldr	r3, [pc, #232]	; (55c0 <_dtoa_r+0x388>)
    54d8:	400d      	ands	r5, r1
    54da:	6a1a      	ldr	r2, [r3, #32]
    54dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    54de:	9814      	ldr	r0, [sp, #80]	; 0x50
    54e0:	9915      	ldr	r1, [sp, #84]	; 0x54
    54e2:	f7fd fd8d 	bl	3000 <__aeabi_ddiv>
    54e6:	9006      	str	r0, [sp, #24]
    54e8:	9107      	str	r1, [sp, #28]
    54ea:	3401      	adds	r4, #1
    54ec:	4e34      	ldr	r6, [pc, #208]	; (55c0 <_dtoa_r+0x388>)
    54ee:	2d00      	cmp	r5, #0
    54f0:	d130      	bne.n	5554 <_dtoa_r+0x31c>
    54f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    54f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    54f6:	9806      	ldr	r0, [sp, #24]
    54f8:	9907      	ldr	r1, [sp, #28]
    54fa:	f7fd fd81 	bl	3000 <__aeabi_ddiv>
    54fe:	9006      	str	r0, [sp, #24]
    5500:	9107      	str	r1, [sp, #28]
    5502:	e07a      	b.n	55fa <_dtoa_r+0x3c2>
    5504:	2301      	movs	r3, #1
    5506:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    5508:	930e      	str	r3, [sp, #56]	; 0x38
    550a:	4694      	mov	ip, r2
    550c:	9b03      	ldr	r3, [sp, #12]
    550e:	4463      	add	r3, ip
    5510:	1c5f      	adds	r7, r3, #1
    5512:	930d      	str	r3, [sp, #52]	; 0x34
    5514:	1e3b      	subs	r3, r7, #0
    5516:	dcaf      	bgt.n	5478 <_dtoa_r+0x240>
    5518:	2301      	movs	r3, #1
    551a:	e7ad      	b.n	5478 <_dtoa_r+0x240>
    551c:	2300      	movs	r3, #0
    551e:	e7a5      	b.n	546c <_dtoa_r+0x234>
    5520:	2300      	movs	r3, #0
    5522:	e7f0      	b.n	5506 <_dtoa_r+0x2ce>
    5524:	2300      	movs	r3, #0
    5526:	950e      	str	r5, [sp, #56]	; 0x38
    5528:	9322      	str	r3, [sp, #136]	; 0x88
    552a:	3b01      	subs	r3, #1
    552c:	2200      	movs	r2, #0
    552e:	930d      	str	r3, [sp, #52]	; 0x34
    5530:	001f      	movs	r7, r3
    5532:	3313      	adds	r3, #19
    5534:	9223      	str	r2, [sp, #140]	; 0x8c
    5536:	e79f      	b.n	5478 <_dtoa_r+0x240>
    5538:	2301      	movs	r3, #1
    553a:	930e      	str	r3, [sp, #56]	; 0x38
    553c:	3b02      	subs	r3, #2
    553e:	e7f5      	b.n	552c <_dtoa_r+0x2f4>
    5540:	2301      	movs	r3, #1
    5542:	930d      	str	r3, [sp, #52]	; 0x34
    5544:	001f      	movs	r7, r3
    5546:	001a      	movs	r2, r3
    5548:	e7f4      	b.n	5534 <_dtoa_r+0x2fc>
    554a:	6861      	ldr	r1, [r4, #4]
    554c:	0052      	lsls	r2, r2, #1
    554e:	3101      	adds	r1, #1
    5550:	6061      	str	r1, [r4, #4]
    5552:	e796      	b.n	5482 <_dtoa_r+0x24a>
    5554:	2301      	movs	r3, #1
    5556:	421d      	tst	r5, r3
    5558:	d008      	beq.n	556c <_dtoa_r+0x334>
    555a:	9810      	ldr	r0, [sp, #64]	; 0x40
    555c:	9911      	ldr	r1, [sp, #68]	; 0x44
    555e:	18e4      	adds	r4, r4, r3
    5560:	6832      	ldr	r2, [r6, #0]
    5562:	6873      	ldr	r3, [r6, #4]
    5564:	f7fe f980 	bl	3868 <__aeabi_dmul>
    5568:	9010      	str	r0, [sp, #64]	; 0x40
    556a:	9111      	str	r1, [sp, #68]	; 0x44
    556c:	106d      	asrs	r5, r5, #1
    556e:	3608      	adds	r6, #8
    5570:	e7bd      	b.n	54ee <_dtoa_r+0x2b6>
    5572:	46c0      	nop			; (mov r8, r8)
    5574:	7ff00000 	.word	0x7ff00000
    5578:	0000270f 	.word	0x0000270f
    557c:	00006065 	.word	0x00006065
    5580:	00006068 	.word	0x00006068
    5584:	00006069 	.word	0x00006069
    5588:	0000606a 	.word	0x0000606a
    558c:	3ff00000 	.word	0x3ff00000
    5590:	fffffc01 	.word	0xfffffc01
    5594:	3ff80000 	.word	0x3ff80000
    5598:	636f4361 	.word	0x636f4361
    559c:	3fd287a7 	.word	0x3fd287a7
    55a0:	8b60c8b3 	.word	0x8b60c8b3
    55a4:	3fc68a28 	.word	0x3fc68a28
    55a8:	509f79fb 	.word	0x509f79fb
    55ac:	3fd34413 	.word	0x3fd34413
    55b0:	00005f88 	.word	0x00005f88
    55b4:	00000432 	.word	0x00000432
    55b8:	00000412 	.word	0x00000412
    55bc:	fe100000 	.word	0xfe100000
    55c0:	00005f60 	.word	0x00005f60
    55c4:	9b03      	ldr	r3, [sp, #12]
    55c6:	2402      	movs	r4, #2
    55c8:	2b00      	cmp	r3, #0
    55ca:	d016      	beq.n	55fa <_dtoa_r+0x3c2>
    55cc:	9814      	ldr	r0, [sp, #80]	; 0x50
    55ce:	9915      	ldr	r1, [sp, #84]	; 0x54
    55d0:	425d      	negs	r5, r3
    55d2:	230f      	movs	r3, #15
    55d4:	4aca      	ldr	r2, [pc, #808]	; (5900 <_dtoa_r+0x6c8>)
    55d6:	402b      	ands	r3, r5
    55d8:	00db      	lsls	r3, r3, #3
    55da:	18d3      	adds	r3, r2, r3
    55dc:	681a      	ldr	r2, [r3, #0]
    55de:	685b      	ldr	r3, [r3, #4]
    55e0:	f7fe f942 	bl	3868 <__aeabi_dmul>
    55e4:	2300      	movs	r3, #0
    55e6:	9006      	str	r0, [sp, #24]
    55e8:	9107      	str	r1, [sp, #28]
    55ea:	4ec6      	ldr	r6, [pc, #792]	; (5904 <_dtoa_r+0x6cc>)
    55ec:	112d      	asrs	r5, r5, #4
    55ee:	2d00      	cmp	r5, #0
    55f0:	d000      	beq.n	55f4 <_dtoa_r+0x3bc>
    55f2:	e08c      	b.n	570e <_dtoa_r+0x4d6>
    55f4:	2b00      	cmp	r3, #0
    55f6:	d000      	beq.n	55fa <_dtoa_r+0x3c2>
    55f8:	e781      	b.n	54fe <_dtoa_r+0x2c6>
    55fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    55fc:	2b00      	cmp	r3, #0
    55fe:	d100      	bne.n	5602 <_dtoa_r+0x3ca>
    5600:	e091      	b.n	5726 <_dtoa_r+0x4ee>
    5602:	9a06      	ldr	r2, [sp, #24]
    5604:	9b07      	ldr	r3, [sp, #28]
    5606:	9210      	str	r2, [sp, #64]	; 0x40
    5608:	9311      	str	r3, [sp, #68]	; 0x44
    560a:	9810      	ldr	r0, [sp, #64]	; 0x40
    560c:	9911      	ldr	r1, [sp, #68]	; 0x44
    560e:	2200      	movs	r2, #0
    5610:	4bbd      	ldr	r3, [pc, #756]	; (5908 <_dtoa_r+0x6d0>)
    5612:	f7fd f9bd 	bl	2990 <__aeabi_dcmplt>
    5616:	2800      	cmp	r0, #0
    5618:	d100      	bne.n	561c <_dtoa_r+0x3e4>
    561a:	e084      	b.n	5726 <_dtoa_r+0x4ee>
    561c:	2f00      	cmp	r7, #0
    561e:	d100      	bne.n	5622 <_dtoa_r+0x3ea>
    5620:	e081      	b.n	5726 <_dtoa_r+0x4ee>
    5622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5624:	2b00      	cmp	r3, #0
    5626:	dd3e      	ble.n	56a6 <_dtoa_r+0x46e>
    5628:	9810      	ldr	r0, [sp, #64]	; 0x40
    562a:	9911      	ldr	r1, [sp, #68]	; 0x44
    562c:	9b03      	ldr	r3, [sp, #12]
    562e:	2200      	movs	r2, #0
    5630:	1e5e      	subs	r6, r3, #1
    5632:	4bb6      	ldr	r3, [pc, #728]	; (590c <_dtoa_r+0x6d4>)
    5634:	f7fe f918 	bl	3868 <__aeabi_dmul>
    5638:	9006      	str	r0, [sp, #24]
    563a:	9107      	str	r1, [sp, #28]
    563c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    563e:	3401      	adds	r4, #1
    5640:	0020      	movs	r0, r4
    5642:	f7fe fedb 	bl	43fc <__aeabi_i2d>
    5646:	9a06      	ldr	r2, [sp, #24]
    5648:	9b07      	ldr	r3, [sp, #28]
    564a:	f7fe f90d 	bl	3868 <__aeabi_dmul>
    564e:	2200      	movs	r2, #0
    5650:	4baf      	ldr	r3, [pc, #700]	; (5910 <_dtoa_r+0x6d8>)
    5652:	f7fd f9c5 	bl	29e0 <__aeabi_dadd>
    5656:	9012      	str	r0, [sp, #72]	; 0x48
    5658:	9113      	str	r1, [sp, #76]	; 0x4c
    565a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    565c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    565e:	4aad      	ldr	r2, [pc, #692]	; (5914 <_dtoa_r+0x6dc>)
    5660:	9310      	str	r3, [sp, #64]	; 0x40
    5662:	9411      	str	r4, [sp, #68]	; 0x44
    5664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5666:	189c      	adds	r4, r3, r2
    5668:	9411      	str	r4, [sp, #68]	; 0x44
    566a:	2d00      	cmp	r5, #0
    566c:	d15e      	bne.n	572c <_dtoa_r+0x4f4>
    566e:	9806      	ldr	r0, [sp, #24]
    5670:	9907      	ldr	r1, [sp, #28]
    5672:	2200      	movs	r2, #0
    5674:	4ba8      	ldr	r3, [pc, #672]	; (5918 <_dtoa_r+0x6e0>)
    5676:	f7fe fb77 	bl	3d68 <__aeabi_dsub>
    567a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    567c:	0023      	movs	r3, r4
    567e:	9006      	str	r0, [sp, #24]
    5680:	9107      	str	r1, [sp, #28]
    5682:	f7fd f999 	bl	29b8 <__aeabi_dcmpgt>
    5686:	2800      	cmp	r0, #0
    5688:	d000      	beq.n	568c <_dtoa_r+0x454>
    568a:	e301      	b.n	5c90 <_dtoa_r+0xa58>
    568c:	48a3      	ldr	r0, [pc, #652]	; (591c <_dtoa_r+0x6e4>)
    568e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5690:	4684      	mov	ip, r0
    5692:	4461      	add	r1, ip
    5694:	000b      	movs	r3, r1
    5696:	9806      	ldr	r0, [sp, #24]
    5698:	9907      	ldr	r1, [sp, #28]
    569a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    569c:	f7fd f978 	bl	2990 <__aeabi_dcmplt>
    56a0:	2800      	cmp	r0, #0
    56a2:	d000      	beq.n	56a6 <_dtoa_r+0x46e>
    56a4:	e2e8      	b.n	5c78 <_dtoa_r+0xa40>
    56a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    56a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    56aa:	9306      	str	r3, [sp, #24]
    56ac:	9407      	str	r4, [sp, #28]
    56ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    56b0:	2b00      	cmp	r3, #0
    56b2:	da00      	bge.n	56b6 <_dtoa_r+0x47e>
    56b4:	e157      	b.n	5966 <_dtoa_r+0x72e>
    56b6:	9a03      	ldr	r2, [sp, #12]
    56b8:	2a0e      	cmp	r2, #14
    56ba:	dd00      	ble.n	56be <_dtoa_r+0x486>
    56bc:	e153      	b.n	5966 <_dtoa_r+0x72e>
    56be:	4b90      	ldr	r3, [pc, #576]	; (5900 <_dtoa_r+0x6c8>)
    56c0:	00d2      	lsls	r2, r2, #3
    56c2:	189b      	adds	r3, r3, r2
    56c4:	685c      	ldr	r4, [r3, #4]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	9308      	str	r3, [sp, #32]
    56ca:	9409      	str	r4, [sp, #36]	; 0x24
    56cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    56ce:	2b00      	cmp	r3, #0
    56d0:	db00      	blt.n	56d4 <_dtoa_r+0x49c>
    56d2:	e0ce      	b.n	5872 <_dtoa_r+0x63a>
    56d4:	2f00      	cmp	r7, #0
    56d6:	dd00      	ble.n	56da <_dtoa_r+0x4a2>
    56d8:	e0cb      	b.n	5872 <_dtoa_r+0x63a>
    56da:	d000      	beq.n	56de <_dtoa_r+0x4a6>
    56dc:	e2cf      	b.n	5c7e <_dtoa_r+0xa46>
    56de:	9808      	ldr	r0, [sp, #32]
    56e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    56e2:	2200      	movs	r2, #0
    56e4:	4b8c      	ldr	r3, [pc, #560]	; (5918 <_dtoa_r+0x6e0>)
    56e6:	f7fe f8bf 	bl	3868 <__aeabi_dmul>
    56ea:	9a06      	ldr	r2, [sp, #24]
    56ec:	9b07      	ldr	r3, [sp, #28]
    56ee:	f7fd f96d 	bl	29cc <__aeabi_dcmpge>
    56f2:	003e      	movs	r6, r7
    56f4:	9708      	str	r7, [sp, #32]
    56f6:	2800      	cmp	r0, #0
    56f8:	d000      	beq.n	56fc <_dtoa_r+0x4c4>
    56fa:	e2a4      	b.n	5c46 <_dtoa_r+0xa0e>
    56fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    56fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5700:	1c5d      	adds	r5, r3, #1
    5702:	2331      	movs	r3, #49	; 0x31
    5704:	7013      	strb	r3, [r2, #0]
    5706:	9b03      	ldr	r3, [sp, #12]
    5708:	3301      	adds	r3, #1
    570a:	9303      	str	r3, [sp, #12]
    570c:	e29f      	b.n	5c4e <_dtoa_r+0xa16>
    570e:	2201      	movs	r2, #1
    5710:	4215      	tst	r5, r2
    5712:	d005      	beq.n	5720 <_dtoa_r+0x4e8>
    5714:	18a4      	adds	r4, r4, r2
    5716:	6832      	ldr	r2, [r6, #0]
    5718:	6873      	ldr	r3, [r6, #4]
    571a:	f7fe f8a5 	bl	3868 <__aeabi_dmul>
    571e:	2301      	movs	r3, #1
    5720:	106d      	asrs	r5, r5, #1
    5722:	3608      	adds	r6, #8
    5724:	e763      	b.n	55ee <_dtoa_r+0x3b6>
    5726:	9e03      	ldr	r6, [sp, #12]
    5728:	003d      	movs	r5, r7
    572a:	e789      	b.n	5640 <_dtoa_r+0x408>
    572c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    572e:	1e69      	subs	r1, r5, #1
    5730:	1952      	adds	r2, r2, r5
    5732:	9217      	str	r2, [sp, #92]	; 0x5c
    5734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5736:	4b72      	ldr	r3, [pc, #456]	; (5900 <_dtoa_r+0x6c8>)
    5738:	00c9      	lsls	r1, r1, #3
    573a:	2a00      	cmp	r2, #0
    573c:	d04a      	beq.n	57d4 <_dtoa_r+0x59c>
    573e:	185b      	adds	r3, r3, r1
    5740:	681a      	ldr	r2, [r3, #0]
    5742:	685b      	ldr	r3, [r3, #4]
    5744:	2000      	movs	r0, #0
    5746:	4976      	ldr	r1, [pc, #472]	; (5920 <_dtoa_r+0x6e8>)
    5748:	f7fd fc5a 	bl	3000 <__aeabi_ddiv>
    574c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    574e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5750:	f7fe fb0a 	bl	3d68 <__aeabi_dsub>
    5754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5756:	9010      	str	r0, [sp, #64]	; 0x40
    5758:	9111      	str	r1, [sp, #68]	; 0x44
    575a:	9312      	str	r3, [sp, #72]	; 0x48
    575c:	9806      	ldr	r0, [sp, #24]
    575e:	9907      	ldr	r1, [sp, #28]
    5760:	f7fe fe18 	bl	4394 <__aeabi_d2iz>
    5764:	0004      	movs	r4, r0
    5766:	f7fe fe49 	bl	43fc <__aeabi_i2d>
    576a:	0002      	movs	r2, r0
    576c:	000b      	movs	r3, r1
    576e:	9806      	ldr	r0, [sp, #24]
    5770:	9907      	ldr	r1, [sp, #28]
    5772:	f7fe faf9 	bl	3d68 <__aeabi_dsub>
    5776:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5778:	3430      	adds	r4, #48	; 0x30
    577a:	1c5d      	adds	r5, r3, #1
    577c:	701c      	strb	r4, [r3, #0]
    577e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5780:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5782:	9006      	str	r0, [sp, #24]
    5784:	9107      	str	r1, [sp, #28]
    5786:	f7fd f903 	bl	2990 <__aeabi_dcmplt>
    578a:	2800      	cmp	r0, #0
    578c:	d165      	bne.n	585a <_dtoa_r+0x622>
    578e:	9a06      	ldr	r2, [sp, #24]
    5790:	9b07      	ldr	r3, [sp, #28]
    5792:	2000      	movs	r0, #0
    5794:	495c      	ldr	r1, [pc, #368]	; (5908 <_dtoa_r+0x6d0>)
    5796:	f7fe fae7 	bl	3d68 <__aeabi_dsub>
    579a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    579c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    579e:	f7fd f8f7 	bl	2990 <__aeabi_dcmplt>
    57a2:	2800      	cmp	r0, #0
    57a4:	d000      	beq.n	57a8 <_dtoa_r+0x570>
    57a6:	e0be      	b.n	5926 <_dtoa_r+0x6ee>
    57a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    57aa:	429d      	cmp	r5, r3
    57ac:	d100      	bne.n	57b0 <_dtoa_r+0x578>
    57ae:	e77a      	b.n	56a6 <_dtoa_r+0x46e>
    57b0:	9810      	ldr	r0, [sp, #64]	; 0x40
    57b2:	9911      	ldr	r1, [sp, #68]	; 0x44
    57b4:	2200      	movs	r2, #0
    57b6:	4b55      	ldr	r3, [pc, #340]	; (590c <_dtoa_r+0x6d4>)
    57b8:	f7fe f856 	bl	3868 <__aeabi_dmul>
    57bc:	2200      	movs	r2, #0
    57be:	9010      	str	r0, [sp, #64]	; 0x40
    57c0:	9111      	str	r1, [sp, #68]	; 0x44
    57c2:	9806      	ldr	r0, [sp, #24]
    57c4:	9907      	ldr	r1, [sp, #28]
    57c6:	4b51      	ldr	r3, [pc, #324]	; (590c <_dtoa_r+0x6d4>)
    57c8:	f7fe f84e 	bl	3868 <__aeabi_dmul>
    57cc:	9512      	str	r5, [sp, #72]	; 0x48
    57ce:	9006      	str	r0, [sp, #24]
    57d0:	9107      	str	r1, [sp, #28]
    57d2:	e7c3      	b.n	575c <_dtoa_r+0x524>
    57d4:	1859      	adds	r1, r3, r1
    57d6:	6808      	ldr	r0, [r1, #0]
    57d8:	6849      	ldr	r1, [r1, #4]
    57da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    57dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    57de:	f7fe f843 	bl	3868 <__aeabi_dmul>
    57e2:	9010      	str	r0, [sp, #64]	; 0x40
    57e4:	9111      	str	r1, [sp, #68]	; 0x44
    57e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    57e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    57ea:	9806      	ldr	r0, [sp, #24]
    57ec:	9907      	ldr	r1, [sp, #28]
    57ee:	f7fe fdd1 	bl	4394 <__aeabi_d2iz>
    57f2:	9012      	str	r0, [sp, #72]	; 0x48
    57f4:	f7fe fe02 	bl	43fc <__aeabi_i2d>
    57f8:	0002      	movs	r2, r0
    57fa:	000b      	movs	r3, r1
    57fc:	9806      	ldr	r0, [sp, #24]
    57fe:	9907      	ldr	r1, [sp, #28]
    5800:	f7fe fab2 	bl	3d68 <__aeabi_dsub>
    5804:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5806:	9006      	str	r0, [sp, #24]
    5808:	9107      	str	r1, [sp, #28]
    580a:	3330      	adds	r3, #48	; 0x30
    580c:	7023      	strb	r3, [r4, #0]
    580e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5810:	3401      	adds	r4, #1
    5812:	2200      	movs	r2, #0
    5814:	42a3      	cmp	r3, r4
    5816:	d124      	bne.n	5862 <_dtoa_r+0x62a>
    5818:	4b41      	ldr	r3, [pc, #260]	; (5920 <_dtoa_r+0x6e8>)
    581a:	9810      	ldr	r0, [sp, #64]	; 0x40
    581c:	9911      	ldr	r1, [sp, #68]	; 0x44
    581e:	f7fd f8df 	bl	29e0 <__aeabi_dadd>
    5822:	0002      	movs	r2, r0
    5824:	000b      	movs	r3, r1
    5826:	9806      	ldr	r0, [sp, #24]
    5828:	9907      	ldr	r1, [sp, #28]
    582a:	f7fd f8c5 	bl	29b8 <__aeabi_dcmpgt>
    582e:	2800      	cmp	r0, #0
    5830:	d000      	beq.n	5834 <_dtoa_r+0x5fc>
    5832:	e078      	b.n	5926 <_dtoa_r+0x6ee>
    5834:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5836:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5838:	2000      	movs	r0, #0
    583a:	4939      	ldr	r1, [pc, #228]	; (5920 <_dtoa_r+0x6e8>)
    583c:	f7fe fa94 	bl	3d68 <__aeabi_dsub>
    5840:	0002      	movs	r2, r0
    5842:	000b      	movs	r3, r1
    5844:	9806      	ldr	r0, [sp, #24]
    5846:	9907      	ldr	r1, [sp, #28]
    5848:	f7fd f8a2 	bl	2990 <__aeabi_dcmplt>
    584c:	2800      	cmp	r0, #0
    584e:	d100      	bne.n	5852 <_dtoa_r+0x61a>
    5850:	e729      	b.n	56a6 <_dtoa_r+0x46e>
    5852:	1e6b      	subs	r3, r5, #1
    5854:	781a      	ldrb	r2, [r3, #0]
    5856:	2a30      	cmp	r2, #48	; 0x30
    5858:	d001      	beq.n	585e <_dtoa_r+0x626>
    585a:	9603      	str	r6, [sp, #12]
    585c:	e03f      	b.n	58de <_dtoa_r+0x6a6>
    585e:	001d      	movs	r5, r3
    5860:	e7f7      	b.n	5852 <_dtoa_r+0x61a>
    5862:	9806      	ldr	r0, [sp, #24]
    5864:	9907      	ldr	r1, [sp, #28]
    5866:	4b29      	ldr	r3, [pc, #164]	; (590c <_dtoa_r+0x6d4>)
    5868:	f7fd fffe 	bl	3868 <__aeabi_dmul>
    586c:	9006      	str	r0, [sp, #24]
    586e:	9107      	str	r1, [sp, #28]
    5870:	e7bb      	b.n	57ea <_dtoa_r+0x5b2>
    5872:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5874:	9a08      	ldr	r2, [sp, #32]
    5876:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5878:	9806      	ldr	r0, [sp, #24]
    587a:	9907      	ldr	r1, [sp, #28]
    587c:	f7fd fbc0 	bl	3000 <__aeabi_ddiv>
    5880:	f7fe fd88 	bl	4394 <__aeabi_d2iz>
    5884:	0004      	movs	r4, r0
    5886:	f7fe fdb9 	bl	43fc <__aeabi_i2d>
    588a:	9a08      	ldr	r2, [sp, #32]
    588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    588e:	f7fd ffeb 	bl	3868 <__aeabi_dmul>
    5892:	000b      	movs	r3, r1
    5894:	0002      	movs	r2, r0
    5896:	9806      	ldr	r0, [sp, #24]
    5898:	9907      	ldr	r1, [sp, #28]
    589a:	f7fe fa65 	bl	3d68 <__aeabi_dsub>
    589e:	0023      	movs	r3, r4
    58a0:	3330      	adds	r3, #48	; 0x30
    58a2:	7033      	strb	r3, [r6, #0]
    58a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    58a6:	1c75      	adds	r5, r6, #1
    58a8:	1aeb      	subs	r3, r5, r3
    58aa:	429f      	cmp	r7, r3
    58ac:	d14c      	bne.n	5948 <_dtoa_r+0x710>
    58ae:	0002      	movs	r2, r0
    58b0:	000b      	movs	r3, r1
    58b2:	f7fd f895 	bl	29e0 <__aeabi_dadd>
    58b6:	0006      	movs	r6, r0
    58b8:	000f      	movs	r7, r1
    58ba:	0002      	movs	r2, r0
    58bc:	000b      	movs	r3, r1
    58be:	9808      	ldr	r0, [sp, #32]
    58c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    58c2:	f7fd f865 	bl	2990 <__aeabi_dcmplt>
    58c6:	2800      	cmp	r0, #0
    58c8:	d12c      	bne.n	5924 <_dtoa_r+0x6ec>
    58ca:	9808      	ldr	r0, [sp, #32]
    58cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    58ce:	0032      	movs	r2, r6
    58d0:	003b      	movs	r3, r7
    58d2:	f7fd f857 	bl	2984 <__aeabi_dcmpeq>
    58d6:	2800      	cmp	r0, #0
    58d8:	d001      	beq.n	58de <_dtoa_r+0x6a6>
    58da:	07e3      	lsls	r3, r4, #31
    58dc:	d422      	bmi.n	5924 <_dtoa_r+0x6ec>
    58de:	9905      	ldr	r1, [sp, #20]
    58e0:	9804      	ldr	r0, [sp, #16]
    58e2:	f7ff f8db 	bl	4a9c <_Bfree>
    58e6:	2300      	movs	r3, #0
    58e8:	702b      	strb	r3, [r5, #0]
    58ea:	9b03      	ldr	r3, [sp, #12]
    58ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    58ee:	3301      	adds	r3, #1
    58f0:	6013      	str	r3, [r2, #0]
    58f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    58f4:	2b00      	cmp	r3, #0
    58f6:	d100      	bne.n	58fa <_dtoa_r+0x6c2>
    58f8:	e275      	b.n	5de6 <_dtoa_r+0xbae>
    58fa:	601d      	str	r5, [r3, #0]
    58fc:	e273      	b.n	5de6 <_dtoa_r+0xbae>
    58fe:	46c0      	nop			; (mov r8, r8)
    5900:	00005f88 	.word	0x00005f88
    5904:	00005f60 	.word	0x00005f60
    5908:	3ff00000 	.word	0x3ff00000
    590c:	40240000 	.word	0x40240000
    5910:	401c0000 	.word	0x401c0000
    5914:	fcc00000 	.word	0xfcc00000
    5918:	40140000 	.word	0x40140000
    591c:	7cc00000 	.word	0x7cc00000
    5920:	3fe00000 	.word	0x3fe00000
    5924:	9e03      	ldr	r6, [sp, #12]
    5926:	1e6b      	subs	r3, r5, #1
    5928:	781a      	ldrb	r2, [r3, #0]
    592a:	2a39      	cmp	r2, #57	; 0x39
    592c:	d106      	bne.n	593c <_dtoa_r+0x704>
    592e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5930:	429a      	cmp	r2, r3
    5932:	d107      	bne.n	5944 <_dtoa_r+0x70c>
    5934:	2330      	movs	r3, #48	; 0x30
    5936:	7013      	strb	r3, [r2, #0]
    5938:	0013      	movs	r3, r2
    593a:	3601      	adds	r6, #1
    593c:	781a      	ldrb	r2, [r3, #0]
    593e:	3201      	adds	r2, #1
    5940:	701a      	strb	r2, [r3, #0]
    5942:	e78a      	b.n	585a <_dtoa_r+0x622>
    5944:	001d      	movs	r5, r3
    5946:	e7ee      	b.n	5926 <_dtoa_r+0x6ee>
    5948:	2200      	movs	r2, #0
    594a:	4bcf      	ldr	r3, [pc, #828]	; (5c88 <_dtoa_r+0xa50>)
    594c:	f7fd ff8c 	bl	3868 <__aeabi_dmul>
    5950:	2200      	movs	r2, #0
    5952:	2300      	movs	r3, #0
    5954:	9006      	str	r0, [sp, #24]
    5956:	9107      	str	r1, [sp, #28]
    5958:	002e      	movs	r6, r5
    595a:	f7fd f813 	bl	2984 <__aeabi_dcmpeq>
    595e:	2800      	cmp	r0, #0
    5960:	d100      	bne.n	5964 <_dtoa_r+0x72c>
    5962:	e787      	b.n	5874 <_dtoa_r+0x63c>
    5964:	e7bb      	b.n	58de <_dtoa_r+0x6a6>
    5966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5968:	2a00      	cmp	r2, #0
    596a:	d100      	bne.n	596e <_dtoa_r+0x736>
    596c:	e087      	b.n	5a7e <_dtoa_r+0x846>
    596e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5970:	2a01      	cmp	r2, #1
    5972:	dc6e      	bgt.n	5a52 <_dtoa_r+0x81a>
    5974:	9a18      	ldr	r2, [sp, #96]	; 0x60
    5976:	2a00      	cmp	r2, #0
    5978:	d067      	beq.n	5a4a <_dtoa_r+0x812>
    597a:	4ac4      	ldr	r2, [pc, #784]	; (5c8c <_dtoa_r+0xa54>)
    597c:	189b      	adds	r3, r3, r2
    597e:	9d08      	ldr	r5, [sp, #32]
    5980:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5984:	2101      	movs	r1, #1
    5986:	18d2      	adds	r2, r2, r3
    5988:	920b      	str	r2, [sp, #44]	; 0x2c
    598a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    598c:	9804      	ldr	r0, [sp, #16]
    598e:	18d3      	adds	r3, r2, r3
    5990:	930c      	str	r3, [sp, #48]	; 0x30
    5992:	f7ff f921 	bl	4bd8 <__i2b>
    5996:	0006      	movs	r6, r0
    5998:	2c00      	cmp	r4, #0
    599a:	dd0e      	ble.n	59ba <_dtoa_r+0x782>
    599c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    599e:	2b00      	cmp	r3, #0
    59a0:	dd0b      	ble.n	59ba <_dtoa_r+0x782>
    59a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    59a4:	0023      	movs	r3, r4
    59a6:	4294      	cmp	r4, r2
    59a8:	dd00      	ble.n	59ac <_dtoa_r+0x774>
    59aa:	0013      	movs	r3, r2
    59ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    59ae:	1ae4      	subs	r4, r4, r3
    59b0:	1ad2      	subs	r2, r2, r3
    59b2:	920b      	str	r2, [sp, #44]	; 0x2c
    59b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    59b6:	1ad3      	subs	r3, r2, r3
    59b8:	930c      	str	r3, [sp, #48]	; 0x30
    59ba:	9b08      	ldr	r3, [sp, #32]
    59bc:	2b00      	cmp	r3, #0
    59be:	d01e      	beq.n	59fe <_dtoa_r+0x7c6>
    59c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    59c2:	2b00      	cmp	r3, #0
    59c4:	d05f      	beq.n	5a86 <_dtoa_r+0x84e>
    59c6:	2d00      	cmp	r5, #0
    59c8:	dd11      	ble.n	59ee <_dtoa_r+0x7b6>
    59ca:	0031      	movs	r1, r6
    59cc:	002a      	movs	r2, r5
    59ce:	9804      	ldr	r0, [sp, #16]
    59d0:	f7ff f99a 	bl	4d08 <__pow5mult>
    59d4:	9a05      	ldr	r2, [sp, #20]
    59d6:	0001      	movs	r1, r0
    59d8:	0006      	movs	r6, r0
    59da:	9804      	ldr	r0, [sp, #16]
    59dc:	f7ff f905 	bl	4bea <__multiply>
    59e0:	9905      	ldr	r1, [sp, #20]
    59e2:	9010      	str	r0, [sp, #64]	; 0x40
    59e4:	9804      	ldr	r0, [sp, #16]
    59e6:	f7ff f859 	bl	4a9c <_Bfree>
    59ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    59ec:	9305      	str	r3, [sp, #20]
    59ee:	9b08      	ldr	r3, [sp, #32]
    59f0:	1b5a      	subs	r2, r3, r5
    59f2:	d004      	beq.n	59fe <_dtoa_r+0x7c6>
    59f4:	9905      	ldr	r1, [sp, #20]
    59f6:	9804      	ldr	r0, [sp, #16]
    59f8:	f7ff f986 	bl	4d08 <__pow5mult>
    59fc:	9005      	str	r0, [sp, #20]
    59fe:	2101      	movs	r1, #1
    5a00:	9804      	ldr	r0, [sp, #16]
    5a02:	f7ff f8e9 	bl	4bd8 <__i2b>
    5a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a08:	9008      	str	r0, [sp, #32]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	dd3d      	ble.n	5a8a <_dtoa_r+0x852>
    5a0e:	001a      	movs	r2, r3
    5a10:	0001      	movs	r1, r0
    5a12:	9804      	ldr	r0, [sp, #16]
    5a14:	f7ff f978 	bl	4d08 <__pow5mult>
    5a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5a1a:	9008      	str	r0, [sp, #32]
    5a1c:	2500      	movs	r5, #0
    5a1e:	2b01      	cmp	r3, #1
    5a20:	dc3b      	bgt.n	5a9a <_dtoa_r+0x862>
    5a22:	2500      	movs	r5, #0
    5a24:	9b06      	ldr	r3, [sp, #24]
    5a26:	42ab      	cmp	r3, r5
    5a28:	d133      	bne.n	5a92 <_dtoa_r+0x85a>
    5a2a:	9b07      	ldr	r3, [sp, #28]
    5a2c:	031b      	lsls	r3, r3, #12
    5a2e:	42ab      	cmp	r3, r5
    5a30:	d12f      	bne.n	5a92 <_dtoa_r+0x85a>
    5a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5a34:	9a07      	ldr	r2, [sp, #28]
    5a36:	4213      	tst	r3, r2
    5a38:	d02b      	beq.n	5a92 <_dtoa_r+0x85a>
    5a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a3c:	3501      	adds	r5, #1
    5a3e:	3301      	adds	r3, #1
    5a40:	930b      	str	r3, [sp, #44]	; 0x2c
    5a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a44:	3301      	adds	r3, #1
    5a46:	930c      	str	r3, [sp, #48]	; 0x30
    5a48:	e023      	b.n	5a92 <_dtoa_r+0x85a>
    5a4a:	2336      	movs	r3, #54	; 0x36
    5a4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5a4e:	1a9b      	subs	r3, r3, r2
    5a50:	e795      	b.n	597e <_dtoa_r+0x746>
    5a52:	9b08      	ldr	r3, [sp, #32]
    5a54:	1e7d      	subs	r5, r7, #1
    5a56:	42ab      	cmp	r3, r5
    5a58:	db06      	blt.n	5a68 <_dtoa_r+0x830>
    5a5a:	1b5d      	subs	r5, r3, r5
    5a5c:	2f00      	cmp	r7, #0
    5a5e:	da0b      	bge.n	5a78 <_dtoa_r+0x840>
    5a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a62:	1bdc      	subs	r4, r3, r7
    5a64:	2300      	movs	r3, #0
    5a66:	e78c      	b.n	5982 <_dtoa_r+0x74a>
    5a68:	9b08      	ldr	r3, [sp, #32]
    5a6a:	9508      	str	r5, [sp, #32]
    5a6c:	1aea      	subs	r2, r5, r3
    5a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a70:	2500      	movs	r5, #0
    5a72:	189b      	adds	r3, r3, r2
    5a74:	930f      	str	r3, [sp, #60]	; 0x3c
    5a76:	e7f1      	b.n	5a5c <_dtoa_r+0x824>
    5a78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5a7a:	003b      	movs	r3, r7
    5a7c:	e781      	b.n	5982 <_dtoa_r+0x74a>
    5a7e:	9d08      	ldr	r5, [sp, #32]
    5a80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5a82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5a84:	e788      	b.n	5998 <_dtoa_r+0x760>
    5a86:	9a08      	ldr	r2, [sp, #32]
    5a88:	e7b4      	b.n	59f4 <_dtoa_r+0x7bc>
    5a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5a8c:	2500      	movs	r5, #0
    5a8e:	2b01      	cmp	r3, #1
    5a90:	ddc7      	ble.n	5a22 <_dtoa_r+0x7ea>
    5a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5a94:	2001      	movs	r0, #1
    5a96:	2b00      	cmp	r3, #0
    5a98:	d00b      	beq.n	5ab2 <_dtoa_r+0x87a>
    5a9a:	9b08      	ldr	r3, [sp, #32]
    5a9c:	9a08      	ldr	r2, [sp, #32]
    5a9e:	691b      	ldr	r3, [r3, #16]
    5aa0:	930f      	str	r3, [sp, #60]	; 0x3c
    5aa2:	3303      	adds	r3, #3
    5aa4:	009b      	lsls	r3, r3, #2
    5aa6:	18d3      	adds	r3, r2, r3
    5aa8:	6858      	ldr	r0, [r3, #4]
    5aaa:	f7ff f84c 	bl	4b46 <__hi0bits>
    5aae:	2320      	movs	r3, #32
    5ab0:	1a18      	subs	r0, r3, r0
    5ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ab4:	18c0      	adds	r0, r0, r3
    5ab6:	231f      	movs	r3, #31
    5ab8:	4018      	ands	r0, r3
    5aba:	d100      	bne.n	5abe <_dtoa_r+0x886>
    5abc:	e0ab      	b.n	5c16 <_dtoa_r+0x9de>
    5abe:	3301      	adds	r3, #1
    5ac0:	1a1b      	subs	r3, r3, r0
    5ac2:	2b04      	cmp	r3, #4
    5ac4:	dc00      	bgt.n	5ac8 <_dtoa_r+0x890>
    5ac6:	e09b      	b.n	5c00 <_dtoa_r+0x9c8>
    5ac8:	231c      	movs	r3, #28
    5aca:	1a18      	subs	r0, r3, r0
    5acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ace:	1824      	adds	r4, r4, r0
    5ad0:	181b      	adds	r3, r3, r0
    5ad2:	930b      	str	r3, [sp, #44]	; 0x2c
    5ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ad6:	181b      	adds	r3, r3, r0
    5ad8:	930c      	str	r3, [sp, #48]	; 0x30
    5ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5adc:	2b00      	cmp	r3, #0
    5ade:	dd05      	ble.n	5aec <_dtoa_r+0x8b4>
    5ae0:	001a      	movs	r2, r3
    5ae2:	9905      	ldr	r1, [sp, #20]
    5ae4:	9804      	ldr	r0, [sp, #16]
    5ae6:	f7ff f961 	bl	4dac <__lshift>
    5aea:	9005      	str	r0, [sp, #20]
    5aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5aee:	2b00      	cmp	r3, #0
    5af0:	dd05      	ble.n	5afe <_dtoa_r+0x8c6>
    5af2:	001a      	movs	r2, r3
    5af4:	9908      	ldr	r1, [sp, #32]
    5af6:	9804      	ldr	r0, [sp, #16]
    5af8:	f7ff f958 	bl	4dac <__lshift>
    5afc:	9008      	str	r0, [sp, #32]
    5afe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5b00:	2b00      	cmp	r3, #0
    5b02:	d100      	bne.n	5b06 <_dtoa_r+0x8ce>
    5b04:	e089      	b.n	5c1a <_dtoa_r+0x9e2>
    5b06:	9908      	ldr	r1, [sp, #32]
    5b08:	9805      	ldr	r0, [sp, #20]
    5b0a:	f7ff f9a0 	bl	4e4e <__mcmp>
    5b0e:	2800      	cmp	r0, #0
    5b10:	db00      	blt.n	5b14 <_dtoa_r+0x8dc>
    5b12:	e082      	b.n	5c1a <_dtoa_r+0x9e2>
    5b14:	9b03      	ldr	r3, [sp, #12]
    5b16:	220a      	movs	r2, #10
    5b18:	3b01      	subs	r3, #1
    5b1a:	9303      	str	r3, [sp, #12]
    5b1c:	9905      	ldr	r1, [sp, #20]
    5b1e:	2300      	movs	r3, #0
    5b20:	9804      	ldr	r0, [sp, #16]
    5b22:	f7fe ffd4 	bl	4ace <__multadd>
    5b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5b28:	9005      	str	r0, [sp, #20]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d100      	bne.n	5b30 <_dtoa_r+0x8f8>
    5b2e:	e15d      	b.n	5dec <_dtoa_r+0xbb4>
    5b30:	2300      	movs	r3, #0
    5b32:	0031      	movs	r1, r6
    5b34:	220a      	movs	r2, #10
    5b36:	9804      	ldr	r0, [sp, #16]
    5b38:	f7fe ffc9 	bl	4ace <__multadd>
    5b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b3e:	0006      	movs	r6, r0
    5b40:	2b00      	cmp	r3, #0
    5b42:	dc02      	bgt.n	5b4a <_dtoa_r+0x912>
    5b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5b46:	2b02      	cmp	r3, #2
    5b48:	dc6d      	bgt.n	5c26 <_dtoa_r+0x9ee>
    5b4a:	2c00      	cmp	r4, #0
    5b4c:	dd05      	ble.n	5b5a <_dtoa_r+0x922>
    5b4e:	0031      	movs	r1, r6
    5b50:	0022      	movs	r2, r4
    5b52:	9804      	ldr	r0, [sp, #16]
    5b54:	f7ff f92a 	bl	4dac <__lshift>
    5b58:	0006      	movs	r6, r0
    5b5a:	0030      	movs	r0, r6
    5b5c:	2d00      	cmp	r5, #0
    5b5e:	d011      	beq.n	5b84 <_dtoa_r+0x94c>
    5b60:	6871      	ldr	r1, [r6, #4]
    5b62:	9804      	ldr	r0, [sp, #16]
    5b64:	f7fe ff62 	bl	4a2c <_Balloc>
    5b68:	0031      	movs	r1, r6
    5b6a:	0004      	movs	r4, r0
    5b6c:	6933      	ldr	r3, [r6, #16]
    5b6e:	310c      	adds	r1, #12
    5b70:	1c9a      	adds	r2, r3, #2
    5b72:	0092      	lsls	r2, r2, #2
    5b74:	300c      	adds	r0, #12
    5b76:	f7fe fdff 	bl	4778 <memcpy>
    5b7a:	2201      	movs	r2, #1
    5b7c:	0021      	movs	r1, r4
    5b7e:	9804      	ldr	r0, [sp, #16]
    5b80:	f7ff f914 	bl	4dac <__lshift>
    5b84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b88:	3f01      	subs	r7, #1
    5b8a:	930b      	str	r3, [sp, #44]	; 0x2c
    5b8c:	19db      	adds	r3, r3, r7
    5b8e:	0037      	movs	r7, r6
    5b90:	0006      	movs	r6, r0
    5b92:	930f      	str	r3, [sp, #60]	; 0x3c
    5b94:	9908      	ldr	r1, [sp, #32]
    5b96:	9805      	ldr	r0, [sp, #20]
    5b98:	f7ff faca 	bl	5130 <quorem>
    5b9c:	0039      	movs	r1, r7
    5b9e:	900d      	str	r0, [sp, #52]	; 0x34
    5ba0:	0004      	movs	r4, r0
    5ba2:	9805      	ldr	r0, [sp, #20]
    5ba4:	f7ff f953 	bl	4e4e <__mcmp>
    5ba8:	0032      	movs	r2, r6
    5baa:	900e      	str	r0, [sp, #56]	; 0x38
    5bac:	9908      	ldr	r1, [sp, #32]
    5bae:	9804      	ldr	r0, [sp, #16]
    5bb0:	f7ff f966 	bl	4e80 <__mdiff>
    5bb4:	2301      	movs	r3, #1
    5bb6:	930c      	str	r3, [sp, #48]	; 0x30
    5bb8:	68c3      	ldr	r3, [r0, #12]
    5bba:	3430      	adds	r4, #48	; 0x30
    5bbc:	0005      	movs	r5, r0
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d104      	bne.n	5bcc <_dtoa_r+0x994>
    5bc2:	0001      	movs	r1, r0
    5bc4:	9805      	ldr	r0, [sp, #20]
    5bc6:	f7ff f942 	bl	4e4e <__mcmp>
    5bca:	900c      	str	r0, [sp, #48]	; 0x30
    5bcc:	0029      	movs	r1, r5
    5bce:	9804      	ldr	r0, [sp, #16]
    5bd0:	f7fe ff64 	bl	4a9c <_Bfree>
    5bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5bd6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5bd8:	4313      	orrs	r3, r2
    5bda:	d000      	beq.n	5bde <_dtoa_r+0x9a6>
    5bdc:	e089      	b.n	5cf2 <_dtoa_r+0xaba>
    5bde:	9a06      	ldr	r2, [sp, #24]
    5be0:	3301      	adds	r3, #1
    5be2:	4213      	tst	r3, r2
    5be4:	d000      	beq.n	5be8 <_dtoa_r+0x9b0>
    5be6:	e084      	b.n	5cf2 <_dtoa_r+0xaba>
    5be8:	2c39      	cmp	r4, #57	; 0x39
    5bea:	d100      	bne.n	5bee <_dtoa_r+0x9b6>
    5bec:	e0a3      	b.n	5d36 <_dtoa_r+0xafe>
    5bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	dd01      	ble.n	5bf8 <_dtoa_r+0x9c0>
    5bf4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    5bf6:	3431      	adds	r4, #49	; 0x31
    5bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5bfa:	1c5d      	adds	r5, r3, #1
    5bfc:	701c      	strb	r4, [r3, #0]
    5bfe:	e027      	b.n	5c50 <_dtoa_r+0xa18>
    5c00:	2b04      	cmp	r3, #4
    5c02:	d100      	bne.n	5c06 <_dtoa_r+0x9ce>
    5c04:	e769      	b.n	5ada <_dtoa_r+0x8a2>
    5c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5c08:	331c      	adds	r3, #28
    5c0a:	18d2      	adds	r2, r2, r3
    5c0c:	920b      	str	r2, [sp, #44]	; 0x2c
    5c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5c10:	18e4      	adds	r4, r4, r3
    5c12:	18d3      	adds	r3, r2, r3
    5c14:	e760      	b.n	5ad8 <_dtoa_r+0x8a0>
    5c16:	0003      	movs	r3, r0
    5c18:	e7f5      	b.n	5c06 <_dtoa_r+0x9ce>
    5c1a:	2f00      	cmp	r7, #0
    5c1c:	dc3c      	bgt.n	5c98 <_dtoa_r+0xa60>
    5c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5c20:	2b02      	cmp	r3, #2
    5c22:	dd39      	ble.n	5c98 <_dtoa_r+0xa60>
    5c24:	970d      	str	r7, [sp, #52]	; 0x34
    5c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d10c      	bne.n	5c46 <_dtoa_r+0xa0e>
    5c2c:	9908      	ldr	r1, [sp, #32]
    5c2e:	2205      	movs	r2, #5
    5c30:	9804      	ldr	r0, [sp, #16]
    5c32:	f7fe ff4c 	bl	4ace <__multadd>
    5c36:	9008      	str	r0, [sp, #32]
    5c38:	0001      	movs	r1, r0
    5c3a:	9805      	ldr	r0, [sp, #20]
    5c3c:	f7ff f907 	bl	4e4e <__mcmp>
    5c40:	2800      	cmp	r0, #0
    5c42:	dd00      	ble.n	5c46 <_dtoa_r+0xa0e>
    5c44:	e55a      	b.n	56fc <_dtoa_r+0x4c4>
    5c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5c48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5c4a:	43db      	mvns	r3, r3
    5c4c:	9303      	str	r3, [sp, #12]
    5c4e:	2700      	movs	r7, #0
    5c50:	9908      	ldr	r1, [sp, #32]
    5c52:	9804      	ldr	r0, [sp, #16]
    5c54:	f7fe ff22 	bl	4a9c <_Bfree>
    5c58:	2e00      	cmp	r6, #0
    5c5a:	d100      	bne.n	5c5e <_dtoa_r+0xa26>
    5c5c:	e63f      	b.n	58de <_dtoa_r+0x6a6>
    5c5e:	2f00      	cmp	r7, #0
    5c60:	d005      	beq.n	5c6e <_dtoa_r+0xa36>
    5c62:	42b7      	cmp	r7, r6
    5c64:	d003      	beq.n	5c6e <_dtoa_r+0xa36>
    5c66:	0039      	movs	r1, r7
    5c68:	9804      	ldr	r0, [sp, #16]
    5c6a:	f7fe ff17 	bl	4a9c <_Bfree>
    5c6e:	0031      	movs	r1, r6
    5c70:	9804      	ldr	r0, [sp, #16]
    5c72:	f7fe ff13 	bl	4a9c <_Bfree>
    5c76:	e632      	b.n	58de <_dtoa_r+0x6a6>
    5c78:	9508      	str	r5, [sp, #32]
    5c7a:	002e      	movs	r6, r5
    5c7c:	e7e3      	b.n	5c46 <_dtoa_r+0xa0e>
    5c7e:	2300      	movs	r3, #0
    5c80:	9308      	str	r3, [sp, #32]
    5c82:	001e      	movs	r6, r3
    5c84:	e7df      	b.n	5c46 <_dtoa_r+0xa0e>
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	40240000 	.word	0x40240000
    5c8c:	00000433 	.word	0x00000433
    5c90:	9603      	str	r6, [sp, #12]
    5c92:	9508      	str	r5, [sp, #32]
    5c94:	002e      	movs	r6, r5
    5c96:	e531      	b.n	56fc <_dtoa_r+0x4c4>
    5c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c9a:	970d      	str	r7, [sp, #52]	; 0x34
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d000      	beq.n	5ca2 <_dtoa_r+0xa6a>
    5ca0:	e753      	b.n	5b4a <_dtoa_r+0x912>
    5ca2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5ca4:	9908      	ldr	r1, [sp, #32]
    5ca6:	9805      	ldr	r0, [sp, #20]
    5ca8:	f7ff fa42 	bl	5130 <quorem>
    5cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cae:	3030      	adds	r0, #48	; 0x30
    5cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5cb2:	7028      	strb	r0, [r5, #0]
    5cb4:	3501      	adds	r5, #1
    5cb6:	0004      	movs	r4, r0
    5cb8:	1aeb      	subs	r3, r5, r3
    5cba:	429a      	cmp	r2, r3
    5cbc:	dc78      	bgt.n	5db0 <_dtoa_r+0xb78>
    5cbe:	1e15      	subs	r5, r2, #0
    5cc0:	dc00      	bgt.n	5cc4 <_dtoa_r+0xa8c>
    5cc2:	2501      	movs	r5, #1
    5cc4:	2700      	movs	r7, #0
    5cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cc8:	195d      	adds	r5, r3, r5
    5cca:	9905      	ldr	r1, [sp, #20]
    5ccc:	2201      	movs	r2, #1
    5cce:	9804      	ldr	r0, [sp, #16]
    5cd0:	f7ff f86c 	bl	4dac <__lshift>
    5cd4:	9908      	ldr	r1, [sp, #32]
    5cd6:	9005      	str	r0, [sp, #20]
    5cd8:	f7ff f8b9 	bl	4e4e <__mcmp>
    5cdc:	2800      	cmp	r0, #0
    5cde:	dc2f      	bgt.n	5d40 <_dtoa_r+0xb08>
    5ce0:	d101      	bne.n	5ce6 <_dtoa_r+0xaae>
    5ce2:	07e3      	lsls	r3, r4, #31
    5ce4:	d42c      	bmi.n	5d40 <_dtoa_r+0xb08>
    5ce6:	1e6b      	subs	r3, r5, #1
    5ce8:	781a      	ldrb	r2, [r3, #0]
    5cea:	2a30      	cmp	r2, #48	; 0x30
    5cec:	d1b0      	bne.n	5c50 <_dtoa_r+0xa18>
    5cee:	001d      	movs	r5, r3
    5cf0:	e7f9      	b.n	5ce6 <_dtoa_r+0xaae>
    5cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	db07      	blt.n	5d08 <_dtoa_r+0xad0>
    5cf8:	001d      	movs	r5, r3
    5cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5cfc:	431d      	orrs	r5, r3
    5cfe:	d126      	bne.n	5d4e <_dtoa_r+0xb16>
    5d00:	2301      	movs	r3, #1
    5d02:	9a06      	ldr	r2, [sp, #24]
    5d04:	4213      	tst	r3, r2
    5d06:	d122      	bne.n	5d4e <_dtoa_r+0xb16>
    5d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	dc00      	bgt.n	5d10 <_dtoa_r+0xad8>
    5d0e:	e773      	b.n	5bf8 <_dtoa_r+0x9c0>
    5d10:	9905      	ldr	r1, [sp, #20]
    5d12:	2201      	movs	r2, #1
    5d14:	9804      	ldr	r0, [sp, #16]
    5d16:	f7ff f849 	bl	4dac <__lshift>
    5d1a:	9908      	ldr	r1, [sp, #32]
    5d1c:	9005      	str	r0, [sp, #20]
    5d1e:	f7ff f896 	bl	4e4e <__mcmp>
    5d22:	2800      	cmp	r0, #0
    5d24:	dc04      	bgt.n	5d30 <_dtoa_r+0xaf8>
    5d26:	d000      	beq.n	5d2a <_dtoa_r+0xaf2>
    5d28:	e766      	b.n	5bf8 <_dtoa_r+0x9c0>
    5d2a:	07e3      	lsls	r3, r4, #31
    5d2c:	d400      	bmi.n	5d30 <_dtoa_r+0xaf8>
    5d2e:	e763      	b.n	5bf8 <_dtoa_r+0x9c0>
    5d30:	2c39      	cmp	r4, #57	; 0x39
    5d32:	d000      	beq.n	5d36 <_dtoa_r+0xafe>
    5d34:	e75e      	b.n	5bf4 <_dtoa_r+0x9bc>
    5d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5d3a:	1c5d      	adds	r5, r3, #1
    5d3c:	2339      	movs	r3, #57	; 0x39
    5d3e:	7013      	strb	r3, [r2, #0]
    5d40:	1e6b      	subs	r3, r5, #1
    5d42:	781a      	ldrb	r2, [r3, #0]
    5d44:	2a39      	cmp	r2, #57	; 0x39
    5d46:	d03b      	beq.n	5dc0 <_dtoa_r+0xb88>
    5d48:	3201      	adds	r2, #1
    5d4a:	701a      	strb	r2, [r3, #0]
    5d4c:	e780      	b.n	5c50 <_dtoa_r+0xa18>
    5d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d50:	3301      	adds	r3, #1
    5d52:	930d      	str	r3, [sp, #52]	; 0x34
    5d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d56:	2b00      	cmp	r3, #0
    5d58:	dd05      	ble.n	5d66 <_dtoa_r+0xb2e>
    5d5a:	2c39      	cmp	r4, #57	; 0x39
    5d5c:	d0eb      	beq.n	5d36 <_dtoa_r+0xafe>
    5d5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5d60:	3401      	adds	r4, #1
    5d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d64:	e74a      	b.n	5bfc <_dtoa_r+0x9c4>
    5d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5d6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5d6c:	701c      	strb	r4, [r3, #0]
    5d6e:	4293      	cmp	r3, r2
    5d70:	d0ab      	beq.n	5cca <_dtoa_r+0xa92>
    5d72:	2300      	movs	r3, #0
    5d74:	220a      	movs	r2, #10
    5d76:	9905      	ldr	r1, [sp, #20]
    5d78:	9804      	ldr	r0, [sp, #16]
    5d7a:	f7fe fea8 	bl	4ace <__multadd>
    5d7e:	2300      	movs	r3, #0
    5d80:	9005      	str	r0, [sp, #20]
    5d82:	220a      	movs	r2, #10
    5d84:	0039      	movs	r1, r7
    5d86:	9804      	ldr	r0, [sp, #16]
    5d88:	42b7      	cmp	r7, r6
    5d8a:	d106      	bne.n	5d9a <_dtoa_r+0xb62>
    5d8c:	f7fe fe9f 	bl	4ace <__multadd>
    5d90:	0007      	movs	r7, r0
    5d92:	0006      	movs	r6, r0
    5d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d96:	930b      	str	r3, [sp, #44]	; 0x2c
    5d98:	e6fc      	b.n	5b94 <_dtoa_r+0x95c>
    5d9a:	f7fe fe98 	bl	4ace <__multadd>
    5d9e:	0031      	movs	r1, r6
    5da0:	0007      	movs	r7, r0
    5da2:	2300      	movs	r3, #0
    5da4:	220a      	movs	r2, #10
    5da6:	9804      	ldr	r0, [sp, #16]
    5da8:	f7fe fe91 	bl	4ace <__multadd>
    5dac:	0006      	movs	r6, r0
    5dae:	e7f1      	b.n	5d94 <_dtoa_r+0xb5c>
    5db0:	2300      	movs	r3, #0
    5db2:	220a      	movs	r2, #10
    5db4:	9905      	ldr	r1, [sp, #20]
    5db6:	9804      	ldr	r0, [sp, #16]
    5db8:	f7fe fe89 	bl	4ace <__multadd>
    5dbc:	9005      	str	r0, [sp, #20]
    5dbe:	e771      	b.n	5ca4 <_dtoa_r+0xa6c>
    5dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5dc2:	429a      	cmp	r2, r3
    5dc4:	d105      	bne.n	5dd2 <_dtoa_r+0xb9a>
    5dc6:	9b03      	ldr	r3, [sp, #12]
    5dc8:	3301      	adds	r3, #1
    5dca:	9303      	str	r3, [sp, #12]
    5dcc:	2331      	movs	r3, #49	; 0x31
    5dce:	7013      	strb	r3, [r2, #0]
    5dd0:	e73e      	b.n	5c50 <_dtoa_r+0xa18>
    5dd2:	001d      	movs	r5, r3
    5dd4:	e7b4      	b.n	5d40 <_dtoa_r+0xb08>
    5dd6:	4b0a      	ldr	r3, [pc, #40]	; (5e00 <_dtoa_r+0xbc8>)
    5dd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5dda:	930a      	str	r3, [sp, #40]	; 0x28
    5ddc:	4b09      	ldr	r3, [pc, #36]	; (5e04 <_dtoa_r+0xbcc>)
    5dde:	2a00      	cmp	r2, #0
    5de0:	d001      	beq.n	5de6 <_dtoa_r+0xbae>
    5de2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5de4:	6013      	str	r3, [r2, #0]
    5de6:	980a      	ldr	r0, [sp, #40]	; 0x28
    5de8:	b01d      	add	sp, #116	; 0x74
    5dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5dee:	2b00      	cmp	r3, #0
    5df0:	dd00      	ble.n	5df4 <_dtoa_r+0xbbc>
    5df2:	e756      	b.n	5ca2 <_dtoa_r+0xa6a>
    5df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5df6:	2b02      	cmp	r3, #2
    5df8:	dc00      	bgt.n	5dfc <_dtoa_r+0xbc4>
    5dfa:	e752      	b.n	5ca2 <_dtoa_r+0xa6a>
    5dfc:	e713      	b.n	5c26 <_dtoa_r+0x9ee>
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	0000605c 	.word	0x0000605c
    5e04:	00006064 	.word	0x00006064

00005e08 <malloc>:
    5e08:	b510      	push	{r4, lr}
    5e0a:	4b03      	ldr	r3, [pc, #12]	; (5e18 <malloc+0x10>)
    5e0c:	0001      	movs	r1, r0
    5e0e:	6818      	ldr	r0, [r3, #0]
    5e10:	f7ff f916 	bl	5040 <_malloc_r>
    5e14:	bd10      	pop	{r4, pc}
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	20000010 	.word	0x20000010

00005e1c <__malloc_lock>:
    5e1c:	4770      	bx	lr

00005e1e <__malloc_unlock>:
    5e1e:	4770      	bx	lr

00005e20 <__gnu_thumb1_case_uqi>:
    5e20:	b402      	push	{r1}
    5e22:	4671      	mov	r1, lr
    5e24:	0849      	lsrs	r1, r1, #1
    5e26:	0049      	lsls	r1, r1, #1
    5e28:	5c09      	ldrb	r1, [r1, r0]
    5e2a:	0049      	lsls	r1, r1, #1
    5e2c:	448e      	add	lr, r1
    5e2e:	bc02      	pop	{r1}
    5e30:	4770      	bx	lr
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	6d726554 	.word	0x6d726554
    5e38:	6c616e69 	.word	0x6c616e69
    5e3c:	00000000 	.word	0x00000000
    5e40:	00545452 	.word	0x00545452
    5e44:	47474553 	.word	0x47474553
    5e48:	00005245 	.word	0x00005245

00005e4c <_aV2C.4877>:
    5e4c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    5e5c:	0000f5f4 42000800 42000c00 42001000     .......B...B...B
    5e6c:	42001400 42001800 42001c00 000020c2     ...B...B...B. ..
    5e7c:	000020be 000020be 00002120 00002120     . ... .. !.. !..
    5e8c:	000020d6 000020c8 000020dc 0000210e     . ... ... ...!..
    5e9c:	706d6554 74617265 20657275 203a7369     Temperature is: 
    5eac:	46207325 72500a0d 75737365 69206572     %s F..Pressure i
    5ebc:	25203a73 6e692073 0a0d6748 00000000     s: %s inHg......
    5ecc:	6f727245 61682072 636f2073 65727563     Error has occure
    5edc:	00002164 000031f8 000031da 00003194     d!...1...1...1..
    5eec:	000030b2 00003194 000031cc 00003194     .0...1...1...1..
    5efc:	000030b2 000031da 000031da 000031cc     .0...1...1...1..
    5f0c:	000030b2 000030aa 000030aa 000030aa     .0...0...0...0..
    5f1c:	00003410 00003a58 00003918 00003918     .4..X:...9...9..
    5f2c:	00003914 00003a30 00003a30 00003a22     .9..0:..0:..":..
    5f3c:	00003914 00003a30 00003a22 00003a30     .9..0:..":..0:..
    5f4c:	00003914 00003a38 00003a38 00003a38     .9..8:..8:..8:..
    5f5c:	00003c3c                                <<..

00005f60 <__mprec_bigtens>:
    5f60:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    5f70:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    5f80:	7f73bf3c 75154fdd                       <.s..O.u

00005f88 <__mprec_tens>:
    5f88:	00000000 3ff00000 00000000 40240000     .......?......$@
    5f98:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    5fa8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    5fb8:	00000000 412e8480 00000000 416312d0     .......A......cA
    5fc8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    5fd8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    5fe8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    5ff8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    6008:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    6018:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    6028:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    6038:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    6048:	79d99db4 44ea7843                       ...yCx.D

00006050 <p05.6047>:
    6050:	00000005 00000019 0000007d 69666e49     ........}...Infi
    6060:	7974696e 4e614e00 00003000              nity.NaN.0..

0000606c <_init>:
    606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    606e:	46c0      	nop			; (mov r8, r8)
    6070:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6072:	bc08      	pop	{r3}
    6074:	469e      	mov	lr, r3
    6076:	4770      	bx	lr

00006078 <__init_array_start>:
    6078:	000000dd 	.word	0x000000dd

0000607c <_fini>:
    607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6082:	bc08      	pop	{r3}
    6084:	469e      	mov	lr, r3
    6086:	4770      	bx	lr

00006088 <__fini_array_start>:
    6088:	000000b5 	.word	0x000000b5
